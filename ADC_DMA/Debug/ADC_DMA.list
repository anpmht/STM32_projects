
ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003708  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08003814  08003814  00013814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038dc  080038dc  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080038dc  080038dc  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038dc  080038dc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038dc  080038dc  000138dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038e0  080038e0  000138e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080038e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000068  0800394c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  0800394c  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009dc5  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fd5  00000000  00000000  00029e99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000930  00000000  00000000  0002be70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006f8  00000000  00000000  0002c7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001871c  00000000  00000000  0002ce98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c114  00000000  00000000  000455b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088f27  00000000  00000000  000516c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b48  00000000  00000000  000da5f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000dd138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080037fc 	.word	0x080037fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080037fc 	.word	0x080037fc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb26 	bl	80007a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80d 	bl	8000172 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8fc 	bl	8000354 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f8dc 	bl	8000318 <MX_DMA_Init>
  MX_ADC1_Init();
 8000160:	f000 f862 	bl	8000228 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000164:	f000 f8ae 	bl	80002c4 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	Setup();
 8000168:	f000 fac4 	bl	80006f4 <Setup>
	while (1) {
		loop();
 800016c:	f000 fae2 	bl	8000734 <loop>
 8000170:	e7fc      	b.n	800016c <main+0x20>

08000172 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000172:	b580      	push	{r7, lr}
 8000174:	b094      	sub	sp, #80	; 0x50
 8000176:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000178:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800017c:	2228      	movs	r2, #40	; 0x28
 800017e:	2100      	movs	r1, #0
 8000180:	4618      	mov	r0, r3
 8000182:	f002 fdab 	bl	8002cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000186:	f107 0314 	add.w	r3, r7, #20
 800018a:	2200      	movs	r2, #0
 800018c:	601a      	str	r2, [r3, #0]
 800018e:	605a      	str	r2, [r3, #4]
 8000190:	609a      	str	r2, [r3, #8]
 8000192:	60da      	str	r2, [r3, #12]
 8000194:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]
 800019c:	605a      	str	r2, [r3, #4]
 800019e:	609a      	str	r2, [r3, #8]
 80001a0:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001a2:	2301      	movs	r3, #1
 80001a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ac:	2300      	movs	r3, #0
 80001ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b0:	2301      	movs	r3, #1
 80001b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b4:	2302      	movs	r3, #2
 80001b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001c8:	4618      	mov	r0, r3
 80001ca:	f001 fc45 	bl	8001a58 <HAL_RCC_OscConfig>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d001      	beq.n	80001d8 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001d4:	f000 f8e0 	bl	8000398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d8:	230f      	movs	r3, #15
 80001da:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001dc:	2302      	movs	r3, #2
 80001de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001ee:	f107 0314 	add.w	r3, r7, #20
 80001f2:	2102      	movs	r1, #2
 80001f4:	4618      	mov	r0, r3
 80001f6:	f001 feb1 	bl	8001f5c <HAL_RCC_ClockConfig>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d001      	beq.n	8000204 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000200:	f000 f8ca 	bl	8000398 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000204:	2302      	movs	r3, #2
 8000206:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000208:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800020c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	4618      	mov	r0, r3
 8000212:	f002 f831 	bl	8002278 <HAL_RCCEx_PeriphCLKConfig>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d001      	beq.n	8000220 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800021c:	f000 f8bc 	bl	8000398 <Error_Handler>
  }
}
 8000220:	bf00      	nop
 8000222:	3750      	adds	r7, #80	; 0x50
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}

08000228 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000238:	4b20      	ldr	r3, [pc, #128]	; (80002bc <MX_ADC1_Init+0x94>)
 800023a:	4a21      	ldr	r2, [pc, #132]	; (80002c0 <MX_ADC1_Init+0x98>)
 800023c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800023e:	4b1f      	ldr	r3, [pc, #124]	; (80002bc <MX_ADC1_Init+0x94>)
 8000240:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000244:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000246:	4b1d      	ldr	r3, [pc, #116]	; (80002bc <MX_ADC1_Init+0x94>)
 8000248:	2201      	movs	r2, #1
 800024a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800024c:	4b1b      	ldr	r3, [pc, #108]	; (80002bc <MX_ADC1_Init+0x94>)
 800024e:	2200      	movs	r2, #0
 8000250:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000252:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <MX_ADC1_Init+0x94>)
 8000254:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000258:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800025a:	4b18      	ldr	r3, [pc, #96]	; (80002bc <MX_ADC1_Init+0x94>)
 800025c:	2200      	movs	r2, #0
 800025e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000260:	4b16      	ldr	r3, [pc, #88]	; (80002bc <MX_ADC1_Init+0x94>)
 8000262:	2202      	movs	r2, #2
 8000264:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000266:	4815      	ldr	r0, [pc, #84]	; (80002bc <MX_ADC1_Init+0x94>)
 8000268:	f000 fafc 	bl	8000864 <HAL_ADC_Init>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000272:	f000 f891 	bl	8000398 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000276:	2300      	movs	r3, #0
 8000278:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800027a:	2301      	movs	r3, #1
 800027c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800027e:	2307      	movs	r3, #7
 8000280:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	4619      	mov	r1, r3
 8000286:	480d      	ldr	r0, [pc, #52]	; (80002bc <MX_ADC1_Init+0x94>)
 8000288:	f000 fcbe 	bl	8000c08 <HAL_ADC_ConfigChannel>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000292:	f000 f881 	bl	8000398 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000296:	2301      	movs	r3, #1
 8000298:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800029a:	2302      	movs	r3, #2
 800029c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	4619      	mov	r1, r3
 80002a2:	4806      	ldr	r0, [pc, #24]	; (80002bc <MX_ADC1_Init+0x94>)
 80002a4:	f000 fcb0 	bl	8000c08 <HAL_ADC_ConfigChannel>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80002ae:	f000 f873 	bl	8000398 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002b2:	bf00      	nop
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	20000084 	.word	0x20000084
 80002c0:	40012400 	.word	0x40012400

080002c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002c8:	4b11      	ldr	r3, [pc, #68]	; (8000310 <MX_USART1_UART_Init+0x4c>)
 80002ca:	4a12      	ldr	r2, [pc, #72]	; (8000314 <MX_USART1_UART_Init+0x50>)
 80002cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002ce:	4b10      	ldr	r3, [pc, #64]	; (8000310 <MX_USART1_UART_Init+0x4c>)
 80002d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002d6:	4b0e      	ldr	r3, [pc, #56]	; (8000310 <MX_USART1_UART_Init+0x4c>)
 80002d8:	2200      	movs	r2, #0
 80002da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002dc:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <MX_USART1_UART_Init+0x4c>)
 80002de:	2200      	movs	r2, #0
 80002e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002e2:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <MX_USART1_UART_Init+0x4c>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002e8:	4b09      	ldr	r3, [pc, #36]	; (8000310 <MX_USART1_UART_Init+0x4c>)
 80002ea:	220c      	movs	r2, #12
 80002ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ee:	4b08      	ldr	r3, [pc, #32]	; (8000310 <MX_USART1_UART_Init+0x4c>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <MX_USART1_UART_Init+0x4c>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002fa:	4805      	ldr	r0, [pc, #20]	; (8000310 <MX_USART1_UART_Init+0x4c>)
 80002fc:	f002 f928 	bl	8002550 <HAL_UART_Init>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000306:	f000 f847 	bl	8000398 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	200000f8 	.word	0x200000f8
 8000314:	40013800 	.word	0x40013800

08000318 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800031e:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <MX_DMA_Init+0x38>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	4a0b      	ldr	r2, [pc, #44]	; (8000350 <MX_DMA_Init+0x38>)
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	6153      	str	r3, [r2, #20]
 800032a:	4b09      	ldr	r3, [pc, #36]	; (8000350 <MX_DMA_Init+0x38>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f003 0301 	and.w	r3, r3, #1
 8000332:	607b      	str	r3, [r7, #4]
 8000334:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000336:	2200      	movs	r2, #0
 8000338:	2100      	movs	r1, #0
 800033a:	200b      	movs	r0, #11
 800033c:	f000 ffe3 	bl	8001306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000340:	200b      	movs	r0, #11
 8000342:	f000 fffc 	bl	800133e <HAL_NVIC_EnableIRQ>

}
 8000346:	bf00      	nop
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40021000 	.word	0x40021000

08000354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800035a:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <MX_GPIO_Init+0x40>)
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	4a0d      	ldr	r2, [pc, #52]	; (8000394 <MX_GPIO_Init+0x40>)
 8000360:	f043 0320 	orr.w	r3, r3, #32
 8000364:	6193      	str	r3, [r2, #24]
 8000366:	4b0b      	ldr	r3, [pc, #44]	; (8000394 <MX_GPIO_Init+0x40>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	f003 0320 	and.w	r3, r3, #32
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000372:	4b08      	ldr	r3, [pc, #32]	; (8000394 <MX_GPIO_Init+0x40>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	4a07      	ldr	r2, [pc, #28]	; (8000394 <MX_GPIO_Init+0x40>)
 8000378:	f043 0304 	orr.w	r3, r3, #4
 800037c:	6193      	str	r3, [r2, #24]
 800037e:	4b05      	ldr	r3, [pc, #20]	; (8000394 <MX_GPIO_Init+0x40>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	f003 0304 	and.w	r3, r3, #4
 8000386:	603b      	str	r3, [r7, #0]
 8000388:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr
 8000394:	40021000 	.word	0x40021000

08000398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800039c:	b672      	cpsid	i
}
 800039e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80003a0:	e7fe      	b.n	80003a0 <Error_Handler+0x8>
	...

080003a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <HAL_MspInit+0x40>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	4a0d      	ldr	r2, [pc, #52]	; (80003e4 <HAL_MspInit+0x40>)
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	6193      	str	r3, [r2, #24]
 80003b6:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <HAL_MspInit+0x40>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <HAL_MspInit+0x40>)
 80003c4:	69db      	ldr	r3, [r3, #28]
 80003c6:	4a07      	ldr	r2, [pc, #28]	; (80003e4 <HAL_MspInit+0x40>)
 80003c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003cc:	61d3      	str	r3, [r2, #28]
 80003ce:	4b05      	ldr	r3, [pc, #20]	; (80003e4 <HAL_MspInit+0x40>)
 80003d0:	69db      	ldr	r3, [r3, #28]
 80003d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003d6:	603b      	str	r3, [r7, #0]
 80003d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr
 80003e4:	40021000 	.word	0x40021000

080003e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f0:	f107 0310 	add.w	r3, r7, #16
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	605a      	str	r2, [r3, #4]
 80003fa:	609a      	str	r2, [r3, #8]
 80003fc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4a28      	ldr	r2, [pc, #160]	; (80004a4 <HAL_ADC_MspInit+0xbc>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d149      	bne.n	800049c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000408:	4b27      	ldr	r3, [pc, #156]	; (80004a8 <HAL_ADC_MspInit+0xc0>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a26      	ldr	r2, [pc, #152]	; (80004a8 <HAL_ADC_MspInit+0xc0>)
 800040e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000412:	6193      	str	r3, [r2, #24]
 8000414:	4b24      	ldr	r3, [pc, #144]	; (80004a8 <HAL_ADC_MspInit+0xc0>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800041c:	60fb      	str	r3, [r7, #12]
 800041e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000420:	4b21      	ldr	r3, [pc, #132]	; (80004a8 <HAL_ADC_MspInit+0xc0>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a20      	ldr	r2, [pc, #128]	; (80004a8 <HAL_ADC_MspInit+0xc0>)
 8000426:	f043 0304 	orr.w	r3, r3, #4
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b1e      	ldr	r3, [pc, #120]	; (80004a8 <HAL_ADC_MspInit+0xc0>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0304 	and.w	r3, r3, #4
 8000434:	60bb      	str	r3, [r7, #8]
 8000436:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000438:	2303      	movs	r3, #3
 800043a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800043c:	2303      	movs	r3, #3
 800043e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000440:	f107 0310 	add.w	r3, r7, #16
 8000444:	4619      	mov	r1, r3
 8000446:	4819      	ldr	r0, [pc, #100]	; (80004ac <HAL_ADC_MspInit+0xc4>)
 8000448:	f001 f982 	bl	8001750 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800044c:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <HAL_ADC_MspInit+0xc8>)
 800044e:	4a19      	ldr	r2, [pc, #100]	; (80004b4 <HAL_ADC_MspInit+0xcc>)
 8000450:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000452:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <HAL_ADC_MspInit+0xc8>)
 8000454:	2200      	movs	r2, #0
 8000456:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000458:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <HAL_ADC_MspInit+0xc8>)
 800045a:	2200      	movs	r2, #0
 800045c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800045e:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <HAL_ADC_MspInit+0xc8>)
 8000460:	2280      	movs	r2, #128	; 0x80
 8000462:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000464:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <HAL_ADC_MspInit+0xc8>)
 8000466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800046a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800046c:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <HAL_ADC_MspInit+0xc8>)
 800046e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000472:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000474:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <HAL_ADC_MspInit+0xc8>)
 8000476:	2220      	movs	r2, #32
 8000478:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800047a:	4b0d      	ldr	r3, [pc, #52]	; (80004b0 <HAL_ADC_MspInit+0xc8>)
 800047c:	2200      	movs	r2, #0
 800047e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000480:	480b      	ldr	r0, [pc, #44]	; (80004b0 <HAL_ADC_MspInit+0xc8>)
 8000482:	f000 ff77 	bl	8001374 <HAL_DMA_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800048c:	f7ff ff84 	bl	8000398 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4a07      	ldr	r2, [pc, #28]	; (80004b0 <HAL_ADC_MspInit+0xc8>)
 8000494:	621a      	str	r2, [r3, #32]
 8000496:	4a06      	ldr	r2, [pc, #24]	; (80004b0 <HAL_ADC_MspInit+0xc8>)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800049c:	bf00      	nop
 800049e:	3720      	adds	r7, #32
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40012400 	.word	0x40012400
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40010800 	.word	0x40010800
 80004b0:	200000b4 	.word	0x200000b4
 80004b4:	40020008 	.word	0x40020008

080004b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a1c      	ldr	r2, [pc, #112]	; (8000544 <HAL_UART_MspInit+0x8c>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d131      	bne.n	800053c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004d8:	4b1b      	ldr	r3, [pc, #108]	; (8000548 <HAL_UART_MspInit+0x90>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a1a      	ldr	r2, [pc, #104]	; (8000548 <HAL_UART_MspInit+0x90>)
 80004de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b18      	ldr	r3, [pc, #96]	; (8000548 <HAL_UART_MspInit+0x90>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004ec:	60fb      	str	r3, [r7, #12]
 80004ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f0:	4b15      	ldr	r3, [pc, #84]	; (8000548 <HAL_UART_MspInit+0x90>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a14      	ldr	r2, [pc, #80]	; (8000548 <HAL_UART_MspInit+0x90>)
 80004f6:	f043 0304 	orr.w	r3, r3, #4
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <HAL_UART_MspInit+0x90>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f003 0304 	and.w	r3, r3, #4
 8000504:	60bb      	str	r3, [r7, #8]
 8000506:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800050c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800050e:	2302      	movs	r3, #2
 8000510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000512:	2303      	movs	r3, #3
 8000514:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000516:	f107 0310 	add.w	r3, r7, #16
 800051a:	4619      	mov	r1, r3
 800051c:	480b      	ldr	r0, [pc, #44]	; (800054c <HAL_UART_MspInit+0x94>)
 800051e:	f001 f917 	bl	8001750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000526:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000528:	2300      	movs	r3, #0
 800052a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	f107 0310 	add.w	r3, r7, #16
 8000534:	4619      	mov	r1, r3
 8000536:	4805      	ldr	r0, [pc, #20]	; (800054c <HAL_UART_MspInit+0x94>)
 8000538:	f001 f90a 	bl	8001750 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800053c:	bf00      	nop
 800053e:	3720      	adds	r7, #32
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40013800 	.word	0x40013800
 8000548:	40021000 	.word	0x40021000
 800054c:	40010800 	.word	0x40010800

08000550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000554:	e7fe      	b.n	8000554 <NMI_Handler+0x4>

08000556 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800055a:	e7fe      	b.n	800055a <HardFault_Handler+0x4>

0800055c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000560:	e7fe      	b.n	8000560 <MemManage_Handler+0x4>

08000562 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000562:	b480      	push	{r7}
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000566:	e7fe      	b.n	8000566 <BusFault_Handler+0x4>

08000568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800056c:	e7fe      	b.n	800056c <UsageFault_Handler+0x4>

0800056e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000572:	bf00      	nop
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr

0800057a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800057e:	bf00      	nop
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr

08000586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr

08000592 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000592:	b580      	push	{r7, lr}
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000596:	f000 f949 	bl	800082c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80005a4:	4802      	ldr	r0, [pc, #8]	; (80005b0 <DMA1_Channel1_IRQHandler+0x10>)
 80005a6:	f000 ff9f 	bl	80014e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	200000b4 	.word	0x200000b4

080005b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
 80005c4:	e00a      	b.n	80005dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005c6:	f3af 8000 	nop.w
 80005ca:	4601      	mov	r1, r0
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	1c5a      	adds	r2, r3, #1
 80005d0:	60ba      	str	r2, [r7, #8]
 80005d2:	b2ca      	uxtb	r2, r1
 80005d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	3301      	adds	r3, #1
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697a      	ldr	r2, [r7, #20]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	dbf0      	blt.n	80005c6 <_read+0x12>
  }

  return len;
 80005e4:	687b      	ldr	r3, [r7, #4]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3718      	adds	r7, #24
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <_close>:
  }
  return len;
}

int _close(int file)
{
 80005ee:	b480      	push	{r7}
 80005f0:	b083      	sub	sp, #12
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr

08000604 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000614:	605a      	str	r2, [r3, #4]
  return 0;
 8000616:	2300      	movs	r3, #0
}
 8000618:	4618      	mov	r0, r3
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr

08000622 <_isatty>:

int _isatty(int file)
{
 8000622:	b480      	push	{r7}
 8000624:	b083      	sub	sp, #12
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800062a:	2301      	movs	r3, #1
}
 800062c:	4618      	mov	r0, r3
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr

08000636 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000636:	b480      	push	{r7}
 8000638:	b085      	sub	sp, #20
 800063a:	af00      	add	r7, sp, #0
 800063c:	60f8      	str	r0, [r7, #12]
 800063e:	60b9      	str	r1, [r7, #8]
 8000640:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000642:	2300      	movs	r3, #0
}
 8000644:	4618      	mov	r0, r3
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr
	...

08000650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000658:	4a14      	ldr	r2, [pc, #80]	; (80006ac <_sbrk+0x5c>)
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <_sbrk+0x60>)
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000664:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <_sbrk+0x64>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d102      	bne.n	8000672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <_sbrk+0x64>)
 800066e:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <_sbrk+0x68>)
 8000670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <_sbrk+0x64>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4413      	add	r3, r2
 800067a:	693a      	ldr	r2, [r7, #16]
 800067c:	429a      	cmp	r2, r3
 800067e:	d207      	bcs.n	8000690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000680:	f002 fb7a 	bl	8002d78 <__errno>
 8000684:	4603      	mov	r3, r0
 8000686:	220c      	movs	r2, #12
 8000688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	e009      	b.n	80006a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <_sbrk+0x64>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000696:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <_sbrk+0x64>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	4a05      	ldr	r2, [pc, #20]	; (80006b4 <_sbrk+0x64>)
 80006a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006a2:	68fb      	ldr	r3, [r7, #12]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3718      	adds	r7, #24
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20005000 	.word	0x20005000
 80006b0:	00000400 	.word	0x00000400
 80006b4:	20000140 	.word	0x20000140
 80006b8:	200002a0 	.word	0x200002a0

080006bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <_write>:
extern ADC_HandleTypeDef hadc1;
extern DMA_HandleTypeDef hdma_adc1;
extern UART_HandleTypeDef huart1;

uint32_t AD_RES[2];
int _write(int fd, char *data, int len) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) data, len, HAL_MAX_DELAY);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	f04f 33ff 	mov.w	r3, #4294967295
 80006dc:	68b9      	ldr	r1, [r7, #8]
 80006de:	4804      	ldr	r0, [pc, #16]	; (80006f0 <_write+0x28>)
 80006e0:	f001 ff86 	bl	80025f0 <HAL_UART_Transmit>
	return len;
 80006e4:	687b      	ldr	r3, [r7, #4]
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000f8 	.word	0x200000f8

080006f4 <Setup>:

void Setup() {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	printf("this is setup \n");
 80006f8:	4809      	ldr	r0, [pc, #36]	; (8000720 <Setup+0x2c>)
 80006fa:	f002 fa0f 	bl	8002b1c <puts>
	HAL_ADCEx_Calibration_Start(&hadc1);
 80006fe:	4809      	ldr	r0, [pc, #36]	; (8000724 <Setup+0x30>)
 8000700:	f000 fc7c 	bl	8000ffc <HAL_ADCEx_Calibration_Start>
	printf("callibration complete \n");
 8000704:	4808      	ldr	r0, [pc, #32]	; (8000728 <Setup+0x34>)
 8000706:	f002 fa09 	bl	8002b1c <puts>
	HAL_ADC_Start_DMA(&hadc1, AD_RES, 2);
 800070a:	2202      	movs	r2, #2
 800070c:	4907      	ldr	r1, [pc, #28]	; (800072c <Setup+0x38>)
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <Setup+0x30>)
 8000710:	f000 f980 	bl	8000a14 <HAL_ADC_Start_DMA>
	printf("DMA started \n");
 8000714:	4806      	ldr	r0, [pc, #24]	; (8000730 <Setup+0x3c>)
 8000716:	f002 fa01 	bl	8002b1c <puts>
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	08003814 	.word	0x08003814
 8000724:	20000084 	.word	0x20000084
 8000728:	08003824 	.word	0x08003824
 800072c:	20000144 	.word	0x20000144
 8000730:	0800383c 	.word	0x0800383c

08000734 <loop>:

void loop() {
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	printf("ADC value is %ld adn %ld \n",AD_RES[0],AD_RES[1]);
 8000738:	4b04      	ldr	r3, [pc, #16]	; (800074c <loop+0x18>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a03      	ldr	r2, [pc, #12]	; (800074c <loop+0x18>)
 800073e:	6852      	ldr	r2, [r2, #4]
 8000740:	4619      	mov	r1, r3
 8000742:	4803      	ldr	r0, [pc, #12]	; (8000750 <loop+0x1c>)
 8000744:	f002 f984 	bl	8002a50 <iprintf>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000144 	.word	0x20000144
 8000750:	0800384c 	.word	0x0800384c

08000754 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000754:	f7ff ffb2 	bl	80006bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000758:	480b      	ldr	r0, [pc, #44]	; (8000788 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800075a:	490c      	ldr	r1, [pc, #48]	; (800078c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800075c:	4a0c      	ldr	r2, [pc, #48]	; (8000790 <LoopFillZerobss+0x16>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000760:	e002      	b.n	8000768 <LoopCopyDataInit>

08000762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000766:	3304      	adds	r3, #4

08000768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800076c:	d3f9      	bcc.n	8000762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076e:	4a09      	ldr	r2, [pc, #36]	; (8000794 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000770:	4c09      	ldr	r4, [pc, #36]	; (8000798 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000774:	e001      	b.n	800077a <LoopFillZerobss>

08000776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000778:	3204      	adds	r2, #4

0800077a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800077c:	d3fb      	bcc.n	8000776 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800077e:	f002 fb01 	bl	8002d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000782:	f7ff fce3 	bl	800014c <main>
  bx lr
 8000786:	4770      	bx	lr
  ldr r0, =_sdata
 8000788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800078c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000790:	080038e4 	.word	0x080038e4
  ldr r2, =_sbss
 8000794:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000798:	2000029c 	.word	0x2000029c

0800079c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800079c:	e7fe      	b.n	800079c <ADC1_2_IRQHandler>
	...

080007a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <HAL_Init+0x28>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a07      	ldr	r2, [pc, #28]	; (80007c8 <HAL_Init+0x28>)
 80007aa:	f043 0310 	orr.w	r3, r3, #16
 80007ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b0:	2003      	movs	r0, #3
 80007b2:	f000 fd9d 	bl	80012f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b6:	200f      	movs	r0, #15
 80007b8:	f000 f808 	bl	80007cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007bc:	f7ff fdf2 	bl	80003a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40022000 	.word	0x40022000

080007cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_InitTick+0x54>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <HAL_InitTick+0x58>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	4619      	mov	r1, r3
 80007de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 fdb5 	bl	800135a <HAL_SYSTICK_Config>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
 80007f8:	e00e      	b.n	8000818 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b0f      	cmp	r3, #15
 80007fe:	d80a      	bhi.n	8000816 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000800:	2200      	movs	r2, #0
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	f04f 30ff 	mov.w	r0, #4294967295
 8000808:	f000 fd7d 	bl	8001306 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800080c:	4a06      	ldr	r2, [pc, #24]	; (8000828 <HAL_InitTick+0x5c>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000812:	2300      	movs	r3, #0
 8000814:	e000      	b.n	8000818 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
}
 8000818:	4618      	mov	r0, r3
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000000 	.word	0x20000000
 8000824:	20000008 	.word	0x20000008
 8000828:	20000004 	.word	0x20000004

0800082c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <HAL_IncTick+0x1c>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <HAL_IncTick+0x20>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4413      	add	r3, r2
 800083c:	4a03      	ldr	r2, [pc, #12]	; (800084c <HAL_IncTick+0x20>)
 800083e:	6013      	str	r3, [r2, #0]
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	20000008 	.word	0x20000008
 800084c:	2000014c 	.word	0x2000014c

08000850 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return uwTick;
 8000854:	4b02      	ldr	r3, [pc, #8]	; (8000860 <HAL_GetTick+0x10>)
 8000856:	681b      	ldr	r3, [r3, #0]
}
 8000858:	4618      	mov	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr
 8000860:	2000014c 	.word	0x2000014c

08000864 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800086c:	2300      	movs	r3, #0
 800086e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d101      	bne.n	8000886 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000882:	2301      	movs	r3, #1
 8000884:	e0be      	b.n	8000a04 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000890:	2b00      	cmp	r3, #0
 8000892:	d109      	bne.n	80008a8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2200      	movs	r2, #0
 8000898:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2200      	movs	r2, #0
 800089e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f7ff fda0 	bl	80003e8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f000 faff 	bl	8000eac <ADC_ConversionStop_Disable>
 80008ae:	4603      	mov	r3, r0
 80008b0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008b6:	f003 0310 	and.w	r3, r3, #16
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	f040 8099 	bne.w	80009f2 <HAL_ADC_Init+0x18e>
 80008c0:	7dfb      	ldrb	r3, [r7, #23]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	f040 8095 	bne.w	80009f2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80008d0:	f023 0302 	bic.w	r3, r3, #2
 80008d4:	f043 0202 	orr.w	r2, r3, #2
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008e4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	7b1b      	ldrb	r3, [r3, #12]
 80008ea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008ec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008fc:	d003      	beq.n	8000906 <HAL_ADC_Init+0xa2>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d102      	bne.n	800090c <HAL_ADC_Init+0xa8>
 8000906:	f44f 7380 	mov.w	r3, #256	; 0x100
 800090a:	e000      	b.n	800090e <HAL_ADC_Init+0xaa>
 800090c:	2300      	movs	r3, #0
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	4313      	orrs	r3, r2
 8000912:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	7d1b      	ldrb	r3, [r3, #20]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d119      	bne.n	8000950 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	7b1b      	ldrb	r3, [r3, #12]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d109      	bne.n	8000938 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	3b01      	subs	r3, #1
 800092a:	035a      	lsls	r2, r3, #13
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	4313      	orrs	r3, r2
 8000930:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	e00b      	b.n	8000950 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800093c:	f043 0220 	orr.w	r2, r3, #32
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000948:	f043 0201 	orr.w	r2, r3, #1
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	430a      	orrs	r2, r1
 8000962:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	689a      	ldr	r2, [r3, #8]
 800096a:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <HAL_ADC_Init+0x1a8>)
 800096c:	4013      	ands	r3, r2
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	6812      	ldr	r2, [r2, #0]
 8000972:	68b9      	ldr	r1, [r7, #8]
 8000974:	430b      	orrs	r3, r1
 8000976:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000980:	d003      	beq.n	800098a <HAL_ADC_Init+0x126>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d104      	bne.n	8000994 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	691b      	ldr	r3, [r3, #16]
 800098e:	3b01      	subs	r3, #1
 8000990:	051b      	lsls	r3, r3, #20
 8000992:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800099a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	430a      	orrs	r2, r1
 80009a6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	689a      	ldr	r2, [r3, #8]
 80009ae:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <HAL_ADC_Init+0x1ac>)
 80009b0:	4013      	ands	r3, r2
 80009b2:	68ba      	ldr	r2, [r7, #8]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d10b      	bne.n	80009d0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2200      	movs	r2, #0
 80009bc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c2:	f023 0303 	bic.w	r3, r3, #3
 80009c6:	f043 0201 	orr.w	r2, r3, #1
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009ce:	e018      	b.n	8000a02 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d4:	f023 0312 	bic.w	r3, r3, #18
 80009d8:	f043 0210 	orr.w	r2, r3, #16
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e4:	f043 0201 	orr.w	r2, r3, #1
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80009ec:	2301      	movs	r3, #1
 80009ee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009f0:	e007      	b.n	8000a02 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f6:	f043 0210 	orr.w	r2, r3, #16
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	ffe1f7fd 	.word	0xffe1f7fd
 8000a10:	ff1f0efe 	.word	0xff1f0efe

08000a14 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a20:	2300      	movs	r3, #0
 8000a22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a64      	ldr	r2, [pc, #400]	; (8000bbc <HAL_ADC_Start_DMA+0x1a8>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d004      	beq.n	8000a38 <HAL_ADC_Start_DMA+0x24>
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a63      	ldr	r2, [pc, #396]	; (8000bc0 <HAL_ADC_Start_DMA+0x1ac>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d106      	bne.n	8000a46 <HAL_ADC_Start_DMA+0x32>
 8000a38:	4b60      	ldr	r3, [pc, #384]	; (8000bbc <HAL_ADC_Start_DMA+0x1a8>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	f040 80b3 	bne.w	8000bac <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d101      	bne.n	8000a54 <HAL_ADC_Start_DMA+0x40>
 8000a50:	2302      	movs	r3, #2
 8000a52:	e0ae      	b.n	8000bb2 <HAL_ADC_Start_DMA+0x19e>
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	2201      	movs	r2, #1
 8000a58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000a5c:	68f8      	ldr	r0, [r7, #12]
 8000a5e:	f000 f9cb 	bl	8000df8 <ADC_Enable>
 8000a62:	4603      	mov	r3, r0
 8000a64:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000a66:	7dfb      	ldrb	r3, [r7, #23]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	f040 809a 	bne.w	8000ba2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000a76:	f023 0301 	bic.w	r3, r3, #1
 8000a7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a4e      	ldr	r2, [pc, #312]	; (8000bc0 <HAL_ADC_Start_DMA+0x1ac>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d105      	bne.n	8000a98 <HAL_ADC_Start_DMA+0x84>
 8000a8c:	4b4b      	ldr	r3, [pc, #300]	; (8000bbc <HAL_ADC_Start_DMA+0x1a8>)
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d115      	bne.n	8000ac4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a9c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d026      	beq.n	8000b00 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000aba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ac2:	e01d      	b.n	8000b00 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a39      	ldr	r2, [pc, #228]	; (8000bbc <HAL_ADC_Start_DMA+0x1a8>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d004      	beq.n	8000ae4 <HAL_ADC_Start_DMA+0xd0>
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a38      	ldr	r2, [pc, #224]	; (8000bc0 <HAL_ADC_Start_DMA+0x1ac>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d10d      	bne.n	8000b00 <HAL_ADC_Start_DMA+0xec>
 8000ae4:	4b35      	ldr	r3, [pc, #212]	; (8000bbc <HAL_ADC_Start_DMA+0x1a8>)
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d007      	beq.n	8000b00 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000af8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d006      	beq.n	8000b1a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b10:	f023 0206 	bic.w	r2, r3, #6
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b18:	e002      	b.n	8000b20 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2200      	movs	r2, #0
 8000b24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	6a1b      	ldr	r3, [r3, #32]
 8000b2c:	4a25      	ldr	r2, [pc, #148]	; (8000bc4 <HAL_ADC_Start_DMA+0x1b0>)
 8000b2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	6a1b      	ldr	r3, [r3, #32]
 8000b34:	4a24      	ldr	r2, [pc, #144]	; (8000bc8 <HAL_ADC_Start_DMA+0x1b4>)
 8000b36:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	6a1b      	ldr	r3, [r3, #32]
 8000b3c:	4a23      	ldr	r2, [pc, #140]	; (8000bcc <HAL_ADC_Start_DMA+0x1b8>)
 8000b3e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f06f 0202 	mvn.w	r2, #2
 8000b48:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	689a      	ldr	r2, [r3, #8]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b58:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	6a18      	ldr	r0, [r3, #32]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	334c      	adds	r3, #76	; 0x4c
 8000b64:	4619      	mov	r1, r3
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f000 fc5d 	bl	8001428 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000b78:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000b7c:	d108      	bne.n	8000b90 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	689a      	ldr	r2, [r3, #8]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000b8c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000b8e:	e00f      	b.n	8000bb0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	689a      	ldr	r2, [r3, #8]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000b9e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000ba0:	e006      	b.n	8000bb0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000baa:	e001      	b.n	8000bb0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40012400 	.word	0x40012400
 8000bc0:	40012800 	.word	0x40012800
 8000bc4:	08000f2f 	.word	0x08000f2f
 8000bc8:	08000fab 	.word	0x08000fab
 8000bcc:	08000fc7 	.word	0x08000fc7

08000bd0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr

08000be2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr

08000bf4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr
	...

08000c08 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d101      	bne.n	8000c28 <HAL_ADC_ConfigChannel+0x20>
 8000c24:	2302      	movs	r3, #2
 8000c26:	e0dc      	b.n	8000de2 <HAL_ADC_ConfigChannel+0x1da>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	2b06      	cmp	r3, #6
 8000c36:	d81c      	bhi.n	8000c72 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685a      	ldr	r2, [r3, #4]
 8000c42:	4613      	mov	r3, r2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	4413      	add	r3, r2
 8000c48:	3b05      	subs	r3, #5
 8000c4a:	221f      	movs	r2, #31
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	4019      	ands	r1, r3
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	6818      	ldr	r0, [r3, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	4413      	add	r3, r2
 8000c62:	3b05      	subs	r3, #5
 8000c64:	fa00 f203 	lsl.w	r2, r0, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	635a      	str	r2, [r3, #52]	; 0x34
 8000c70:	e03c      	b.n	8000cec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	2b0c      	cmp	r3, #12
 8000c78:	d81c      	bhi.n	8000cb4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685a      	ldr	r2, [r3, #4]
 8000c84:	4613      	mov	r3, r2
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	4413      	add	r3, r2
 8000c8a:	3b23      	subs	r3, #35	; 0x23
 8000c8c:	221f      	movs	r2, #31
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43db      	mvns	r3, r3
 8000c94:	4019      	ands	r1, r3
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	6818      	ldr	r0, [r3, #0]
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	4413      	add	r3, r2
 8000ca4:	3b23      	subs	r3, #35	; 0x23
 8000ca6:	fa00 f203 	lsl.w	r2, r0, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	631a      	str	r2, [r3, #48]	; 0x30
 8000cb2:	e01b      	b.n	8000cec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685a      	ldr	r2, [r3, #4]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	3b41      	subs	r3, #65	; 0x41
 8000cc6:	221f      	movs	r2, #31
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	4019      	ands	r1, r3
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	6818      	ldr	r0, [r3, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685a      	ldr	r2, [r3, #4]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	4413      	add	r3, r2
 8000cde:	3b41      	subs	r3, #65	; 0x41
 8000ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b09      	cmp	r3, #9
 8000cf2:	d91c      	bls.n	8000d2e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	68d9      	ldr	r1, [r3, #12]
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	4413      	add	r3, r2
 8000d04:	3b1e      	subs	r3, #30
 8000d06:	2207      	movs	r2, #7
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	4019      	ands	r1, r3
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	6898      	ldr	r0, [r3, #8]
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	4413      	add	r3, r2
 8000d1e:	3b1e      	subs	r3, #30
 8000d20:	fa00 f203 	lsl.w	r2, r0, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	e019      	b.n	8000d62 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	6919      	ldr	r1, [r3, #16]
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	4413      	add	r3, r2
 8000d3e:	2207      	movs	r2, #7
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	4019      	ands	r1, r3
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	6898      	ldr	r0, [r3, #8]
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4613      	mov	r3, r2
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	4413      	add	r3, r2
 8000d56:	fa00 f203 	lsl.w	r2, r0, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b10      	cmp	r3, #16
 8000d68:	d003      	beq.n	8000d72 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d6e:	2b11      	cmp	r3, #17
 8000d70:	d132      	bne.n	8000dd8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a1d      	ldr	r2, [pc, #116]	; (8000dec <HAL_ADC_ConfigChannel+0x1e4>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d125      	bne.n	8000dc8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d126      	bne.n	8000dd8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000d98:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b10      	cmp	r3, #16
 8000da0:	d11a      	bne.n	8000dd8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000da2:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <HAL_ADC_ConfigChannel+0x1e8>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a13      	ldr	r2, [pc, #76]	; (8000df4 <HAL_ADC_ConfigChannel+0x1ec>)
 8000da8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dac:	0c9a      	lsrs	r2, r3, #18
 8000dae:	4613      	mov	r3, r2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4413      	add	r3, r2
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000db8:	e002      	b.n	8000dc0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1f9      	bne.n	8000dba <HAL_ADC_ConfigChannel+0x1b2>
 8000dc6:	e007      	b.n	8000dd8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dcc:	f043 0220 	orr.w	r2, r3, #32
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	40012400 	.word	0x40012400
 8000df0:	20000000 	.word	0x20000000
 8000df4:	431bde83 	.word	0x431bde83

08000df8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d040      	beq.n	8000e98 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f042 0201 	orr.w	r2, r2, #1
 8000e24:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e26:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <ADC_Enable+0xac>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a1f      	ldr	r2, [pc, #124]	; (8000ea8 <ADC_Enable+0xb0>)
 8000e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e30:	0c9b      	lsrs	r3, r3, #18
 8000e32:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e34:	e002      	b.n	8000e3c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f9      	bne.n	8000e36 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e42:	f7ff fd05 	bl	8000850 <HAL_GetTick>
 8000e46:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e48:	e01f      	b.n	8000e8a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e4a:	f7ff fd01 	bl	8000850 <HAL_GetTick>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d918      	bls.n	8000e8a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d011      	beq.n	8000e8a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6a:	f043 0210 	orr.w	r2, r3, #16
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e76:	f043 0201 	orr.w	r2, r3, #1
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e007      	b.n	8000e9a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d1d8      	bne.n	8000e4a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	431bde83 	.word	0x431bde83

08000eac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d12e      	bne.n	8000f24 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	689a      	ldr	r2, [r3, #8]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f022 0201 	bic.w	r2, r2, #1
 8000ed4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ed6:	f7ff fcbb 	bl	8000850 <HAL_GetTick>
 8000eda:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000edc:	e01b      	b.n	8000f16 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ede:	f7ff fcb7 	bl	8000850 <HAL_GetTick>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d914      	bls.n	8000f16 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d10d      	bne.n	8000f16 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efe:	f043 0210 	orr.w	r2, r3, #16
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0a:	f043 0201 	orr.w	r2, r3, #1
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e007      	b.n	8000f26 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d0dc      	beq.n	8000ede <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b084      	sub	sp, #16
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d127      	bne.n	8000f98 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f5e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f62:	d115      	bne.n	8000f90 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d111      	bne.n	8000f90 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d105      	bne.n	8000f90 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f88:	f043 0201 	orr.w	r2, r3, #1
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f7ff fe1d 	bl	8000bd0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000f96:	e004      	b.n	8000fa2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	6a1b      	ldr	r3, [r3, #32]
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	4798      	blx	r3
}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b084      	sub	sp, #16
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f7ff fe12 	bl	8000be2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b084      	sub	sp, #16
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe4:	f043 0204 	orr.w	r2, r3, #4
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000fec:	68f8      	ldr	r0, [r7, #12]
 8000fee:	f7ff fe01 	bl	8000bf4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8000ffc:	b590      	push	{r4, r7, lr}
 8000ffe:	b087      	sub	sp, #28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001004:	2300      	movs	r3, #0
 8001006:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001012:	2b01      	cmp	r3, #1
 8001014:	d101      	bne.n	800101a <HAL_ADCEx_Calibration_Start+0x1e>
 8001016:	2302      	movs	r3, #2
 8001018:	e097      	b.n	800114a <HAL_ADCEx_Calibration_Start+0x14e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2201      	movs	r2, #1
 800101e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ff42 	bl	8000eac <ADC_ConversionStop_Disable>
 8001028:	4603      	mov	r3, r0
 800102a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff fee3 	bl	8000df8 <ADC_Enable>
 8001032:	4603      	mov	r3, r0
 8001034:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001036:	7dfb      	ldrb	r3, [r7, #23]
 8001038:	2b00      	cmp	r3, #0
 800103a:	f040 8081 	bne.w	8001140 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001042:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001046:	f023 0302 	bic.w	r3, r3, #2
 800104a:	f043 0202 	orr.w	r2, r3, #2
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001052:	4b40      	ldr	r3, [pc, #256]	; (8001154 <HAL_ADCEx_Calibration_Start+0x158>)
 8001054:	681c      	ldr	r4, [r3, #0]
 8001056:	2002      	movs	r0, #2
 8001058:	f001 f9c4 	bl	80023e4 <HAL_RCCEx_GetPeriphCLKFreq>
 800105c:	4603      	mov	r3, r0
 800105e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001062:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001064:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001066:	e002      	b.n	800106e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	3b01      	subs	r3, #1
 800106c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1f9      	bne.n	8001068 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f042 0208 	orr.w	r2, r2, #8
 8001082:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001084:	f7ff fbe4 	bl	8000850 <HAL_GetTick>
 8001088:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800108a:	e01b      	b.n	80010c4 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800108c:	f7ff fbe0 	bl	8000850 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b0a      	cmp	r3, #10
 8001098:	d914      	bls.n	80010c4 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f003 0308 	and.w	r3, r3, #8
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d00d      	beq.n	80010c4 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ac:	f023 0312 	bic.w	r3, r3, #18
 80010b0:	f043 0210 	orr.w	r2, r3, #16
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e042      	b.n	800114a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1dc      	bne.n	800108c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f042 0204 	orr.w	r2, r2, #4
 80010e0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80010e2:	f7ff fbb5 	bl	8000850 <HAL_GetTick>
 80010e6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80010e8:	e01b      	b.n	8001122 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80010ea:	f7ff fbb1 	bl	8000850 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b0a      	cmp	r3, #10
 80010f6:	d914      	bls.n	8001122 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	2b00      	cmp	r3, #0
 8001104:	d00d      	beq.n	8001122 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110a:	f023 0312 	bic.w	r3, r3, #18
 800110e:	f043 0210 	orr.w	r2, r3, #16
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e013      	b.n	800114a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1dc      	bne.n	80010ea <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001134:	f023 0303 	bic.w	r3, r3, #3
 8001138:	f043 0201 	orr.w	r2, r3, #1
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001148:	7dfb      	ldrb	r3, [r7, #23]
}
 800114a:	4618      	mov	r0, r3
 800114c:	371c      	adds	r7, #28
 800114e:	46bd      	mov	sp, r7
 8001150:	bd90      	pop	{r4, r7, pc}
 8001152:	bf00      	nop
 8001154:	20000000 	.word	0x20000000

08001158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001174:	4013      	ands	r3, r2
 8001176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118a:	4a04      	ldr	r2, [pc, #16]	; (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	60d3      	str	r3, [r2, #12]
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <__NVIC_GetPriorityGrouping+0x18>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	f003 0307 	and.w	r3, r3, #7
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	db0b      	blt.n	80011e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	f003 021f 	and.w	r2, r3, #31
 80011d4:	4906      	ldr	r1, [pc, #24]	; (80011f0 <__NVIC_EnableIRQ+0x34>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	095b      	lsrs	r3, r3, #5
 80011dc:	2001      	movs	r0, #1
 80011de:	fa00 f202 	lsl.w	r2, r0, r2
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	e000e100 	.word	0xe000e100

080011f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	2b00      	cmp	r3, #0
 8001206:	db0a      	blt.n	800121e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	b2da      	uxtb	r2, r3
 800120c:	490c      	ldr	r1, [pc, #48]	; (8001240 <__NVIC_SetPriority+0x4c>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	0112      	lsls	r2, r2, #4
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	440b      	add	r3, r1
 8001218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800121c:	e00a      	b.n	8001234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4908      	ldr	r1, [pc, #32]	; (8001244 <__NVIC_SetPriority+0x50>)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	3b04      	subs	r3, #4
 800122c:	0112      	lsls	r2, r2, #4
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	440b      	add	r3, r1
 8001232:	761a      	strb	r2, [r3, #24]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000e100 	.word	0xe000e100
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f1c3 0307 	rsb	r3, r3, #7
 8001262:	2b04      	cmp	r3, #4
 8001264:	bf28      	it	cs
 8001266:	2304      	movcs	r3, #4
 8001268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3304      	adds	r3, #4
 800126e:	2b06      	cmp	r3, #6
 8001270:	d902      	bls.n	8001278 <NVIC_EncodePriority+0x30>
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3b03      	subs	r3, #3
 8001276:	e000      	b.n	800127a <NVIC_EncodePriority+0x32>
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	f04f 32ff 	mov.w	r2, #4294967295
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43da      	mvns	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	401a      	ands	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001290:	f04f 31ff 	mov.w	r1, #4294967295
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa01 f303 	lsl.w	r3, r1, r3
 800129a:	43d9      	mvns	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	4313      	orrs	r3, r2
         );
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3724      	adds	r7, #36	; 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012bc:	d301      	bcc.n	80012c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012be:	2301      	movs	r3, #1
 80012c0:	e00f      	b.n	80012e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c2:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <SysTick_Config+0x40>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ca:	210f      	movs	r1, #15
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295
 80012d0:	f7ff ff90 	bl	80011f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <SysTick_Config+0x40>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012da:	4b04      	ldr	r3, [pc, #16]	; (80012ec <SysTick_Config+0x40>)
 80012dc:	2207      	movs	r2, #7
 80012de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	e000e010 	.word	0xe000e010

080012f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff2d 	bl	8001158 <__NVIC_SetPriorityGrouping>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001306:	b580      	push	{r7, lr}
 8001308:	b086      	sub	sp, #24
 800130a:	af00      	add	r7, sp, #0
 800130c:	4603      	mov	r3, r0
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
 8001312:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001318:	f7ff ff42 	bl	80011a0 <__NVIC_GetPriorityGrouping>
 800131c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	68b9      	ldr	r1, [r7, #8]
 8001322:	6978      	ldr	r0, [r7, #20]
 8001324:	f7ff ff90 	bl	8001248 <NVIC_EncodePriority>
 8001328:	4602      	mov	r2, r0
 800132a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132e:	4611      	mov	r1, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff5f 	bl	80011f4 <__NVIC_SetPriority>
}
 8001336:	bf00      	nop
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff35 	bl	80011bc <__NVIC_EnableIRQ>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ffa2 	bl	80012ac <SysTick_Config>
 8001368:	4603      	mov	r3, r0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e043      	b.n	8001412 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	4b22      	ldr	r3, [pc, #136]	; (800141c <HAL_DMA_Init+0xa8>)
 8001392:	4413      	add	r3, r2
 8001394:	4a22      	ldr	r2, [pc, #136]	; (8001420 <HAL_DMA_Init+0xac>)
 8001396:	fba2 2303 	umull	r2, r3, r2, r3
 800139a:	091b      	lsrs	r3, r3, #4
 800139c:	009a      	lsls	r2, r3, #2
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a1f      	ldr	r2, [pc, #124]	; (8001424 <HAL_DMA_Init+0xb0>)
 80013a6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2202      	movs	r2, #2
 80013ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80013be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80013c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80013cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2201      	movs	r2, #1
 8001404:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	bffdfff8 	.word	0xbffdfff8
 8001420:	cccccccd 	.word	0xcccccccd
 8001424:	40020000 	.word	0x40020000

08001428 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d101      	bne.n	8001448 <HAL_DMA_Start_IT+0x20>
 8001444:	2302      	movs	r3, #2
 8001446:	e04b      	b.n	80014e0 <HAL_DMA_Start_IT+0xb8>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b01      	cmp	r3, #1
 800145a:	d13a      	bne.n	80014d2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2202      	movs	r2, #2
 8001460:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2200      	movs	r2, #0
 8001468:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0201 	bic.w	r2, r2, #1
 8001478:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	68b9      	ldr	r1, [r7, #8]
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f000 f937 	bl	80016f4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148a:	2b00      	cmp	r3, #0
 800148c:	d008      	beq.n	80014a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f042 020e 	orr.w	r2, r2, #14
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	e00f      	b.n	80014c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 0204 	bic.w	r2, r2, #4
 80014ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 020a 	orr.w	r2, r2, #10
 80014be:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f042 0201 	orr.w	r2, r2, #1
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	e005      	b.n	80014de <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80014da:	2302      	movs	r3, #2
 80014dc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80014de:	7dfb      	ldrb	r3, [r7, #23]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	2204      	movs	r2, #4
 8001506:	409a      	lsls	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4013      	ands	r3, r2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d04f      	beq.n	80015b0 <HAL_DMA_IRQHandler+0xc8>
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	2b00      	cmp	r3, #0
 8001518:	d04a      	beq.n	80015b0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0320 	and.w	r3, r3, #32
 8001524:	2b00      	cmp	r3, #0
 8001526:	d107      	bne.n	8001538 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0204 	bic.w	r2, r2, #4
 8001536:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a66      	ldr	r2, [pc, #408]	; (80016d8 <HAL_DMA_IRQHandler+0x1f0>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d029      	beq.n	8001596 <HAL_DMA_IRQHandler+0xae>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a65      	ldr	r2, [pc, #404]	; (80016dc <HAL_DMA_IRQHandler+0x1f4>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d022      	beq.n	8001592 <HAL_DMA_IRQHandler+0xaa>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a63      	ldr	r2, [pc, #396]	; (80016e0 <HAL_DMA_IRQHandler+0x1f8>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d01a      	beq.n	800158c <HAL_DMA_IRQHandler+0xa4>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a62      	ldr	r2, [pc, #392]	; (80016e4 <HAL_DMA_IRQHandler+0x1fc>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d012      	beq.n	8001586 <HAL_DMA_IRQHandler+0x9e>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a60      	ldr	r2, [pc, #384]	; (80016e8 <HAL_DMA_IRQHandler+0x200>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d00a      	beq.n	8001580 <HAL_DMA_IRQHandler+0x98>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a5f      	ldr	r2, [pc, #380]	; (80016ec <HAL_DMA_IRQHandler+0x204>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d102      	bne.n	800157a <HAL_DMA_IRQHandler+0x92>
 8001574:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001578:	e00e      	b.n	8001598 <HAL_DMA_IRQHandler+0xb0>
 800157a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800157e:	e00b      	b.n	8001598 <HAL_DMA_IRQHandler+0xb0>
 8001580:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001584:	e008      	b.n	8001598 <HAL_DMA_IRQHandler+0xb0>
 8001586:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800158a:	e005      	b.n	8001598 <HAL_DMA_IRQHandler+0xb0>
 800158c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001590:	e002      	b.n	8001598 <HAL_DMA_IRQHandler+0xb0>
 8001592:	2340      	movs	r3, #64	; 0x40
 8001594:	e000      	b.n	8001598 <HAL_DMA_IRQHandler+0xb0>
 8001596:	2304      	movs	r3, #4
 8001598:	4a55      	ldr	r2, [pc, #340]	; (80016f0 <HAL_DMA_IRQHandler+0x208>)
 800159a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 8094 	beq.w	80016ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80015ae:	e08e      	b.n	80016ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	2202      	movs	r2, #2
 80015b6:	409a      	lsls	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d056      	beq.n	800166e <HAL_DMA_IRQHandler+0x186>
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d051      	beq.n	800166e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0320 	and.w	r3, r3, #32
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10b      	bne.n	80015f0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 020a 	bic.w	r2, r2, #10
 80015e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a38      	ldr	r2, [pc, #224]	; (80016d8 <HAL_DMA_IRQHandler+0x1f0>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d029      	beq.n	800164e <HAL_DMA_IRQHandler+0x166>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a37      	ldr	r2, [pc, #220]	; (80016dc <HAL_DMA_IRQHandler+0x1f4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d022      	beq.n	800164a <HAL_DMA_IRQHandler+0x162>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a35      	ldr	r2, [pc, #212]	; (80016e0 <HAL_DMA_IRQHandler+0x1f8>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d01a      	beq.n	8001644 <HAL_DMA_IRQHandler+0x15c>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a34      	ldr	r2, [pc, #208]	; (80016e4 <HAL_DMA_IRQHandler+0x1fc>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d012      	beq.n	800163e <HAL_DMA_IRQHandler+0x156>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a32      	ldr	r2, [pc, #200]	; (80016e8 <HAL_DMA_IRQHandler+0x200>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d00a      	beq.n	8001638 <HAL_DMA_IRQHandler+0x150>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a31      	ldr	r2, [pc, #196]	; (80016ec <HAL_DMA_IRQHandler+0x204>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d102      	bne.n	8001632 <HAL_DMA_IRQHandler+0x14a>
 800162c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001630:	e00e      	b.n	8001650 <HAL_DMA_IRQHandler+0x168>
 8001632:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001636:	e00b      	b.n	8001650 <HAL_DMA_IRQHandler+0x168>
 8001638:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800163c:	e008      	b.n	8001650 <HAL_DMA_IRQHandler+0x168>
 800163e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001642:	e005      	b.n	8001650 <HAL_DMA_IRQHandler+0x168>
 8001644:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001648:	e002      	b.n	8001650 <HAL_DMA_IRQHandler+0x168>
 800164a:	2320      	movs	r3, #32
 800164c:	e000      	b.n	8001650 <HAL_DMA_IRQHandler+0x168>
 800164e:	2302      	movs	r3, #2
 8001650:	4a27      	ldr	r2, [pc, #156]	; (80016f0 <HAL_DMA_IRQHandler+0x208>)
 8001652:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001660:	2b00      	cmp	r3, #0
 8001662:	d034      	beq.n	80016ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800166c:	e02f      	b.n	80016ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	2208      	movs	r2, #8
 8001674:	409a      	lsls	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4013      	ands	r3, r2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d028      	beq.n	80016d0 <HAL_DMA_IRQHandler+0x1e8>
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	f003 0308 	and.w	r3, r3, #8
 8001684:	2b00      	cmp	r3, #0
 8001686:	d023      	beq.n	80016d0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 020e 	bic.w	r2, r2, #14
 8001696:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a0:	2101      	movs	r1, #1
 80016a2:	fa01 f202 	lsl.w	r2, r1, r2
 80016a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2201      	movs	r2, #1
 80016b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d004      	beq.n	80016d0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	4798      	blx	r3
    }
  }
  return;
 80016ce:	bf00      	nop
 80016d0:	bf00      	nop
}
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40020008 	.word	0x40020008
 80016dc:	4002001c 	.word	0x4002001c
 80016e0:	40020030 	.word	0x40020030
 80016e4:	40020044 	.word	0x40020044
 80016e8:	40020058 	.word	0x40020058
 80016ec:	4002006c 	.word	0x4002006c
 80016f0:	40020000 	.word	0x40020000

080016f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
 8001700:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800170a:	2101      	movs	r1, #1
 800170c:	fa01 f202 	lsl.w	r2, r1, r2
 8001710:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b10      	cmp	r3, #16
 8001720:	d108      	bne.n	8001734 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001732:	e007      	b.n	8001744 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68ba      	ldr	r2, [r7, #8]
 800173a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	60da      	str	r2, [r3, #12]
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
	...

08001750 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001750:	b480      	push	{r7}
 8001752:	b08b      	sub	sp, #44	; 0x2c
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800175a:	2300      	movs	r3, #0
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001762:	e169      	b.n	8001a38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001764:	2201      	movs	r2, #1
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	69fa      	ldr	r2, [r7, #28]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	429a      	cmp	r2, r3
 800177e:	f040 8158 	bne.w	8001a32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	4a9a      	ldr	r2, [pc, #616]	; (80019f0 <HAL_GPIO_Init+0x2a0>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d05e      	beq.n	800184a <HAL_GPIO_Init+0xfa>
 800178c:	4a98      	ldr	r2, [pc, #608]	; (80019f0 <HAL_GPIO_Init+0x2a0>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d875      	bhi.n	800187e <HAL_GPIO_Init+0x12e>
 8001792:	4a98      	ldr	r2, [pc, #608]	; (80019f4 <HAL_GPIO_Init+0x2a4>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d058      	beq.n	800184a <HAL_GPIO_Init+0xfa>
 8001798:	4a96      	ldr	r2, [pc, #600]	; (80019f4 <HAL_GPIO_Init+0x2a4>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d86f      	bhi.n	800187e <HAL_GPIO_Init+0x12e>
 800179e:	4a96      	ldr	r2, [pc, #600]	; (80019f8 <HAL_GPIO_Init+0x2a8>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d052      	beq.n	800184a <HAL_GPIO_Init+0xfa>
 80017a4:	4a94      	ldr	r2, [pc, #592]	; (80019f8 <HAL_GPIO_Init+0x2a8>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d869      	bhi.n	800187e <HAL_GPIO_Init+0x12e>
 80017aa:	4a94      	ldr	r2, [pc, #592]	; (80019fc <HAL_GPIO_Init+0x2ac>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d04c      	beq.n	800184a <HAL_GPIO_Init+0xfa>
 80017b0:	4a92      	ldr	r2, [pc, #584]	; (80019fc <HAL_GPIO_Init+0x2ac>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d863      	bhi.n	800187e <HAL_GPIO_Init+0x12e>
 80017b6:	4a92      	ldr	r2, [pc, #584]	; (8001a00 <HAL_GPIO_Init+0x2b0>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d046      	beq.n	800184a <HAL_GPIO_Init+0xfa>
 80017bc:	4a90      	ldr	r2, [pc, #576]	; (8001a00 <HAL_GPIO_Init+0x2b0>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d85d      	bhi.n	800187e <HAL_GPIO_Init+0x12e>
 80017c2:	2b12      	cmp	r3, #18
 80017c4:	d82a      	bhi.n	800181c <HAL_GPIO_Init+0xcc>
 80017c6:	2b12      	cmp	r3, #18
 80017c8:	d859      	bhi.n	800187e <HAL_GPIO_Init+0x12e>
 80017ca:	a201      	add	r2, pc, #4	; (adr r2, 80017d0 <HAL_GPIO_Init+0x80>)
 80017cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d0:	0800184b 	.word	0x0800184b
 80017d4:	08001825 	.word	0x08001825
 80017d8:	08001837 	.word	0x08001837
 80017dc:	08001879 	.word	0x08001879
 80017e0:	0800187f 	.word	0x0800187f
 80017e4:	0800187f 	.word	0x0800187f
 80017e8:	0800187f 	.word	0x0800187f
 80017ec:	0800187f 	.word	0x0800187f
 80017f0:	0800187f 	.word	0x0800187f
 80017f4:	0800187f 	.word	0x0800187f
 80017f8:	0800187f 	.word	0x0800187f
 80017fc:	0800187f 	.word	0x0800187f
 8001800:	0800187f 	.word	0x0800187f
 8001804:	0800187f 	.word	0x0800187f
 8001808:	0800187f 	.word	0x0800187f
 800180c:	0800187f 	.word	0x0800187f
 8001810:	0800187f 	.word	0x0800187f
 8001814:	0800182d 	.word	0x0800182d
 8001818:	08001841 	.word	0x08001841
 800181c:	4a79      	ldr	r2, [pc, #484]	; (8001a04 <HAL_GPIO_Init+0x2b4>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d013      	beq.n	800184a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001822:	e02c      	b.n	800187e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	623b      	str	r3, [r7, #32]
          break;
 800182a:	e029      	b.n	8001880 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	3304      	adds	r3, #4
 8001832:	623b      	str	r3, [r7, #32]
          break;
 8001834:	e024      	b.n	8001880 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	3308      	adds	r3, #8
 800183c:	623b      	str	r3, [r7, #32]
          break;
 800183e:	e01f      	b.n	8001880 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	330c      	adds	r3, #12
 8001846:	623b      	str	r3, [r7, #32]
          break;
 8001848:	e01a      	b.n	8001880 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d102      	bne.n	8001858 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001852:	2304      	movs	r3, #4
 8001854:	623b      	str	r3, [r7, #32]
          break;
 8001856:	e013      	b.n	8001880 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d105      	bne.n	800186c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001860:	2308      	movs	r3, #8
 8001862:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69fa      	ldr	r2, [r7, #28]
 8001868:	611a      	str	r2, [r3, #16]
          break;
 800186a:	e009      	b.n	8001880 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800186c:	2308      	movs	r3, #8
 800186e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69fa      	ldr	r2, [r7, #28]
 8001874:	615a      	str	r2, [r3, #20]
          break;
 8001876:	e003      	b.n	8001880 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001878:	2300      	movs	r3, #0
 800187a:	623b      	str	r3, [r7, #32]
          break;
 800187c:	e000      	b.n	8001880 <HAL_GPIO_Init+0x130>
          break;
 800187e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2bff      	cmp	r3, #255	; 0xff
 8001884:	d801      	bhi.n	800188a <HAL_GPIO_Init+0x13a>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	e001      	b.n	800188e <HAL_GPIO_Init+0x13e>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3304      	adds	r3, #4
 800188e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	2bff      	cmp	r3, #255	; 0xff
 8001894:	d802      	bhi.n	800189c <HAL_GPIO_Init+0x14c>
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	e002      	b.n	80018a2 <HAL_GPIO_Init+0x152>
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	3b08      	subs	r3, #8
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	210f      	movs	r1, #15
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	fa01 f303 	lsl.w	r3, r1, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	401a      	ands	r2, r3
 80018b4:	6a39      	ldr	r1, [r7, #32]
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	fa01 f303 	lsl.w	r3, r1, r3
 80018bc:	431a      	orrs	r2, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 80b1 	beq.w	8001a32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018d0:	4b4d      	ldr	r3, [pc, #308]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	4a4c      	ldr	r2, [pc, #304]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6193      	str	r3, [r2, #24]
 80018dc:	4b4a      	ldr	r3, [pc, #296]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018e8:	4a48      	ldr	r2, [pc, #288]	; (8001a0c <HAL_GPIO_Init+0x2bc>)
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	089b      	lsrs	r3, r3, #2
 80018ee:	3302      	adds	r3, #2
 80018f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	220f      	movs	r2, #15
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	4013      	ands	r3, r2
 800190a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a40      	ldr	r2, [pc, #256]	; (8001a10 <HAL_GPIO_Init+0x2c0>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d013      	beq.n	800193c <HAL_GPIO_Init+0x1ec>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a3f      	ldr	r2, [pc, #252]	; (8001a14 <HAL_GPIO_Init+0x2c4>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d00d      	beq.n	8001938 <HAL_GPIO_Init+0x1e8>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a3e      	ldr	r2, [pc, #248]	; (8001a18 <HAL_GPIO_Init+0x2c8>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d007      	beq.n	8001934 <HAL_GPIO_Init+0x1e4>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a3d      	ldr	r2, [pc, #244]	; (8001a1c <HAL_GPIO_Init+0x2cc>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d101      	bne.n	8001930 <HAL_GPIO_Init+0x1e0>
 800192c:	2303      	movs	r3, #3
 800192e:	e006      	b.n	800193e <HAL_GPIO_Init+0x1ee>
 8001930:	2304      	movs	r3, #4
 8001932:	e004      	b.n	800193e <HAL_GPIO_Init+0x1ee>
 8001934:	2302      	movs	r3, #2
 8001936:	e002      	b.n	800193e <HAL_GPIO_Init+0x1ee>
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <HAL_GPIO_Init+0x1ee>
 800193c:	2300      	movs	r3, #0
 800193e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001940:	f002 0203 	and.w	r2, r2, #3
 8001944:	0092      	lsls	r2, r2, #2
 8001946:	4093      	lsls	r3, r2
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	4313      	orrs	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800194e:	492f      	ldr	r1, [pc, #188]	; (8001a0c <HAL_GPIO_Init+0x2bc>)
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	089b      	lsrs	r3, r3, #2
 8001954:	3302      	adds	r3, #2
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d006      	beq.n	8001976 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001968:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	492c      	ldr	r1, [pc, #176]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	608b      	str	r3, [r1, #8]
 8001974:	e006      	b.n	8001984 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001976:	4b2a      	ldr	r3, [pc, #168]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	43db      	mvns	r3, r3
 800197e:	4928      	ldr	r1, [pc, #160]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 8001980:	4013      	ands	r3, r2
 8001982:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d006      	beq.n	800199e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001990:	4b23      	ldr	r3, [pc, #140]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 8001992:	68da      	ldr	r2, [r3, #12]
 8001994:	4922      	ldr	r1, [pc, #136]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	60cb      	str	r3, [r1, #12]
 800199c:	e006      	b.n	80019ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800199e:	4b20      	ldr	r3, [pc, #128]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	491e      	ldr	r1, [pc, #120]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d006      	beq.n	80019c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	4918      	ldr	r1, [pc, #96]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	604b      	str	r3, [r1, #4]
 80019c4:	e006      	b.n	80019d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019c6:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	4914      	ldr	r1, [pc, #80]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d021      	beq.n	8001a24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	490e      	ldr	r1, [pc, #56]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	600b      	str	r3, [r1, #0]
 80019ec:	e021      	b.n	8001a32 <HAL_GPIO_Init+0x2e2>
 80019ee:	bf00      	nop
 80019f0:	10320000 	.word	0x10320000
 80019f4:	10310000 	.word	0x10310000
 80019f8:	10220000 	.word	0x10220000
 80019fc:	10210000 	.word	0x10210000
 8001a00:	10120000 	.word	0x10120000
 8001a04:	10110000 	.word	0x10110000
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40010000 	.word	0x40010000
 8001a10:	40010800 	.word	0x40010800
 8001a14:	40010c00 	.word	0x40010c00
 8001a18:	40011000 	.word	0x40011000
 8001a1c:	40011400 	.word	0x40011400
 8001a20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_GPIO_Init+0x304>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	4909      	ldr	r1, [pc, #36]	; (8001a54 <HAL_GPIO_Init+0x304>)
 8001a2e:	4013      	ands	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	3301      	adds	r3, #1
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f47f ae8e 	bne.w	8001764 <HAL_GPIO_Init+0x14>
  }
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	372c      	adds	r7, #44	; 0x2c
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr
 8001a54:	40010400 	.word	0x40010400

08001a58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e272      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 8087 	beq.w	8001b86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a78:	4b92      	ldr	r3, [pc, #584]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 030c 	and.w	r3, r3, #12
 8001a80:	2b04      	cmp	r3, #4
 8001a82:	d00c      	beq.n	8001a9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a84:	4b8f      	ldr	r3, [pc, #572]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d112      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x5e>
 8001a90:	4b8c      	ldr	r3, [pc, #560]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a9c:	d10b      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9e:	4b89      	ldr	r3, [pc, #548]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d06c      	beq.n	8001b84 <HAL_RCC_OscConfig+0x12c>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d168      	bne.n	8001b84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e24c      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001abe:	d106      	bne.n	8001ace <HAL_RCC_OscConfig+0x76>
 8001ac0:	4b80      	ldr	r3, [pc, #512]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a7f      	ldr	r2, [pc, #508]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	e02e      	b.n	8001b2c <HAL_RCC_OscConfig+0xd4>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x98>
 8001ad6:	4b7b      	ldr	r3, [pc, #492]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a7a      	ldr	r2, [pc, #488]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	4b78      	ldr	r3, [pc, #480]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a77      	ldr	r2, [pc, #476]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	e01d      	b.n	8001b2c <HAL_RCC_OscConfig+0xd4>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001af8:	d10c      	bne.n	8001b14 <HAL_RCC_OscConfig+0xbc>
 8001afa:	4b72      	ldr	r3, [pc, #456]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a71      	ldr	r2, [pc, #452]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	4b6f      	ldr	r3, [pc, #444]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a6e      	ldr	r2, [pc, #440]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e00b      	b.n	8001b2c <HAL_RCC_OscConfig+0xd4>
 8001b14:	4b6b      	ldr	r3, [pc, #428]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a6a      	ldr	r2, [pc, #424]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	4b68      	ldr	r3, [pc, #416]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a67      	ldr	r2, [pc, #412]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d013      	beq.n	8001b5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b34:	f7fe fe8c 	bl	8000850 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b3c:	f7fe fe88 	bl	8000850 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b64      	cmp	r3, #100	; 0x64
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e200      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	4b5d      	ldr	r3, [pc, #372]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0xe4>
 8001b5a:	e014      	b.n	8001b86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7fe fe78 	bl	8000850 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b64:	f7fe fe74 	bl	8000850 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b64      	cmp	r3, #100	; 0x64
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e1ec      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b76:	4b53      	ldr	r3, [pc, #332]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x10c>
 8001b82:	e000      	b.n	8001b86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d063      	beq.n	8001c5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b92:	4b4c      	ldr	r3, [pc, #304]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 030c 	and.w	r3, r3, #12
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00b      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b9e:	4b49      	ldr	r3, [pc, #292]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d11c      	bne.n	8001be4 <HAL_RCC_OscConfig+0x18c>
 8001baa:	4b46      	ldr	r3, [pc, #280]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d116      	bne.n	8001be4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb6:	4b43      	ldr	r3, [pc, #268]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d005      	beq.n	8001bce <HAL_RCC_OscConfig+0x176>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d001      	beq.n	8001bce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e1c0      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bce:	4b3d      	ldr	r3, [pc, #244]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	4939      	ldr	r1, [pc, #228]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be2:	e03a      	b.n	8001c5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d020      	beq.n	8001c2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bec:	4b36      	ldr	r3, [pc, #216]	; (8001cc8 <HAL_RCC_OscConfig+0x270>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf2:	f7fe fe2d 	bl	8000850 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bfa:	f7fe fe29 	bl	8000850 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e1a1      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0c:	4b2d      	ldr	r3, [pc, #180]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c18:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4927      	ldr	r1, [pc, #156]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	600b      	str	r3, [r1, #0]
 8001c2c:	e015      	b.n	8001c5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c2e:	4b26      	ldr	r3, [pc, #152]	; (8001cc8 <HAL_RCC_OscConfig+0x270>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7fe fe0c 	bl	8000850 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c3c:	f7fe fe08 	bl	8000850 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e180      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d03a      	beq.n	8001cdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d019      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c6e:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c74:	f7fe fdec 	bl	8000850 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c7c:	f7fe fde8 	bl	8000850 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e160      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8e:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	f000 face 	bl	800223c <RCC_Delay>
 8001ca0:	e01c      	b.n	8001cdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca8:	f7fe fdd2 	bl	8000850 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cae:	e00f      	b.n	8001cd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb0:	f7fe fdce 	bl	8000850 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d908      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e146      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
 8001cc2:	bf00      	nop
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	42420000 	.word	0x42420000
 8001ccc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd0:	4b92      	ldr	r3, [pc, #584]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1e9      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 80a6 	beq.w	8001e36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cea:	2300      	movs	r3, #0
 8001cec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cee:	4b8b      	ldr	r3, [pc, #556]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10d      	bne.n	8001d16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cfa:	4b88      	ldr	r3, [pc, #544]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	4a87      	ldr	r2, [pc, #540]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d04:	61d3      	str	r3, [r2, #28]
 8001d06:	4b85      	ldr	r3, [pc, #532]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d12:	2301      	movs	r3, #1
 8001d14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d16:	4b82      	ldr	r3, [pc, #520]	; (8001f20 <HAL_RCC_OscConfig+0x4c8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d118      	bne.n	8001d54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d22:	4b7f      	ldr	r3, [pc, #508]	; (8001f20 <HAL_RCC_OscConfig+0x4c8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a7e      	ldr	r2, [pc, #504]	; (8001f20 <HAL_RCC_OscConfig+0x4c8>)
 8001d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d2e:	f7fe fd8f 	bl	8000850 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d36:	f7fe fd8b 	bl	8000850 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b64      	cmp	r3, #100	; 0x64
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e103      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d48:	4b75      	ldr	r3, [pc, #468]	; (8001f20 <HAL_RCC_OscConfig+0x4c8>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0f0      	beq.n	8001d36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d106      	bne.n	8001d6a <HAL_RCC_OscConfig+0x312>
 8001d5c:	4b6f      	ldr	r3, [pc, #444]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	4a6e      	ldr	r2, [pc, #440]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	6213      	str	r3, [r2, #32]
 8001d68:	e02d      	b.n	8001dc6 <HAL_RCC_OscConfig+0x36e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x334>
 8001d72:	4b6a      	ldr	r3, [pc, #424]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	4a69      	ldr	r2, [pc, #420]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	f023 0301 	bic.w	r3, r3, #1
 8001d7c:	6213      	str	r3, [r2, #32]
 8001d7e:	4b67      	ldr	r3, [pc, #412]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	4a66      	ldr	r2, [pc, #408]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	f023 0304 	bic.w	r3, r3, #4
 8001d88:	6213      	str	r3, [r2, #32]
 8001d8a:	e01c      	b.n	8001dc6 <HAL_RCC_OscConfig+0x36e>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	2b05      	cmp	r3, #5
 8001d92:	d10c      	bne.n	8001dae <HAL_RCC_OscConfig+0x356>
 8001d94:	4b61      	ldr	r3, [pc, #388]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	4a60      	ldr	r2, [pc, #384]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001d9a:	f043 0304 	orr.w	r3, r3, #4
 8001d9e:	6213      	str	r3, [r2, #32]
 8001da0:	4b5e      	ldr	r3, [pc, #376]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4a5d      	ldr	r2, [pc, #372]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6213      	str	r3, [r2, #32]
 8001dac:	e00b      	b.n	8001dc6 <HAL_RCC_OscConfig+0x36e>
 8001dae:	4b5b      	ldr	r3, [pc, #364]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	4a5a      	ldr	r2, [pc, #360]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	f023 0301 	bic.w	r3, r3, #1
 8001db8:	6213      	str	r3, [r2, #32]
 8001dba:	4b58      	ldr	r3, [pc, #352]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	4a57      	ldr	r2, [pc, #348]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	f023 0304 	bic.w	r3, r3, #4
 8001dc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d015      	beq.n	8001dfa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dce:	f7fe fd3f 	bl	8000850 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd4:	e00a      	b.n	8001dec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd6:	f7fe fd3b 	bl	8000850 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e0b1      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dec:	4b4b      	ldr	r3, [pc, #300]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0ee      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x37e>
 8001df8:	e014      	b.n	8001e24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfa:	f7fe fd29 	bl	8000850 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e00:	e00a      	b.n	8001e18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e02:	f7fe fd25 	bl	8000850 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e09b      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e18:	4b40      	ldr	r3, [pc, #256]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1ee      	bne.n	8001e02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e24:	7dfb      	ldrb	r3, [r7, #23]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d105      	bne.n	8001e36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e2a:	4b3c      	ldr	r3, [pc, #240]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	4a3b      	ldr	r2, [pc, #236]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 8087 	beq.w	8001f4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e40:	4b36      	ldr	r3, [pc, #216]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 030c 	and.w	r3, r3, #12
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d061      	beq.n	8001f10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d146      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e54:	4b33      	ldr	r3, [pc, #204]	; (8001f24 <HAL_RCC_OscConfig+0x4cc>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5a:	f7fe fcf9 	bl	8000850 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e62:	f7fe fcf5 	bl	8000850 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e06d      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e74:	4b29      	ldr	r3, [pc, #164]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1f0      	bne.n	8001e62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e88:	d108      	bne.n	8001e9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e8a:	4b24      	ldr	r3, [pc, #144]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	4921      	ldr	r1, [pc, #132]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e9c:	4b1f      	ldr	r3, [pc, #124]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a19      	ldr	r1, [r3, #32]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	430b      	orrs	r3, r1
 8001eae:	491b      	ldr	r1, [pc, #108]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eb4:	4b1b      	ldr	r3, [pc, #108]	; (8001f24 <HAL_RCC_OscConfig+0x4cc>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eba:	f7fe fcc9 	bl	8000850 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec2:	f7fe fcc5 	bl	8000850 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e03d      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ed4:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x46a>
 8001ee0:	e035      	b.n	8001f4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee2:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <HAL_RCC_OscConfig+0x4cc>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee8:	f7fe fcb2 	bl	8000850 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef0:	f7fe fcae 	bl	8000850 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e026      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f0      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x498>
 8001f0e:	e01e      	b.n	8001f4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d107      	bne.n	8001f28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e019      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40007000 	.word	0x40007000
 8001f24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <HAL_RCC_OscConfig+0x500>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d106      	bne.n	8001f4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d001      	beq.n	8001f4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000

08001f5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0d0      	b.n	8002112 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f70:	4b6a      	ldr	r3, [pc, #424]	; (800211c <HAL_RCC_ClockConfig+0x1c0>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d910      	bls.n	8001fa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7e:	4b67      	ldr	r3, [pc, #412]	; (800211c <HAL_RCC_ClockConfig+0x1c0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 0207 	bic.w	r2, r3, #7
 8001f86:	4965      	ldr	r1, [pc, #404]	; (800211c <HAL_RCC_ClockConfig+0x1c0>)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8e:	4b63      	ldr	r3, [pc, #396]	; (800211c <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0b8      	b.n	8002112 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d020      	beq.n	8001fee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fb8:	4b59      	ldr	r3, [pc, #356]	; (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	4a58      	ldr	r2, [pc, #352]	; (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0308 	and.w	r3, r3, #8
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fd0:	4b53      	ldr	r3, [pc, #332]	; (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	4a52      	ldr	r2, [pc, #328]	; (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fdc:	4b50      	ldr	r3, [pc, #320]	; (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	494d      	ldr	r1, [pc, #308]	; (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d040      	beq.n	800207c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d107      	bne.n	8002012 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002002:	4b47      	ldr	r3, [pc, #284]	; (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d115      	bne.n	800203a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e07f      	b.n	8002112 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d107      	bne.n	800202a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201a:	4b41      	ldr	r3, [pc, #260]	; (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d109      	bne.n	800203a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e073      	b.n	8002112 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202a:	4b3d      	ldr	r3, [pc, #244]	; (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e06b      	b.n	8002112 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800203a:	4b39      	ldr	r3, [pc, #228]	; (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f023 0203 	bic.w	r2, r3, #3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	4936      	ldr	r1, [pc, #216]	; (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	4313      	orrs	r3, r2
 800204a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800204c:	f7fe fc00 	bl	8000850 <HAL_GetTick>
 8002050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002052:	e00a      	b.n	800206a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002054:	f7fe fbfc 	bl	8000850 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002062:	4293      	cmp	r3, r2
 8002064:	d901      	bls.n	800206a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e053      	b.n	8002112 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206a:	4b2d      	ldr	r3, [pc, #180]	; (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 020c 	and.w	r2, r3, #12
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	429a      	cmp	r2, r3
 800207a:	d1eb      	bne.n	8002054 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800207c:	4b27      	ldr	r3, [pc, #156]	; (800211c <HAL_RCC_ClockConfig+0x1c0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d210      	bcs.n	80020ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b24      	ldr	r3, [pc, #144]	; (800211c <HAL_RCC_ClockConfig+0x1c0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 0207 	bic.w	r2, r3, #7
 8002092:	4922      	ldr	r1, [pc, #136]	; (800211c <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800209a:	4b20      	ldr	r3, [pc, #128]	; (800211c <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e032      	b.n	8002112 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b8:	4b19      	ldr	r3, [pc, #100]	; (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4916      	ldr	r1, [pc, #88]	; (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d009      	beq.n	80020ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020d6:	4b12      	ldr	r3, [pc, #72]	; (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	490e      	ldr	r1, [pc, #56]	; (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020ea:	f000 f821 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 80020ee:	4602      	mov	r2, r0
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	490a      	ldr	r1, [pc, #40]	; (8002124 <HAL_RCC_ClockConfig+0x1c8>)
 80020fc:	5ccb      	ldrb	r3, [r1, r3]
 80020fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002102:	4a09      	ldr	r2, [pc, #36]	; (8002128 <HAL_RCC_ClockConfig+0x1cc>)
 8002104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <HAL_RCC_ClockConfig+0x1d0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe fb5e 	bl	80007cc <HAL_InitTick>

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40022000 	.word	0x40022000
 8002120:	40021000 	.word	0x40021000
 8002124:	08003868 	.word	0x08003868
 8002128:	20000000 	.word	0x20000000
 800212c:	20000004 	.word	0x20000004

08002130 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002130:	b480      	push	{r7}
 8002132:	b087      	sub	sp, #28
 8002134:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800214a:	4b1e      	ldr	r3, [pc, #120]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b04      	cmp	r3, #4
 8002158:	d002      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0x30>
 800215a:	2b08      	cmp	r3, #8
 800215c:	d003      	beq.n	8002166 <HAL_RCC_GetSysClockFreq+0x36>
 800215e:	e027      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002160:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002162:	613b      	str	r3, [r7, #16]
      break;
 8002164:	e027      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	0c9b      	lsrs	r3, r3, #18
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	4a17      	ldr	r2, [pc, #92]	; (80021cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002170:	5cd3      	ldrb	r3, [r2, r3]
 8002172:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d010      	beq.n	80021a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800217e:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	0c5b      	lsrs	r3, r3, #17
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	4a11      	ldr	r2, [pc, #68]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800218a:	5cd3      	ldrb	r3, [r2, r3]
 800218c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a0d      	ldr	r2, [pc, #52]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002192:	fb03 f202 	mul.w	r2, r3, r2
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	fbb2 f3f3 	udiv	r3, r2, r3
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	e004      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a0c      	ldr	r2, [pc, #48]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021a4:	fb02 f303 	mul.w	r3, r2, r3
 80021a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	613b      	str	r3, [r7, #16]
      break;
 80021ae:	e002      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80021b2:	613b      	str	r3, [r7, #16]
      break;
 80021b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021b6:	693b      	ldr	r3, [r7, #16]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	371c      	adds	r7, #28
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000
 80021c8:	007a1200 	.word	0x007a1200
 80021cc:	08003880 	.word	0x08003880
 80021d0:	08003890 	.word	0x08003890
 80021d4:	003d0900 	.word	0x003d0900

080021d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021dc:	4b02      	ldr	r3, [pc, #8]	; (80021e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr
 80021e8:	20000000 	.word	0x20000000

080021ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021f0:	f7ff fff2 	bl	80021d8 <HAL_RCC_GetHCLKFreq>
 80021f4:	4602      	mov	r2, r0
 80021f6:	4b05      	ldr	r3, [pc, #20]	; (800220c <HAL_RCC_GetPCLK1Freq+0x20>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	4903      	ldr	r1, [pc, #12]	; (8002210 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002202:	5ccb      	ldrb	r3, [r1, r3]
 8002204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002208:	4618      	mov	r0, r3
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40021000 	.word	0x40021000
 8002210:	08003878 	.word	0x08003878

08002214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002218:	f7ff ffde 	bl	80021d8 <HAL_RCC_GetHCLKFreq>
 800221c:	4602      	mov	r2, r0
 800221e:	4b05      	ldr	r3, [pc, #20]	; (8002234 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	0adb      	lsrs	r3, r3, #11
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	4903      	ldr	r1, [pc, #12]	; (8002238 <HAL_RCC_GetPCLK2Freq+0x24>)
 800222a:	5ccb      	ldrb	r3, [r1, r3]
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002230:	4618      	mov	r0, r3
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40021000 	.word	0x40021000
 8002238:	08003878 	.word	0x08003878

0800223c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002244:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <RCC_Delay+0x34>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <RCC_Delay+0x38>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	0a5b      	lsrs	r3, r3, #9
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	fb02 f303 	mul.w	r3, r2, r3
 8002256:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002258:	bf00      	nop
  }
  while (Delay --);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1e5a      	subs	r2, r3, #1
 800225e:	60fa      	str	r2, [r7, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f9      	bne.n	8002258 <RCC_Delay+0x1c>
}
 8002264:	bf00      	nop
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr
 8002270:	20000000 	.word	0x20000000
 8002274:	10624dd3 	.word	0x10624dd3

08002278 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	2300      	movs	r3, #0
 8002286:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d07d      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002294:	2300      	movs	r3, #0
 8002296:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002298:	4b4f      	ldr	r3, [pc, #316]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10d      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a4:	4b4c      	ldr	r3, [pc, #304]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	4a4b      	ldr	r2, [pc, #300]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ae:	61d3      	str	r3, [r2, #28]
 80022b0:	4b49      	ldr	r3, [pc, #292]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022bc:	2301      	movs	r3, #1
 80022be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c0:	4b46      	ldr	r3, [pc, #280]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d118      	bne.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022cc:	4b43      	ldr	r3, [pc, #268]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a42      	ldr	r2, [pc, #264]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d8:	f7fe faba 	bl	8000850 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022de:	e008      	b.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e0:	f7fe fab6 	bl	8000850 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b64      	cmp	r3, #100	; 0x64
 80022ec:	d901      	bls.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e06d      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f2:	4b3a      	ldr	r3, [pc, #232]	; (80023dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022fe:	4b36      	ldr	r3, [pc, #216]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002306:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d02e      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	429a      	cmp	r2, r3
 800231a:	d027      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800231c:	4b2e      	ldr	r3, [pc, #184]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002324:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002326:	4b2e      	ldr	r3, [pc, #184]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002328:	2201      	movs	r2, #1
 800232a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800232c:	4b2c      	ldr	r3, [pc, #176]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002332:	4a29      	ldr	r2, [pc, #164]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d014      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002342:	f7fe fa85 	bl	8000850 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002348:	e00a      	b.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234a:	f7fe fa81 	bl	8000850 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	f241 3288 	movw	r2, #5000	; 0x1388
 8002358:	4293      	cmp	r3, r2
 800235a:	d901      	bls.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e036      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002360:	4b1d      	ldr	r3, [pc, #116]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0ee      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800236c:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	4917      	ldr	r1, [pc, #92]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800237a:	4313      	orrs	r3, r2
 800237c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800237e:	7dfb      	ldrb	r3, [r7, #23]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d105      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002384:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	4a13      	ldr	r2, [pc, #76]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800238a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800238e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800239c:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	490b      	ldr	r1, [pc, #44]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d008      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023ba:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	4904      	ldr	r1, [pc, #16]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40007000 	.word	0x40007000
 80023e0:	42420440 	.word	0x42420440

080023e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	2300      	movs	r3, #0
 80023f2:	61fb      	str	r3, [r7, #28]
 80023f4:	2300      	movs	r3, #0
 80023f6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	2300      	movs	r3, #0
 80023fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b10      	cmp	r3, #16
 8002404:	d00a      	beq.n	800241c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b10      	cmp	r3, #16
 800240a:	f200 808a 	bhi.w	8002522 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d045      	beq.n	80024a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d075      	beq.n	8002506 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800241a:	e082      	b.n	8002522 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800241c:	4b46      	ldr	r3, [pc, #280]	; (8002538 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002422:	4b45      	ldr	r3, [pc, #276]	; (8002538 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d07b      	beq.n	8002526 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	0c9b      	lsrs	r3, r3, #18
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	4a41      	ldr	r2, [pc, #260]	; (800253c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002438:	5cd3      	ldrb	r3, [r2, r3]
 800243a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d015      	beq.n	8002472 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002446:	4b3c      	ldr	r3, [pc, #240]	; (8002538 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	0c5b      	lsrs	r3, r3, #17
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	4a3b      	ldr	r2, [pc, #236]	; (8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002452:	5cd3      	ldrb	r3, [r2, r3]
 8002454:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00d      	beq.n	800247c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002460:	4a38      	ldr	r2, [pc, #224]	; (8002544 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	fbb2 f2f3 	udiv	r2, r2, r3
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	fb02 f303 	mul.w	r3, r2, r3
 800246e:	61fb      	str	r3, [r7, #28]
 8002470:	e004      	b.n	800247c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4a34      	ldr	r2, [pc, #208]	; (8002548 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002476:	fb02 f303 	mul.w	r3, r2, r3
 800247a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800247c:	4b2e      	ldr	r3, [pc, #184]	; (8002538 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002488:	d102      	bne.n	8002490 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	61bb      	str	r3, [r7, #24]
      break;
 800248e:	e04a      	b.n	8002526 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	4a2d      	ldr	r2, [pc, #180]	; (800254c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	085b      	lsrs	r3, r3, #1
 800249c:	61bb      	str	r3, [r7, #24]
      break;
 800249e:	e042      	b.n	8002526 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80024a0:	4b25      	ldr	r3, [pc, #148]	; (8002538 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024b0:	d108      	bne.n	80024c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80024bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024c0:	61bb      	str	r3, [r7, #24]
 80024c2:	e01f      	b.n	8002504 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024ce:	d109      	bne.n	80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80024d0:	4b19      	ldr	r3, [pc, #100]	; (8002538 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80024dc:	f649 4340 	movw	r3, #40000	; 0x9c40
 80024e0:	61bb      	str	r3, [r7, #24]
 80024e2:	e00f      	b.n	8002504 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024ee:	d11c      	bne.n	800252a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80024f0:	4b11      	ldr	r3, [pc, #68]	; (8002538 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d016      	beq.n	800252a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80024fc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002500:	61bb      	str	r3, [r7, #24]
      break;
 8002502:	e012      	b.n	800252a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002504:	e011      	b.n	800252a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002506:	f7ff fe85 	bl	8002214 <HAL_RCC_GetPCLK2Freq>
 800250a:	4602      	mov	r2, r0
 800250c:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	0b9b      	lsrs	r3, r3, #14
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	3301      	adds	r3, #1
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	fbb2 f3f3 	udiv	r3, r2, r3
 800251e:	61bb      	str	r3, [r7, #24]
      break;
 8002520:	e004      	b.n	800252c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002522:	bf00      	nop
 8002524:	e002      	b.n	800252c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002526:	bf00      	nop
 8002528:	e000      	b.n	800252c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800252a:	bf00      	nop
    }
  }
  return (frequency);
 800252c:	69bb      	ldr	r3, [r7, #24]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3720      	adds	r7, #32
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40021000 	.word	0x40021000
 800253c:	08003894 	.word	0x08003894
 8002540:	080038a4 	.word	0x080038a4
 8002544:	007a1200 	.word	0x007a1200
 8002548:	003d0900 	.word	0x003d0900
 800254c:	aaaaaaab 	.word	0xaaaaaaab

08002550 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e042      	b.n	80025e8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d106      	bne.n	800257c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7fd ff9e 	bl	80004b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2224      	movs	r2, #36	; 0x24
 8002580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002592:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 f91d 	bl	80027d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	691a      	ldr	r2, [r3, #16]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	695a      	ldr	r2, [r3, #20]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2220      	movs	r2, #32
 80025d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08a      	sub	sp, #40	; 0x28
 80025f4:	af02      	add	r7, sp, #8
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	4613      	mov	r3, r2
 80025fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b20      	cmp	r3, #32
 800260e:	d16d      	bne.n	80026ec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <HAL_UART_Transmit+0x2c>
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e066      	b.n	80026ee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2221      	movs	r2, #33	; 0x21
 800262a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800262e:	f7fe f90f 	bl	8000850 <HAL_GetTick>
 8002632:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	88fa      	ldrh	r2, [r7, #6]
 8002638:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	88fa      	ldrh	r2, [r7, #6]
 800263e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002648:	d108      	bne.n	800265c <HAL_UART_Transmit+0x6c>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d104      	bne.n	800265c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	e003      	b.n	8002664 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002660:	2300      	movs	r3, #0
 8002662:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002664:	e02a      	b.n	80026bc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2200      	movs	r2, #0
 800266e:	2180      	movs	r1, #128	; 0x80
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 f840 	bl	80026f6 <UART_WaitOnFlagUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e036      	b.n	80026ee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10b      	bne.n	800269e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002694:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	3302      	adds	r3, #2
 800269a:	61bb      	str	r3, [r7, #24]
 800269c:	e007      	b.n	80026ae <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	781a      	ldrb	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	3301      	adds	r3, #1
 80026ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	3b01      	subs	r3, #1
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1cf      	bne.n	8002666 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2200      	movs	r2, #0
 80026ce:	2140      	movs	r1, #64	; 0x40
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f810 	bl	80026f6 <UART_WaitOnFlagUntilTimeout>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e006      	b.n	80026ee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	e000      	b.n	80026ee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80026ec:	2302      	movs	r3, #2
  }
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3720      	adds	r7, #32
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b090      	sub	sp, #64	; 0x40
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	603b      	str	r3, [r7, #0]
 8002702:	4613      	mov	r3, r2
 8002704:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002706:	e050      	b.n	80027aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800270a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270e:	d04c      	beq.n	80027aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002712:	2b00      	cmp	r3, #0
 8002714:	d007      	beq.n	8002726 <UART_WaitOnFlagUntilTimeout+0x30>
 8002716:	f7fe f89b 	bl	8000850 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002722:	429a      	cmp	r2, r3
 8002724:	d241      	bcs.n	80027aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	330c      	adds	r3, #12
 800272c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800272e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002730:	e853 3f00 	ldrex	r3, [r3]
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800273c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	330c      	adds	r3, #12
 8002744:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002746:	637a      	str	r2, [r7, #52]	; 0x34
 8002748:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800274a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800274c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800274e:	e841 2300 	strex	r3, r2, [r1]
 8002752:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1e5      	bne.n	8002726 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	3314      	adds	r3, #20
 8002760:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	e853 3f00 	ldrex	r3, [r3]
 8002768:	613b      	str	r3, [r7, #16]
   return(result);
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	f023 0301 	bic.w	r3, r3, #1
 8002770:	63bb      	str	r3, [r7, #56]	; 0x38
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	3314      	adds	r3, #20
 8002778:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800277a:	623a      	str	r2, [r7, #32]
 800277c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800277e:	69f9      	ldr	r1, [r7, #28]
 8002780:	6a3a      	ldr	r2, [r7, #32]
 8002782:	e841 2300 	strex	r3, r2, [r1]
 8002786:	61bb      	str	r3, [r7, #24]
   return(result);
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1e5      	bne.n	800275a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2220      	movs	r2, #32
 8002792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2220      	movs	r2, #32
 800279a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e00f      	b.n	80027ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	4013      	ands	r3, r2
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	bf0c      	ite	eq
 80027ba:	2301      	moveq	r3, #1
 80027bc:	2300      	movne	r3, #0
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	461a      	mov	r2, r3
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d09f      	beq.n	8002708 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3740      	adds	r7, #64	; 0x40
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	4313      	orrs	r3, r2
 8002802:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800280e:	f023 030c 	bic.w	r3, r3, #12
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	68b9      	ldr	r1, [r7, #8]
 8002818:	430b      	orrs	r3, r1
 800281a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a2c      	ldr	r2, [pc, #176]	; (80028e8 <UART_SetConfig+0x114>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d103      	bne.n	8002844 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800283c:	f7ff fcea 	bl	8002214 <HAL_RCC_GetPCLK2Freq>
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	e002      	b.n	800284a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002844:	f7ff fcd2 	bl	80021ec <HAL_RCC_GetPCLK1Freq>
 8002848:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	009a      	lsls	r2, r3, #2
 8002854:	441a      	add	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002860:	4a22      	ldr	r2, [pc, #136]	; (80028ec <UART_SetConfig+0x118>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	0119      	lsls	r1, r3, #4
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	009a      	lsls	r2, r3, #2
 8002874:	441a      	add	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002880:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <UART_SetConfig+0x118>)
 8002882:	fba3 0302 	umull	r0, r3, r3, r2
 8002886:	095b      	lsrs	r3, r3, #5
 8002888:	2064      	movs	r0, #100	; 0x64
 800288a:	fb00 f303 	mul.w	r3, r0, r3
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	3332      	adds	r3, #50	; 0x32
 8002894:	4a15      	ldr	r2, [pc, #84]	; (80028ec <UART_SetConfig+0x118>)
 8002896:	fba2 2303 	umull	r2, r3, r2, r3
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028a0:	4419      	add	r1, r3
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	4613      	mov	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	009a      	lsls	r2, r3, #2
 80028ac:	441a      	add	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80028b8:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <UART_SetConfig+0x118>)
 80028ba:	fba3 0302 	umull	r0, r3, r3, r2
 80028be:	095b      	lsrs	r3, r3, #5
 80028c0:	2064      	movs	r0, #100	; 0x64
 80028c2:	fb00 f303 	mul.w	r3, r0, r3
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	3332      	adds	r3, #50	; 0x32
 80028cc:	4a07      	ldr	r2, [pc, #28]	; (80028ec <UART_SetConfig+0x118>)
 80028ce:	fba2 2303 	umull	r2, r3, r2, r3
 80028d2:	095b      	lsrs	r3, r3, #5
 80028d4:	f003 020f 	and.w	r2, r3, #15
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	440a      	add	r2, r1
 80028de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80028e0:	bf00      	nop
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40013800 	.word	0x40013800
 80028ec:	51eb851f 	.word	0x51eb851f

080028f0 <std>:
 80028f0:	2300      	movs	r3, #0
 80028f2:	b510      	push	{r4, lr}
 80028f4:	4604      	mov	r4, r0
 80028f6:	e9c0 3300 	strd	r3, r3, [r0]
 80028fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80028fe:	6083      	str	r3, [r0, #8]
 8002900:	8181      	strh	r1, [r0, #12]
 8002902:	6643      	str	r3, [r0, #100]	; 0x64
 8002904:	81c2      	strh	r2, [r0, #14]
 8002906:	6183      	str	r3, [r0, #24]
 8002908:	4619      	mov	r1, r3
 800290a:	2208      	movs	r2, #8
 800290c:	305c      	adds	r0, #92	; 0x5c
 800290e:	f000 f9e5 	bl	8002cdc <memset>
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <std+0x38>)
 8002914:	6224      	str	r4, [r4, #32]
 8002916:	6263      	str	r3, [r4, #36]	; 0x24
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <std+0x3c>)
 800291a:	62a3      	str	r3, [r4, #40]	; 0x28
 800291c:	4b04      	ldr	r3, [pc, #16]	; (8002930 <std+0x40>)
 800291e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002920:	4b04      	ldr	r3, [pc, #16]	; (8002934 <std+0x44>)
 8002922:	6323      	str	r3, [r4, #48]	; 0x30
 8002924:	bd10      	pop	{r4, pc}
 8002926:	bf00      	nop
 8002928:	08002b2d 	.word	0x08002b2d
 800292c:	08002b4f 	.word	0x08002b4f
 8002930:	08002b87 	.word	0x08002b87
 8002934:	08002bab 	.word	0x08002bab

08002938 <stdio_exit_handler>:
 8002938:	4a02      	ldr	r2, [pc, #8]	; (8002944 <stdio_exit_handler+0xc>)
 800293a:	4903      	ldr	r1, [pc, #12]	; (8002948 <stdio_exit_handler+0x10>)
 800293c:	4803      	ldr	r0, [pc, #12]	; (800294c <stdio_exit_handler+0x14>)
 800293e:	f000 b869 	b.w	8002a14 <_fwalk_sglue>
 8002942:	bf00      	nop
 8002944:	2000000c 	.word	0x2000000c
 8002948:	08003669 	.word	0x08003669
 800294c:	20000018 	.word	0x20000018

08002950 <cleanup_stdio>:
 8002950:	6841      	ldr	r1, [r0, #4]
 8002952:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <cleanup_stdio+0x34>)
 8002954:	b510      	push	{r4, lr}
 8002956:	4299      	cmp	r1, r3
 8002958:	4604      	mov	r4, r0
 800295a:	d001      	beq.n	8002960 <cleanup_stdio+0x10>
 800295c:	f000 fe84 	bl	8003668 <_fflush_r>
 8002960:	68a1      	ldr	r1, [r4, #8]
 8002962:	4b09      	ldr	r3, [pc, #36]	; (8002988 <cleanup_stdio+0x38>)
 8002964:	4299      	cmp	r1, r3
 8002966:	d002      	beq.n	800296e <cleanup_stdio+0x1e>
 8002968:	4620      	mov	r0, r4
 800296a:	f000 fe7d 	bl	8003668 <_fflush_r>
 800296e:	68e1      	ldr	r1, [r4, #12]
 8002970:	4b06      	ldr	r3, [pc, #24]	; (800298c <cleanup_stdio+0x3c>)
 8002972:	4299      	cmp	r1, r3
 8002974:	d004      	beq.n	8002980 <cleanup_stdio+0x30>
 8002976:	4620      	mov	r0, r4
 8002978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800297c:	f000 be74 	b.w	8003668 <_fflush_r>
 8002980:	bd10      	pop	{r4, pc}
 8002982:	bf00      	nop
 8002984:	20000150 	.word	0x20000150
 8002988:	200001b8 	.word	0x200001b8
 800298c:	20000220 	.word	0x20000220

08002990 <global_stdio_init.part.0>:
 8002990:	b510      	push	{r4, lr}
 8002992:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <global_stdio_init.part.0+0x30>)
 8002994:	4c0b      	ldr	r4, [pc, #44]	; (80029c4 <global_stdio_init.part.0+0x34>)
 8002996:	4a0c      	ldr	r2, [pc, #48]	; (80029c8 <global_stdio_init.part.0+0x38>)
 8002998:	4620      	mov	r0, r4
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	2104      	movs	r1, #4
 800299e:	2200      	movs	r2, #0
 80029a0:	f7ff ffa6 	bl	80028f0 <std>
 80029a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80029a8:	2201      	movs	r2, #1
 80029aa:	2109      	movs	r1, #9
 80029ac:	f7ff ffa0 	bl	80028f0 <std>
 80029b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80029b4:	2202      	movs	r2, #2
 80029b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029ba:	2112      	movs	r1, #18
 80029bc:	f7ff bf98 	b.w	80028f0 <std>
 80029c0:	20000288 	.word	0x20000288
 80029c4:	20000150 	.word	0x20000150
 80029c8:	08002939 	.word	0x08002939

080029cc <__sfp_lock_acquire>:
 80029cc:	4801      	ldr	r0, [pc, #4]	; (80029d4 <__sfp_lock_acquire+0x8>)
 80029ce:	f000 b9fd 	b.w	8002dcc <__retarget_lock_acquire_recursive>
 80029d2:	bf00      	nop
 80029d4:	20000291 	.word	0x20000291

080029d8 <__sfp_lock_release>:
 80029d8:	4801      	ldr	r0, [pc, #4]	; (80029e0 <__sfp_lock_release+0x8>)
 80029da:	f000 b9f8 	b.w	8002dce <__retarget_lock_release_recursive>
 80029de:	bf00      	nop
 80029e0:	20000291 	.word	0x20000291

080029e4 <__sinit>:
 80029e4:	b510      	push	{r4, lr}
 80029e6:	4604      	mov	r4, r0
 80029e8:	f7ff fff0 	bl	80029cc <__sfp_lock_acquire>
 80029ec:	6a23      	ldr	r3, [r4, #32]
 80029ee:	b11b      	cbz	r3, 80029f8 <__sinit+0x14>
 80029f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029f4:	f7ff bff0 	b.w	80029d8 <__sfp_lock_release>
 80029f8:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <__sinit+0x28>)
 80029fa:	6223      	str	r3, [r4, #32]
 80029fc:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <__sinit+0x2c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f5      	bne.n	80029f0 <__sinit+0xc>
 8002a04:	f7ff ffc4 	bl	8002990 <global_stdio_init.part.0>
 8002a08:	e7f2      	b.n	80029f0 <__sinit+0xc>
 8002a0a:	bf00      	nop
 8002a0c:	08002951 	.word	0x08002951
 8002a10:	20000288 	.word	0x20000288

08002a14 <_fwalk_sglue>:
 8002a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a18:	4607      	mov	r7, r0
 8002a1a:	4688      	mov	r8, r1
 8002a1c:	4614      	mov	r4, r2
 8002a1e:	2600      	movs	r6, #0
 8002a20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002a24:	f1b9 0901 	subs.w	r9, r9, #1
 8002a28:	d505      	bpl.n	8002a36 <_fwalk_sglue+0x22>
 8002a2a:	6824      	ldr	r4, [r4, #0]
 8002a2c:	2c00      	cmp	r4, #0
 8002a2e:	d1f7      	bne.n	8002a20 <_fwalk_sglue+0xc>
 8002a30:	4630      	mov	r0, r6
 8002a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a36:	89ab      	ldrh	r3, [r5, #12]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d907      	bls.n	8002a4c <_fwalk_sglue+0x38>
 8002a3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a40:	3301      	adds	r3, #1
 8002a42:	d003      	beq.n	8002a4c <_fwalk_sglue+0x38>
 8002a44:	4629      	mov	r1, r5
 8002a46:	4638      	mov	r0, r7
 8002a48:	47c0      	blx	r8
 8002a4a:	4306      	orrs	r6, r0
 8002a4c:	3568      	adds	r5, #104	; 0x68
 8002a4e:	e7e9      	b.n	8002a24 <_fwalk_sglue+0x10>

08002a50 <iprintf>:
 8002a50:	b40f      	push	{r0, r1, r2, r3}
 8002a52:	b507      	push	{r0, r1, r2, lr}
 8002a54:	4906      	ldr	r1, [pc, #24]	; (8002a70 <iprintf+0x20>)
 8002a56:	ab04      	add	r3, sp, #16
 8002a58:	6808      	ldr	r0, [r1, #0]
 8002a5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a5e:	6881      	ldr	r1, [r0, #8]
 8002a60:	9301      	str	r3, [sp, #4]
 8002a62:	f000 fad1 	bl	8003008 <_vfiprintf_r>
 8002a66:	b003      	add	sp, #12
 8002a68:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a6c:	b004      	add	sp, #16
 8002a6e:	4770      	bx	lr
 8002a70:	20000064 	.word	0x20000064

08002a74 <_puts_r>:
 8002a74:	6a03      	ldr	r3, [r0, #32]
 8002a76:	b570      	push	{r4, r5, r6, lr}
 8002a78:	4605      	mov	r5, r0
 8002a7a:	460e      	mov	r6, r1
 8002a7c:	6884      	ldr	r4, [r0, #8]
 8002a7e:	b90b      	cbnz	r3, 8002a84 <_puts_r+0x10>
 8002a80:	f7ff ffb0 	bl	80029e4 <__sinit>
 8002a84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a86:	07db      	lsls	r3, r3, #31
 8002a88:	d405      	bmi.n	8002a96 <_puts_r+0x22>
 8002a8a:	89a3      	ldrh	r3, [r4, #12]
 8002a8c:	0598      	lsls	r0, r3, #22
 8002a8e:	d402      	bmi.n	8002a96 <_puts_r+0x22>
 8002a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a92:	f000 f99b 	bl	8002dcc <__retarget_lock_acquire_recursive>
 8002a96:	89a3      	ldrh	r3, [r4, #12]
 8002a98:	0719      	lsls	r1, r3, #28
 8002a9a:	d513      	bpl.n	8002ac4 <_puts_r+0x50>
 8002a9c:	6923      	ldr	r3, [r4, #16]
 8002a9e:	b18b      	cbz	r3, 8002ac4 <_puts_r+0x50>
 8002aa0:	3e01      	subs	r6, #1
 8002aa2:	68a3      	ldr	r3, [r4, #8]
 8002aa4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	60a3      	str	r3, [r4, #8]
 8002aac:	b9e9      	cbnz	r1, 8002aea <_puts_r+0x76>
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	da2e      	bge.n	8002b10 <_puts_r+0x9c>
 8002ab2:	4622      	mov	r2, r4
 8002ab4:	210a      	movs	r1, #10
 8002ab6:	4628      	mov	r0, r5
 8002ab8:	f000 f87b 	bl	8002bb2 <__swbuf_r>
 8002abc:	3001      	adds	r0, #1
 8002abe:	d007      	beq.n	8002ad0 <_puts_r+0x5c>
 8002ac0:	250a      	movs	r5, #10
 8002ac2:	e007      	b.n	8002ad4 <_puts_r+0x60>
 8002ac4:	4621      	mov	r1, r4
 8002ac6:	4628      	mov	r0, r5
 8002ac8:	f000 f8b0 	bl	8002c2c <__swsetup_r>
 8002acc:	2800      	cmp	r0, #0
 8002ace:	d0e7      	beq.n	8002aa0 <_puts_r+0x2c>
 8002ad0:	f04f 35ff 	mov.w	r5, #4294967295
 8002ad4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ad6:	07da      	lsls	r2, r3, #31
 8002ad8:	d405      	bmi.n	8002ae6 <_puts_r+0x72>
 8002ada:	89a3      	ldrh	r3, [r4, #12]
 8002adc:	059b      	lsls	r3, r3, #22
 8002ade:	d402      	bmi.n	8002ae6 <_puts_r+0x72>
 8002ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ae2:	f000 f974 	bl	8002dce <__retarget_lock_release_recursive>
 8002ae6:	4628      	mov	r0, r5
 8002ae8:	bd70      	pop	{r4, r5, r6, pc}
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	da04      	bge.n	8002af8 <_puts_r+0x84>
 8002aee:	69a2      	ldr	r2, [r4, #24]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	dc06      	bgt.n	8002b02 <_puts_r+0x8e>
 8002af4:	290a      	cmp	r1, #10
 8002af6:	d004      	beq.n	8002b02 <_puts_r+0x8e>
 8002af8:	6823      	ldr	r3, [r4, #0]
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	6022      	str	r2, [r4, #0]
 8002afe:	7019      	strb	r1, [r3, #0]
 8002b00:	e7cf      	b.n	8002aa2 <_puts_r+0x2e>
 8002b02:	4622      	mov	r2, r4
 8002b04:	4628      	mov	r0, r5
 8002b06:	f000 f854 	bl	8002bb2 <__swbuf_r>
 8002b0a:	3001      	adds	r0, #1
 8002b0c:	d1c9      	bne.n	8002aa2 <_puts_r+0x2e>
 8002b0e:	e7df      	b.n	8002ad0 <_puts_r+0x5c>
 8002b10:	250a      	movs	r5, #10
 8002b12:	6823      	ldr	r3, [r4, #0]
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	6022      	str	r2, [r4, #0]
 8002b18:	701d      	strb	r5, [r3, #0]
 8002b1a:	e7db      	b.n	8002ad4 <_puts_r+0x60>

08002b1c <puts>:
 8002b1c:	4b02      	ldr	r3, [pc, #8]	; (8002b28 <puts+0xc>)
 8002b1e:	4601      	mov	r1, r0
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	f7ff bfa7 	b.w	8002a74 <_puts_r>
 8002b26:	bf00      	nop
 8002b28:	20000064 	.word	0x20000064

08002b2c <__sread>:
 8002b2c:	b510      	push	{r4, lr}
 8002b2e:	460c      	mov	r4, r1
 8002b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b34:	f000 f8fc 	bl	8002d30 <_read_r>
 8002b38:	2800      	cmp	r0, #0
 8002b3a:	bfab      	itete	ge
 8002b3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002b3e:	89a3      	ldrhlt	r3, [r4, #12]
 8002b40:	181b      	addge	r3, r3, r0
 8002b42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002b46:	bfac      	ite	ge
 8002b48:	6563      	strge	r3, [r4, #84]	; 0x54
 8002b4a:	81a3      	strhlt	r3, [r4, #12]
 8002b4c:	bd10      	pop	{r4, pc}

08002b4e <__swrite>:
 8002b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b52:	461f      	mov	r7, r3
 8002b54:	898b      	ldrh	r3, [r1, #12]
 8002b56:	4605      	mov	r5, r0
 8002b58:	05db      	lsls	r3, r3, #23
 8002b5a:	460c      	mov	r4, r1
 8002b5c:	4616      	mov	r6, r2
 8002b5e:	d505      	bpl.n	8002b6c <__swrite+0x1e>
 8002b60:	2302      	movs	r3, #2
 8002b62:	2200      	movs	r2, #0
 8002b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b68:	f000 f8d0 	bl	8002d0c <_lseek_r>
 8002b6c:	89a3      	ldrh	r3, [r4, #12]
 8002b6e:	4632      	mov	r2, r6
 8002b70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b74:	81a3      	strh	r3, [r4, #12]
 8002b76:	4628      	mov	r0, r5
 8002b78:	463b      	mov	r3, r7
 8002b7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b82:	f000 b8e7 	b.w	8002d54 <_write_r>

08002b86 <__sseek>:
 8002b86:	b510      	push	{r4, lr}
 8002b88:	460c      	mov	r4, r1
 8002b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b8e:	f000 f8bd 	bl	8002d0c <_lseek_r>
 8002b92:	1c43      	adds	r3, r0, #1
 8002b94:	89a3      	ldrh	r3, [r4, #12]
 8002b96:	bf15      	itete	ne
 8002b98:	6560      	strne	r0, [r4, #84]	; 0x54
 8002b9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002b9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002ba2:	81a3      	strheq	r3, [r4, #12]
 8002ba4:	bf18      	it	ne
 8002ba6:	81a3      	strhne	r3, [r4, #12]
 8002ba8:	bd10      	pop	{r4, pc}

08002baa <__sclose>:
 8002baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bae:	f000 b89d 	b.w	8002cec <_close_r>

08002bb2 <__swbuf_r>:
 8002bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb4:	460e      	mov	r6, r1
 8002bb6:	4614      	mov	r4, r2
 8002bb8:	4605      	mov	r5, r0
 8002bba:	b118      	cbz	r0, 8002bc4 <__swbuf_r+0x12>
 8002bbc:	6a03      	ldr	r3, [r0, #32]
 8002bbe:	b90b      	cbnz	r3, 8002bc4 <__swbuf_r+0x12>
 8002bc0:	f7ff ff10 	bl	80029e4 <__sinit>
 8002bc4:	69a3      	ldr	r3, [r4, #24]
 8002bc6:	60a3      	str	r3, [r4, #8]
 8002bc8:	89a3      	ldrh	r3, [r4, #12]
 8002bca:	071a      	lsls	r2, r3, #28
 8002bcc:	d525      	bpl.n	8002c1a <__swbuf_r+0x68>
 8002bce:	6923      	ldr	r3, [r4, #16]
 8002bd0:	b31b      	cbz	r3, 8002c1a <__swbuf_r+0x68>
 8002bd2:	6823      	ldr	r3, [r4, #0]
 8002bd4:	6922      	ldr	r2, [r4, #16]
 8002bd6:	b2f6      	uxtb	r6, r6
 8002bd8:	1a98      	subs	r0, r3, r2
 8002bda:	6963      	ldr	r3, [r4, #20]
 8002bdc:	4637      	mov	r7, r6
 8002bde:	4283      	cmp	r3, r0
 8002be0:	dc04      	bgt.n	8002bec <__swbuf_r+0x3a>
 8002be2:	4621      	mov	r1, r4
 8002be4:	4628      	mov	r0, r5
 8002be6:	f000 fd3f 	bl	8003668 <_fflush_r>
 8002bea:	b9e0      	cbnz	r0, 8002c26 <__swbuf_r+0x74>
 8002bec:	68a3      	ldr	r3, [r4, #8]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	60a3      	str	r3, [r4, #8]
 8002bf2:	6823      	ldr	r3, [r4, #0]
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	6022      	str	r2, [r4, #0]
 8002bf8:	701e      	strb	r6, [r3, #0]
 8002bfa:	6962      	ldr	r2, [r4, #20]
 8002bfc:	1c43      	adds	r3, r0, #1
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d004      	beq.n	8002c0c <__swbuf_r+0x5a>
 8002c02:	89a3      	ldrh	r3, [r4, #12]
 8002c04:	07db      	lsls	r3, r3, #31
 8002c06:	d506      	bpl.n	8002c16 <__swbuf_r+0x64>
 8002c08:	2e0a      	cmp	r6, #10
 8002c0a:	d104      	bne.n	8002c16 <__swbuf_r+0x64>
 8002c0c:	4621      	mov	r1, r4
 8002c0e:	4628      	mov	r0, r5
 8002c10:	f000 fd2a 	bl	8003668 <_fflush_r>
 8002c14:	b938      	cbnz	r0, 8002c26 <__swbuf_r+0x74>
 8002c16:	4638      	mov	r0, r7
 8002c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c1a:	4621      	mov	r1, r4
 8002c1c:	4628      	mov	r0, r5
 8002c1e:	f000 f805 	bl	8002c2c <__swsetup_r>
 8002c22:	2800      	cmp	r0, #0
 8002c24:	d0d5      	beq.n	8002bd2 <__swbuf_r+0x20>
 8002c26:	f04f 37ff 	mov.w	r7, #4294967295
 8002c2a:	e7f4      	b.n	8002c16 <__swbuf_r+0x64>

08002c2c <__swsetup_r>:
 8002c2c:	b538      	push	{r3, r4, r5, lr}
 8002c2e:	4b2a      	ldr	r3, [pc, #168]	; (8002cd8 <__swsetup_r+0xac>)
 8002c30:	4605      	mov	r5, r0
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	460c      	mov	r4, r1
 8002c36:	b118      	cbz	r0, 8002c40 <__swsetup_r+0x14>
 8002c38:	6a03      	ldr	r3, [r0, #32]
 8002c3a:	b90b      	cbnz	r3, 8002c40 <__swsetup_r+0x14>
 8002c3c:	f7ff fed2 	bl	80029e4 <__sinit>
 8002c40:	89a3      	ldrh	r3, [r4, #12]
 8002c42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c46:	0718      	lsls	r0, r3, #28
 8002c48:	d422      	bmi.n	8002c90 <__swsetup_r+0x64>
 8002c4a:	06d9      	lsls	r1, r3, #27
 8002c4c:	d407      	bmi.n	8002c5e <__swsetup_r+0x32>
 8002c4e:	2309      	movs	r3, #9
 8002c50:	602b      	str	r3, [r5, #0]
 8002c52:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002c56:	f04f 30ff 	mov.w	r0, #4294967295
 8002c5a:	81a3      	strh	r3, [r4, #12]
 8002c5c:	e034      	b.n	8002cc8 <__swsetup_r+0x9c>
 8002c5e:	0758      	lsls	r0, r3, #29
 8002c60:	d512      	bpl.n	8002c88 <__swsetup_r+0x5c>
 8002c62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c64:	b141      	cbz	r1, 8002c78 <__swsetup_r+0x4c>
 8002c66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c6a:	4299      	cmp	r1, r3
 8002c6c:	d002      	beq.n	8002c74 <__swsetup_r+0x48>
 8002c6e:	4628      	mov	r0, r5
 8002c70:	f000 f8ae 	bl	8002dd0 <_free_r>
 8002c74:	2300      	movs	r3, #0
 8002c76:	6363      	str	r3, [r4, #52]	; 0x34
 8002c78:	89a3      	ldrh	r3, [r4, #12]
 8002c7a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002c7e:	81a3      	strh	r3, [r4, #12]
 8002c80:	2300      	movs	r3, #0
 8002c82:	6063      	str	r3, [r4, #4]
 8002c84:	6923      	ldr	r3, [r4, #16]
 8002c86:	6023      	str	r3, [r4, #0]
 8002c88:	89a3      	ldrh	r3, [r4, #12]
 8002c8a:	f043 0308 	orr.w	r3, r3, #8
 8002c8e:	81a3      	strh	r3, [r4, #12]
 8002c90:	6923      	ldr	r3, [r4, #16]
 8002c92:	b94b      	cbnz	r3, 8002ca8 <__swsetup_r+0x7c>
 8002c94:	89a3      	ldrh	r3, [r4, #12]
 8002c96:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002c9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c9e:	d003      	beq.n	8002ca8 <__swsetup_r+0x7c>
 8002ca0:	4621      	mov	r1, r4
 8002ca2:	4628      	mov	r0, r5
 8002ca4:	f000 fd2d 	bl	8003702 <__smakebuf_r>
 8002ca8:	89a0      	ldrh	r0, [r4, #12]
 8002caa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002cae:	f010 0301 	ands.w	r3, r0, #1
 8002cb2:	d00a      	beq.n	8002cca <__swsetup_r+0x9e>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60a3      	str	r3, [r4, #8]
 8002cb8:	6963      	ldr	r3, [r4, #20]
 8002cba:	425b      	negs	r3, r3
 8002cbc:	61a3      	str	r3, [r4, #24]
 8002cbe:	6923      	ldr	r3, [r4, #16]
 8002cc0:	b943      	cbnz	r3, 8002cd4 <__swsetup_r+0xa8>
 8002cc2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002cc6:	d1c4      	bne.n	8002c52 <__swsetup_r+0x26>
 8002cc8:	bd38      	pop	{r3, r4, r5, pc}
 8002cca:	0781      	lsls	r1, r0, #30
 8002ccc:	bf58      	it	pl
 8002cce:	6963      	ldrpl	r3, [r4, #20]
 8002cd0:	60a3      	str	r3, [r4, #8]
 8002cd2:	e7f4      	b.n	8002cbe <__swsetup_r+0x92>
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	e7f7      	b.n	8002cc8 <__swsetup_r+0x9c>
 8002cd8:	20000064 	.word	0x20000064

08002cdc <memset>:
 8002cdc:	4603      	mov	r3, r0
 8002cde:	4402      	add	r2, r0
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d100      	bne.n	8002ce6 <memset+0xa>
 8002ce4:	4770      	bx	lr
 8002ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8002cea:	e7f9      	b.n	8002ce0 <memset+0x4>

08002cec <_close_r>:
 8002cec:	b538      	push	{r3, r4, r5, lr}
 8002cee:	2300      	movs	r3, #0
 8002cf0:	4d05      	ldr	r5, [pc, #20]	; (8002d08 <_close_r+0x1c>)
 8002cf2:	4604      	mov	r4, r0
 8002cf4:	4608      	mov	r0, r1
 8002cf6:	602b      	str	r3, [r5, #0]
 8002cf8:	f7fd fc79 	bl	80005ee <_close>
 8002cfc:	1c43      	adds	r3, r0, #1
 8002cfe:	d102      	bne.n	8002d06 <_close_r+0x1a>
 8002d00:	682b      	ldr	r3, [r5, #0]
 8002d02:	b103      	cbz	r3, 8002d06 <_close_r+0x1a>
 8002d04:	6023      	str	r3, [r4, #0]
 8002d06:	bd38      	pop	{r3, r4, r5, pc}
 8002d08:	2000028c 	.word	0x2000028c

08002d0c <_lseek_r>:
 8002d0c:	b538      	push	{r3, r4, r5, lr}
 8002d0e:	4604      	mov	r4, r0
 8002d10:	4608      	mov	r0, r1
 8002d12:	4611      	mov	r1, r2
 8002d14:	2200      	movs	r2, #0
 8002d16:	4d05      	ldr	r5, [pc, #20]	; (8002d2c <_lseek_r+0x20>)
 8002d18:	602a      	str	r2, [r5, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	f7fd fc8b 	bl	8000636 <_lseek>
 8002d20:	1c43      	adds	r3, r0, #1
 8002d22:	d102      	bne.n	8002d2a <_lseek_r+0x1e>
 8002d24:	682b      	ldr	r3, [r5, #0]
 8002d26:	b103      	cbz	r3, 8002d2a <_lseek_r+0x1e>
 8002d28:	6023      	str	r3, [r4, #0]
 8002d2a:	bd38      	pop	{r3, r4, r5, pc}
 8002d2c:	2000028c 	.word	0x2000028c

08002d30 <_read_r>:
 8002d30:	b538      	push	{r3, r4, r5, lr}
 8002d32:	4604      	mov	r4, r0
 8002d34:	4608      	mov	r0, r1
 8002d36:	4611      	mov	r1, r2
 8002d38:	2200      	movs	r2, #0
 8002d3a:	4d05      	ldr	r5, [pc, #20]	; (8002d50 <_read_r+0x20>)
 8002d3c:	602a      	str	r2, [r5, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	f7fd fc38 	bl	80005b4 <_read>
 8002d44:	1c43      	adds	r3, r0, #1
 8002d46:	d102      	bne.n	8002d4e <_read_r+0x1e>
 8002d48:	682b      	ldr	r3, [r5, #0]
 8002d4a:	b103      	cbz	r3, 8002d4e <_read_r+0x1e>
 8002d4c:	6023      	str	r3, [r4, #0]
 8002d4e:	bd38      	pop	{r3, r4, r5, pc}
 8002d50:	2000028c 	.word	0x2000028c

08002d54 <_write_r>:
 8002d54:	b538      	push	{r3, r4, r5, lr}
 8002d56:	4604      	mov	r4, r0
 8002d58:	4608      	mov	r0, r1
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	4d05      	ldr	r5, [pc, #20]	; (8002d74 <_write_r+0x20>)
 8002d60:	602a      	str	r2, [r5, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	f7fd fcb0 	bl	80006c8 <_write>
 8002d68:	1c43      	adds	r3, r0, #1
 8002d6a:	d102      	bne.n	8002d72 <_write_r+0x1e>
 8002d6c:	682b      	ldr	r3, [r5, #0]
 8002d6e:	b103      	cbz	r3, 8002d72 <_write_r+0x1e>
 8002d70:	6023      	str	r3, [r4, #0]
 8002d72:	bd38      	pop	{r3, r4, r5, pc}
 8002d74:	2000028c 	.word	0x2000028c

08002d78 <__errno>:
 8002d78:	4b01      	ldr	r3, [pc, #4]	; (8002d80 <__errno+0x8>)
 8002d7a:	6818      	ldr	r0, [r3, #0]
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	20000064 	.word	0x20000064

08002d84 <__libc_init_array>:
 8002d84:	b570      	push	{r4, r5, r6, lr}
 8002d86:	2600      	movs	r6, #0
 8002d88:	4d0c      	ldr	r5, [pc, #48]	; (8002dbc <__libc_init_array+0x38>)
 8002d8a:	4c0d      	ldr	r4, [pc, #52]	; (8002dc0 <__libc_init_array+0x3c>)
 8002d8c:	1b64      	subs	r4, r4, r5
 8002d8e:	10a4      	asrs	r4, r4, #2
 8002d90:	42a6      	cmp	r6, r4
 8002d92:	d109      	bne.n	8002da8 <__libc_init_array+0x24>
 8002d94:	f000 fd32 	bl	80037fc <_init>
 8002d98:	2600      	movs	r6, #0
 8002d9a:	4d0a      	ldr	r5, [pc, #40]	; (8002dc4 <__libc_init_array+0x40>)
 8002d9c:	4c0a      	ldr	r4, [pc, #40]	; (8002dc8 <__libc_init_array+0x44>)
 8002d9e:	1b64      	subs	r4, r4, r5
 8002da0:	10a4      	asrs	r4, r4, #2
 8002da2:	42a6      	cmp	r6, r4
 8002da4:	d105      	bne.n	8002db2 <__libc_init_array+0x2e>
 8002da6:	bd70      	pop	{r4, r5, r6, pc}
 8002da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dac:	4798      	blx	r3
 8002dae:	3601      	adds	r6, #1
 8002db0:	e7ee      	b.n	8002d90 <__libc_init_array+0xc>
 8002db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002db6:	4798      	blx	r3
 8002db8:	3601      	adds	r6, #1
 8002dba:	e7f2      	b.n	8002da2 <__libc_init_array+0x1e>
 8002dbc:	080038dc 	.word	0x080038dc
 8002dc0:	080038dc 	.word	0x080038dc
 8002dc4:	080038dc 	.word	0x080038dc
 8002dc8:	080038e0 	.word	0x080038e0

08002dcc <__retarget_lock_acquire_recursive>:
 8002dcc:	4770      	bx	lr

08002dce <__retarget_lock_release_recursive>:
 8002dce:	4770      	bx	lr

08002dd0 <_free_r>:
 8002dd0:	b538      	push	{r3, r4, r5, lr}
 8002dd2:	4605      	mov	r5, r0
 8002dd4:	2900      	cmp	r1, #0
 8002dd6:	d040      	beq.n	8002e5a <_free_r+0x8a>
 8002dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ddc:	1f0c      	subs	r4, r1, #4
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	bfb8      	it	lt
 8002de2:	18e4      	addlt	r4, r4, r3
 8002de4:	f000 f8dc 	bl	8002fa0 <__malloc_lock>
 8002de8:	4a1c      	ldr	r2, [pc, #112]	; (8002e5c <_free_r+0x8c>)
 8002dea:	6813      	ldr	r3, [r2, #0]
 8002dec:	b933      	cbnz	r3, 8002dfc <_free_r+0x2c>
 8002dee:	6063      	str	r3, [r4, #4]
 8002df0:	6014      	str	r4, [r2, #0]
 8002df2:	4628      	mov	r0, r5
 8002df4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002df8:	f000 b8d8 	b.w	8002fac <__malloc_unlock>
 8002dfc:	42a3      	cmp	r3, r4
 8002dfe:	d908      	bls.n	8002e12 <_free_r+0x42>
 8002e00:	6820      	ldr	r0, [r4, #0]
 8002e02:	1821      	adds	r1, r4, r0
 8002e04:	428b      	cmp	r3, r1
 8002e06:	bf01      	itttt	eq
 8002e08:	6819      	ldreq	r1, [r3, #0]
 8002e0a:	685b      	ldreq	r3, [r3, #4]
 8002e0c:	1809      	addeq	r1, r1, r0
 8002e0e:	6021      	streq	r1, [r4, #0]
 8002e10:	e7ed      	b.n	8002dee <_free_r+0x1e>
 8002e12:	461a      	mov	r2, r3
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	b10b      	cbz	r3, 8002e1c <_free_r+0x4c>
 8002e18:	42a3      	cmp	r3, r4
 8002e1a:	d9fa      	bls.n	8002e12 <_free_r+0x42>
 8002e1c:	6811      	ldr	r1, [r2, #0]
 8002e1e:	1850      	adds	r0, r2, r1
 8002e20:	42a0      	cmp	r0, r4
 8002e22:	d10b      	bne.n	8002e3c <_free_r+0x6c>
 8002e24:	6820      	ldr	r0, [r4, #0]
 8002e26:	4401      	add	r1, r0
 8002e28:	1850      	adds	r0, r2, r1
 8002e2a:	4283      	cmp	r3, r0
 8002e2c:	6011      	str	r1, [r2, #0]
 8002e2e:	d1e0      	bne.n	8002df2 <_free_r+0x22>
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	4408      	add	r0, r1
 8002e36:	6010      	str	r0, [r2, #0]
 8002e38:	6053      	str	r3, [r2, #4]
 8002e3a:	e7da      	b.n	8002df2 <_free_r+0x22>
 8002e3c:	d902      	bls.n	8002e44 <_free_r+0x74>
 8002e3e:	230c      	movs	r3, #12
 8002e40:	602b      	str	r3, [r5, #0]
 8002e42:	e7d6      	b.n	8002df2 <_free_r+0x22>
 8002e44:	6820      	ldr	r0, [r4, #0]
 8002e46:	1821      	adds	r1, r4, r0
 8002e48:	428b      	cmp	r3, r1
 8002e4a:	bf01      	itttt	eq
 8002e4c:	6819      	ldreq	r1, [r3, #0]
 8002e4e:	685b      	ldreq	r3, [r3, #4]
 8002e50:	1809      	addeq	r1, r1, r0
 8002e52:	6021      	streq	r1, [r4, #0]
 8002e54:	6063      	str	r3, [r4, #4]
 8002e56:	6054      	str	r4, [r2, #4]
 8002e58:	e7cb      	b.n	8002df2 <_free_r+0x22>
 8002e5a:	bd38      	pop	{r3, r4, r5, pc}
 8002e5c:	20000294 	.word	0x20000294

08002e60 <sbrk_aligned>:
 8002e60:	b570      	push	{r4, r5, r6, lr}
 8002e62:	4e0e      	ldr	r6, [pc, #56]	; (8002e9c <sbrk_aligned+0x3c>)
 8002e64:	460c      	mov	r4, r1
 8002e66:	6831      	ldr	r1, [r6, #0]
 8002e68:	4605      	mov	r5, r0
 8002e6a:	b911      	cbnz	r1, 8002e72 <sbrk_aligned+0x12>
 8002e6c:	f000 fca8 	bl	80037c0 <_sbrk_r>
 8002e70:	6030      	str	r0, [r6, #0]
 8002e72:	4621      	mov	r1, r4
 8002e74:	4628      	mov	r0, r5
 8002e76:	f000 fca3 	bl	80037c0 <_sbrk_r>
 8002e7a:	1c43      	adds	r3, r0, #1
 8002e7c:	d00a      	beq.n	8002e94 <sbrk_aligned+0x34>
 8002e7e:	1cc4      	adds	r4, r0, #3
 8002e80:	f024 0403 	bic.w	r4, r4, #3
 8002e84:	42a0      	cmp	r0, r4
 8002e86:	d007      	beq.n	8002e98 <sbrk_aligned+0x38>
 8002e88:	1a21      	subs	r1, r4, r0
 8002e8a:	4628      	mov	r0, r5
 8002e8c:	f000 fc98 	bl	80037c0 <_sbrk_r>
 8002e90:	3001      	adds	r0, #1
 8002e92:	d101      	bne.n	8002e98 <sbrk_aligned+0x38>
 8002e94:	f04f 34ff 	mov.w	r4, #4294967295
 8002e98:	4620      	mov	r0, r4
 8002e9a:	bd70      	pop	{r4, r5, r6, pc}
 8002e9c:	20000298 	.word	0x20000298

08002ea0 <_malloc_r>:
 8002ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ea4:	1ccd      	adds	r5, r1, #3
 8002ea6:	f025 0503 	bic.w	r5, r5, #3
 8002eaa:	3508      	adds	r5, #8
 8002eac:	2d0c      	cmp	r5, #12
 8002eae:	bf38      	it	cc
 8002eb0:	250c      	movcc	r5, #12
 8002eb2:	2d00      	cmp	r5, #0
 8002eb4:	4607      	mov	r7, r0
 8002eb6:	db01      	blt.n	8002ebc <_malloc_r+0x1c>
 8002eb8:	42a9      	cmp	r1, r5
 8002eba:	d905      	bls.n	8002ec8 <_malloc_r+0x28>
 8002ebc:	230c      	movs	r3, #12
 8002ebe:	2600      	movs	r6, #0
 8002ec0:	603b      	str	r3, [r7, #0]
 8002ec2:	4630      	mov	r0, r6
 8002ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ec8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002f9c <_malloc_r+0xfc>
 8002ecc:	f000 f868 	bl	8002fa0 <__malloc_lock>
 8002ed0:	f8d8 3000 	ldr.w	r3, [r8]
 8002ed4:	461c      	mov	r4, r3
 8002ed6:	bb5c      	cbnz	r4, 8002f30 <_malloc_r+0x90>
 8002ed8:	4629      	mov	r1, r5
 8002eda:	4638      	mov	r0, r7
 8002edc:	f7ff ffc0 	bl	8002e60 <sbrk_aligned>
 8002ee0:	1c43      	adds	r3, r0, #1
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	d155      	bne.n	8002f92 <_malloc_r+0xf2>
 8002ee6:	f8d8 4000 	ldr.w	r4, [r8]
 8002eea:	4626      	mov	r6, r4
 8002eec:	2e00      	cmp	r6, #0
 8002eee:	d145      	bne.n	8002f7c <_malloc_r+0xdc>
 8002ef0:	2c00      	cmp	r4, #0
 8002ef2:	d048      	beq.n	8002f86 <_malloc_r+0xe6>
 8002ef4:	6823      	ldr	r3, [r4, #0]
 8002ef6:	4631      	mov	r1, r6
 8002ef8:	4638      	mov	r0, r7
 8002efa:	eb04 0903 	add.w	r9, r4, r3
 8002efe:	f000 fc5f 	bl	80037c0 <_sbrk_r>
 8002f02:	4581      	cmp	r9, r0
 8002f04:	d13f      	bne.n	8002f86 <_malloc_r+0xe6>
 8002f06:	6821      	ldr	r1, [r4, #0]
 8002f08:	4638      	mov	r0, r7
 8002f0a:	1a6d      	subs	r5, r5, r1
 8002f0c:	4629      	mov	r1, r5
 8002f0e:	f7ff ffa7 	bl	8002e60 <sbrk_aligned>
 8002f12:	3001      	adds	r0, #1
 8002f14:	d037      	beq.n	8002f86 <_malloc_r+0xe6>
 8002f16:	6823      	ldr	r3, [r4, #0]
 8002f18:	442b      	add	r3, r5
 8002f1a:	6023      	str	r3, [r4, #0]
 8002f1c:	f8d8 3000 	ldr.w	r3, [r8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d038      	beq.n	8002f96 <_malloc_r+0xf6>
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	42a2      	cmp	r2, r4
 8002f28:	d12b      	bne.n	8002f82 <_malloc_r+0xe2>
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	605a      	str	r2, [r3, #4]
 8002f2e:	e00f      	b.n	8002f50 <_malloc_r+0xb0>
 8002f30:	6822      	ldr	r2, [r4, #0]
 8002f32:	1b52      	subs	r2, r2, r5
 8002f34:	d41f      	bmi.n	8002f76 <_malloc_r+0xd6>
 8002f36:	2a0b      	cmp	r2, #11
 8002f38:	d917      	bls.n	8002f6a <_malloc_r+0xca>
 8002f3a:	1961      	adds	r1, r4, r5
 8002f3c:	42a3      	cmp	r3, r4
 8002f3e:	6025      	str	r5, [r4, #0]
 8002f40:	bf18      	it	ne
 8002f42:	6059      	strne	r1, [r3, #4]
 8002f44:	6863      	ldr	r3, [r4, #4]
 8002f46:	bf08      	it	eq
 8002f48:	f8c8 1000 	streq.w	r1, [r8]
 8002f4c:	5162      	str	r2, [r4, r5]
 8002f4e:	604b      	str	r3, [r1, #4]
 8002f50:	4638      	mov	r0, r7
 8002f52:	f104 060b 	add.w	r6, r4, #11
 8002f56:	f000 f829 	bl	8002fac <__malloc_unlock>
 8002f5a:	f026 0607 	bic.w	r6, r6, #7
 8002f5e:	1d23      	adds	r3, r4, #4
 8002f60:	1af2      	subs	r2, r6, r3
 8002f62:	d0ae      	beq.n	8002ec2 <_malloc_r+0x22>
 8002f64:	1b9b      	subs	r3, r3, r6
 8002f66:	50a3      	str	r3, [r4, r2]
 8002f68:	e7ab      	b.n	8002ec2 <_malloc_r+0x22>
 8002f6a:	42a3      	cmp	r3, r4
 8002f6c:	6862      	ldr	r2, [r4, #4]
 8002f6e:	d1dd      	bne.n	8002f2c <_malloc_r+0x8c>
 8002f70:	f8c8 2000 	str.w	r2, [r8]
 8002f74:	e7ec      	b.n	8002f50 <_malloc_r+0xb0>
 8002f76:	4623      	mov	r3, r4
 8002f78:	6864      	ldr	r4, [r4, #4]
 8002f7a:	e7ac      	b.n	8002ed6 <_malloc_r+0x36>
 8002f7c:	4634      	mov	r4, r6
 8002f7e:	6876      	ldr	r6, [r6, #4]
 8002f80:	e7b4      	b.n	8002eec <_malloc_r+0x4c>
 8002f82:	4613      	mov	r3, r2
 8002f84:	e7cc      	b.n	8002f20 <_malloc_r+0x80>
 8002f86:	230c      	movs	r3, #12
 8002f88:	4638      	mov	r0, r7
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	f000 f80e 	bl	8002fac <__malloc_unlock>
 8002f90:	e797      	b.n	8002ec2 <_malloc_r+0x22>
 8002f92:	6025      	str	r5, [r4, #0]
 8002f94:	e7dc      	b.n	8002f50 <_malloc_r+0xb0>
 8002f96:	605b      	str	r3, [r3, #4]
 8002f98:	deff      	udf	#255	; 0xff
 8002f9a:	bf00      	nop
 8002f9c:	20000294 	.word	0x20000294

08002fa0 <__malloc_lock>:
 8002fa0:	4801      	ldr	r0, [pc, #4]	; (8002fa8 <__malloc_lock+0x8>)
 8002fa2:	f7ff bf13 	b.w	8002dcc <__retarget_lock_acquire_recursive>
 8002fa6:	bf00      	nop
 8002fa8:	20000290 	.word	0x20000290

08002fac <__malloc_unlock>:
 8002fac:	4801      	ldr	r0, [pc, #4]	; (8002fb4 <__malloc_unlock+0x8>)
 8002fae:	f7ff bf0e 	b.w	8002dce <__retarget_lock_release_recursive>
 8002fb2:	bf00      	nop
 8002fb4:	20000290 	.word	0x20000290

08002fb8 <__sfputc_r>:
 8002fb8:	6893      	ldr	r3, [r2, #8]
 8002fba:	b410      	push	{r4}
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	6093      	str	r3, [r2, #8]
 8002fc2:	da07      	bge.n	8002fd4 <__sfputc_r+0x1c>
 8002fc4:	6994      	ldr	r4, [r2, #24]
 8002fc6:	42a3      	cmp	r3, r4
 8002fc8:	db01      	blt.n	8002fce <__sfputc_r+0x16>
 8002fca:	290a      	cmp	r1, #10
 8002fcc:	d102      	bne.n	8002fd4 <__sfputc_r+0x1c>
 8002fce:	bc10      	pop	{r4}
 8002fd0:	f7ff bdef 	b.w	8002bb2 <__swbuf_r>
 8002fd4:	6813      	ldr	r3, [r2, #0]
 8002fd6:	1c58      	adds	r0, r3, #1
 8002fd8:	6010      	str	r0, [r2, #0]
 8002fda:	7019      	strb	r1, [r3, #0]
 8002fdc:	4608      	mov	r0, r1
 8002fde:	bc10      	pop	{r4}
 8002fe0:	4770      	bx	lr

08002fe2 <__sfputs_r>:
 8002fe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fe4:	4606      	mov	r6, r0
 8002fe6:	460f      	mov	r7, r1
 8002fe8:	4614      	mov	r4, r2
 8002fea:	18d5      	adds	r5, r2, r3
 8002fec:	42ac      	cmp	r4, r5
 8002fee:	d101      	bne.n	8002ff4 <__sfputs_r+0x12>
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	e007      	b.n	8003004 <__sfputs_r+0x22>
 8002ff4:	463a      	mov	r2, r7
 8002ff6:	4630      	mov	r0, r6
 8002ff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ffc:	f7ff ffdc 	bl	8002fb8 <__sfputc_r>
 8003000:	1c43      	adds	r3, r0, #1
 8003002:	d1f3      	bne.n	8002fec <__sfputs_r+0xa>
 8003004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003008 <_vfiprintf_r>:
 8003008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800300c:	460d      	mov	r5, r1
 800300e:	4614      	mov	r4, r2
 8003010:	4698      	mov	r8, r3
 8003012:	4606      	mov	r6, r0
 8003014:	b09d      	sub	sp, #116	; 0x74
 8003016:	b118      	cbz	r0, 8003020 <_vfiprintf_r+0x18>
 8003018:	6a03      	ldr	r3, [r0, #32]
 800301a:	b90b      	cbnz	r3, 8003020 <_vfiprintf_r+0x18>
 800301c:	f7ff fce2 	bl	80029e4 <__sinit>
 8003020:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003022:	07d9      	lsls	r1, r3, #31
 8003024:	d405      	bmi.n	8003032 <_vfiprintf_r+0x2a>
 8003026:	89ab      	ldrh	r3, [r5, #12]
 8003028:	059a      	lsls	r2, r3, #22
 800302a:	d402      	bmi.n	8003032 <_vfiprintf_r+0x2a>
 800302c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800302e:	f7ff fecd 	bl	8002dcc <__retarget_lock_acquire_recursive>
 8003032:	89ab      	ldrh	r3, [r5, #12]
 8003034:	071b      	lsls	r3, r3, #28
 8003036:	d501      	bpl.n	800303c <_vfiprintf_r+0x34>
 8003038:	692b      	ldr	r3, [r5, #16]
 800303a:	b99b      	cbnz	r3, 8003064 <_vfiprintf_r+0x5c>
 800303c:	4629      	mov	r1, r5
 800303e:	4630      	mov	r0, r6
 8003040:	f7ff fdf4 	bl	8002c2c <__swsetup_r>
 8003044:	b170      	cbz	r0, 8003064 <_vfiprintf_r+0x5c>
 8003046:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003048:	07dc      	lsls	r4, r3, #31
 800304a:	d504      	bpl.n	8003056 <_vfiprintf_r+0x4e>
 800304c:	f04f 30ff 	mov.w	r0, #4294967295
 8003050:	b01d      	add	sp, #116	; 0x74
 8003052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003056:	89ab      	ldrh	r3, [r5, #12]
 8003058:	0598      	lsls	r0, r3, #22
 800305a:	d4f7      	bmi.n	800304c <_vfiprintf_r+0x44>
 800305c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800305e:	f7ff feb6 	bl	8002dce <__retarget_lock_release_recursive>
 8003062:	e7f3      	b.n	800304c <_vfiprintf_r+0x44>
 8003064:	2300      	movs	r3, #0
 8003066:	9309      	str	r3, [sp, #36]	; 0x24
 8003068:	2320      	movs	r3, #32
 800306a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800306e:	2330      	movs	r3, #48	; 0x30
 8003070:	f04f 0901 	mov.w	r9, #1
 8003074:	f8cd 800c 	str.w	r8, [sp, #12]
 8003078:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8003228 <_vfiprintf_r+0x220>
 800307c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003080:	4623      	mov	r3, r4
 8003082:	469a      	mov	sl, r3
 8003084:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003088:	b10a      	cbz	r2, 800308e <_vfiprintf_r+0x86>
 800308a:	2a25      	cmp	r2, #37	; 0x25
 800308c:	d1f9      	bne.n	8003082 <_vfiprintf_r+0x7a>
 800308e:	ebba 0b04 	subs.w	fp, sl, r4
 8003092:	d00b      	beq.n	80030ac <_vfiprintf_r+0xa4>
 8003094:	465b      	mov	r3, fp
 8003096:	4622      	mov	r2, r4
 8003098:	4629      	mov	r1, r5
 800309a:	4630      	mov	r0, r6
 800309c:	f7ff ffa1 	bl	8002fe2 <__sfputs_r>
 80030a0:	3001      	adds	r0, #1
 80030a2:	f000 80a9 	beq.w	80031f8 <_vfiprintf_r+0x1f0>
 80030a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030a8:	445a      	add	r2, fp
 80030aa:	9209      	str	r2, [sp, #36]	; 0x24
 80030ac:	f89a 3000 	ldrb.w	r3, [sl]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80a1 	beq.w	80031f8 <_vfiprintf_r+0x1f0>
 80030b6:	2300      	movs	r3, #0
 80030b8:	f04f 32ff 	mov.w	r2, #4294967295
 80030bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030c0:	f10a 0a01 	add.w	sl, sl, #1
 80030c4:	9304      	str	r3, [sp, #16]
 80030c6:	9307      	str	r3, [sp, #28]
 80030c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030cc:	931a      	str	r3, [sp, #104]	; 0x68
 80030ce:	4654      	mov	r4, sl
 80030d0:	2205      	movs	r2, #5
 80030d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030d6:	4854      	ldr	r0, [pc, #336]	; (8003228 <_vfiprintf_r+0x220>)
 80030d8:	f000 fb82 	bl	80037e0 <memchr>
 80030dc:	9a04      	ldr	r2, [sp, #16]
 80030de:	b9d8      	cbnz	r0, 8003118 <_vfiprintf_r+0x110>
 80030e0:	06d1      	lsls	r1, r2, #27
 80030e2:	bf44      	itt	mi
 80030e4:	2320      	movmi	r3, #32
 80030e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030ea:	0713      	lsls	r3, r2, #28
 80030ec:	bf44      	itt	mi
 80030ee:	232b      	movmi	r3, #43	; 0x2b
 80030f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030f4:	f89a 3000 	ldrb.w	r3, [sl]
 80030f8:	2b2a      	cmp	r3, #42	; 0x2a
 80030fa:	d015      	beq.n	8003128 <_vfiprintf_r+0x120>
 80030fc:	4654      	mov	r4, sl
 80030fe:	2000      	movs	r0, #0
 8003100:	f04f 0c0a 	mov.w	ip, #10
 8003104:	9a07      	ldr	r2, [sp, #28]
 8003106:	4621      	mov	r1, r4
 8003108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800310c:	3b30      	subs	r3, #48	; 0x30
 800310e:	2b09      	cmp	r3, #9
 8003110:	d94d      	bls.n	80031ae <_vfiprintf_r+0x1a6>
 8003112:	b1b0      	cbz	r0, 8003142 <_vfiprintf_r+0x13a>
 8003114:	9207      	str	r2, [sp, #28]
 8003116:	e014      	b.n	8003142 <_vfiprintf_r+0x13a>
 8003118:	eba0 0308 	sub.w	r3, r0, r8
 800311c:	fa09 f303 	lsl.w	r3, r9, r3
 8003120:	4313      	orrs	r3, r2
 8003122:	46a2      	mov	sl, r4
 8003124:	9304      	str	r3, [sp, #16]
 8003126:	e7d2      	b.n	80030ce <_vfiprintf_r+0xc6>
 8003128:	9b03      	ldr	r3, [sp, #12]
 800312a:	1d19      	adds	r1, r3, #4
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	9103      	str	r1, [sp, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	bfbb      	ittet	lt
 8003134:	425b      	neglt	r3, r3
 8003136:	f042 0202 	orrlt.w	r2, r2, #2
 800313a:	9307      	strge	r3, [sp, #28]
 800313c:	9307      	strlt	r3, [sp, #28]
 800313e:	bfb8      	it	lt
 8003140:	9204      	strlt	r2, [sp, #16]
 8003142:	7823      	ldrb	r3, [r4, #0]
 8003144:	2b2e      	cmp	r3, #46	; 0x2e
 8003146:	d10c      	bne.n	8003162 <_vfiprintf_r+0x15a>
 8003148:	7863      	ldrb	r3, [r4, #1]
 800314a:	2b2a      	cmp	r3, #42	; 0x2a
 800314c:	d134      	bne.n	80031b8 <_vfiprintf_r+0x1b0>
 800314e:	9b03      	ldr	r3, [sp, #12]
 8003150:	3402      	adds	r4, #2
 8003152:	1d1a      	adds	r2, r3, #4
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	9203      	str	r2, [sp, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	bfb8      	it	lt
 800315c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003160:	9305      	str	r3, [sp, #20]
 8003162:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800322c <_vfiprintf_r+0x224>
 8003166:	2203      	movs	r2, #3
 8003168:	4650      	mov	r0, sl
 800316a:	7821      	ldrb	r1, [r4, #0]
 800316c:	f000 fb38 	bl	80037e0 <memchr>
 8003170:	b138      	cbz	r0, 8003182 <_vfiprintf_r+0x17a>
 8003172:	2240      	movs	r2, #64	; 0x40
 8003174:	9b04      	ldr	r3, [sp, #16]
 8003176:	eba0 000a 	sub.w	r0, r0, sl
 800317a:	4082      	lsls	r2, r0
 800317c:	4313      	orrs	r3, r2
 800317e:	3401      	adds	r4, #1
 8003180:	9304      	str	r3, [sp, #16]
 8003182:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003186:	2206      	movs	r2, #6
 8003188:	4829      	ldr	r0, [pc, #164]	; (8003230 <_vfiprintf_r+0x228>)
 800318a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800318e:	f000 fb27 	bl	80037e0 <memchr>
 8003192:	2800      	cmp	r0, #0
 8003194:	d03f      	beq.n	8003216 <_vfiprintf_r+0x20e>
 8003196:	4b27      	ldr	r3, [pc, #156]	; (8003234 <_vfiprintf_r+0x22c>)
 8003198:	bb1b      	cbnz	r3, 80031e2 <_vfiprintf_r+0x1da>
 800319a:	9b03      	ldr	r3, [sp, #12]
 800319c:	3307      	adds	r3, #7
 800319e:	f023 0307 	bic.w	r3, r3, #7
 80031a2:	3308      	adds	r3, #8
 80031a4:	9303      	str	r3, [sp, #12]
 80031a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031a8:	443b      	add	r3, r7
 80031aa:	9309      	str	r3, [sp, #36]	; 0x24
 80031ac:	e768      	b.n	8003080 <_vfiprintf_r+0x78>
 80031ae:	460c      	mov	r4, r1
 80031b0:	2001      	movs	r0, #1
 80031b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80031b6:	e7a6      	b.n	8003106 <_vfiprintf_r+0xfe>
 80031b8:	2300      	movs	r3, #0
 80031ba:	f04f 0c0a 	mov.w	ip, #10
 80031be:	4619      	mov	r1, r3
 80031c0:	3401      	adds	r4, #1
 80031c2:	9305      	str	r3, [sp, #20]
 80031c4:	4620      	mov	r0, r4
 80031c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031ca:	3a30      	subs	r2, #48	; 0x30
 80031cc:	2a09      	cmp	r2, #9
 80031ce:	d903      	bls.n	80031d8 <_vfiprintf_r+0x1d0>
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0c6      	beq.n	8003162 <_vfiprintf_r+0x15a>
 80031d4:	9105      	str	r1, [sp, #20]
 80031d6:	e7c4      	b.n	8003162 <_vfiprintf_r+0x15a>
 80031d8:	4604      	mov	r4, r0
 80031da:	2301      	movs	r3, #1
 80031dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80031e0:	e7f0      	b.n	80031c4 <_vfiprintf_r+0x1bc>
 80031e2:	ab03      	add	r3, sp, #12
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	462a      	mov	r2, r5
 80031e8:	4630      	mov	r0, r6
 80031ea:	4b13      	ldr	r3, [pc, #76]	; (8003238 <_vfiprintf_r+0x230>)
 80031ec:	a904      	add	r1, sp, #16
 80031ee:	f3af 8000 	nop.w
 80031f2:	4607      	mov	r7, r0
 80031f4:	1c78      	adds	r0, r7, #1
 80031f6:	d1d6      	bne.n	80031a6 <_vfiprintf_r+0x19e>
 80031f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031fa:	07d9      	lsls	r1, r3, #31
 80031fc:	d405      	bmi.n	800320a <_vfiprintf_r+0x202>
 80031fe:	89ab      	ldrh	r3, [r5, #12]
 8003200:	059a      	lsls	r2, r3, #22
 8003202:	d402      	bmi.n	800320a <_vfiprintf_r+0x202>
 8003204:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003206:	f7ff fde2 	bl	8002dce <__retarget_lock_release_recursive>
 800320a:	89ab      	ldrh	r3, [r5, #12]
 800320c:	065b      	lsls	r3, r3, #25
 800320e:	f53f af1d 	bmi.w	800304c <_vfiprintf_r+0x44>
 8003212:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003214:	e71c      	b.n	8003050 <_vfiprintf_r+0x48>
 8003216:	ab03      	add	r3, sp, #12
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	462a      	mov	r2, r5
 800321c:	4630      	mov	r0, r6
 800321e:	4b06      	ldr	r3, [pc, #24]	; (8003238 <_vfiprintf_r+0x230>)
 8003220:	a904      	add	r1, sp, #16
 8003222:	f000 f87d 	bl	8003320 <_printf_i>
 8003226:	e7e4      	b.n	80031f2 <_vfiprintf_r+0x1ea>
 8003228:	080038a6 	.word	0x080038a6
 800322c:	080038ac 	.word	0x080038ac
 8003230:	080038b0 	.word	0x080038b0
 8003234:	00000000 	.word	0x00000000
 8003238:	08002fe3 	.word	0x08002fe3

0800323c <_printf_common>:
 800323c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003240:	4616      	mov	r6, r2
 8003242:	4699      	mov	r9, r3
 8003244:	688a      	ldr	r2, [r1, #8]
 8003246:	690b      	ldr	r3, [r1, #16]
 8003248:	4607      	mov	r7, r0
 800324a:	4293      	cmp	r3, r2
 800324c:	bfb8      	it	lt
 800324e:	4613      	movlt	r3, r2
 8003250:	6033      	str	r3, [r6, #0]
 8003252:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003256:	460c      	mov	r4, r1
 8003258:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800325c:	b10a      	cbz	r2, 8003262 <_printf_common+0x26>
 800325e:	3301      	adds	r3, #1
 8003260:	6033      	str	r3, [r6, #0]
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	0699      	lsls	r1, r3, #26
 8003266:	bf42      	ittt	mi
 8003268:	6833      	ldrmi	r3, [r6, #0]
 800326a:	3302      	addmi	r3, #2
 800326c:	6033      	strmi	r3, [r6, #0]
 800326e:	6825      	ldr	r5, [r4, #0]
 8003270:	f015 0506 	ands.w	r5, r5, #6
 8003274:	d106      	bne.n	8003284 <_printf_common+0x48>
 8003276:	f104 0a19 	add.w	sl, r4, #25
 800327a:	68e3      	ldr	r3, [r4, #12]
 800327c:	6832      	ldr	r2, [r6, #0]
 800327e:	1a9b      	subs	r3, r3, r2
 8003280:	42ab      	cmp	r3, r5
 8003282:	dc2b      	bgt.n	80032dc <_printf_common+0xa0>
 8003284:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003288:	1e13      	subs	r3, r2, #0
 800328a:	6822      	ldr	r2, [r4, #0]
 800328c:	bf18      	it	ne
 800328e:	2301      	movne	r3, #1
 8003290:	0692      	lsls	r2, r2, #26
 8003292:	d430      	bmi.n	80032f6 <_printf_common+0xba>
 8003294:	4649      	mov	r1, r9
 8003296:	4638      	mov	r0, r7
 8003298:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800329c:	47c0      	blx	r8
 800329e:	3001      	adds	r0, #1
 80032a0:	d023      	beq.n	80032ea <_printf_common+0xae>
 80032a2:	6823      	ldr	r3, [r4, #0]
 80032a4:	6922      	ldr	r2, [r4, #16]
 80032a6:	f003 0306 	and.w	r3, r3, #6
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	bf14      	ite	ne
 80032ae:	2500      	movne	r5, #0
 80032b0:	6833      	ldreq	r3, [r6, #0]
 80032b2:	f04f 0600 	mov.w	r6, #0
 80032b6:	bf08      	it	eq
 80032b8:	68e5      	ldreq	r5, [r4, #12]
 80032ba:	f104 041a 	add.w	r4, r4, #26
 80032be:	bf08      	it	eq
 80032c0:	1aed      	subeq	r5, r5, r3
 80032c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80032c6:	bf08      	it	eq
 80032c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032cc:	4293      	cmp	r3, r2
 80032ce:	bfc4      	itt	gt
 80032d0:	1a9b      	subgt	r3, r3, r2
 80032d2:	18ed      	addgt	r5, r5, r3
 80032d4:	42b5      	cmp	r5, r6
 80032d6:	d11a      	bne.n	800330e <_printf_common+0xd2>
 80032d8:	2000      	movs	r0, #0
 80032da:	e008      	b.n	80032ee <_printf_common+0xb2>
 80032dc:	2301      	movs	r3, #1
 80032de:	4652      	mov	r2, sl
 80032e0:	4649      	mov	r1, r9
 80032e2:	4638      	mov	r0, r7
 80032e4:	47c0      	blx	r8
 80032e6:	3001      	adds	r0, #1
 80032e8:	d103      	bne.n	80032f2 <_printf_common+0xb6>
 80032ea:	f04f 30ff 	mov.w	r0, #4294967295
 80032ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032f2:	3501      	adds	r5, #1
 80032f4:	e7c1      	b.n	800327a <_printf_common+0x3e>
 80032f6:	2030      	movs	r0, #48	; 0x30
 80032f8:	18e1      	adds	r1, r4, r3
 80032fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032fe:	1c5a      	adds	r2, r3, #1
 8003300:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003304:	4422      	add	r2, r4
 8003306:	3302      	adds	r3, #2
 8003308:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800330c:	e7c2      	b.n	8003294 <_printf_common+0x58>
 800330e:	2301      	movs	r3, #1
 8003310:	4622      	mov	r2, r4
 8003312:	4649      	mov	r1, r9
 8003314:	4638      	mov	r0, r7
 8003316:	47c0      	blx	r8
 8003318:	3001      	adds	r0, #1
 800331a:	d0e6      	beq.n	80032ea <_printf_common+0xae>
 800331c:	3601      	adds	r6, #1
 800331e:	e7d9      	b.n	80032d4 <_printf_common+0x98>

08003320 <_printf_i>:
 8003320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003324:	7e0f      	ldrb	r7, [r1, #24]
 8003326:	4691      	mov	r9, r2
 8003328:	2f78      	cmp	r7, #120	; 0x78
 800332a:	4680      	mov	r8, r0
 800332c:	460c      	mov	r4, r1
 800332e:	469a      	mov	sl, r3
 8003330:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003332:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003336:	d807      	bhi.n	8003348 <_printf_i+0x28>
 8003338:	2f62      	cmp	r7, #98	; 0x62
 800333a:	d80a      	bhi.n	8003352 <_printf_i+0x32>
 800333c:	2f00      	cmp	r7, #0
 800333e:	f000 80d5 	beq.w	80034ec <_printf_i+0x1cc>
 8003342:	2f58      	cmp	r7, #88	; 0x58
 8003344:	f000 80c1 	beq.w	80034ca <_printf_i+0x1aa>
 8003348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800334c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003350:	e03a      	b.n	80033c8 <_printf_i+0xa8>
 8003352:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003356:	2b15      	cmp	r3, #21
 8003358:	d8f6      	bhi.n	8003348 <_printf_i+0x28>
 800335a:	a101      	add	r1, pc, #4	; (adr r1, 8003360 <_printf_i+0x40>)
 800335c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003360:	080033b9 	.word	0x080033b9
 8003364:	080033cd 	.word	0x080033cd
 8003368:	08003349 	.word	0x08003349
 800336c:	08003349 	.word	0x08003349
 8003370:	08003349 	.word	0x08003349
 8003374:	08003349 	.word	0x08003349
 8003378:	080033cd 	.word	0x080033cd
 800337c:	08003349 	.word	0x08003349
 8003380:	08003349 	.word	0x08003349
 8003384:	08003349 	.word	0x08003349
 8003388:	08003349 	.word	0x08003349
 800338c:	080034d3 	.word	0x080034d3
 8003390:	080033f9 	.word	0x080033f9
 8003394:	0800348d 	.word	0x0800348d
 8003398:	08003349 	.word	0x08003349
 800339c:	08003349 	.word	0x08003349
 80033a0:	080034f5 	.word	0x080034f5
 80033a4:	08003349 	.word	0x08003349
 80033a8:	080033f9 	.word	0x080033f9
 80033ac:	08003349 	.word	0x08003349
 80033b0:	08003349 	.word	0x08003349
 80033b4:	08003495 	.word	0x08003495
 80033b8:	682b      	ldr	r3, [r5, #0]
 80033ba:	1d1a      	adds	r2, r3, #4
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	602a      	str	r2, [r5, #0]
 80033c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033c8:	2301      	movs	r3, #1
 80033ca:	e0a0      	b.n	800350e <_printf_i+0x1ee>
 80033cc:	6820      	ldr	r0, [r4, #0]
 80033ce:	682b      	ldr	r3, [r5, #0]
 80033d0:	0607      	lsls	r7, r0, #24
 80033d2:	f103 0104 	add.w	r1, r3, #4
 80033d6:	6029      	str	r1, [r5, #0]
 80033d8:	d501      	bpl.n	80033de <_printf_i+0xbe>
 80033da:	681e      	ldr	r6, [r3, #0]
 80033dc:	e003      	b.n	80033e6 <_printf_i+0xc6>
 80033de:	0646      	lsls	r6, r0, #25
 80033e0:	d5fb      	bpl.n	80033da <_printf_i+0xba>
 80033e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80033e6:	2e00      	cmp	r6, #0
 80033e8:	da03      	bge.n	80033f2 <_printf_i+0xd2>
 80033ea:	232d      	movs	r3, #45	; 0x2d
 80033ec:	4276      	negs	r6, r6
 80033ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033f2:	230a      	movs	r3, #10
 80033f4:	4859      	ldr	r0, [pc, #356]	; (800355c <_printf_i+0x23c>)
 80033f6:	e012      	b.n	800341e <_printf_i+0xfe>
 80033f8:	682b      	ldr	r3, [r5, #0]
 80033fa:	6820      	ldr	r0, [r4, #0]
 80033fc:	1d19      	adds	r1, r3, #4
 80033fe:	6029      	str	r1, [r5, #0]
 8003400:	0605      	lsls	r5, r0, #24
 8003402:	d501      	bpl.n	8003408 <_printf_i+0xe8>
 8003404:	681e      	ldr	r6, [r3, #0]
 8003406:	e002      	b.n	800340e <_printf_i+0xee>
 8003408:	0641      	lsls	r1, r0, #25
 800340a:	d5fb      	bpl.n	8003404 <_printf_i+0xe4>
 800340c:	881e      	ldrh	r6, [r3, #0]
 800340e:	2f6f      	cmp	r7, #111	; 0x6f
 8003410:	bf0c      	ite	eq
 8003412:	2308      	moveq	r3, #8
 8003414:	230a      	movne	r3, #10
 8003416:	4851      	ldr	r0, [pc, #324]	; (800355c <_printf_i+0x23c>)
 8003418:	2100      	movs	r1, #0
 800341a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800341e:	6865      	ldr	r5, [r4, #4]
 8003420:	2d00      	cmp	r5, #0
 8003422:	bfa8      	it	ge
 8003424:	6821      	ldrge	r1, [r4, #0]
 8003426:	60a5      	str	r5, [r4, #8]
 8003428:	bfa4      	itt	ge
 800342a:	f021 0104 	bicge.w	r1, r1, #4
 800342e:	6021      	strge	r1, [r4, #0]
 8003430:	b90e      	cbnz	r6, 8003436 <_printf_i+0x116>
 8003432:	2d00      	cmp	r5, #0
 8003434:	d04b      	beq.n	80034ce <_printf_i+0x1ae>
 8003436:	4615      	mov	r5, r2
 8003438:	fbb6 f1f3 	udiv	r1, r6, r3
 800343c:	fb03 6711 	mls	r7, r3, r1, r6
 8003440:	5dc7      	ldrb	r7, [r0, r7]
 8003442:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003446:	4637      	mov	r7, r6
 8003448:	42bb      	cmp	r3, r7
 800344a:	460e      	mov	r6, r1
 800344c:	d9f4      	bls.n	8003438 <_printf_i+0x118>
 800344e:	2b08      	cmp	r3, #8
 8003450:	d10b      	bne.n	800346a <_printf_i+0x14a>
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	07de      	lsls	r6, r3, #31
 8003456:	d508      	bpl.n	800346a <_printf_i+0x14a>
 8003458:	6923      	ldr	r3, [r4, #16]
 800345a:	6861      	ldr	r1, [r4, #4]
 800345c:	4299      	cmp	r1, r3
 800345e:	bfde      	ittt	le
 8003460:	2330      	movle	r3, #48	; 0x30
 8003462:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003466:	f105 35ff 	addle.w	r5, r5, #4294967295
 800346a:	1b52      	subs	r2, r2, r5
 800346c:	6122      	str	r2, [r4, #16]
 800346e:	464b      	mov	r3, r9
 8003470:	4621      	mov	r1, r4
 8003472:	4640      	mov	r0, r8
 8003474:	f8cd a000 	str.w	sl, [sp]
 8003478:	aa03      	add	r2, sp, #12
 800347a:	f7ff fedf 	bl	800323c <_printf_common>
 800347e:	3001      	adds	r0, #1
 8003480:	d14a      	bne.n	8003518 <_printf_i+0x1f8>
 8003482:	f04f 30ff 	mov.w	r0, #4294967295
 8003486:	b004      	add	sp, #16
 8003488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800348c:	6823      	ldr	r3, [r4, #0]
 800348e:	f043 0320 	orr.w	r3, r3, #32
 8003492:	6023      	str	r3, [r4, #0]
 8003494:	2778      	movs	r7, #120	; 0x78
 8003496:	4832      	ldr	r0, [pc, #200]	; (8003560 <_printf_i+0x240>)
 8003498:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	6829      	ldr	r1, [r5, #0]
 80034a0:	061f      	lsls	r7, r3, #24
 80034a2:	f851 6b04 	ldr.w	r6, [r1], #4
 80034a6:	d402      	bmi.n	80034ae <_printf_i+0x18e>
 80034a8:	065f      	lsls	r7, r3, #25
 80034aa:	bf48      	it	mi
 80034ac:	b2b6      	uxthmi	r6, r6
 80034ae:	07df      	lsls	r7, r3, #31
 80034b0:	bf48      	it	mi
 80034b2:	f043 0320 	orrmi.w	r3, r3, #32
 80034b6:	6029      	str	r1, [r5, #0]
 80034b8:	bf48      	it	mi
 80034ba:	6023      	strmi	r3, [r4, #0]
 80034bc:	b91e      	cbnz	r6, 80034c6 <_printf_i+0x1a6>
 80034be:	6823      	ldr	r3, [r4, #0]
 80034c0:	f023 0320 	bic.w	r3, r3, #32
 80034c4:	6023      	str	r3, [r4, #0]
 80034c6:	2310      	movs	r3, #16
 80034c8:	e7a6      	b.n	8003418 <_printf_i+0xf8>
 80034ca:	4824      	ldr	r0, [pc, #144]	; (800355c <_printf_i+0x23c>)
 80034cc:	e7e4      	b.n	8003498 <_printf_i+0x178>
 80034ce:	4615      	mov	r5, r2
 80034d0:	e7bd      	b.n	800344e <_printf_i+0x12e>
 80034d2:	682b      	ldr	r3, [r5, #0]
 80034d4:	6826      	ldr	r6, [r4, #0]
 80034d6:	1d18      	adds	r0, r3, #4
 80034d8:	6961      	ldr	r1, [r4, #20]
 80034da:	6028      	str	r0, [r5, #0]
 80034dc:	0635      	lsls	r5, r6, #24
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	d501      	bpl.n	80034e6 <_printf_i+0x1c6>
 80034e2:	6019      	str	r1, [r3, #0]
 80034e4:	e002      	b.n	80034ec <_printf_i+0x1cc>
 80034e6:	0670      	lsls	r0, r6, #25
 80034e8:	d5fb      	bpl.n	80034e2 <_printf_i+0x1c2>
 80034ea:	8019      	strh	r1, [r3, #0]
 80034ec:	2300      	movs	r3, #0
 80034ee:	4615      	mov	r5, r2
 80034f0:	6123      	str	r3, [r4, #16]
 80034f2:	e7bc      	b.n	800346e <_printf_i+0x14e>
 80034f4:	682b      	ldr	r3, [r5, #0]
 80034f6:	2100      	movs	r1, #0
 80034f8:	1d1a      	adds	r2, r3, #4
 80034fa:	602a      	str	r2, [r5, #0]
 80034fc:	681d      	ldr	r5, [r3, #0]
 80034fe:	6862      	ldr	r2, [r4, #4]
 8003500:	4628      	mov	r0, r5
 8003502:	f000 f96d 	bl	80037e0 <memchr>
 8003506:	b108      	cbz	r0, 800350c <_printf_i+0x1ec>
 8003508:	1b40      	subs	r0, r0, r5
 800350a:	6060      	str	r0, [r4, #4]
 800350c:	6863      	ldr	r3, [r4, #4]
 800350e:	6123      	str	r3, [r4, #16]
 8003510:	2300      	movs	r3, #0
 8003512:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003516:	e7aa      	b.n	800346e <_printf_i+0x14e>
 8003518:	462a      	mov	r2, r5
 800351a:	4649      	mov	r1, r9
 800351c:	4640      	mov	r0, r8
 800351e:	6923      	ldr	r3, [r4, #16]
 8003520:	47d0      	blx	sl
 8003522:	3001      	adds	r0, #1
 8003524:	d0ad      	beq.n	8003482 <_printf_i+0x162>
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	079b      	lsls	r3, r3, #30
 800352a:	d413      	bmi.n	8003554 <_printf_i+0x234>
 800352c:	68e0      	ldr	r0, [r4, #12]
 800352e:	9b03      	ldr	r3, [sp, #12]
 8003530:	4298      	cmp	r0, r3
 8003532:	bfb8      	it	lt
 8003534:	4618      	movlt	r0, r3
 8003536:	e7a6      	b.n	8003486 <_printf_i+0x166>
 8003538:	2301      	movs	r3, #1
 800353a:	4632      	mov	r2, r6
 800353c:	4649      	mov	r1, r9
 800353e:	4640      	mov	r0, r8
 8003540:	47d0      	blx	sl
 8003542:	3001      	adds	r0, #1
 8003544:	d09d      	beq.n	8003482 <_printf_i+0x162>
 8003546:	3501      	adds	r5, #1
 8003548:	68e3      	ldr	r3, [r4, #12]
 800354a:	9903      	ldr	r1, [sp, #12]
 800354c:	1a5b      	subs	r3, r3, r1
 800354e:	42ab      	cmp	r3, r5
 8003550:	dcf2      	bgt.n	8003538 <_printf_i+0x218>
 8003552:	e7eb      	b.n	800352c <_printf_i+0x20c>
 8003554:	2500      	movs	r5, #0
 8003556:	f104 0619 	add.w	r6, r4, #25
 800355a:	e7f5      	b.n	8003548 <_printf_i+0x228>
 800355c:	080038b7 	.word	0x080038b7
 8003560:	080038c8 	.word	0x080038c8

08003564 <__sflush_r>:
 8003564:	898a      	ldrh	r2, [r1, #12]
 8003566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003568:	4605      	mov	r5, r0
 800356a:	0710      	lsls	r0, r2, #28
 800356c:	460c      	mov	r4, r1
 800356e:	d457      	bmi.n	8003620 <__sflush_r+0xbc>
 8003570:	684b      	ldr	r3, [r1, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	dc04      	bgt.n	8003580 <__sflush_r+0x1c>
 8003576:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003578:	2b00      	cmp	r3, #0
 800357a:	dc01      	bgt.n	8003580 <__sflush_r+0x1c>
 800357c:	2000      	movs	r0, #0
 800357e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003580:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003582:	2e00      	cmp	r6, #0
 8003584:	d0fa      	beq.n	800357c <__sflush_r+0x18>
 8003586:	2300      	movs	r3, #0
 8003588:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800358c:	682f      	ldr	r7, [r5, #0]
 800358e:	6a21      	ldr	r1, [r4, #32]
 8003590:	602b      	str	r3, [r5, #0]
 8003592:	d032      	beq.n	80035fa <__sflush_r+0x96>
 8003594:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003596:	89a3      	ldrh	r3, [r4, #12]
 8003598:	075a      	lsls	r2, r3, #29
 800359a:	d505      	bpl.n	80035a8 <__sflush_r+0x44>
 800359c:	6863      	ldr	r3, [r4, #4]
 800359e:	1ac0      	subs	r0, r0, r3
 80035a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035a2:	b10b      	cbz	r3, 80035a8 <__sflush_r+0x44>
 80035a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035a6:	1ac0      	subs	r0, r0, r3
 80035a8:	2300      	movs	r3, #0
 80035aa:	4602      	mov	r2, r0
 80035ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035ae:	4628      	mov	r0, r5
 80035b0:	6a21      	ldr	r1, [r4, #32]
 80035b2:	47b0      	blx	r6
 80035b4:	1c43      	adds	r3, r0, #1
 80035b6:	89a3      	ldrh	r3, [r4, #12]
 80035b8:	d106      	bne.n	80035c8 <__sflush_r+0x64>
 80035ba:	6829      	ldr	r1, [r5, #0]
 80035bc:	291d      	cmp	r1, #29
 80035be:	d82b      	bhi.n	8003618 <__sflush_r+0xb4>
 80035c0:	4a28      	ldr	r2, [pc, #160]	; (8003664 <__sflush_r+0x100>)
 80035c2:	410a      	asrs	r2, r1
 80035c4:	07d6      	lsls	r6, r2, #31
 80035c6:	d427      	bmi.n	8003618 <__sflush_r+0xb4>
 80035c8:	2200      	movs	r2, #0
 80035ca:	6062      	str	r2, [r4, #4]
 80035cc:	6922      	ldr	r2, [r4, #16]
 80035ce:	04d9      	lsls	r1, r3, #19
 80035d0:	6022      	str	r2, [r4, #0]
 80035d2:	d504      	bpl.n	80035de <__sflush_r+0x7a>
 80035d4:	1c42      	adds	r2, r0, #1
 80035d6:	d101      	bne.n	80035dc <__sflush_r+0x78>
 80035d8:	682b      	ldr	r3, [r5, #0]
 80035da:	b903      	cbnz	r3, 80035de <__sflush_r+0x7a>
 80035dc:	6560      	str	r0, [r4, #84]	; 0x54
 80035de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035e0:	602f      	str	r7, [r5, #0]
 80035e2:	2900      	cmp	r1, #0
 80035e4:	d0ca      	beq.n	800357c <__sflush_r+0x18>
 80035e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035ea:	4299      	cmp	r1, r3
 80035ec:	d002      	beq.n	80035f4 <__sflush_r+0x90>
 80035ee:	4628      	mov	r0, r5
 80035f0:	f7ff fbee 	bl	8002dd0 <_free_r>
 80035f4:	2000      	movs	r0, #0
 80035f6:	6360      	str	r0, [r4, #52]	; 0x34
 80035f8:	e7c1      	b.n	800357e <__sflush_r+0x1a>
 80035fa:	2301      	movs	r3, #1
 80035fc:	4628      	mov	r0, r5
 80035fe:	47b0      	blx	r6
 8003600:	1c41      	adds	r1, r0, #1
 8003602:	d1c8      	bne.n	8003596 <__sflush_r+0x32>
 8003604:	682b      	ldr	r3, [r5, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0c5      	beq.n	8003596 <__sflush_r+0x32>
 800360a:	2b1d      	cmp	r3, #29
 800360c:	d001      	beq.n	8003612 <__sflush_r+0xae>
 800360e:	2b16      	cmp	r3, #22
 8003610:	d101      	bne.n	8003616 <__sflush_r+0xb2>
 8003612:	602f      	str	r7, [r5, #0]
 8003614:	e7b2      	b.n	800357c <__sflush_r+0x18>
 8003616:	89a3      	ldrh	r3, [r4, #12]
 8003618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800361c:	81a3      	strh	r3, [r4, #12]
 800361e:	e7ae      	b.n	800357e <__sflush_r+0x1a>
 8003620:	690f      	ldr	r7, [r1, #16]
 8003622:	2f00      	cmp	r7, #0
 8003624:	d0aa      	beq.n	800357c <__sflush_r+0x18>
 8003626:	0793      	lsls	r3, r2, #30
 8003628:	bf18      	it	ne
 800362a:	2300      	movne	r3, #0
 800362c:	680e      	ldr	r6, [r1, #0]
 800362e:	bf08      	it	eq
 8003630:	694b      	ldreq	r3, [r1, #20]
 8003632:	1bf6      	subs	r6, r6, r7
 8003634:	600f      	str	r7, [r1, #0]
 8003636:	608b      	str	r3, [r1, #8]
 8003638:	2e00      	cmp	r6, #0
 800363a:	dd9f      	ble.n	800357c <__sflush_r+0x18>
 800363c:	4633      	mov	r3, r6
 800363e:	463a      	mov	r2, r7
 8003640:	4628      	mov	r0, r5
 8003642:	6a21      	ldr	r1, [r4, #32]
 8003644:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003648:	47e0      	blx	ip
 800364a:	2800      	cmp	r0, #0
 800364c:	dc06      	bgt.n	800365c <__sflush_r+0xf8>
 800364e:	89a3      	ldrh	r3, [r4, #12]
 8003650:	f04f 30ff 	mov.w	r0, #4294967295
 8003654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003658:	81a3      	strh	r3, [r4, #12]
 800365a:	e790      	b.n	800357e <__sflush_r+0x1a>
 800365c:	4407      	add	r7, r0
 800365e:	1a36      	subs	r6, r6, r0
 8003660:	e7ea      	b.n	8003638 <__sflush_r+0xd4>
 8003662:	bf00      	nop
 8003664:	dfbffffe 	.word	0xdfbffffe

08003668 <_fflush_r>:
 8003668:	b538      	push	{r3, r4, r5, lr}
 800366a:	690b      	ldr	r3, [r1, #16]
 800366c:	4605      	mov	r5, r0
 800366e:	460c      	mov	r4, r1
 8003670:	b913      	cbnz	r3, 8003678 <_fflush_r+0x10>
 8003672:	2500      	movs	r5, #0
 8003674:	4628      	mov	r0, r5
 8003676:	bd38      	pop	{r3, r4, r5, pc}
 8003678:	b118      	cbz	r0, 8003682 <_fflush_r+0x1a>
 800367a:	6a03      	ldr	r3, [r0, #32]
 800367c:	b90b      	cbnz	r3, 8003682 <_fflush_r+0x1a>
 800367e:	f7ff f9b1 	bl	80029e4 <__sinit>
 8003682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0f3      	beq.n	8003672 <_fflush_r+0xa>
 800368a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800368c:	07d0      	lsls	r0, r2, #31
 800368e:	d404      	bmi.n	800369a <_fflush_r+0x32>
 8003690:	0599      	lsls	r1, r3, #22
 8003692:	d402      	bmi.n	800369a <_fflush_r+0x32>
 8003694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003696:	f7ff fb99 	bl	8002dcc <__retarget_lock_acquire_recursive>
 800369a:	4628      	mov	r0, r5
 800369c:	4621      	mov	r1, r4
 800369e:	f7ff ff61 	bl	8003564 <__sflush_r>
 80036a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036a4:	4605      	mov	r5, r0
 80036a6:	07da      	lsls	r2, r3, #31
 80036a8:	d4e4      	bmi.n	8003674 <_fflush_r+0xc>
 80036aa:	89a3      	ldrh	r3, [r4, #12]
 80036ac:	059b      	lsls	r3, r3, #22
 80036ae:	d4e1      	bmi.n	8003674 <_fflush_r+0xc>
 80036b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036b2:	f7ff fb8c 	bl	8002dce <__retarget_lock_release_recursive>
 80036b6:	e7dd      	b.n	8003674 <_fflush_r+0xc>

080036b8 <__swhatbuf_r>:
 80036b8:	b570      	push	{r4, r5, r6, lr}
 80036ba:	460c      	mov	r4, r1
 80036bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036c0:	4615      	mov	r5, r2
 80036c2:	2900      	cmp	r1, #0
 80036c4:	461e      	mov	r6, r3
 80036c6:	b096      	sub	sp, #88	; 0x58
 80036c8:	da0c      	bge.n	80036e4 <__swhatbuf_r+0x2c>
 80036ca:	89a3      	ldrh	r3, [r4, #12]
 80036cc:	2100      	movs	r1, #0
 80036ce:	f013 0f80 	tst.w	r3, #128	; 0x80
 80036d2:	bf0c      	ite	eq
 80036d4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80036d8:	2340      	movne	r3, #64	; 0x40
 80036da:	2000      	movs	r0, #0
 80036dc:	6031      	str	r1, [r6, #0]
 80036de:	602b      	str	r3, [r5, #0]
 80036e0:	b016      	add	sp, #88	; 0x58
 80036e2:	bd70      	pop	{r4, r5, r6, pc}
 80036e4:	466a      	mov	r2, sp
 80036e6:	f000 f849 	bl	800377c <_fstat_r>
 80036ea:	2800      	cmp	r0, #0
 80036ec:	dbed      	blt.n	80036ca <__swhatbuf_r+0x12>
 80036ee:	9901      	ldr	r1, [sp, #4]
 80036f0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80036f4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80036f8:	4259      	negs	r1, r3
 80036fa:	4159      	adcs	r1, r3
 80036fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003700:	e7eb      	b.n	80036da <__swhatbuf_r+0x22>

08003702 <__smakebuf_r>:
 8003702:	898b      	ldrh	r3, [r1, #12]
 8003704:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003706:	079d      	lsls	r5, r3, #30
 8003708:	4606      	mov	r6, r0
 800370a:	460c      	mov	r4, r1
 800370c:	d507      	bpl.n	800371e <__smakebuf_r+0x1c>
 800370e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003712:	6023      	str	r3, [r4, #0]
 8003714:	6123      	str	r3, [r4, #16]
 8003716:	2301      	movs	r3, #1
 8003718:	6163      	str	r3, [r4, #20]
 800371a:	b002      	add	sp, #8
 800371c:	bd70      	pop	{r4, r5, r6, pc}
 800371e:	466a      	mov	r2, sp
 8003720:	ab01      	add	r3, sp, #4
 8003722:	f7ff ffc9 	bl	80036b8 <__swhatbuf_r>
 8003726:	9900      	ldr	r1, [sp, #0]
 8003728:	4605      	mov	r5, r0
 800372a:	4630      	mov	r0, r6
 800372c:	f7ff fbb8 	bl	8002ea0 <_malloc_r>
 8003730:	b948      	cbnz	r0, 8003746 <__smakebuf_r+0x44>
 8003732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003736:	059a      	lsls	r2, r3, #22
 8003738:	d4ef      	bmi.n	800371a <__smakebuf_r+0x18>
 800373a:	f023 0303 	bic.w	r3, r3, #3
 800373e:	f043 0302 	orr.w	r3, r3, #2
 8003742:	81a3      	strh	r3, [r4, #12]
 8003744:	e7e3      	b.n	800370e <__smakebuf_r+0xc>
 8003746:	89a3      	ldrh	r3, [r4, #12]
 8003748:	6020      	str	r0, [r4, #0]
 800374a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800374e:	81a3      	strh	r3, [r4, #12]
 8003750:	9b00      	ldr	r3, [sp, #0]
 8003752:	6120      	str	r0, [r4, #16]
 8003754:	6163      	str	r3, [r4, #20]
 8003756:	9b01      	ldr	r3, [sp, #4]
 8003758:	b15b      	cbz	r3, 8003772 <__smakebuf_r+0x70>
 800375a:	4630      	mov	r0, r6
 800375c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003760:	f000 f81e 	bl	80037a0 <_isatty_r>
 8003764:	b128      	cbz	r0, 8003772 <__smakebuf_r+0x70>
 8003766:	89a3      	ldrh	r3, [r4, #12]
 8003768:	f023 0303 	bic.w	r3, r3, #3
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	81a3      	strh	r3, [r4, #12]
 8003772:	89a3      	ldrh	r3, [r4, #12]
 8003774:	431d      	orrs	r5, r3
 8003776:	81a5      	strh	r5, [r4, #12]
 8003778:	e7cf      	b.n	800371a <__smakebuf_r+0x18>
	...

0800377c <_fstat_r>:
 800377c:	b538      	push	{r3, r4, r5, lr}
 800377e:	2300      	movs	r3, #0
 8003780:	4d06      	ldr	r5, [pc, #24]	; (800379c <_fstat_r+0x20>)
 8003782:	4604      	mov	r4, r0
 8003784:	4608      	mov	r0, r1
 8003786:	4611      	mov	r1, r2
 8003788:	602b      	str	r3, [r5, #0]
 800378a:	f7fc ff3b 	bl	8000604 <_fstat>
 800378e:	1c43      	adds	r3, r0, #1
 8003790:	d102      	bne.n	8003798 <_fstat_r+0x1c>
 8003792:	682b      	ldr	r3, [r5, #0]
 8003794:	b103      	cbz	r3, 8003798 <_fstat_r+0x1c>
 8003796:	6023      	str	r3, [r4, #0]
 8003798:	bd38      	pop	{r3, r4, r5, pc}
 800379a:	bf00      	nop
 800379c:	2000028c 	.word	0x2000028c

080037a0 <_isatty_r>:
 80037a0:	b538      	push	{r3, r4, r5, lr}
 80037a2:	2300      	movs	r3, #0
 80037a4:	4d05      	ldr	r5, [pc, #20]	; (80037bc <_isatty_r+0x1c>)
 80037a6:	4604      	mov	r4, r0
 80037a8:	4608      	mov	r0, r1
 80037aa:	602b      	str	r3, [r5, #0]
 80037ac:	f7fc ff39 	bl	8000622 <_isatty>
 80037b0:	1c43      	adds	r3, r0, #1
 80037b2:	d102      	bne.n	80037ba <_isatty_r+0x1a>
 80037b4:	682b      	ldr	r3, [r5, #0]
 80037b6:	b103      	cbz	r3, 80037ba <_isatty_r+0x1a>
 80037b8:	6023      	str	r3, [r4, #0]
 80037ba:	bd38      	pop	{r3, r4, r5, pc}
 80037bc:	2000028c 	.word	0x2000028c

080037c0 <_sbrk_r>:
 80037c0:	b538      	push	{r3, r4, r5, lr}
 80037c2:	2300      	movs	r3, #0
 80037c4:	4d05      	ldr	r5, [pc, #20]	; (80037dc <_sbrk_r+0x1c>)
 80037c6:	4604      	mov	r4, r0
 80037c8:	4608      	mov	r0, r1
 80037ca:	602b      	str	r3, [r5, #0]
 80037cc:	f7fc ff40 	bl	8000650 <_sbrk>
 80037d0:	1c43      	adds	r3, r0, #1
 80037d2:	d102      	bne.n	80037da <_sbrk_r+0x1a>
 80037d4:	682b      	ldr	r3, [r5, #0]
 80037d6:	b103      	cbz	r3, 80037da <_sbrk_r+0x1a>
 80037d8:	6023      	str	r3, [r4, #0]
 80037da:	bd38      	pop	{r3, r4, r5, pc}
 80037dc:	2000028c 	.word	0x2000028c

080037e0 <memchr>:
 80037e0:	4603      	mov	r3, r0
 80037e2:	b510      	push	{r4, lr}
 80037e4:	b2c9      	uxtb	r1, r1
 80037e6:	4402      	add	r2, r0
 80037e8:	4293      	cmp	r3, r2
 80037ea:	4618      	mov	r0, r3
 80037ec:	d101      	bne.n	80037f2 <memchr+0x12>
 80037ee:	2000      	movs	r0, #0
 80037f0:	e003      	b.n	80037fa <memchr+0x1a>
 80037f2:	7804      	ldrb	r4, [r0, #0]
 80037f4:	3301      	adds	r3, #1
 80037f6:	428c      	cmp	r4, r1
 80037f8:	d1f6      	bne.n	80037e8 <memchr+0x8>
 80037fa:	bd10      	pop	{r4, pc}

080037fc <_init>:
 80037fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fe:	bf00      	nop
 8003800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003802:	bc08      	pop	{r3}
 8003804:	469e      	mov	lr, r3
 8003806:	4770      	bx	lr

08003808 <_fini>:
 8003808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380a:	bf00      	nop
 800380c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800380e:	bc08      	pop	{r3}
 8003810:	469e      	mov	lr, r3
 8003812:	4770      	bx	lr
