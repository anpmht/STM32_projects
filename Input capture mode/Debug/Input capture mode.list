
Input capture mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007924  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08007a38  08007a38  00017a38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ed0  08007ed0  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08007ed0  08007ed0  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ed0  08007ed0  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ed0  08007ed0  00017ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ed4  08007ed4  00017ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  200001d4  080080ac  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  080080ac  00020410  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c1a7  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d1f  00000000  00000000  0002c3e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c48  00000000  00000000  0002e108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000992  00000000  00000000  0002ed50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000186ac  00000000  00000000  0002f6e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000da60  00000000  00000000  00047d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008be56  00000000  00000000  000557ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000047c4  00000000  00000000  000e1644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000e5e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007a1c 	.word	0x08007a1c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08007a1c 	.word	0x08007a1c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bdc:	f000 fb82 	bl	80012e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be0:	f000 f80b 	bl	8000bfa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be4:	f000 f8e8 	bl	8000db8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000be8:	f000 f84c 	bl	8000c84 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000bec:	f000 f8ba 	bl	8000d64 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	setup();
 8000bf0:	f000 fab4 	bl	800115c <setup>
	while (1) {
		loop();
 8000bf4:	f000 fad0 	bl	8001198 <loop>
 8000bf8:	e7fc      	b.n	8000bf4 <main+0x1c>

08000bfa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b090      	sub	sp, #64	; 0x40
 8000bfe:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c00:	f107 0318 	add.w	r3, r7, #24
 8000c04:	2228      	movs	r2, #40	; 0x28
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f003 fae4 	bl	80041d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c24:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c38:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3e:	f107 0318 	add.w	r3, r7, #24
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 fe42 	bl	80018cc <HAL_RCC_OscConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c4e:	f000 f8d5 	bl	8000dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c52:	230f      	movs	r3, #15
 8000c54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c56:	2302      	movs	r3, #2
 8000c58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f001 f8af 	bl	8001dd0 <HAL_RCC_ClockConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c78:	f000 f8c0 	bl	8000dfc <Error_Handler>
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	3740      	adds	r7, #64	; 0x40
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c8a:	f107 0318 	add.w	r3, r7, #24
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ca2:	463b      	mov	r3, r7
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cae:	4b2c      	ldr	r3, [pc, #176]	; (8000d60 <MX_TIM2_Init+0xdc>)
 8000cb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cb4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cb6:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <MX_TIM2_Init+0xdc>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cbc:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <MX_TIM2_Init+0xdc>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000cc2:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <MX_TIM2_Init+0xdc>)
 8000cc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cc8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cca:	4b25      	ldr	r3, [pc, #148]	; (8000d60 <MX_TIM2_Init+0xdc>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cd0:	4b23      	ldr	r3, [pc, #140]	; (8000d60 <MX_TIM2_Init+0xdc>)
 8000cd2:	2280      	movs	r2, #128	; 0x80
 8000cd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cd6:	4822      	ldr	r0, [pc, #136]	; (8000d60 <MX_TIM2_Init+0xdc>)
 8000cd8:	f001 fa08 	bl	80020ec <HAL_TIM_Base_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000ce2:	f000 f88b 	bl	8000dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cea:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cec:	f107 0318 	add.w	r3, r7, #24
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	481b      	ldr	r0, [pc, #108]	; (8000d60 <MX_TIM2_Init+0xdc>)
 8000cf4:	f001 fda4 	bl	8002840 <HAL_TIM_ConfigClockSource>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000cfe:	f000 f87d 	bl	8000dfc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000d02:	4817      	ldr	r0, [pc, #92]	; (8000d60 <MX_TIM2_Init+0xdc>)
 8000d04:	f001 fa94 	bl	8002230 <HAL_TIM_IC_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d0e:	f000 f875 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d1a:	f107 0310 	add.w	r3, r7, #16
 8000d1e:	4619      	mov	r1, r3
 8000d20:	480f      	ldr	r0, [pc, #60]	; (8000d60 <MX_TIM2_Init+0xdc>)
 8000d22:	f002 f899 	bl	8002e58 <HAL_TIMEx_MasterConfigSynchronization>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000d2c:	f000 f866 	bl	8000dfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d30:	2300      	movs	r3, #0
 8000d32:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d34:	2301      	movs	r3, #1
 8000d36:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d40:	463b      	mov	r3, r7
 8000d42:	2200      	movs	r2, #0
 8000d44:	4619      	mov	r1, r3
 8000d46:	4806      	ldr	r0, [pc, #24]	; (8000d60 <MX_TIM2_Init+0xdc>)
 8000d48:	f001 fcde 	bl	8002708 <HAL_TIM_IC_ConfigChannel>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000d52:	f000 f853 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	; 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200001f0 	.word	0x200001f0

08000d64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_USART1_UART_Init+0x4c>)
 8000d6a:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <MX_USART1_UART_Init+0x50>)
 8000d6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <MX_USART1_UART_Init+0x4c>)
 8000d70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_USART1_UART_Init+0x4c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <MX_USART1_UART_Init+0x4c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <MX_USART1_UART_Init+0x4c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_USART1_UART_Init+0x4c>)
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <MX_USART1_UART_Init+0x4c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_USART1_UART_Init+0x4c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_USART1_UART_Init+0x4c>)
 8000d9c:	f002 f8cc 	bl	8002f38 <HAL_UART_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000da6:	f000 f829 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000238 	.word	0x20000238
 8000db4:	40013800 	.word	0x40013800

08000db8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <MX_GPIO_Init+0x40>)
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <MX_GPIO_Init+0x40>)
 8000dc4:	f043 0320 	orr.w	r3, r3, #32
 8000dc8:	6193      	str	r3, [r2, #24]
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <MX_GPIO_Init+0x40>)
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	f003 0320 	and.w	r3, r3, #32
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <MX_GPIO_Init+0x40>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <MX_GPIO_Init+0x40>)
 8000ddc:	f043 0304 	orr.w	r3, r3, #4
 8000de0:	6193      	str	r3, [r2, #24]
 8000de2:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <MX_GPIO_Init+0x40>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	f003 0304 	and.w	r3, r3, #4
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	40021000 	.word	0x40021000

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
}
 8000e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e04:	e7fe      	b.n	8000e04 <Error_Handler+0x8>
	...

08000e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_MspInit+0x40>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <HAL_MspInit+0x40>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6193      	str	r3, [r2, #24]
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_MspInit+0x40>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_MspInit+0x40>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <HAL_MspInit+0x40>)
 8000e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e30:	61d3      	str	r3, [r2, #28]
 8000e32:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <HAL_MspInit+0x40>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	40021000 	.word	0x40021000

08000e4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e6a:	d12b      	bne.n	8000ec4 <HAL_TIM_Base_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e6c:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <HAL_TIM_Base_MspInit+0x80>)
 8000e6e:	69db      	ldr	r3, [r3, #28]
 8000e70:	4a16      	ldr	r2, [pc, #88]	; (8000ecc <HAL_TIM_Base_MspInit+0x80>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	61d3      	str	r3, [r2, #28]
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <HAL_TIM_Base_MspInit+0x80>)
 8000e7a:	69db      	ldr	r3, [r3, #28]
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_TIM_Base_MspInit+0x80>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a10      	ldr	r2, [pc, #64]	; (8000ecc <HAL_TIM_Base_MspInit+0x80>)
 8000e8a:	f043 0304 	orr.w	r3, r3, #4
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_TIM_Base_MspInit+0x80>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	4619      	mov	r1, r3
 8000eae:	4808      	ldr	r0, [pc, #32]	; (8000ed0 <HAL_TIM_Base_MspInit+0x84>)
 8000eb0:	f000 fb88 	bl	80015c4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	201c      	movs	r0, #28
 8000eba:	f000 fb4c 	bl	8001556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ebe:	201c      	movs	r0, #28
 8000ec0:	f000 fb65 	bl	800158e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ec4:	bf00      	nop
 8000ec6:	3720      	adds	r7, #32
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40010800 	.word	0x40010800

08000ed4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a1c      	ldr	r2, [pc, #112]	; (8000f60 <HAL_UART_MspInit+0x8c>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d131      	bne.n	8000f58 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <HAL_UART_MspInit+0x90>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a1a      	ldr	r2, [pc, #104]	; (8000f64 <HAL_UART_MspInit+0x90>)
 8000efa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000efe:	6193      	str	r3, [r2, #24]
 8000f00:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <HAL_UART_MspInit+0x90>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <HAL_UART_MspInit+0x90>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <HAL_UART_MspInit+0x90>)
 8000f12:	f043 0304 	orr.w	r3, r3, #4
 8000f16:	6193      	str	r3, [r2, #24]
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_UART_MspInit+0x90>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 0310 	add.w	r3, r7, #16
 8000f36:	4619      	mov	r1, r3
 8000f38:	480b      	ldr	r0, [pc, #44]	; (8000f68 <HAL_UART_MspInit+0x94>)
 8000f3a:	f000 fb43 	bl	80015c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 0310 	add.w	r3, r7, #16
 8000f50:	4619      	mov	r1, r3
 8000f52:	4805      	ldr	r0, [pc, #20]	; (8000f68 <HAL_UART_MspInit+0x94>)
 8000f54:	f000 fb36 	bl	80015c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f58:	bf00      	nop
 8000f5a:	3720      	adds	r7, #32
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40013800 	.word	0x40013800
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40010800 	.word	0x40010800

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <NMI_Handler+0x4>

08000f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <HardFault_Handler+0x4>

08000f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <MemManage_Handler+0x4>

08000f7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr

08000f96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr

08000fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr

08000fae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb2:	f000 f9dd 	bl	8001370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <TIM2_IRQHandler+0x10>)
 8000fc2:	f001 fa99 	bl	80024f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200001f0 	.word	0x200001f0

08000fd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return 1;
 8000fd4:	2301      	movs	r3, #1
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr

08000fde <_kill>:

int _kill(int pid, int sig)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
 8000fe6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fe8:	f003 f948 	bl	800427c <__errno>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2216      	movs	r2, #22
 8000ff0:	601a      	str	r2, [r3, #0]
  return -1;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <_exit>:

void _exit (int status)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001006:	f04f 31ff 	mov.w	r1, #4294967295
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ffe7 	bl	8000fde <_kill>
  while (1) {}    /* Make sure we hang here */
 8001010:	e7fe      	b.n	8001010 <_exit+0x12>

08001012 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	60f8      	str	r0, [r7, #12]
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	e00a      	b.n	800103a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001024:	f3af 8000 	nop.w
 8001028:	4601      	mov	r1, r0
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1c5a      	adds	r2, r3, #1
 800102e:	60ba      	str	r2, [r7, #8]
 8001030:	b2ca      	uxtb	r2, r1
 8001032:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	3301      	adds	r3, #1
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	429a      	cmp	r2, r3
 8001040:	dbf0      	blt.n	8001024 <_read+0x12>
  }

  return len;
 8001042:	687b      	ldr	r3, [r7, #4]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	e009      	b.n	8001072 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	1c5a      	adds	r2, r3, #1
 8001062:	60ba      	str	r2, [r7, #8]
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	3301      	adds	r3, #1
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	429a      	cmp	r2, r3
 8001078:	dbf1      	blt.n	800105e <_write+0x12>
  }
  return len;
 800107a:	687b      	ldr	r3, [r7, #4]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <_close>:

int _close(int file)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800108c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001090:	4618      	mov	r0, r3
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr

0800109a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010aa:	605a      	str	r2, [r3, #4]
  return 0;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <_isatty>:

int _isatty(int file)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010c0:	2301      	movs	r3, #1
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ec:	4a14      	ldr	r2, [pc, #80]	; (8001140 <_sbrk+0x5c>)
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <_sbrk+0x60>)
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d102      	bne.n	8001106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <_sbrk+0x64>)
 8001102:	4a12      	ldr	r2, [pc, #72]	; (800114c <_sbrk+0x68>)
 8001104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	429a      	cmp	r2, r3
 8001112:	d207      	bcs.n	8001124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001114:	f003 f8b2 	bl	800427c <__errno>
 8001118:	4603      	mov	r3, r0
 800111a:	220c      	movs	r2, #12
 800111c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	e009      	b.n	8001138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <_sbrk+0x64>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	4a05      	ldr	r2, [pc, #20]	; (8001148 <_sbrk+0x64>)
 8001134:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001136:	68fb      	ldr	r3, [r7, #12]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20005000 	.word	0x20005000
 8001144:	00000400 	.word	0x00000400
 8001148:	20000280 	.word	0x20000280
 800114c:	20000410 	.word	0x20000410

08001150 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <setup>:
uint32_t gu32_Freq = 0;

extern TIM_HandleTypeDef htim2;
extern UART_HandleTypeDef huart1;

void setup() {
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	sprintf(gu8_MSG, "program started\n");
 8001160:	4909      	ldr	r1, [pc, #36]	; (8001188 <setup+0x2c>)
 8001162:	480a      	ldr	r0, [pc, #40]	; (800118c <setup+0x30>)
 8001164:	f002 ffd4 	bl	8004110 <siprintf>
	HAL_UART_Transmit(&huart1, gu8_MSG, sizeof(gu8_MSG), 100);
 8001168:	2364      	movs	r3, #100	; 0x64
 800116a:	2223      	movs	r2, #35	; 0x23
 800116c:	4907      	ldr	r1, [pc, #28]	; (800118c <setup+0x30>)
 800116e:	4808      	ldr	r0, [pc, #32]	; (8001190 <setup+0x34>)
 8001170:	f001 ff32 	bl	8002fd8 <HAL_UART_Transmit>
	HAL_TIM_Base_Start_IT(&htim2);
 8001174:	4807      	ldr	r0, [pc, #28]	; (8001194 <setup+0x38>)
 8001176:	f001 f809 	bl	800218c <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800117a:	2100      	movs	r1, #0
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <setup+0x38>)
 800117e:	f001 f8af 	bl	80022e0 <HAL_TIM_IC_Start_IT>
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	08007a38 	.word	0x08007a38
 800118c:	20000288 	.word	0x20000288
 8001190:	20000238 	.word	0x20000238
 8001194:	200001f0 	.word	0x200001f0

08001198 <loop>:

void loop() {
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0

}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	sprintf(gu8_MSG, "interrupt triggered\n");
 80011ac:	4926      	ldr	r1, [pc, #152]	; (8001248 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80011ae:	4827      	ldr	r0, [pc, #156]	; (800124c <HAL_TIM_IC_CaptureCallback+0xa8>)
 80011b0:	f002 ffae 	bl	8004110 <siprintf>
	HAL_UART_Transmit(&huart1, gu8_MSG, sizeof(gu8_MSG), 100);
 80011b4:	2364      	movs	r3, #100	; 0x64
 80011b6:	2223      	movs	r2, #35	; 0x23
 80011b8:	4924      	ldr	r1, [pc, #144]	; (800124c <HAL_TIM_IC_CaptureCallback+0xa8>)
 80011ba:	4825      	ldr	r0, [pc, #148]	; (8001250 <HAL_TIM_IC_CaptureCallback+0xac>)
 80011bc:	f001 ff0c 	bl	8002fd8 <HAL_UART_Transmit>
	if (gu8_State == IDLE) {
 80011c0:	4b24      	ldr	r3, [pc, #144]	; (8001254 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d10b      	bne.n	80011e0 <HAL_TIM_IC_CaptureCallback+0x3c>
		gu32_T1 = TIM2->CCR1;
 80011c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ce:	4a22      	ldr	r2, [pc, #136]	; (8001258 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80011d0:	6013      	str	r3, [r2, #0]
		gu16_TIM2_OVC = 0;
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <HAL_TIM_IC_CaptureCallback+0xb8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	801a      	strh	r2, [r3, #0]
		gu8_State = DONE;
 80011d8:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
			sprintf(gu8_MSG, "Frequency = %lu Hz\n\r", gu32_Freq);
			HAL_UART_Transmit(&huart1, gu8_MSG, sizeof(gu8_MSG), 100);
		}
		gu8_State = IDLE;
	}
}
 80011de:	e02f      	b.n	8001240 <HAL_TIM_IC_CaptureCallback+0x9c>
	} else if (gu8_State == DONE) {
 80011e0:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d12b      	bne.n	8001240 <HAL_TIM_IC_CaptureCallback+0x9c>
		gu32_T2 = TIM2->CCR1;
 80011e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ee:	4a1c      	ldr	r2, [pc, #112]	; (8001260 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80011f0:	6013      	str	r3, [r2, #0]
		gu32_Ticks = (gu32_T2 + (gu16_TIM2_OVC * 65536)) - gu32_T1;
 80011f2:	4b1a      	ldr	r3, [pc, #104]	; (800125c <HAL_TIM_IC_CaptureCallback+0xb8>)
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	041b      	lsls	r3, r3, #16
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b19      	ldr	r3, [pc, #100]	; (8001260 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	441a      	add	r2, r3
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	4a17      	ldr	r2, [pc, #92]	; (8001264 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001208:	6013      	str	r3, [r2, #0]
		gu32_Freq = (uint32_t) (F_CLK / gu32_Ticks);
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a16      	ldr	r2, [pc, #88]	; (8001268 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001210:	fbb2 f3f3 	udiv	r3, r2, r3
 8001214:	4a15      	ldr	r2, [pc, #84]	; (800126c <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001216:	6013      	str	r3, [r2, #0]
		if (gu32_Freq != 0) {
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <HAL_TIM_IC_CaptureCallback+0xc8>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00c      	beq.n	800123a <HAL_TIM_IC_CaptureCallback+0x96>
			sprintf(gu8_MSG, "Frequency = %lu Hz\n\r", gu32_Freq);
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	4912      	ldr	r1, [pc, #72]	; (8001270 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001228:	4808      	ldr	r0, [pc, #32]	; (800124c <HAL_TIM_IC_CaptureCallback+0xa8>)
 800122a:	f002 ff71 	bl	8004110 <siprintf>
			HAL_UART_Transmit(&huart1, gu8_MSG, sizeof(gu8_MSG), 100);
 800122e:	2364      	movs	r3, #100	; 0x64
 8001230:	2223      	movs	r2, #35	; 0x23
 8001232:	4906      	ldr	r1, [pc, #24]	; (800124c <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001234:	4806      	ldr	r0, [pc, #24]	; (8001250 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001236:	f001 fecf 	bl	8002fd8 <HAL_UART_Transmit>
		gu8_State = IDLE;
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_TIM_IC_CaptureCallback+0xb0>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	08007a4c 	.word	0x08007a4c
 800124c:	20000288 	.word	0x20000288
 8001250:	20000238 	.word	0x20000238
 8001254:	20000284 	.word	0x20000284
 8001258:	200002ac 	.word	0x200002ac
 800125c:	200002b8 	.word	0x200002b8
 8001260:	200002b0 	.word	0x200002b0
 8001264:	200002b4 	.word	0x200002b4
 8001268:	044aa200 	.word	0x044aa200
 800126c:	200002bc 	.word	0x200002bc
 8001270:	08007a64 	.word	0x08007a64

08001274 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	gu16_TIM2_OVC++;
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	3301      	adds	r3, #1
 8001282:	b29a      	uxth	r2, r3
 8001284:	4b03      	ldr	r3, [pc, #12]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001286:	801a      	strh	r2, [r3, #0]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	200002b8 	.word	0x200002b8

08001298 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001298:	f7ff ff5a 	bl	8001150 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800129c:	480b      	ldr	r0, [pc, #44]	; (80012cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800129e:	490c      	ldr	r1, [pc, #48]	; (80012d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012a0:	4a0c      	ldr	r2, [pc, #48]	; (80012d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a4:	e002      	b.n	80012ac <LoopCopyDataInit>

080012a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012aa:	3304      	adds	r3, #4

080012ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b0:	d3f9      	bcc.n	80012a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b2:	4a09      	ldr	r2, [pc, #36]	; (80012d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012b4:	4c09      	ldr	r4, [pc, #36]	; (80012dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b8:	e001      	b.n	80012be <LoopFillZerobss>

080012ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012bc:	3204      	adds	r2, #4

080012be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c0:	d3fb      	bcc.n	80012ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012c2:	f002 ffe1 	bl	8004288 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012c6:	f7ff fc87 	bl	8000bd8 <main>
  bx lr
 80012ca:	4770      	bx	lr
  ldr r0, =_sdata
 80012cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80012d4:	08007ed8 	.word	0x08007ed8
  ldr r2, =_sbss
 80012d8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80012dc:	20000410 	.word	0x20000410

080012e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012e0:	e7fe      	b.n	80012e0 <ADC1_2_IRQHandler>
	...

080012e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_Init+0x28>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a07      	ldr	r2, [pc, #28]	; (800130c <HAL_Init+0x28>)
 80012ee:	f043 0310 	orr.w	r3, r3, #16
 80012f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f4:	2003      	movs	r0, #3
 80012f6:	f000 f923 	bl	8001540 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fa:	200f      	movs	r0, #15
 80012fc:	f000 f808 	bl	8001310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001300:	f7ff fd82 	bl	8000e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40022000 	.word	0x40022000

08001310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_InitTick+0x54>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_InitTick+0x58>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	fbb3 f3f1 	udiv	r3, r3, r1
 800132a:	fbb2 f3f3 	udiv	r3, r2, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f000 f93b 	bl	80015aa <HAL_SYSTICK_Config>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e00e      	b.n	800135c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b0f      	cmp	r3, #15
 8001342:	d80a      	bhi.n	800135a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001344:	2200      	movs	r2, #0
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f000 f903 	bl	8001556 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001350:	4a06      	ldr	r2, [pc, #24]	; (800136c <HAL_InitTick+0x5c>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	e000      	b.n	800135c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
}
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000000 	.word	0x20000000
 8001368:	20000008 	.word	0x20000008
 800136c:	20000004 	.word	0x20000004

08001370 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <HAL_IncTick+0x1c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <HAL_IncTick+0x20>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4413      	add	r3, r2
 8001380:	4a03      	ldr	r2, [pc, #12]	; (8001390 <HAL_IncTick+0x20>)
 8001382:	6013      	str	r3, [r2, #0]
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	20000008 	.word	0x20000008
 8001390:	200002c0 	.word	0x200002c0

08001394 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return uwTick;
 8001398:	4b02      	ldr	r3, [pc, #8]	; (80013a4 <HAL_GetTick+0x10>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	200002c0 	.word	0x200002c0

080013a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c4:	4013      	ands	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013da:	4a04      	ldr	r2, [pc, #16]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	60d3      	str	r3, [r2, #12]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <__NVIC_GetPriorityGrouping+0x18>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	f003 0307 	and.w	r3, r3, #7
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	2b00      	cmp	r3, #0
 800141c:	db0b      	blt.n	8001436 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	f003 021f 	and.w	r2, r3, #31
 8001424:	4906      	ldr	r1, [pc, #24]	; (8001440 <__NVIC_EnableIRQ+0x34>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	095b      	lsrs	r3, r3, #5
 800142c:	2001      	movs	r0, #1
 800142e:	fa00 f202 	lsl.w	r2, r0, r2
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	e000e100 	.word	0xe000e100

08001444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	6039      	str	r1, [r7, #0]
 800144e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	2b00      	cmp	r3, #0
 8001456:	db0a      	blt.n	800146e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	b2da      	uxtb	r2, r3
 800145c:	490c      	ldr	r1, [pc, #48]	; (8001490 <__NVIC_SetPriority+0x4c>)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	0112      	lsls	r2, r2, #4
 8001464:	b2d2      	uxtb	r2, r2
 8001466:	440b      	add	r3, r1
 8001468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800146c:	e00a      	b.n	8001484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4908      	ldr	r1, [pc, #32]	; (8001494 <__NVIC_SetPriority+0x50>)
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	3b04      	subs	r3, #4
 800147c:	0112      	lsls	r2, r2, #4
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	440b      	add	r3, r1
 8001482:	761a      	strb	r2, [r3, #24]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000e100 	.word	0xe000e100
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001498:	b480      	push	{r7}
 800149a:	b089      	sub	sp, #36	; 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f1c3 0307 	rsb	r3, r3, #7
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	bf28      	it	cs
 80014b6:	2304      	movcs	r3, #4
 80014b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3304      	adds	r3, #4
 80014be:	2b06      	cmp	r3, #6
 80014c0:	d902      	bls.n	80014c8 <NVIC_EncodePriority+0x30>
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3b03      	subs	r3, #3
 80014c6:	e000      	b.n	80014ca <NVIC_EncodePriority+0x32>
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	f04f 32ff 	mov.w	r2, #4294967295
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43da      	mvns	r2, r3
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	401a      	ands	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e0:	f04f 31ff 	mov.w	r1, #4294967295
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	43d9      	mvns	r1, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	4313      	orrs	r3, r2
         );
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3724      	adds	r7, #36	; 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800150c:	d301      	bcc.n	8001512 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150e:	2301      	movs	r3, #1
 8001510:	e00f      	b.n	8001532 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <SysTick_Config+0x40>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800151a:	210f      	movs	r1, #15
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	f7ff ff90 	bl	8001444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <SysTick_Config+0x40>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152a:	4b04      	ldr	r3, [pc, #16]	; (800153c <SysTick_Config+0x40>)
 800152c:	2207      	movs	r2, #7
 800152e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	e000e010 	.word	0xe000e010

08001540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff ff2d 	bl	80013a8 <__NVIC_SetPriorityGrouping>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001556:	b580      	push	{r7, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
 8001562:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001568:	f7ff ff42 	bl	80013f0 <__NVIC_GetPriorityGrouping>
 800156c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	68b9      	ldr	r1, [r7, #8]
 8001572:	6978      	ldr	r0, [r7, #20]
 8001574:	f7ff ff90 	bl	8001498 <NVIC_EncodePriority>
 8001578:	4602      	mov	r2, r0
 800157a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157e:	4611      	mov	r1, r2
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff5f 	bl	8001444 <__NVIC_SetPriority>
}
 8001586:	bf00      	nop
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	4603      	mov	r3, r0
 8001596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff35 	bl	800140c <__NVIC_EnableIRQ>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff ffa2 	bl	80014fc <SysTick_Config>
 80015b8:	4603      	mov	r3, r0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b08b      	sub	sp, #44	; 0x2c
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ce:	2300      	movs	r3, #0
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d6:	e169      	b.n	80018ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015d8:	2201      	movs	r2, #1
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	69fa      	ldr	r2, [r7, #28]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	f040 8158 	bne.w	80018a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	4a9a      	ldr	r2, [pc, #616]	; (8001864 <HAL_GPIO_Init+0x2a0>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d05e      	beq.n	80016be <HAL_GPIO_Init+0xfa>
 8001600:	4a98      	ldr	r2, [pc, #608]	; (8001864 <HAL_GPIO_Init+0x2a0>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d875      	bhi.n	80016f2 <HAL_GPIO_Init+0x12e>
 8001606:	4a98      	ldr	r2, [pc, #608]	; (8001868 <HAL_GPIO_Init+0x2a4>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d058      	beq.n	80016be <HAL_GPIO_Init+0xfa>
 800160c:	4a96      	ldr	r2, [pc, #600]	; (8001868 <HAL_GPIO_Init+0x2a4>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d86f      	bhi.n	80016f2 <HAL_GPIO_Init+0x12e>
 8001612:	4a96      	ldr	r2, [pc, #600]	; (800186c <HAL_GPIO_Init+0x2a8>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d052      	beq.n	80016be <HAL_GPIO_Init+0xfa>
 8001618:	4a94      	ldr	r2, [pc, #592]	; (800186c <HAL_GPIO_Init+0x2a8>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d869      	bhi.n	80016f2 <HAL_GPIO_Init+0x12e>
 800161e:	4a94      	ldr	r2, [pc, #592]	; (8001870 <HAL_GPIO_Init+0x2ac>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d04c      	beq.n	80016be <HAL_GPIO_Init+0xfa>
 8001624:	4a92      	ldr	r2, [pc, #584]	; (8001870 <HAL_GPIO_Init+0x2ac>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d863      	bhi.n	80016f2 <HAL_GPIO_Init+0x12e>
 800162a:	4a92      	ldr	r2, [pc, #584]	; (8001874 <HAL_GPIO_Init+0x2b0>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d046      	beq.n	80016be <HAL_GPIO_Init+0xfa>
 8001630:	4a90      	ldr	r2, [pc, #576]	; (8001874 <HAL_GPIO_Init+0x2b0>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d85d      	bhi.n	80016f2 <HAL_GPIO_Init+0x12e>
 8001636:	2b12      	cmp	r3, #18
 8001638:	d82a      	bhi.n	8001690 <HAL_GPIO_Init+0xcc>
 800163a:	2b12      	cmp	r3, #18
 800163c:	d859      	bhi.n	80016f2 <HAL_GPIO_Init+0x12e>
 800163e:	a201      	add	r2, pc, #4	; (adr r2, 8001644 <HAL_GPIO_Init+0x80>)
 8001640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001644:	080016bf 	.word	0x080016bf
 8001648:	08001699 	.word	0x08001699
 800164c:	080016ab 	.word	0x080016ab
 8001650:	080016ed 	.word	0x080016ed
 8001654:	080016f3 	.word	0x080016f3
 8001658:	080016f3 	.word	0x080016f3
 800165c:	080016f3 	.word	0x080016f3
 8001660:	080016f3 	.word	0x080016f3
 8001664:	080016f3 	.word	0x080016f3
 8001668:	080016f3 	.word	0x080016f3
 800166c:	080016f3 	.word	0x080016f3
 8001670:	080016f3 	.word	0x080016f3
 8001674:	080016f3 	.word	0x080016f3
 8001678:	080016f3 	.word	0x080016f3
 800167c:	080016f3 	.word	0x080016f3
 8001680:	080016f3 	.word	0x080016f3
 8001684:	080016f3 	.word	0x080016f3
 8001688:	080016a1 	.word	0x080016a1
 800168c:	080016b5 	.word	0x080016b5
 8001690:	4a79      	ldr	r2, [pc, #484]	; (8001878 <HAL_GPIO_Init+0x2b4>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d013      	beq.n	80016be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001696:	e02c      	b.n	80016f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	623b      	str	r3, [r7, #32]
          break;
 800169e:	e029      	b.n	80016f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	3304      	adds	r3, #4
 80016a6:	623b      	str	r3, [r7, #32]
          break;
 80016a8:	e024      	b.n	80016f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	3308      	adds	r3, #8
 80016b0:	623b      	str	r3, [r7, #32]
          break;
 80016b2:	e01f      	b.n	80016f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	330c      	adds	r3, #12
 80016ba:	623b      	str	r3, [r7, #32]
          break;
 80016bc:	e01a      	b.n	80016f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d102      	bne.n	80016cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016c6:	2304      	movs	r3, #4
 80016c8:	623b      	str	r3, [r7, #32]
          break;
 80016ca:	e013      	b.n	80016f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d105      	bne.n	80016e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d4:	2308      	movs	r3, #8
 80016d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69fa      	ldr	r2, [r7, #28]
 80016dc:	611a      	str	r2, [r3, #16]
          break;
 80016de:	e009      	b.n	80016f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016e0:	2308      	movs	r3, #8
 80016e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69fa      	ldr	r2, [r7, #28]
 80016e8:	615a      	str	r2, [r3, #20]
          break;
 80016ea:	e003      	b.n	80016f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
          break;
 80016f0:	e000      	b.n	80016f4 <HAL_GPIO_Init+0x130>
          break;
 80016f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	2bff      	cmp	r3, #255	; 0xff
 80016f8:	d801      	bhi.n	80016fe <HAL_GPIO_Init+0x13a>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	e001      	b.n	8001702 <HAL_GPIO_Init+0x13e>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3304      	adds	r3, #4
 8001702:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	2bff      	cmp	r3, #255	; 0xff
 8001708:	d802      	bhi.n	8001710 <HAL_GPIO_Init+0x14c>
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	e002      	b.n	8001716 <HAL_GPIO_Init+0x152>
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	3b08      	subs	r3, #8
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	210f      	movs	r1, #15
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	fa01 f303 	lsl.w	r3, r1, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	401a      	ands	r2, r3
 8001728:	6a39      	ldr	r1, [r7, #32]
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	fa01 f303 	lsl.w	r3, r1, r3
 8001730:	431a      	orrs	r2, r3
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 80b1 	beq.w	80018a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001744:	4b4d      	ldr	r3, [pc, #308]	; (800187c <HAL_GPIO_Init+0x2b8>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a4c      	ldr	r2, [pc, #304]	; (800187c <HAL_GPIO_Init+0x2b8>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6193      	str	r3, [r2, #24]
 8001750:	4b4a      	ldr	r3, [pc, #296]	; (800187c <HAL_GPIO_Init+0x2b8>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800175c:	4a48      	ldr	r2, [pc, #288]	; (8001880 <HAL_GPIO_Init+0x2bc>)
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	089b      	lsrs	r3, r3, #2
 8001762:	3302      	adds	r3, #2
 8001764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001768:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	220f      	movs	r2, #15
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	4013      	ands	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a40      	ldr	r2, [pc, #256]	; (8001884 <HAL_GPIO_Init+0x2c0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d013      	beq.n	80017b0 <HAL_GPIO_Init+0x1ec>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a3f      	ldr	r2, [pc, #252]	; (8001888 <HAL_GPIO_Init+0x2c4>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d00d      	beq.n	80017ac <HAL_GPIO_Init+0x1e8>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a3e      	ldr	r2, [pc, #248]	; (800188c <HAL_GPIO_Init+0x2c8>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d007      	beq.n	80017a8 <HAL_GPIO_Init+0x1e4>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a3d      	ldr	r2, [pc, #244]	; (8001890 <HAL_GPIO_Init+0x2cc>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d101      	bne.n	80017a4 <HAL_GPIO_Init+0x1e0>
 80017a0:	2303      	movs	r3, #3
 80017a2:	e006      	b.n	80017b2 <HAL_GPIO_Init+0x1ee>
 80017a4:	2304      	movs	r3, #4
 80017a6:	e004      	b.n	80017b2 <HAL_GPIO_Init+0x1ee>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e002      	b.n	80017b2 <HAL_GPIO_Init+0x1ee>
 80017ac:	2301      	movs	r3, #1
 80017ae:	e000      	b.n	80017b2 <HAL_GPIO_Init+0x1ee>
 80017b0:	2300      	movs	r3, #0
 80017b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b4:	f002 0203 	and.w	r2, r2, #3
 80017b8:	0092      	lsls	r2, r2, #2
 80017ba:	4093      	lsls	r3, r2
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	4313      	orrs	r3, r2
 80017c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017c2:	492f      	ldr	r1, [pc, #188]	; (8001880 <HAL_GPIO_Init+0x2bc>)
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	089b      	lsrs	r3, r3, #2
 80017c8:	3302      	adds	r3, #2
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d006      	beq.n	80017ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017dc:	4b2d      	ldr	r3, [pc, #180]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	492c      	ldr	r1, [pc, #176]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	608b      	str	r3, [r1, #8]
 80017e8:	e006      	b.n	80017f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017ea:	4b2a      	ldr	r3, [pc, #168]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	4928      	ldr	r1, [pc, #160]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d006      	beq.n	8001812 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001804:	4b23      	ldr	r3, [pc, #140]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	4922      	ldr	r1, [pc, #136]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	4313      	orrs	r3, r2
 800180e:	60cb      	str	r3, [r1, #12]
 8001810:	e006      	b.n	8001820 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001812:	4b20      	ldr	r3, [pc, #128]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	43db      	mvns	r3, r3
 800181a:	491e      	ldr	r1, [pc, #120]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 800181c:	4013      	ands	r3, r2
 800181e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d006      	beq.n	800183a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800182c:	4b19      	ldr	r3, [pc, #100]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	4918      	ldr	r1, [pc, #96]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	604b      	str	r3, [r1, #4]
 8001838:	e006      	b.n	8001848 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800183a:	4b16      	ldr	r3, [pc, #88]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	43db      	mvns	r3, r3
 8001842:	4914      	ldr	r1, [pc, #80]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 8001844:	4013      	ands	r3, r2
 8001846:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d021      	beq.n	8001898 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001854:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	490e      	ldr	r1, [pc, #56]	; (8001894 <HAL_GPIO_Init+0x2d0>)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	600b      	str	r3, [r1, #0]
 8001860:	e021      	b.n	80018a6 <HAL_GPIO_Init+0x2e2>
 8001862:	bf00      	nop
 8001864:	10320000 	.word	0x10320000
 8001868:	10310000 	.word	0x10310000
 800186c:	10220000 	.word	0x10220000
 8001870:	10210000 	.word	0x10210000
 8001874:	10120000 	.word	0x10120000
 8001878:	10110000 	.word	0x10110000
 800187c:	40021000 	.word	0x40021000
 8001880:	40010000 	.word	0x40010000
 8001884:	40010800 	.word	0x40010800
 8001888:	40010c00 	.word	0x40010c00
 800188c:	40011000 	.word	0x40011000
 8001890:	40011400 	.word	0x40011400
 8001894:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_GPIO_Init+0x304>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	43db      	mvns	r3, r3
 80018a0:	4909      	ldr	r1, [pc, #36]	; (80018c8 <HAL_GPIO_Init+0x304>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	3301      	adds	r3, #1
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	fa22 f303 	lsr.w	r3, r2, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f47f ae8e 	bne.w	80015d8 <HAL_GPIO_Init+0x14>
  }
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	372c      	adds	r7, #44	; 0x2c
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	40010400 	.word	0x40010400

080018cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e272      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 8087 	beq.w	80019fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018ec:	4b92      	ldr	r3, [pc, #584]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 030c 	and.w	r3, r3, #12
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d00c      	beq.n	8001912 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018f8:	4b8f      	ldr	r3, [pc, #572]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 030c 	and.w	r3, r3, #12
 8001900:	2b08      	cmp	r3, #8
 8001902:	d112      	bne.n	800192a <HAL_RCC_OscConfig+0x5e>
 8001904:	4b8c      	ldr	r3, [pc, #560]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800190c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001910:	d10b      	bne.n	800192a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001912:	4b89      	ldr	r3, [pc, #548]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d06c      	beq.n	80019f8 <HAL_RCC_OscConfig+0x12c>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d168      	bne.n	80019f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e24c      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001932:	d106      	bne.n	8001942 <HAL_RCC_OscConfig+0x76>
 8001934:	4b80      	ldr	r3, [pc, #512]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a7f      	ldr	r2, [pc, #508]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 800193a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	e02e      	b.n	80019a0 <HAL_RCC_OscConfig+0xd4>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10c      	bne.n	8001964 <HAL_RCC_OscConfig+0x98>
 800194a:	4b7b      	ldr	r3, [pc, #492]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a7a      	ldr	r2, [pc, #488]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	4b78      	ldr	r3, [pc, #480]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a77      	ldr	r2, [pc, #476]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 800195c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	e01d      	b.n	80019a0 <HAL_RCC_OscConfig+0xd4>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800196c:	d10c      	bne.n	8001988 <HAL_RCC_OscConfig+0xbc>
 800196e:	4b72      	ldr	r3, [pc, #456]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a71      	ldr	r2, [pc, #452]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	4b6f      	ldr	r3, [pc, #444]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a6e      	ldr	r2, [pc, #440]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	e00b      	b.n	80019a0 <HAL_RCC_OscConfig+0xd4>
 8001988:	4b6b      	ldr	r3, [pc, #428]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a6a      	ldr	r2, [pc, #424]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 800198e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	4b68      	ldr	r3, [pc, #416]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a67      	ldr	r2, [pc, #412]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 800199a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800199e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d013      	beq.n	80019d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7ff fcf4 	bl	8001394 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b0:	f7ff fcf0 	bl	8001394 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b64      	cmp	r3, #100	; 0x64
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e200      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c2:	4b5d      	ldr	r3, [pc, #372]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f0      	beq.n	80019b0 <HAL_RCC_OscConfig+0xe4>
 80019ce:	e014      	b.n	80019fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7ff fce0 	bl	8001394 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d8:	f7ff fcdc 	bl	8001394 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b64      	cmp	r3, #100	; 0x64
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e1ec      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ea:	4b53      	ldr	r3, [pc, #332]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x10c>
 80019f6:	e000      	b.n	80019fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d063      	beq.n	8001ace <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a06:	4b4c      	ldr	r3, [pc, #304]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00b      	beq.n	8001a2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a12:	4b49      	ldr	r3, [pc, #292]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 030c 	and.w	r3, r3, #12
 8001a1a:	2b08      	cmp	r3, #8
 8001a1c:	d11c      	bne.n	8001a58 <HAL_RCC_OscConfig+0x18c>
 8001a1e:	4b46      	ldr	r3, [pc, #280]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d116      	bne.n	8001a58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a2a:	4b43      	ldr	r3, [pc, #268]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d005      	beq.n	8001a42 <HAL_RCC_OscConfig+0x176>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d001      	beq.n	8001a42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e1c0      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a42:	4b3d      	ldr	r3, [pc, #244]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	4939      	ldr	r1, [pc, #228]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a56:	e03a      	b.n	8001ace <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d020      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a60:	4b36      	ldr	r3, [pc, #216]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a66:	f7ff fc95 	bl	8001394 <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a6e:	f7ff fc91 	bl	8001394 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e1a1      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a80:	4b2d      	ldr	r3, [pc, #180]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0f0      	beq.n	8001a6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8c:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	4927      	ldr	r1, [pc, #156]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	600b      	str	r3, [r1, #0]
 8001aa0:	e015      	b.n	8001ace <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aa2:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <HAL_RCC_OscConfig+0x270>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fc74 	bl	8001394 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab0:	f7ff fc70 	bl	8001394 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e180      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d03a      	beq.n	8001b50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d019      	beq.n	8001b16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <HAL_RCC_OscConfig+0x274>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae8:	f7ff fc54 	bl	8001394 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af0:	f7ff fc50 	bl	8001394 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e160      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b02:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b0e:	2001      	movs	r0, #1
 8001b10:	f000 face 	bl	80020b0 <RCC_Delay>
 8001b14:	e01c      	b.n	8001b50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b16:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <HAL_RCC_OscConfig+0x274>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1c:	f7ff fc3a 	bl	8001394 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b22:	e00f      	b.n	8001b44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b24:	f7ff fc36 	bl	8001394 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d908      	bls.n	8001b44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e146      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4f8>
 8001b36:	bf00      	nop
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	42420000 	.word	0x42420000
 8001b40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b44:	4b92      	ldr	r3, [pc, #584]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1e9      	bne.n	8001b24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 80a6 	beq.w	8001caa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b62:	4b8b      	ldr	r3, [pc, #556]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10d      	bne.n	8001b8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b6e:	4b88      	ldr	r3, [pc, #544]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	4a87      	ldr	r2, [pc, #540]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b78:	61d3      	str	r3, [r2, #28]
 8001b7a:	4b85      	ldr	r3, [pc, #532]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b86:	2301      	movs	r3, #1
 8001b88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8a:	4b82      	ldr	r3, [pc, #520]	; (8001d94 <HAL_RCC_OscConfig+0x4c8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d118      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b96:	4b7f      	ldr	r3, [pc, #508]	; (8001d94 <HAL_RCC_OscConfig+0x4c8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a7e      	ldr	r2, [pc, #504]	; (8001d94 <HAL_RCC_OscConfig+0x4c8>)
 8001b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ba2:	f7ff fbf7 	bl	8001394 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001baa:	f7ff fbf3 	bl	8001394 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b64      	cmp	r3, #100	; 0x64
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e103      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bbc:	4b75      	ldr	r3, [pc, #468]	; (8001d94 <HAL_RCC_OscConfig+0x4c8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d106      	bne.n	8001bde <HAL_RCC_OscConfig+0x312>
 8001bd0:	4b6f      	ldr	r3, [pc, #444]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	4a6e      	ldr	r2, [pc, #440]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6213      	str	r3, [r2, #32]
 8001bdc:	e02d      	b.n	8001c3a <HAL_RCC_OscConfig+0x36e>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10c      	bne.n	8001c00 <HAL_RCC_OscConfig+0x334>
 8001be6:	4b6a      	ldr	r3, [pc, #424]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	4a69      	ldr	r2, [pc, #420]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001bec:	f023 0301 	bic.w	r3, r3, #1
 8001bf0:	6213      	str	r3, [r2, #32]
 8001bf2:	4b67      	ldr	r3, [pc, #412]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	4a66      	ldr	r2, [pc, #408]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	f023 0304 	bic.w	r3, r3, #4
 8001bfc:	6213      	str	r3, [r2, #32]
 8001bfe:	e01c      	b.n	8001c3a <HAL_RCC_OscConfig+0x36e>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	2b05      	cmp	r3, #5
 8001c06:	d10c      	bne.n	8001c22 <HAL_RCC_OscConfig+0x356>
 8001c08:	4b61      	ldr	r3, [pc, #388]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	4a60      	ldr	r2, [pc, #384]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001c0e:	f043 0304 	orr.w	r3, r3, #4
 8001c12:	6213      	str	r3, [r2, #32]
 8001c14:	4b5e      	ldr	r3, [pc, #376]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	4a5d      	ldr	r2, [pc, #372]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6213      	str	r3, [r2, #32]
 8001c20:	e00b      	b.n	8001c3a <HAL_RCC_OscConfig+0x36e>
 8001c22:	4b5b      	ldr	r3, [pc, #364]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	4a5a      	ldr	r2, [pc, #360]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001c28:	f023 0301 	bic.w	r3, r3, #1
 8001c2c:	6213      	str	r3, [r2, #32]
 8001c2e:	4b58      	ldr	r3, [pc, #352]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	4a57      	ldr	r2, [pc, #348]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	f023 0304 	bic.w	r3, r3, #4
 8001c38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d015      	beq.n	8001c6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c42:	f7ff fba7 	bl	8001394 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c48:	e00a      	b.n	8001c60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c4a:	f7ff fba3 	bl	8001394 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e0b1      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c60:	4b4b      	ldr	r3, [pc, #300]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0ee      	beq.n	8001c4a <HAL_RCC_OscConfig+0x37e>
 8001c6c:	e014      	b.n	8001c98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c6e:	f7ff fb91 	bl	8001394 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c74:	e00a      	b.n	8001c8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c76:	f7ff fb8d 	bl	8001394 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e09b      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c8c:	4b40      	ldr	r3, [pc, #256]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1ee      	bne.n	8001c76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c98:	7dfb      	ldrb	r3, [r7, #23]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d105      	bne.n	8001caa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c9e:	4b3c      	ldr	r3, [pc, #240]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	4a3b      	ldr	r2, [pc, #236]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001ca4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ca8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 8087 	beq.w	8001dc2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cb4:	4b36      	ldr	r3, [pc, #216]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 030c 	and.w	r3, r3, #12
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d061      	beq.n	8001d84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d146      	bne.n	8001d56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc8:	4b33      	ldr	r3, [pc, #204]	; (8001d98 <HAL_RCC_OscConfig+0x4cc>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cce:	f7ff fb61 	bl	8001394 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd6:	f7ff fb5d 	bl	8001394 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e06d      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce8:	4b29      	ldr	r3, [pc, #164]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f0      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cfc:	d108      	bne.n	8001d10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cfe:	4b24      	ldr	r3, [pc, #144]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	4921      	ldr	r1, [pc, #132]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d10:	4b1f      	ldr	r3, [pc, #124]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a19      	ldr	r1, [r3, #32]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	430b      	orrs	r3, r1
 8001d22:	491b      	ldr	r1, [pc, #108]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d28:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <HAL_RCC_OscConfig+0x4cc>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2e:	f7ff fb31 	bl	8001394 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d36:	f7ff fb2d 	bl	8001394 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e03d      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0f0      	beq.n	8001d36 <HAL_RCC_OscConfig+0x46a>
 8001d54:	e035      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <HAL_RCC_OscConfig+0x4cc>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5c:	f7ff fb1a 	bl	8001394 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d64:	f7ff fb16 	bl	8001394 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e026      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f0      	bne.n	8001d64 <HAL_RCC_OscConfig+0x498>
 8001d82:	e01e      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d107      	bne.n	8001d9c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e019      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4f8>
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40007000 	.word	0x40007000
 8001d98:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <HAL_RCC_OscConfig+0x500>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d106      	bne.n	8001dbe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d001      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40021000 	.word	0x40021000

08001dd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0d0      	b.n	8001f86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001de4:	4b6a      	ldr	r3, [pc, #424]	; (8001f90 <HAL_RCC_ClockConfig+0x1c0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d910      	bls.n	8001e14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df2:	4b67      	ldr	r3, [pc, #412]	; (8001f90 <HAL_RCC_ClockConfig+0x1c0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 0207 	bic.w	r2, r3, #7
 8001dfa:	4965      	ldr	r1, [pc, #404]	; (8001f90 <HAL_RCC_ClockConfig+0x1c0>)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e02:	4b63      	ldr	r3, [pc, #396]	; (8001f90 <HAL_RCC_ClockConfig+0x1c0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d001      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e0b8      	b.n	8001f86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d020      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e2c:	4b59      	ldr	r3, [pc, #356]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	4a58      	ldr	r2, [pc, #352]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0308 	and.w	r3, r3, #8
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d005      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e44:	4b53      	ldr	r3, [pc, #332]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	4a52      	ldr	r2, [pc, #328]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e50:	4b50      	ldr	r3, [pc, #320]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	494d      	ldr	r1, [pc, #308]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d040      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d107      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e76:	4b47      	ldr	r3, [pc, #284]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d115      	bne.n	8001eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e07f      	b.n	8001f86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d107      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8e:	4b41      	ldr	r3, [pc, #260]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d109      	bne.n	8001eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e073      	b.n	8001f86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9e:	4b3d      	ldr	r3, [pc, #244]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e06b      	b.n	8001f86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eae:	4b39      	ldr	r3, [pc, #228]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f023 0203 	bic.w	r2, r3, #3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	4936      	ldr	r1, [pc, #216]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ec0:	f7ff fa68 	bl	8001394 <HAL_GetTick>
 8001ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec6:	e00a      	b.n	8001ede <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec8:	f7ff fa64 	bl	8001394 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e053      	b.n	8001f86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ede:	4b2d      	ldr	r3, [pc, #180]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 020c 	and.w	r2, r3, #12
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d1eb      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef0:	4b27      	ldr	r3, [pc, #156]	; (8001f90 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d210      	bcs.n	8001f20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efe:	4b24      	ldr	r3, [pc, #144]	; (8001f90 <HAL_RCC_ClockConfig+0x1c0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 0207 	bic.w	r2, r3, #7
 8001f06:	4922      	ldr	r1, [pc, #136]	; (8001f90 <HAL_RCC_ClockConfig+0x1c0>)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0e:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <HAL_RCC_ClockConfig+0x1c0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d001      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e032      	b.n	8001f86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d008      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f2c:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	4916      	ldr	r1, [pc, #88]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d009      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f4a:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	490e      	ldr	r1, [pc, #56]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f5e:	f000 f821 	bl	8001fa4 <HAL_RCC_GetSysClockFreq>
 8001f62:	4602      	mov	r2, r0
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	490a      	ldr	r1, [pc, #40]	; (8001f98 <HAL_RCC_ClockConfig+0x1c8>)
 8001f70:	5ccb      	ldrb	r3, [r1, r3]
 8001f72:	fa22 f303 	lsr.w	r3, r2, r3
 8001f76:	4a09      	ldr	r2, [pc, #36]	; (8001f9c <HAL_RCC_ClockConfig+0x1cc>)
 8001f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f7a:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <HAL_RCC_ClockConfig+0x1d0>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff f9c6 	bl	8001310 <HAL_InitTick>

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40022000 	.word	0x40022000
 8001f94:	40021000 	.word	0x40021000
 8001f98:	08007a7c 	.word	0x08007a7c
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	20000004 	.word	0x20000004

08001fa4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fbe:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d002      	beq.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x30>
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d003      	beq.n	8001fda <HAL_RCC_GetSysClockFreq+0x36>
 8001fd2:	e027      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fd4:	4b19      	ldr	r3, [pc, #100]	; (800203c <HAL_RCC_GetSysClockFreq+0x98>)
 8001fd6:	613b      	str	r3, [r7, #16]
      break;
 8001fd8:	e027      	b.n	800202a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	0c9b      	lsrs	r3, r3, #18
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	4a17      	ldr	r2, [pc, #92]	; (8002040 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fe4:	5cd3      	ldrb	r3, [r2, r3]
 8001fe6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d010      	beq.n	8002014 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	0c5b      	lsrs	r3, r3, #17
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	4a11      	ldr	r2, [pc, #68]	; (8002044 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ffe:	5cd3      	ldrb	r3, [r2, r3]
 8002000:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a0d      	ldr	r2, [pc, #52]	; (800203c <HAL_RCC_GetSysClockFreq+0x98>)
 8002006:	fb03 f202 	mul.w	r2, r3, r2
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	e004      	b.n	800201e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a0c      	ldr	r2, [pc, #48]	; (8002048 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002018:	fb02 f303 	mul.w	r3, r2, r3
 800201c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	613b      	str	r3, [r7, #16]
      break;
 8002022:	e002      	b.n	800202a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_RCC_GetSysClockFreq+0x98>)
 8002026:	613b      	str	r3, [r7, #16]
      break;
 8002028:	bf00      	nop
    }
  }
  return sysclockfreq;
 800202a:	693b      	ldr	r3, [r7, #16]
}
 800202c:	4618      	mov	r0, r3
 800202e:	371c      	adds	r7, #28
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40021000 	.word	0x40021000
 800203c:	007a1200 	.word	0x007a1200
 8002040:	08007a94 	.word	0x08007a94
 8002044:	08007aa4 	.word	0x08007aa4
 8002048:	003d0900 	.word	0x003d0900

0800204c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002050:	4b02      	ldr	r3, [pc, #8]	; (800205c <HAL_RCC_GetHCLKFreq+0x10>)
 8002052:	681b      	ldr	r3, [r3, #0]
}
 8002054:	4618      	mov	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr
 800205c:	20000000 	.word	0x20000000

08002060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002064:	f7ff fff2 	bl	800204c <HAL_RCC_GetHCLKFreq>
 8002068:	4602      	mov	r2, r0
 800206a:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	0a1b      	lsrs	r3, r3, #8
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	4903      	ldr	r1, [pc, #12]	; (8002084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002076:	5ccb      	ldrb	r3, [r1, r3]
 8002078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800207c:	4618      	mov	r0, r3
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000
 8002084:	08007a8c 	.word	0x08007a8c

08002088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800208c:	f7ff ffde 	bl	800204c <HAL_RCC_GetHCLKFreq>
 8002090:	4602      	mov	r2, r0
 8002092:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	0adb      	lsrs	r3, r3, #11
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	4903      	ldr	r1, [pc, #12]	; (80020ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800209e:	5ccb      	ldrb	r3, [r1, r3]
 80020a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40021000 	.word	0x40021000
 80020ac:	08007a8c 	.word	0x08007a8c

080020b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020b8:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <RCC_Delay+0x34>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <RCC_Delay+0x38>)
 80020be:	fba2 2303 	umull	r2, r3, r2, r3
 80020c2:	0a5b      	lsrs	r3, r3, #9
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	fb02 f303 	mul.w	r3, r2, r3
 80020ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020cc:	bf00      	nop
  }
  while (Delay --);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	1e5a      	subs	r2, r3, #1
 80020d2:	60fa      	str	r2, [r7, #12]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1f9      	bne.n	80020cc <RCC_Delay+0x1c>
}
 80020d8:	bf00      	nop
 80020da:	bf00      	nop
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr
 80020e4:	20000000 	.word	0x20000000
 80020e8:	10624dd3 	.word	0x10624dd3

080020ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e041      	b.n	8002182 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d106      	bne.n	8002118 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7fe fe9a 	bl	8000e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2202      	movs	r2, #2
 800211c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3304      	adds	r3, #4
 8002128:	4619      	mov	r1, r3
 800212a:	4610      	mov	r0, r2
 800212c:	f000 fc6a 	bl	8002a04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b01      	cmp	r3, #1
 800219e:	d001      	beq.n	80021a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e03a      	b.n	800221a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0201 	orr.w	r2, r2, #1
 80021ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a18      	ldr	r2, [pc, #96]	; (8002224 <HAL_TIM_Base_Start_IT+0x98>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00e      	beq.n	80021e4 <HAL_TIM_Base_Start_IT+0x58>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ce:	d009      	beq.n	80021e4 <HAL_TIM_Base_Start_IT+0x58>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a14      	ldr	r2, [pc, #80]	; (8002228 <HAL_TIM_Base_Start_IT+0x9c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d004      	beq.n	80021e4 <HAL_TIM_Base_Start_IT+0x58>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a13      	ldr	r2, [pc, #76]	; (800222c <HAL_TIM_Base_Start_IT+0xa0>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d111      	bne.n	8002208 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d010      	beq.n	8002218 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f042 0201 	orr.w	r2, r2, #1
 8002204:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002206:	e007      	b.n	8002218 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	40012c00 	.word	0x40012c00
 8002228:	40000400 	.word	0x40000400
 800222c:	40000800 	.word	0x40000800

08002230 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e041      	b.n	80022c6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d106      	bne.n	800225c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f839 	bl	80022ce <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2202      	movs	r2, #2
 8002260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3304      	adds	r3, #4
 800226c:	4619      	mov	r1, r3
 800226e:	4610      	mov	r0, r2
 8002270:	f000 fbc8 	bl	8002a04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d104      	bne.n	80022fe <HAL_TIM_IC_Start_IT+0x1e>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	e013      	b.n	8002326 <HAL_TIM_IC_Start_IT+0x46>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2b04      	cmp	r3, #4
 8002302:	d104      	bne.n	800230e <HAL_TIM_IC_Start_IT+0x2e>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800230a:	b2db      	uxtb	r3, r3
 800230c:	e00b      	b.n	8002326 <HAL_TIM_IC_Start_IT+0x46>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2b08      	cmp	r3, #8
 8002312:	d104      	bne.n	800231e <HAL_TIM_IC_Start_IT+0x3e>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800231a:	b2db      	uxtb	r3, r3
 800231c:	e003      	b.n	8002326 <HAL_TIM_IC_Start_IT+0x46>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002324:	b2db      	uxtb	r3, r3
 8002326:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d104      	bne.n	8002338 <HAL_TIM_IC_Start_IT+0x58>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002334:	b2db      	uxtb	r3, r3
 8002336:	e013      	b.n	8002360 <HAL_TIM_IC_Start_IT+0x80>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	2b04      	cmp	r3, #4
 800233c:	d104      	bne.n	8002348 <HAL_TIM_IC_Start_IT+0x68>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002344:	b2db      	uxtb	r3, r3
 8002346:	e00b      	b.n	8002360 <HAL_TIM_IC_Start_IT+0x80>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	2b08      	cmp	r3, #8
 800234c:	d104      	bne.n	8002358 <HAL_TIM_IC_Start_IT+0x78>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002354:	b2db      	uxtb	r3, r3
 8002356:	e003      	b.n	8002360 <HAL_TIM_IC_Start_IT+0x80>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800235e:	b2db      	uxtb	r3, r3
 8002360:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002362:	7bbb      	ldrb	r3, [r7, #14]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d102      	bne.n	800236e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002368:	7b7b      	ldrb	r3, [r7, #13]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d001      	beq.n	8002372 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e0b8      	b.n	80024e4 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d104      	bne.n	8002382 <HAL_TIM_IC_Start_IT+0xa2>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2202      	movs	r2, #2
 800237c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002380:	e013      	b.n	80023aa <HAL_TIM_IC_Start_IT+0xca>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b04      	cmp	r3, #4
 8002386:	d104      	bne.n	8002392 <HAL_TIM_IC_Start_IT+0xb2>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002390:	e00b      	b.n	80023aa <HAL_TIM_IC_Start_IT+0xca>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b08      	cmp	r3, #8
 8002396:	d104      	bne.n	80023a2 <HAL_TIM_IC_Start_IT+0xc2>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023a0:	e003      	b.n	80023aa <HAL_TIM_IC_Start_IT+0xca>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2202      	movs	r2, #2
 80023a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d104      	bne.n	80023ba <HAL_TIM_IC_Start_IT+0xda>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023b8:	e013      	b.n	80023e2 <HAL_TIM_IC_Start_IT+0x102>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d104      	bne.n	80023ca <HAL_TIM_IC_Start_IT+0xea>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023c8:	e00b      	b.n	80023e2 <HAL_TIM_IC_Start_IT+0x102>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	d104      	bne.n	80023da <HAL_TIM_IC_Start_IT+0xfa>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023d8:	e003      	b.n	80023e2 <HAL_TIM_IC_Start_IT+0x102>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2202      	movs	r2, #2
 80023de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	2b0c      	cmp	r3, #12
 80023e6:	d841      	bhi.n	800246c <HAL_TIM_IC_Start_IT+0x18c>
 80023e8:	a201      	add	r2, pc, #4	; (adr r2, 80023f0 <HAL_TIM_IC_Start_IT+0x110>)
 80023ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ee:	bf00      	nop
 80023f0:	08002425 	.word	0x08002425
 80023f4:	0800246d 	.word	0x0800246d
 80023f8:	0800246d 	.word	0x0800246d
 80023fc:	0800246d 	.word	0x0800246d
 8002400:	08002437 	.word	0x08002437
 8002404:	0800246d 	.word	0x0800246d
 8002408:	0800246d 	.word	0x0800246d
 800240c:	0800246d 	.word	0x0800246d
 8002410:	08002449 	.word	0x08002449
 8002414:	0800246d 	.word	0x0800246d
 8002418:	0800246d 	.word	0x0800246d
 800241c:	0800246d 	.word	0x0800246d
 8002420:	0800245b 	.word	0x0800245b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0202 	orr.w	r2, r2, #2
 8002432:	60da      	str	r2, [r3, #12]
      break;
 8002434:	e01d      	b.n	8002472 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f042 0204 	orr.w	r2, r2, #4
 8002444:	60da      	str	r2, [r3, #12]
      break;
 8002446:	e014      	b.n	8002472 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0208 	orr.w	r2, r2, #8
 8002456:	60da      	str	r2, [r3, #12]
      break;
 8002458:	e00b      	b.n	8002472 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f042 0210 	orr.w	r2, r2, #16
 8002468:	60da      	str	r2, [r3, #12]
      break;
 800246a:	e002      	b.n	8002472 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
      break;
 8002470:	bf00      	nop
  }

  if (status == HAL_OK)
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d134      	bne.n	80024e2 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2201      	movs	r2, #1
 800247e:	6839      	ldr	r1, [r7, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f000 fcc4 	bl	8002e0e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a18      	ldr	r2, [pc, #96]	; (80024ec <HAL_TIM_IC_Start_IT+0x20c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d00e      	beq.n	80024ae <HAL_TIM_IC_Start_IT+0x1ce>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002498:	d009      	beq.n	80024ae <HAL_TIM_IC_Start_IT+0x1ce>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a14      	ldr	r2, [pc, #80]	; (80024f0 <HAL_TIM_IC_Start_IT+0x210>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d004      	beq.n	80024ae <HAL_TIM_IC_Start_IT+0x1ce>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a12      	ldr	r2, [pc, #72]	; (80024f4 <HAL_TIM_IC_Start_IT+0x214>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d111      	bne.n	80024d2 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b06      	cmp	r3, #6
 80024be:	d010      	beq.n	80024e2 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0201 	orr.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d0:	e007      	b.n	80024e2 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f042 0201 	orr.w	r2, r2, #1
 80024e0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40012c00 	.word	0x40012c00
 80024f0:	40000400 	.word	0x40000400
 80024f4:	40000800 	.word	0x40000800

080024f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b02      	cmp	r3, #2
 800250c:	d122      	bne.n	8002554 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b02      	cmp	r3, #2
 800251a:	d11b      	bne.n	8002554 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f06f 0202 	mvn.w	r2, #2
 8002524:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7fe fe32 	bl	80011a4 <HAL_TIM_IC_CaptureCallback>
 8002540:	e005      	b.n	800254e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 fa43 	bl	80029ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 fa49 	bl	80029e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b04      	cmp	r3, #4
 8002560:	d122      	bne.n	80025a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b04      	cmp	r3, #4
 800256e:	d11b      	bne.n	80025a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f06f 0204 	mvn.w	r2, #4
 8002578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2202      	movs	r2, #2
 800257e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7fe fe08 	bl	80011a4 <HAL_TIM_IC_CaptureCallback>
 8002594:	e005      	b.n	80025a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 fa19 	bl	80029ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 fa1f 	bl	80029e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d122      	bne.n	80025fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d11b      	bne.n	80025fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f06f 0208 	mvn.w	r2, #8
 80025cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2204      	movs	r2, #4
 80025d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7fe fdde 	bl	80011a4 <HAL_TIM_IC_CaptureCallback>
 80025e8:	e005      	b.n	80025f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f9ef 	bl	80029ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f9f5 	bl	80029e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	f003 0310 	and.w	r3, r3, #16
 8002606:	2b10      	cmp	r3, #16
 8002608:	d122      	bne.n	8002650 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b10      	cmp	r3, #16
 8002616:	d11b      	bne.n	8002650 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f06f 0210 	mvn.w	r2, #16
 8002620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2208      	movs	r2, #8
 8002626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7fe fdb4 	bl	80011a4 <HAL_TIM_IC_CaptureCallback>
 800263c:	e005      	b.n	800264a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f9c5 	bl	80029ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f9cb 	bl	80029e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b01      	cmp	r3, #1
 800265c:	d10e      	bne.n	800267c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b01      	cmp	r3, #1
 800266a:	d107      	bne.n	800267c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f06f 0201 	mvn.w	r2, #1
 8002674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7fe fdfc 	bl	8001274 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002686:	2b80      	cmp	r3, #128	; 0x80
 8002688:	d10e      	bne.n	80026a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002694:	2b80      	cmp	r3, #128	; 0x80
 8002696:	d107      	bne.n	80026a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 fc3f 	bl	8002f26 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b2:	2b40      	cmp	r3, #64	; 0x40
 80026b4:	d10e      	bne.n	80026d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c0:	2b40      	cmp	r3, #64	; 0x40
 80026c2:	d107      	bne.n	80026d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f98f 	bl	80029f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f003 0320 	and.w	r3, r3, #32
 80026de:	2b20      	cmp	r3, #32
 80026e0:	d10e      	bne.n	8002700 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f003 0320 	and.w	r3, r3, #32
 80026ec:	2b20      	cmp	r3, #32
 80026ee:	d107      	bne.n	8002700 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f06f 0220 	mvn.w	r2, #32
 80026f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 fc0a 	bl	8002f14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002700:	bf00      	nop
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800271e:	2b01      	cmp	r3, #1
 8002720:	d101      	bne.n	8002726 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002722:	2302      	movs	r3, #2
 8002724:	e088      	b.n	8002838 <HAL_TIM_IC_ConfigChannel+0x130>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d11b      	bne.n	800276c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002744:	f000 f9c0 	bl	8002ac8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	699a      	ldr	r2, [r3, #24]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 020c 	bic.w	r2, r2, #12
 8002756:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6999      	ldr	r1, [r3, #24]
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	619a      	str	r2, [r3, #24]
 800276a:	e060      	b.n	800282e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b04      	cmp	r3, #4
 8002770:	d11c      	bne.n	80027ac <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002782:	f000 fa29 	bl	8002bd8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699a      	ldr	r2, [r3, #24]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002794:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6999      	ldr	r1, [r3, #24]
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	021a      	lsls	r2, r3, #8
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	619a      	str	r2, [r3, #24]
 80027aa:	e040      	b.n	800282e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d11b      	bne.n	80027ea <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80027c2:	f000 fa74 	bl	8002cae <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	69da      	ldr	r2, [r3, #28]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 020c 	bic.w	r2, r2, #12
 80027d4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	69d9      	ldr	r1, [r3, #28]
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	61da      	str	r2, [r3, #28]
 80027e8:	e021      	b.n	800282e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b0c      	cmp	r3, #12
 80027ee:	d11c      	bne.n	800282a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002800:	f000 fa90 	bl	8002d24 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	69da      	ldr	r2, [r3, #28]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002812:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	69d9      	ldr	r1, [r3, #28]
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	021a      	lsls	r2, r3, #8
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	61da      	str	r2, [r3, #28]
 8002828:	e001      	b.n	800282e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002836:	7dfb      	ldrb	r3, [r7, #23]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_TIM_ConfigClockSource+0x1c>
 8002858:	2302      	movs	r3, #2
 800285a:	e0b4      	b.n	80029c6 <HAL_TIM_ConfigClockSource+0x186>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800287a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002882:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002894:	d03e      	beq.n	8002914 <HAL_TIM_ConfigClockSource+0xd4>
 8002896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800289a:	f200 8087 	bhi.w	80029ac <HAL_TIM_ConfigClockSource+0x16c>
 800289e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a2:	f000 8086 	beq.w	80029b2 <HAL_TIM_ConfigClockSource+0x172>
 80028a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028aa:	d87f      	bhi.n	80029ac <HAL_TIM_ConfigClockSource+0x16c>
 80028ac:	2b70      	cmp	r3, #112	; 0x70
 80028ae:	d01a      	beq.n	80028e6 <HAL_TIM_ConfigClockSource+0xa6>
 80028b0:	2b70      	cmp	r3, #112	; 0x70
 80028b2:	d87b      	bhi.n	80029ac <HAL_TIM_ConfigClockSource+0x16c>
 80028b4:	2b60      	cmp	r3, #96	; 0x60
 80028b6:	d050      	beq.n	800295a <HAL_TIM_ConfigClockSource+0x11a>
 80028b8:	2b60      	cmp	r3, #96	; 0x60
 80028ba:	d877      	bhi.n	80029ac <HAL_TIM_ConfigClockSource+0x16c>
 80028bc:	2b50      	cmp	r3, #80	; 0x50
 80028be:	d03c      	beq.n	800293a <HAL_TIM_ConfigClockSource+0xfa>
 80028c0:	2b50      	cmp	r3, #80	; 0x50
 80028c2:	d873      	bhi.n	80029ac <HAL_TIM_ConfigClockSource+0x16c>
 80028c4:	2b40      	cmp	r3, #64	; 0x40
 80028c6:	d058      	beq.n	800297a <HAL_TIM_ConfigClockSource+0x13a>
 80028c8:	2b40      	cmp	r3, #64	; 0x40
 80028ca:	d86f      	bhi.n	80029ac <HAL_TIM_ConfigClockSource+0x16c>
 80028cc:	2b30      	cmp	r3, #48	; 0x30
 80028ce:	d064      	beq.n	800299a <HAL_TIM_ConfigClockSource+0x15a>
 80028d0:	2b30      	cmp	r3, #48	; 0x30
 80028d2:	d86b      	bhi.n	80029ac <HAL_TIM_ConfigClockSource+0x16c>
 80028d4:	2b20      	cmp	r3, #32
 80028d6:	d060      	beq.n	800299a <HAL_TIM_ConfigClockSource+0x15a>
 80028d8:	2b20      	cmp	r3, #32
 80028da:	d867      	bhi.n	80029ac <HAL_TIM_ConfigClockSource+0x16c>
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d05c      	beq.n	800299a <HAL_TIM_ConfigClockSource+0x15a>
 80028e0:	2b10      	cmp	r3, #16
 80028e2:	d05a      	beq.n	800299a <HAL_TIM_ConfigClockSource+0x15a>
 80028e4:	e062      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028f6:	f000 fa6b 	bl	8002dd0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002908:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	609a      	str	r2, [r3, #8]
      break;
 8002912:	e04f      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002924:	f000 fa54 	bl	8002dd0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002936:	609a      	str	r2, [r3, #8]
      break;
 8002938:	e03c      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002946:	461a      	mov	r2, r3
 8002948:	f000 f918 	bl	8002b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2150      	movs	r1, #80	; 0x50
 8002952:	4618      	mov	r0, r3
 8002954:	f000 fa22 	bl	8002d9c <TIM_ITRx_SetConfig>
      break;
 8002958:	e02c      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002966:	461a      	mov	r2, r3
 8002968:	f000 f972 	bl	8002c50 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2160      	movs	r1, #96	; 0x60
 8002972:	4618      	mov	r0, r3
 8002974:	f000 fa12 	bl	8002d9c <TIM_ITRx_SetConfig>
      break;
 8002978:	e01c      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002986:	461a      	mov	r2, r3
 8002988:	f000 f8f8 	bl	8002b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2140      	movs	r1, #64	; 0x40
 8002992:	4618      	mov	r0, r3
 8002994:	f000 fa02 	bl	8002d9c <TIM_ITRx_SetConfig>
      break;
 8002998:	e00c      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4619      	mov	r1, r3
 80029a4:	4610      	mov	r0, r2
 80029a6:	f000 f9f9 	bl	8002d9c <TIM_ITRx_SetConfig>
      break;
 80029aa:	e003      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]
      break;
 80029b0:	e000      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80029b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr

080029f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a29      	ldr	r2, [pc, #164]	; (8002abc <TIM_Base_SetConfig+0xb8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d00b      	beq.n	8002a34 <TIM_Base_SetConfig+0x30>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a22:	d007      	beq.n	8002a34 <TIM_Base_SetConfig+0x30>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a26      	ldr	r2, [pc, #152]	; (8002ac0 <TIM_Base_SetConfig+0xbc>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d003      	beq.n	8002a34 <TIM_Base_SetConfig+0x30>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a25      	ldr	r2, [pc, #148]	; (8002ac4 <TIM_Base_SetConfig+0xc0>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d108      	bne.n	8002a46 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a1c      	ldr	r2, [pc, #112]	; (8002abc <TIM_Base_SetConfig+0xb8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00b      	beq.n	8002a66 <TIM_Base_SetConfig+0x62>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a54:	d007      	beq.n	8002a66 <TIM_Base_SetConfig+0x62>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a19      	ldr	r2, [pc, #100]	; (8002ac0 <TIM_Base_SetConfig+0xbc>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d003      	beq.n	8002a66 <TIM_Base_SetConfig+0x62>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a18      	ldr	r2, [pc, #96]	; (8002ac4 <TIM_Base_SetConfig+0xc0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d108      	bne.n	8002a78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a07      	ldr	r2, [pc, #28]	; (8002abc <TIM_Base_SetConfig+0xb8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d103      	bne.n	8002aac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	615a      	str	r2, [r3, #20]
}
 8002ab2:	bf00      	nop
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr
 8002abc:	40012c00 	.word	0x40012c00
 8002ac0:	40000400 	.word	0x40000400
 8002ac4:	40000800 	.word	0x40000800

08002ac8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b087      	sub	sp, #28
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	f023 0201 	bic.w	r2, r3, #1
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4a1f      	ldr	r2, [pc, #124]	; (8002b70 <TIM_TI1_SetConfig+0xa8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d00b      	beq.n	8002b0e <TIM_TI1_SetConfig+0x46>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002afc:	d007      	beq.n	8002b0e <TIM_TI1_SetConfig+0x46>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4a1c      	ldr	r2, [pc, #112]	; (8002b74 <TIM_TI1_SetConfig+0xac>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d003      	beq.n	8002b0e <TIM_TI1_SetConfig+0x46>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4a1b      	ldr	r2, [pc, #108]	; (8002b78 <TIM_TI1_SetConfig+0xb0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d101      	bne.n	8002b12 <TIM_TI1_SetConfig+0x4a>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <TIM_TI1_SetConfig+0x4c>
 8002b12:	2300      	movs	r3, #0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f023 0303 	bic.w	r3, r3, #3
 8002b1e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	e003      	b.n	8002b32 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f023 030a 	bic.w	r3, r3, #10
 8002b4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	f003 030a 	and.w	r3, r3, #10
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	621a      	str	r2, [r3, #32]
}
 8002b66:	bf00      	nop
 8002b68:	371c      	adds	r7, #28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr
 8002b70:	40012c00 	.word	0x40012c00
 8002b74:	40000400 	.word	0x40000400
 8002b78:	40000800 	.word	0x40000800

08002b7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	f023 0201 	bic.w	r2, r3, #1
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f023 030a 	bic.w	r3, r3, #10
 8002bb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	621a      	str	r2, [r3, #32]
}
 8002bce:	bf00      	nop
 8002bd0:	371c      	adds	r7, #28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b087      	sub	sp, #28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
 8002be4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	f023 0210 	bic.w	r2, r3, #16
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	021b      	lsls	r3, r3, #8
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	031b      	lsls	r3, r3, #12
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c2a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	621a      	str	r2, [r3, #32]
}
 8002c46:	bf00      	nop
 8002c48:	371c      	adds	r7, #28
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	f023 0210 	bic.w	r2, r3, #16
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	031b      	lsls	r3, r3, #12
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c8c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	621a      	str	r2, [r3, #32]
}
 8002ca4:	bf00      	nop
 8002ca6:	371c      	adds	r7, #28
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr

08002cae <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b087      	sub	sp, #28
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f023 0303 	bic.w	r3, r3, #3
 8002cda:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cea:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002cfe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	021b      	lsls	r3, r3, #8
 8002d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	621a      	str	r2, [r3, #32]
}
 8002d1a:	bf00      	nop
 8002d1c:	371c      	adds	r7, #28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d50:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	021b      	lsls	r3, r3, #8
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d62:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	031b      	lsls	r3, r3, #12
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d76:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	031b      	lsls	r3, r3, #12
 8002d7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	621a      	str	r2, [r3, #32]
}
 8002d92:	bf00      	nop
 8002d94:	371c      	adds	r7, #28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr

08002d9c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f043 0307 	orr.w	r3, r3, #7
 8002dbe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	609a      	str	r2, [r3, #8]
}
 8002dc6:	bf00      	nop
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	021a      	lsls	r2, r3, #8
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	609a      	str	r2, [r3, #8]
}
 8002e04:	bf00      	nop
 8002e06:	371c      	adds	r7, #28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr

08002e0e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b087      	sub	sp, #28
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f003 031f 	and.w	r3, r3, #31
 8002e20:	2201      	movs	r2, #1
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6a1a      	ldr	r2, [r3, #32]
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	401a      	ands	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a1a      	ldr	r2, [r3, #32]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	f003 031f 	and.w	r3, r3, #31
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	fa01 f303 	lsl.w	r3, r1, r3
 8002e46:	431a      	orrs	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	621a      	str	r2, [r3, #32]
}
 8002e4c:	bf00      	nop
 8002e4e:	371c      	adds	r7, #28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr
	...

08002e58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e046      	b.n	8002efe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a16      	ldr	r2, [pc, #88]	; (8002f08 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d00e      	beq.n	8002ed2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ebc:	d009      	beq.n	8002ed2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a12      	ldr	r2, [pc, #72]	; (8002f0c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d004      	beq.n	8002ed2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a10      	ldr	r2, [pc, #64]	; (8002f10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d10c      	bne.n	8002eec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ed8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr
 8002f08:	40012c00 	.word	0x40012c00
 8002f0c:	40000400 	.word	0x40000400
 8002f10:	40000800 	.word	0x40000800

08002f14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr

08002f26 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr

08002f38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e042      	b.n	8002fd0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d106      	bne.n	8002f64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7fd ffb8 	bl	8000ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2224      	movs	r2, #36	; 0x24
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f91d 	bl	80031bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	691a      	ldr	r2, [r3, #16]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695a      	ldr	r2, [r3, #20]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	; 0x28
 8002fdc:	af02      	add	r7, sp, #8
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	d16d      	bne.n	80030d4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <HAL_UART_Transmit+0x2c>
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e066      	b.n	80030d6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2221      	movs	r2, #33	; 0x21
 8003012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003016:	f7fe f9bd 	bl	8001394 <HAL_GetTick>
 800301a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	88fa      	ldrh	r2, [r7, #6]
 8003020:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	88fa      	ldrh	r2, [r7, #6]
 8003026:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003030:	d108      	bne.n	8003044 <HAL_UART_Transmit+0x6c>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d104      	bne.n	8003044 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800303a:	2300      	movs	r3, #0
 800303c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	61bb      	str	r3, [r7, #24]
 8003042:	e003      	b.n	800304c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003048:	2300      	movs	r3, #0
 800304a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800304c:	e02a      	b.n	80030a4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2200      	movs	r2, #0
 8003056:	2180      	movs	r1, #128	; 0x80
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 f840 	bl	80030de <UART_WaitOnFlagUntilTimeout>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e036      	b.n	80030d6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10b      	bne.n	8003086 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	461a      	mov	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800307c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	3302      	adds	r3, #2
 8003082:	61bb      	str	r3, [r7, #24]
 8003084:	e007      	b.n	8003096 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	781a      	ldrb	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	3301      	adds	r3, #1
 8003094:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800309a:	b29b      	uxth	r3, r3
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1cf      	bne.n	800304e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2200      	movs	r2, #0
 80030b6:	2140      	movs	r1, #64	; 0x40
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 f810 	bl	80030de <UART_WaitOnFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e006      	b.n	80030d6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	e000      	b.n	80030d6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80030d4:	2302      	movs	r3, #2
  }
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3720      	adds	r7, #32
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b090      	sub	sp, #64	; 0x40
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	4613      	mov	r3, r2
 80030ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ee:	e050      	b.n	8003192 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f6:	d04c      	beq.n	8003192 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d007      	beq.n	800310e <UART_WaitOnFlagUntilTimeout+0x30>
 80030fe:	f7fe f949 	bl	8001394 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800310a:	429a      	cmp	r2, r3
 800310c:	d241      	bcs.n	8003192 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	330c      	adds	r3, #12
 8003114:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003118:	e853 3f00 	ldrex	r3, [r3]
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003124:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	330c      	adds	r3, #12
 800312c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800312e:	637a      	str	r2, [r7, #52]	; 0x34
 8003130:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003132:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003134:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003136:	e841 2300 	strex	r3, r2, [r1]
 800313a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800313c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1e5      	bne.n	800310e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	3314      	adds	r3, #20
 8003148:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	e853 3f00 	ldrex	r3, [r3]
 8003150:	613b      	str	r3, [r7, #16]
   return(result);
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f023 0301 	bic.w	r3, r3, #1
 8003158:	63bb      	str	r3, [r7, #56]	; 0x38
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	3314      	adds	r3, #20
 8003160:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003162:	623a      	str	r2, [r7, #32]
 8003164:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003166:	69f9      	ldr	r1, [r7, #28]
 8003168:	6a3a      	ldr	r2, [r7, #32]
 800316a:	e841 2300 	strex	r3, r2, [r1]
 800316e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1e5      	bne.n	8003142 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2220      	movs	r2, #32
 800317a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2220      	movs	r2, #32
 8003182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e00f      	b.n	80031b2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	4013      	ands	r3, r2
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	429a      	cmp	r2, r3
 80031a0:	bf0c      	ite	eq
 80031a2:	2301      	moveq	r3, #1
 80031a4:	2300      	movne	r3, #0
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d09f      	beq.n	80030f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3740      	adds	r7, #64	; 0x40
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031f6:	f023 030c 	bic.w	r3, r3, #12
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	68b9      	ldr	r1, [r7, #8]
 8003200:	430b      	orrs	r3, r1
 8003202:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699a      	ldr	r2, [r3, #24]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a2c      	ldr	r2, [pc, #176]	; (80032d0 <UART_SetConfig+0x114>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d103      	bne.n	800322c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003224:	f7fe ff30 	bl	8002088 <HAL_RCC_GetPCLK2Freq>
 8003228:	60f8      	str	r0, [r7, #12]
 800322a:	e002      	b.n	8003232 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800322c:	f7fe ff18 	bl	8002060 <HAL_RCC_GetPCLK1Freq>
 8003230:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	009a      	lsls	r2, r3, #2
 800323c:	441a      	add	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	fbb2 f3f3 	udiv	r3, r2, r3
 8003248:	4a22      	ldr	r2, [pc, #136]	; (80032d4 <UART_SetConfig+0x118>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	0119      	lsls	r1, r3, #4
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	009a      	lsls	r2, r3, #2
 800325c:	441a      	add	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	fbb2 f2f3 	udiv	r2, r2, r3
 8003268:	4b1a      	ldr	r3, [pc, #104]	; (80032d4 <UART_SetConfig+0x118>)
 800326a:	fba3 0302 	umull	r0, r3, r3, r2
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	2064      	movs	r0, #100	; 0x64
 8003272:	fb00 f303 	mul.w	r3, r0, r3
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	3332      	adds	r3, #50	; 0x32
 800327c:	4a15      	ldr	r2, [pc, #84]	; (80032d4 <UART_SetConfig+0x118>)
 800327e:	fba2 2303 	umull	r2, r3, r2, r3
 8003282:	095b      	lsrs	r3, r3, #5
 8003284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003288:	4419      	add	r1, r3
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	009a      	lsls	r2, r3, #2
 8003294:	441a      	add	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	fbb2 f2f3 	udiv	r2, r2, r3
 80032a0:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <UART_SetConfig+0x118>)
 80032a2:	fba3 0302 	umull	r0, r3, r3, r2
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	2064      	movs	r0, #100	; 0x64
 80032aa:	fb00 f303 	mul.w	r3, r0, r3
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	3332      	adds	r3, #50	; 0x32
 80032b4:	4a07      	ldr	r2, [pc, #28]	; (80032d4 <UART_SetConfig+0x118>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	f003 020f 	and.w	r2, r3, #15
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	440a      	add	r2, r1
 80032c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032c8:	bf00      	nop
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40013800 	.word	0x40013800
 80032d4:	51eb851f 	.word	0x51eb851f

080032d8 <__cvt>:
 80032d8:	2b00      	cmp	r3, #0
 80032da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032de:	461f      	mov	r7, r3
 80032e0:	bfbb      	ittet	lt
 80032e2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80032e6:	461f      	movlt	r7, r3
 80032e8:	2300      	movge	r3, #0
 80032ea:	232d      	movlt	r3, #45	; 0x2d
 80032ec:	b088      	sub	sp, #32
 80032ee:	4614      	mov	r4, r2
 80032f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80032f2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80032f4:	7013      	strb	r3, [r2, #0]
 80032f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80032f8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80032fc:	f023 0820 	bic.w	r8, r3, #32
 8003300:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003304:	d005      	beq.n	8003312 <__cvt+0x3a>
 8003306:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800330a:	d100      	bne.n	800330e <__cvt+0x36>
 800330c:	3501      	adds	r5, #1
 800330e:	2302      	movs	r3, #2
 8003310:	e000      	b.n	8003314 <__cvt+0x3c>
 8003312:	2303      	movs	r3, #3
 8003314:	aa07      	add	r2, sp, #28
 8003316:	9204      	str	r2, [sp, #16]
 8003318:	aa06      	add	r2, sp, #24
 800331a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800331e:	e9cd 3500 	strd	r3, r5, [sp]
 8003322:	4622      	mov	r2, r4
 8003324:	463b      	mov	r3, r7
 8003326:	f001 f873 	bl	8004410 <_dtoa_r>
 800332a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800332e:	4606      	mov	r6, r0
 8003330:	d102      	bne.n	8003338 <__cvt+0x60>
 8003332:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003334:	07db      	lsls	r3, r3, #31
 8003336:	d522      	bpl.n	800337e <__cvt+0xa6>
 8003338:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800333c:	eb06 0905 	add.w	r9, r6, r5
 8003340:	d110      	bne.n	8003364 <__cvt+0x8c>
 8003342:	7833      	ldrb	r3, [r6, #0]
 8003344:	2b30      	cmp	r3, #48	; 0x30
 8003346:	d10a      	bne.n	800335e <__cvt+0x86>
 8003348:	2200      	movs	r2, #0
 800334a:	2300      	movs	r3, #0
 800334c:	4620      	mov	r0, r4
 800334e:	4639      	mov	r1, r7
 8003350:	f7fd fb2a 	bl	80009a8 <__aeabi_dcmpeq>
 8003354:	b918      	cbnz	r0, 800335e <__cvt+0x86>
 8003356:	f1c5 0501 	rsb	r5, r5, #1
 800335a:	f8ca 5000 	str.w	r5, [sl]
 800335e:	f8da 3000 	ldr.w	r3, [sl]
 8003362:	4499      	add	r9, r3
 8003364:	2200      	movs	r2, #0
 8003366:	2300      	movs	r3, #0
 8003368:	4620      	mov	r0, r4
 800336a:	4639      	mov	r1, r7
 800336c:	f7fd fb1c 	bl	80009a8 <__aeabi_dcmpeq>
 8003370:	b108      	cbz	r0, 8003376 <__cvt+0x9e>
 8003372:	f8cd 901c 	str.w	r9, [sp, #28]
 8003376:	2230      	movs	r2, #48	; 0x30
 8003378:	9b07      	ldr	r3, [sp, #28]
 800337a:	454b      	cmp	r3, r9
 800337c:	d307      	bcc.n	800338e <__cvt+0xb6>
 800337e:	4630      	mov	r0, r6
 8003380:	9b07      	ldr	r3, [sp, #28]
 8003382:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003384:	1b9b      	subs	r3, r3, r6
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	b008      	add	sp, #32
 800338a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800338e:	1c59      	adds	r1, r3, #1
 8003390:	9107      	str	r1, [sp, #28]
 8003392:	701a      	strb	r2, [r3, #0]
 8003394:	e7f0      	b.n	8003378 <__cvt+0xa0>

08003396 <__exponent>:
 8003396:	4603      	mov	r3, r0
 8003398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800339a:	2900      	cmp	r1, #0
 800339c:	f803 2b02 	strb.w	r2, [r3], #2
 80033a0:	bfb6      	itet	lt
 80033a2:	222d      	movlt	r2, #45	; 0x2d
 80033a4:	222b      	movge	r2, #43	; 0x2b
 80033a6:	4249      	neglt	r1, r1
 80033a8:	2909      	cmp	r1, #9
 80033aa:	7042      	strb	r2, [r0, #1]
 80033ac:	dd2a      	ble.n	8003404 <__exponent+0x6e>
 80033ae:	f10d 0207 	add.w	r2, sp, #7
 80033b2:	4617      	mov	r7, r2
 80033b4:	260a      	movs	r6, #10
 80033b6:	fb91 f5f6 	sdiv	r5, r1, r6
 80033ba:	4694      	mov	ip, r2
 80033bc:	fb06 1415 	mls	r4, r6, r5, r1
 80033c0:	3430      	adds	r4, #48	; 0x30
 80033c2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80033c6:	460c      	mov	r4, r1
 80033c8:	2c63      	cmp	r4, #99	; 0x63
 80033ca:	4629      	mov	r1, r5
 80033cc:	f102 32ff 	add.w	r2, r2, #4294967295
 80033d0:	dcf1      	bgt.n	80033b6 <__exponent+0x20>
 80033d2:	3130      	adds	r1, #48	; 0x30
 80033d4:	f1ac 0402 	sub.w	r4, ip, #2
 80033d8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80033dc:	4622      	mov	r2, r4
 80033de:	1c41      	adds	r1, r0, #1
 80033e0:	42ba      	cmp	r2, r7
 80033e2:	d30a      	bcc.n	80033fa <__exponent+0x64>
 80033e4:	f10d 0209 	add.w	r2, sp, #9
 80033e8:	eba2 020c 	sub.w	r2, r2, ip
 80033ec:	42bc      	cmp	r4, r7
 80033ee:	bf88      	it	hi
 80033f0:	2200      	movhi	r2, #0
 80033f2:	4413      	add	r3, r2
 80033f4:	1a18      	subs	r0, r3, r0
 80033f6:	b003      	add	sp, #12
 80033f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033fa:	f812 5b01 	ldrb.w	r5, [r2], #1
 80033fe:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003402:	e7ed      	b.n	80033e0 <__exponent+0x4a>
 8003404:	2330      	movs	r3, #48	; 0x30
 8003406:	3130      	adds	r1, #48	; 0x30
 8003408:	7083      	strb	r3, [r0, #2]
 800340a:	70c1      	strb	r1, [r0, #3]
 800340c:	1d03      	adds	r3, r0, #4
 800340e:	e7f1      	b.n	80033f4 <__exponent+0x5e>

08003410 <_printf_float>:
 8003410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003414:	b091      	sub	sp, #68	; 0x44
 8003416:	460c      	mov	r4, r1
 8003418:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800341c:	4616      	mov	r6, r2
 800341e:	461f      	mov	r7, r3
 8003420:	4605      	mov	r5, r0
 8003422:	f000 fee1 	bl	80041e8 <_localeconv_r>
 8003426:	6803      	ldr	r3, [r0, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	9309      	str	r3, [sp, #36]	; 0x24
 800342c:	f7fc fe90 	bl	8000150 <strlen>
 8003430:	2300      	movs	r3, #0
 8003432:	930e      	str	r3, [sp, #56]	; 0x38
 8003434:	f8d8 3000 	ldr.w	r3, [r8]
 8003438:	900a      	str	r0, [sp, #40]	; 0x28
 800343a:	3307      	adds	r3, #7
 800343c:	f023 0307 	bic.w	r3, r3, #7
 8003440:	f103 0208 	add.w	r2, r3, #8
 8003444:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003448:	f8d4 b000 	ldr.w	fp, [r4]
 800344c:	f8c8 2000 	str.w	r2, [r8]
 8003450:	e9d3 a800 	ldrd	sl, r8, [r3]
 8003454:	4652      	mov	r2, sl
 8003456:	4643      	mov	r3, r8
 8003458:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800345c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003460:	930b      	str	r3, [sp, #44]	; 0x2c
 8003462:	f04f 32ff 	mov.w	r2, #4294967295
 8003466:	4650      	mov	r0, sl
 8003468:	4b9c      	ldr	r3, [pc, #624]	; (80036dc <_printf_float+0x2cc>)
 800346a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800346c:	f7fd face 	bl	8000a0c <__aeabi_dcmpun>
 8003470:	bb70      	cbnz	r0, 80034d0 <_printf_float+0xc0>
 8003472:	f04f 32ff 	mov.w	r2, #4294967295
 8003476:	4650      	mov	r0, sl
 8003478:	4b98      	ldr	r3, [pc, #608]	; (80036dc <_printf_float+0x2cc>)
 800347a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800347c:	f7fd faa8 	bl	80009d0 <__aeabi_dcmple>
 8003480:	bb30      	cbnz	r0, 80034d0 <_printf_float+0xc0>
 8003482:	2200      	movs	r2, #0
 8003484:	2300      	movs	r3, #0
 8003486:	4650      	mov	r0, sl
 8003488:	4641      	mov	r1, r8
 800348a:	f7fd fa97 	bl	80009bc <__aeabi_dcmplt>
 800348e:	b110      	cbz	r0, 8003496 <_printf_float+0x86>
 8003490:	232d      	movs	r3, #45	; 0x2d
 8003492:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003496:	4a92      	ldr	r2, [pc, #584]	; (80036e0 <_printf_float+0x2d0>)
 8003498:	4b92      	ldr	r3, [pc, #584]	; (80036e4 <_printf_float+0x2d4>)
 800349a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800349e:	bf94      	ite	ls
 80034a0:	4690      	movls	r8, r2
 80034a2:	4698      	movhi	r8, r3
 80034a4:	2303      	movs	r3, #3
 80034a6:	f04f 0a00 	mov.w	sl, #0
 80034aa:	6123      	str	r3, [r4, #16]
 80034ac:	f02b 0304 	bic.w	r3, fp, #4
 80034b0:	6023      	str	r3, [r4, #0]
 80034b2:	4633      	mov	r3, r6
 80034b4:	4621      	mov	r1, r4
 80034b6:	4628      	mov	r0, r5
 80034b8:	9700      	str	r7, [sp, #0]
 80034ba:	aa0f      	add	r2, sp, #60	; 0x3c
 80034bc:	f000 f9d6 	bl	800386c <_printf_common>
 80034c0:	3001      	adds	r0, #1
 80034c2:	f040 8090 	bne.w	80035e6 <_printf_float+0x1d6>
 80034c6:	f04f 30ff 	mov.w	r0, #4294967295
 80034ca:	b011      	add	sp, #68	; 0x44
 80034cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034d0:	4652      	mov	r2, sl
 80034d2:	4643      	mov	r3, r8
 80034d4:	4650      	mov	r0, sl
 80034d6:	4641      	mov	r1, r8
 80034d8:	f7fd fa98 	bl	8000a0c <__aeabi_dcmpun>
 80034dc:	b148      	cbz	r0, 80034f2 <_printf_float+0xe2>
 80034de:	f1b8 0f00 	cmp.w	r8, #0
 80034e2:	bfb8      	it	lt
 80034e4:	232d      	movlt	r3, #45	; 0x2d
 80034e6:	4a80      	ldr	r2, [pc, #512]	; (80036e8 <_printf_float+0x2d8>)
 80034e8:	bfb8      	it	lt
 80034ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80034ee:	4b7f      	ldr	r3, [pc, #508]	; (80036ec <_printf_float+0x2dc>)
 80034f0:	e7d3      	b.n	800349a <_printf_float+0x8a>
 80034f2:	6863      	ldr	r3, [r4, #4]
 80034f4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	d142      	bne.n	8003582 <_printf_float+0x172>
 80034fc:	2306      	movs	r3, #6
 80034fe:	6063      	str	r3, [r4, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	9206      	str	r2, [sp, #24]
 8003504:	aa0e      	add	r2, sp, #56	; 0x38
 8003506:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800350a:	aa0d      	add	r2, sp, #52	; 0x34
 800350c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003510:	9203      	str	r2, [sp, #12]
 8003512:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003516:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800351a:	6023      	str	r3, [r4, #0]
 800351c:	6863      	ldr	r3, [r4, #4]
 800351e:	4652      	mov	r2, sl
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	4628      	mov	r0, r5
 8003524:	4643      	mov	r3, r8
 8003526:	910b      	str	r1, [sp, #44]	; 0x2c
 8003528:	f7ff fed6 	bl	80032d8 <__cvt>
 800352c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800352e:	4680      	mov	r8, r0
 8003530:	2947      	cmp	r1, #71	; 0x47
 8003532:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003534:	d108      	bne.n	8003548 <_printf_float+0x138>
 8003536:	1cc8      	adds	r0, r1, #3
 8003538:	db02      	blt.n	8003540 <_printf_float+0x130>
 800353a:	6863      	ldr	r3, [r4, #4]
 800353c:	4299      	cmp	r1, r3
 800353e:	dd40      	ble.n	80035c2 <_printf_float+0x1b2>
 8003540:	f1a9 0902 	sub.w	r9, r9, #2
 8003544:	fa5f f989 	uxtb.w	r9, r9
 8003548:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800354c:	d81f      	bhi.n	800358e <_printf_float+0x17e>
 800354e:	464a      	mov	r2, r9
 8003550:	3901      	subs	r1, #1
 8003552:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003556:	910d      	str	r1, [sp, #52]	; 0x34
 8003558:	f7ff ff1d 	bl	8003396 <__exponent>
 800355c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800355e:	4682      	mov	sl, r0
 8003560:	1813      	adds	r3, r2, r0
 8003562:	2a01      	cmp	r2, #1
 8003564:	6123      	str	r3, [r4, #16]
 8003566:	dc02      	bgt.n	800356e <_printf_float+0x15e>
 8003568:	6822      	ldr	r2, [r4, #0]
 800356a:	07d2      	lsls	r2, r2, #31
 800356c:	d501      	bpl.n	8003572 <_printf_float+0x162>
 800356e:	3301      	adds	r3, #1
 8003570:	6123      	str	r3, [r4, #16]
 8003572:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003576:	2b00      	cmp	r3, #0
 8003578:	d09b      	beq.n	80034b2 <_printf_float+0xa2>
 800357a:	232d      	movs	r3, #45	; 0x2d
 800357c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003580:	e797      	b.n	80034b2 <_printf_float+0xa2>
 8003582:	2947      	cmp	r1, #71	; 0x47
 8003584:	d1bc      	bne.n	8003500 <_printf_float+0xf0>
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1ba      	bne.n	8003500 <_printf_float+0xf0>
 800358a:	2301      	movs	r3, #1
 800358c:	e7b7      	b.n	80034fe <_printf_float+0xee>
 800358e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003592:	d118      	bne.n	80035c6 <_printf_float+0x1b6>
 8003594:	2900      	cmp	r1, #0
 8003596:	6863      	ldr	r3, [r4, #4]
 8003598:	dd0b      	ble.n	80035b2 <_printf_float+0x1a2>
 800359a:	6121      	str	r1, [r4, #16]
 800359c:	b913      	cbnz	r3, 80035a4 <_printf_float+0x194>
 800359e:	6822      	ldr	r2, [r4, #0]
 80035a0:	07d0      	lsls	r0, r2, #31
 80035a2:	d502      	bpl.n	80035aa <_printf_float+0x19a>
 80035a4:	3301      	adds	r3, #1
 80035a6:	440b      	add	r3, r1
 80035a8:	6123      	str	r3, [r4, #16]
 80035aa:	f04f 0a00 	mov.w	sl, #0
 80035ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80035b0:	e7df      	b.n	8003572 <_printf_float+0x162>
 80035b2:	b913      	cbnz	r3, 80035ba <_printf_float+0x1aa>
 80035b4:	6822      	ldr	r2, [r4, #0]
 80035b6:	07d2      	lsls	r2, r2, #31
 80035b8:	d501      	bpl.n	80035be <_printf_float+0x1ae>
 80035ba:	3302      	adds	r3, #2
 80035bc:	e7f4      	b.n	80035a8 <_printf_float+0x198>
 80035be:	2301      	movs	r3, #1
 80035c0:	e7f2      	b.n	80035a8 <_printf_float+0x198>
 80035c2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80035c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035c8:	4299      	cmp	r1, r3
 80035ca:	db05      	blt.n	80035d8 <_printf_float+0x1c8>
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	6121      	str	r1, [r4, #16]
 80035d0:	07d8      	lsls	r0, r3, #31
 80035d2:	d5ea      	bpl.n	80035aa <_printf_float+0x19a>
 80035d4:	1c4b      	adds	r3, r1, #1
 80035d6:	e7e7      	b.n	80035a8 <_printf_float+0x198>
 80035d8:	2900      	cmp	r1, #0
 80035da:	bfcc      	ite	gt
 80035dc:	2201      	movgt	r2, #1
 80035de:	f1c1 0202 	rsble	r2, r1, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	e7e0      	b.n	80035a8 <_printf_float+0x198>
 80035e6:	6823      	ldr	r3, [r4, #0]
 80035e8:	055a      	lsls	r2, r3, #21
 80035ea:	d407      	bmi.n	80035fc <_printf_float+0x1ec>
 80035ec:	6923      	ldr	r3, [r4, #16]
 80035ee:	4642      	mov	r2, r8
 80035f0:	4631      	mov	r1, r6
 80035f2:	4628      	mov	r0, r5
 80035f4:	47b8      	blx	r7
 80035f6:	3001      	adds	r0, #1
 80035f8:	d12b      	bne.n	8003652 <_printf_float+0x242>
 80035fa:	e764      	b.n	80034c6 <_printf_float+0xb6>
 80035fc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003600:	f240 80dd 	bls.w	80037be <_printf_float+0x3ae>
 8003604:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003608:	2200      	movs	r2, #0
 800360a:	2300      	movs	r3, #0
 800360c:	f7fd f9cc 	bl	80009a8 <__aeabi_dcmpeq>
 8003610:	2800      	cmp	r0, #0
 8003612:	d033      	beq.n	800367c <_printf_float+0x26c>
 8003614:	2301      	movs	r3, #1
 8003616:	4631      	mov	r1, r6
 8003618:	4628      	mov	r0, r5
 800361a:	4a35      	ldr	r2, [pc, #212]	; (80036f0 <_printf_float+0x2e0>)
 800361c:	47b8      	blx	r7
 800361e:	3001      	adds	r0, #1
 8003620:	f43f af51 	beq.w	80034c6 <_printf_float+0xb6>
 8003624:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003628:	429a      	cmp	r2, r3
 800362a:	db02      	blt.n	8003632 <_printf_float+0x222>
 800362c:	6823      	ldr	r3, [r4, #0]
 800362e:	07d8      	lsls	r0, r3, #31
 8003630:	d50f      	bpl.n	8003652 <_printf_float+0x242>
 8003632:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003636:	4631      	mov	r1, r6
 8003638:	4628      	mov	r0, r5
 800363a:	47b8      	blx	r7
 800363c:	3001      	adds	r0, #1
 800363e:	f43f af42 	beq.w	80034c6 <_printf_float+0xb6>
 8003642:	f04f 0800 	mov.w	r8, #0
 8003646:	f104 091a 	add.w	r9, r4, #26
 800364a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800364c:	3b01      	subs	r3, #1
 800364e:	4543      	cmp	r3, r8
 8003650:	dc09      	bgt.n	8003666 <_printf_float+0x256>
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	079b      	lsls	r3, r3, #30
 8003656:	f100 8104 	bmi.w	8003862 <_printf_float+0x452>
 800365a:	68e0      	ldr	r0, [r4, #12]
 800365c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800365e:	4298      	cmp	r0, r3
 8003660:	bfb8      	it	lt
 8003662:	4618      	movlt	r0, r3
 8003664:	e731      	b.n	80034ca <_printf_float+0xba>
 8003666:	2301      	movs	r3, #1
 8003668:	464a      	mov	r2, r9
 800366a:	4631      	mov	r1, r6
 800366c:	4628      	mov	r0, r5
 800366e:	47b8      	blx	r7
 8003670:	3001      	adds	r0, #1
 8003672:	f43f af28 	beq.w	80034c6 <_printf_float+0xb6>
 8003676:	f108 0801 	add.w	r8, r8, #1
 800367a:	e7e6      	b.n	800364a <_printf_float+0x23a>
 800367c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800367e:	2b00      	cmp	r3, #0
 8003680:	dc38      	bgt.n	80036f4 <_printf_float+0x2e4>
 8003682:	2301      	movs	r3, #1
 8003684:	4631      	mov	r1, r6
 8003686:	4628      	mov	r0, r5
 8003688:	4a19      	ldr	r2, [pc, #100]	; (80036f0 <_printf_float+0x2e0>)
 800368a:	47b8      	blx	r7
 800368c:	3001      	adds	r0, #1
 800368e:	f43f af1a 	beq.w	80034c6 <_printf_float+0xb6>
 8003692:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003696:	4313      	orrs	r3, r2
 8003698:	d102      	bne.n	80036a0 <_printf_float+0x290>
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	07d9      	lsls	r1, r3, #31
 800369e:	d5d8      	bpl.n	8003652 <_printf_float+0x242>
 80036a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036a4:	4631      	mov	r1, r6
 80036a6:	4628      	mov	r0, r5
 80036a8:	47b8      	blx	r7
 80036aa:	3001      	adds	r0, #1
 80036ac:	f43f af0b 	beq.w	80034c6 <_printf_float+0xb6>
 80036b0:	f04f 0900 	mov.w	r9, #0
 80036b4:	f104 0a1a 	add.w	sl, r4, #26
 80036b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036ba:	425b      	negs	r3, r3
 80036bc:	454b      	cmp	r3, r9
 80036be:	dc01      	bgt.n	80036c4 <_printf_float+0x2b4>
 80036c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036c2:	e794      	b.n	80035ee <_printf_float+0x1de>
 80036c4:	2301      	movs	r3, #1
 80036c6:	4652      	mov	r2, sl
 80036c8:	4631      	mov	r1, r6
 80036ca:	4628      	mov	r0, r5
 80036cc:	47b8      	blx	r7
 80036ce:	3001      	adds	r0, #1
 80036d0:	f43f aef9 	beq.w	80034c6 <_printf_float+0xb6>
 80036d4:	f109 0901 	add.w	r9, r9, #1
 80036d8:	e7ee      	b.n	80036b8 <_printf_float+0x2a8>
 80036da:	bf00      	nop
 80036dc:	7fefffff 	.word	0x7fefffff
 80036e0:	08007aa6 	.word	0x08007aa6
 80036e4:	08007aaa 	.word	0x08007aaa
 80036e8:	08007aae 	.word	0x08007aae
 80036ec:	08007ab2 	.word	0x08007ab2
 80036f0:	08007ab6 	.word	0x08007ab6
 80036f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80036f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036f8:	429a      	cmp	r2, r3
 80036fa:	bfa8      	it	ge
 80036fc:	461a      	movge	r2, r3
 80036fe:	2a00      	cmp	r2, #0
 8003700:	4691      	mov	r9, r2
 8003702:	dc37      	bgt.n	8003774 <_printf_float+0x364>
 8003704:	f04f 0b00 	mov.w	fp, #0
 8003708:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800370c:	f104 021a 	add.w	r2, r4, #26
 8003710:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003714:	ebaa 0309 	sub.w	r3, sl, r9
 8003718:	455b      	cmp	r3, fp
 800371a:	dc33      	bgt.n	8003784 <_printf_float+0x374>
 800371c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003720:	429a      	cmp	r2, r3
 8003722:	db3b      	blt.n	800379c <_printf_float+0x38c>
 8003724:	6823      	ldr	r3, [r4, #0]
 8003726:	07da      	lsls	r2, r3, #31
 8003728:	d438      	bmi.n	800379c <_printf_float+0x38c>
 800372a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800372e:	eba2 0903 	sub.w	r9, r2, r3
 8003732:	eba2 020a 	sub.w	r2, r2, sl
 8003736:	4591      	cmp	r9, r2
 8003738:	bfa8      	it	ge
 800373a:	4691      	movge	r9, r2
 800373c:	f1b9 0f00 	cmp.w	r9, #0
 8003740:	dc34      	bgt.n	80037ac <_printf_float+0x39c>
 8003742:	f04f 0800 	mov.w	r8, #0
 8003746:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800374a:	f104 0a1a 	add.w	sl, r4, #26
 800374e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003752:	1a9b      	subs	r3, r3, r2
 8003754:	eba3 0309 	sub.w	r3, r3, r9
 8003758:	4543      	cmp	r3, r8
 800375a:	f77f af7a 	ble.w	8003652 <_printf_float+0x242>
 800375e:	2301      	movs	r3, #1
 8003760:	4652      	mov	r2, sl
 8003762:	4631      	mov	r1, r6
 8003764:	4628      	mov	r0, r5
 8003766:	47b8      	blx	r7
 8003768:	3001      	adds	r0, #1
 800376a:	f43f aeac 	beq.w	80034c6 <_printf_float+0xb6>
 800376e:	f108 0801 	add.w	r8, r8, #1
 8003772:	e7ec      	b.n	800374e <_printf_float+0x33e>
 8003774:	4613      	mov	r3, r2
 8003776:	4631      	mov	r1, r6
 8003778:	4642      	mov	r2, r8
 800377a:	4628      	mov	r0, r5
 800377c:	47b8      	blx	r7
 800377e:	3001      	adds	r0, #1
 8003780:	d1c0      	bne.n	8003704 <_printf_float+0x2f4>
 8003782:	e6a0      	b.n	80034c6 <_printf_float+0xb6>
 8003784:	2301      	movs	r3, #1
 8003786:	4631      	mov	r1, r6
 8003788:	4628      	mov	r0, r5
 800378a:	920b      	str	r2, [sp, #44]	; 0x2c
 800378c:	47b8      	blx	r7
 800378e:	3001      	adds	r0, #1
 8003790:	f43f ae99 	beq.w	80034c6 <_printf_float+0xb6>
 8003794:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003796:	f10b 0b01 	add.w	fp, fp, #1
 800379a:	e7b9      	b.n	8003710 <_printf_float+0x300>
 800379c:	4631      	mov	r1, r6
 800379e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037a2:	4628      	mov	r0, r5
 80037a4:	47b8      	blx	r7
 80037a6:	3001      	adds	r0, #1
 80037a8:	d1bf      	bne.n	800372a <_printf_float+0x31a>
 80037aa:	e68c      	b.n	80034c6 <_printf_float+0xb6>
 80037ac:	464b      	mov	r3, r9
 80037ae:	4631      	mov	r1, r6
 80037b0:	4628      	mov	r0, r5
 80037b2:	eb08 020a 	add.w	r2, r8, sl
 80037b6:	47b8      	blx	r7
 80037b8:	3001      	adds	r0, #1
 80037ba:	d1c2      	bne.n	8003742 <_printf_float+0x332>
 80037bc:	e683      	b.n	80034c6 <_printf_float+0xb6>
 80037be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80037c0:	2a01      	cmp	r2, #1
 80037c2:	dc01      	bgt.n	80037c8 <_printf_float+0x3b8>
 80037c4:	07db      	lsls	r3, r3, #31
 80037c6:	d539      	bpl.n	800383c <_printf_float+0x42c>
 80037c8:	2301      	movs	r3, #1
 80037ca:	4642      	mov	r2, r8
 80037cc:	4631      	mov	r1, r6
 80037ce:	4628      	mov	r0, r5
 80037d0:	47b8      	blx	r7
 80037d2:	3001      	adds	r0, #1
 80037d4:	f43f ae77 	beq.w	80034c6 <_printf_float+0xb6>
 80037d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037dc:	4631      	mov	r1, r6
 80037de:	4628      	mov	r0, r5
 80037e0:	47b8      	blx	r7
 80037e2:	3001      	adds	r0, #1
 80037e4:	f43f ae6f 	beq.w	80034c6 <_printf_float+0xb6>
 80037e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80037ec:	2200      	movs	r2, #0
 80037ee:	2300      	movs	r3, #0
 80037f0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80037f4:	f7fd f8d8 	bl	80009a8 <__aeabi_dcmpeq>
 80037f8:	b9d8      	cbnz	r0, 8003832 <_printf_float+0x422>
 80037fa:	f109 33ff 	add.w	r3, r9, #4294967295
 80037fe:	f108 0201 	add.w	r2, r8, #1
 8003802:	4631      	mov	r1, r6
 8003804:	4628      	mov	r0, r5
 8003806:	47b8      	blx	r7
 8003808:	3001      	adds	r0, #1
 800380a:	d10e      	bne.n	800382a <_printf_float+0x41a>
 800380c:	e65b      	b.n	80034c6 <_printf_float+0xb6>
 800380e:	2301      	movs	r3, #1
 8003810:	464a      	mov	r2, r9
 8003812:	4631      	mov	r1, r6
 8003814:	4628      	mov	r0, r5
 8003816:	47b8      	blx	r7
 8003818:	3001      	adds	r0, #1
 800381a:	f43f ae54 	beq.w	80034c6 <_printf_float+0xb6>
 800381e:	f108 0801 	add.w	r8, r8, #1
 8003822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003824:	3b01      	subs	r3, #1
 8003826:	4543      	cmp	r3, r8
 8003828:	dcf1      	bgt.n	800380e <_printf_float+0x3fe>
 800382a:	4653      	mov	r3, sl
 800382c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003830:	e6de      	b.n	80035f0 <_printf_float+0x1e0>
 8003832:	f04f 0800 	mov.w	r8, #0
 8003836:	f104 091a 	add.w	r9, r4, #26
 800383a:	e7f2      	b.n	8003822 <_printf_float+0x412>
 800383c:	2301      	movs	r3, #1
 800383e:	4642      	mov	r2, r8
 8003840:	e7df      	b.n	8003802 <_printf_float+0x3f2>
 8003842:	2301      	movs	r3, #1
 8003844:	464a      	mov	r2, r9
 8003846:	4631      	mov	r1, r6
 8003848:	4628      	mov	r0, r5
 800384a:	47b8      	blx	r7
 800384c:	3001      	adds	r0, #1
 800384e:	f43f ae3a 	beq.w	80034c6 <_printf_float+0xb6>
 8003852:	f108 0801 	add.w	r8, r8, #1
 8003856:	68e3      	ldr	r3, [r4, #12]
 8003858:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800385a:	1a5b      	subs	r3, r3, r1
 800385c:	4543      	cmp	r3, r8
 800385e:	dcf0      	bgt.n	8003842 <_printf_float+0x432>
 8003860:	e6fb      	b.n	800365a <_printf_float+0x24a>
 8003862:	f04f 0800 	mov.w	r8, #0
 8003866:	f104 0919 	add.w	r9, r4, #25
 800386a:	e7f4      	b.n	8003856 <_printf_float+0x446>

0800386c <_printf_common>:
 800386c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003870:	4616      	mov	r6, r2
 8003872:	4699      	mov	r9, r3
 8003874:	688a      	ldr	r2, [r1, #8]
 8003876:	690b      	ldr	r3, [r1, #16]
 8003878:	4607      	mov	r7, r0
 800387a:	4293      	cmp	r3, r2
 800387c:	bfb8      	it	lt
 800387e:	4613      	movlt	r3, r2
 8003880:	6033      	str	r3, [r6, #0]
 8003882:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003886:	460c      	mov	r4, r1
 8003888:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800388c:	b10a      	cbz	r2, 8003892 <_printf_common+0x26>
 800388e:	3301      	adds	r3, #1
 8003890:	6033      	str	r3, [r6, #0]
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	0699      	lsls	r1, r3, #26
 8003896:	bf42      	ittt	mi
 8003898:	6833      	ldrmi	r3, [r6, #0]
 800389a:	3302      	addmi	r3, #2
 800389c:	6033      	strmi	r3, [r6, #0]
 800389e:	6825      	ldr	r5, [r4, #0]
 80038a0:	f015 0506 	ands.w	r5, r5, #6
 80038a4:	d106      	bne.n	80038b4 <_printf_common+0x48>
 80038a6:	f104 0a19 	add.w	sl, r4, #25
 80038aa:	68e3      	ldr	r3, [r4, #12]
 80038ac:	6832      	ldr	r2, [r6, #0]
 80038ae:	1a9b      	subs	r3, r3, r2
 80038b0:	42ab      	cmp	r3, r5
 80038b2:	dc2b      	bgt.n	800390c <_printf_common+0xa0>
 80038b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038b8:	1e13      	subs	r3, r2, #0
 80038ba:	6822      	ldr	r2, [r4, #0]
 80038bc:	bf18      	it	ne
 80038be:	2301      	movne	r3, #1
 80038c0:	0692      	lsls	r2, r2, #26
 80038c2:	d430      	bmi.n	8003926 <_printf_common+0xba>
 80038c4:	4649      	mov	r1, r9
 80038c6:	4638      	mov	r0, r7
 80038c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038cc:	47c0      	blx	r8
 80038ce:	3001      	adds	r0, #1
 80038d0:	d023      	beq.n	800391a <_printf_common+0xae>
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	6922      	ldr	r2, [r4, #16]
 80038d6:	f003 0306 	and.w	r3, r3, #6
 80038da:	2b04      	cmp	r3, #4
 80038dc:	bf14      	ite	ne
 80038de:	2500      	movne	r5, #0
 80038e0:	6833      	ldreq	r3, [r6, #0]
 80038e2:	f04f 0600 	mov.w	r6, #0
 80038e6:	bf08      	it	eq
 80038e8:	68e5      	ldreq	r5, [r4, #12]
 80038ea:	f104 041a 	add.w	r4, r4, #26
 80038ee:	bf08      	it	eq
 80038f0:	1aed      	subeq	r5, r5, r3
 80038f2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80038f6:	bf08      	it	eq
 80038f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038fc:	4293      	cmp	r3, r2
 80038fe:	bfc4      	itt	gt
 8003900:	1a9b      	subgt	r3, r3, r2
 8003902:	18ed      	addgt	r5, r5, r3
 8003904:	42b5      	cmp	r5, r6
 8003906:	d11a      	bne.n	800393e <_printf_common+0xd2>
 8003908:	2000      	movs	r0, #0
 800390a:	e008      	b.n	800391e <_printf_common+0xb2>
 800390c:	2301      	movs	r3, #1
 800390e:	4652      	mov	r2, sl
 8003910:	4649      	mov	r1, r9
 8003912:	4638      	mov	r0, r7
 8003914:	47c0      	blx	r8
 8003916:	3001      	adds	r0, #1
 8003918:	d103      	bne.n	8003922 <_printf_common+0xb6>
 800391a:	f04f 30ff 	mov.w	r0, #4294967295
 800391e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003922:	3501      	adds	r5, #1
 8003924:	e7c1      	b.n	80038aa <_printf_common+0x3e>
 8003926:	2030      	movs	r0, #48	; 0x30
 8003928:	18e1      	adds	r1, r4, r3
 800392a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003934:	4422      	add	r2, r4
 8003936:	3302      	adds	r3, #2
 8003938:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800393c:	e7c2      	b.n	80038c4 <_printf_common+0x58>
 800393e:	2301      	movs	r3, #1
 8003940:	4622      	mov	r2, r4
 8003942:	4649      	mov	r1, r9
 8003944:	4638      	mov	r0, r7
 8003946:	47c0      	blx	r8
 8003948:	3001      	adds	r0, #1
 800394a:	d0e6      	beq.n	800391a <_printf_common+0xae>
 800394c:	3601      	adds	r6, #1
 800394e:	e7d9      	b.n	8003904 <_printf_common+0x98>

08003950 <_printf_i>:
 8003950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003954:	7e0f      	ldrb	r7, [r1, #24]
 8003956:	4691      	mov	r9, r2
 8003958:	2f78      	cmp	r7, #120	; 0x78
 800395a:	4680      	mov	r8, r0
 800395c:	460c      	mov	r4, r1
 800395e:	469a      	mov	sl, r3
 8003960:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003962:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003966:	d807      	bhi.n	8003978 <_printf_i+0x28>
 8003968:	2f62      	cmp	r7, #98	; 0x62
 800396a:	d80a      	bhi.n	8003982 <_printf_i+0x32>
 800396c:	2f00      	cmp	r7, #0
 800396e:	f000 80d5 	beq.w	8003b1c <_printf_i+0x1cc>
 8003972:	2f58      	cmp	r7, #88	; 0x58
 8003974:	f000 80c1 	beq.w	8003afa <_printf_i+0x1aa>
 8003978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800397c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003980:	e03a      	b.n	80039f8 <_printf_i+0xa8>
 8003982:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003986:	2b15      	cmp	r3, #21
 8003988:	d8f6      	bhi.n	8003978 <_printf_i+0x28>
 800398a:	a101      	add	r1, pc, #4	; (adr r1, 8003990 <_printf_i+0x40>)
 800398c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003990:	080039e9 	.word	0x080039e9
 8003994:	080039fd 	.word	0x080039fd
 8003998:	08003979 	.word	0x08003979
 800399c:	08003979 	.word	0x08003979
 80039a0:	08003979 	.word	0x08003979
 80039a4:	08003979 	.word	0x08003979
 80039a8:	080039fd 	.word	0x080039fd
 80039ac:	08003979 	.word	0x08003979
 80039b0:	08003979 	.word	0x08003979
 80039b4:	08003979 	.word	0x08003979
 80039b8:	08003979 	.word	0x08003979
 80039bc:	08003b03 	.word	0x08003b03
 80039c0:	08003a29 	.word	0x08003a29
 80039c4:	08003abd 	.word	0x08003abd
 80039c8:	08003979 	.word	0x08003979
 80039cc:	08003979 	.word	0x08003979
 80039d0:	08003b25 	.word	0x08003b25
 80039d4:	08003979 	.word	0x08003979
 80039d8:	08003a29 	.word	0x08003a29
 80039dc:	08003979 	.word	0x08003979
 80039e0:	08003979 	.word	0x08003979
 80039e4:	08003ac5 	.word	0x08003ac5
 80039e8:	682b      	ldr	r3, [r5, #0]
 80039ea:	1d1a      	adds	r2, r3, #4
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	602a      	str	r2, [r5, #0]
 80039f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0a0      	b.n	8003b3e <_printf_i+0x1ee>
 80039fc:	6820      	ldr	r0, [r4, #0]
 80039fe:	682b      	ldr	r3, [r5, #0]
 8003a00:	0607      	lsls	r7, r0, #24
 8003a02:	f103 0104 	add.w	r1, r3, #4
 8003a06:	6029      	str	r1, [r5, #0]
 8003a08:	d501      	bpl.n	8003a0e <_printf_i+0xbe>
 8003a0a:	681e      	ldr	r6, [r3, #0]
 8003a0c:	e003      	b.n	8003a16 <_printf_i+0xc6>
 8003a0e:	0646      	lsls	r6, r0, #25
 8003a10:	d5fb      	bpl.n	8003a0a <_printf_i+0xba>
 8003a12:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003a16:	2e00      	cmp	r6, #0
 8003a18:	da03      	bge.n	8003a22 <_printf_i+0xd2>
 8003a1a:	232d      	movs	r3, #45	; 0x2d
 8003a1c:	4276      	negs	r6, r6
 8003a1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a22:	230a      	movs	r3, #10
 8003a24:	4859      	ldr	r0, [pc, #356]	; (8003b8c <_printf_i+0x23c>)
 8003a26:	e012      	b.n	8003a4e <_printf_i+0xfe>
 8003a28:	682b      	ldr	r3, [r5, #0]
 8003a2a:	6820      	ldr	r0, [r4, #0]
 8003a2c:	1d19      	adds	r1, r3, #4
 8003a2e:	6029      	str	r1, [r5, #0]
 8003a30:	0605      	lsls	r5, r0, #24
 8003a32:	d501      	bpl.n	8003a38 <_printf_i+0xe8>
 8003a34:	681e      	ldr	r6, [r3, #0]
 8003a36:	e002      	b.n	8003a3e <_printf_i+0xee>
 8003a38:	0641      	lsls	r1, r0, #25
 8003a3a:	d5fb      	bpl.n	8003a34 <_printf_i+0xe4>
 8003a3c:	881e      	ldrh	r6, [r3, #0]
 8003a3e:	2f6f      	cmp	r7, #111	; 0x6f
 8003a40:	bf0c      	ite	eq
 8003a42:	2308      	moveq	r3, #8
 8003a44:	230a      	movne	r3, #10
 8003a46:	4851      	ldr	r0, [pc, #324]	; (8003b8c <_printf_i+0x23c>)
 8003a48:	2100      	movs	r1, #0
 8003a4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a4e:	6865      	ldr	r5, [r4, #4]
 8003a50:	2d00      	cmp	r5, #0
 8003a52:	bfa8      	it	ge
 8003a54:	6821      	ldrge	r1, [r4, #0]
 8003a56:	60a5      	str	r5, [r4, #8]
 8003a58:	bfa4      	itt	ge
 8003a5a:	f021 0104 	bicge.w	r1, r1, #4
 8003a5e:	6021      	strge	r1, [r4, #0]
 8003a60:	b90e      	cbnz	r6, 8003a66 <_printf_i+0x116>
 8003a62:	2d00      	cmp	r5, #0
 8003a64:	d04b      	beq.n	8003afe <_printf_i+0x1ae>
 8003a66:	4615      	mov	r5, r2
 8003a68:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a6c:	fb03 6711 	mls	r7, r3, r1, r6
 8003a70:	5dc7      	ldrb	r7, [r0, r7]
 8003a72:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a76:	4637      	mov	r7, r6
 8003a78:	42bb      	cmp	r3, r7
 8003a7a:	460e      	mov	r6, r1
 8003a7c:	d9f4      	bls.n	8003a68 <_printf_i+0x118>
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d10b      	bne.n	8003a9a <_printf_i+0x14a>
 8003a82:	6823      	ldr	r3, [r4, #0]
 8003a84:	07de      	lsls	r6, r3, #31
 8003a86:	d508      	bpl.n	8003a9a <_printf_i+0x14a>
 8003a88:	6923      	ldr	r3, [r4, #16]
 8003a8a:	6861      	ldr	r1, [r4, #4]
 8003a8c:	4299      	cmp	r1, r3
 8003a8e:	bfde      	ittt	le
 8003a90:	2330      	movle	r3, #48	; 0x30
 8003a92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a96:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a9a:	1b52      	subs	r2, r2, r5
 8003a9c:	6122      	str	r2, [r4, #16]
 8003a9e:	464b      	mov	r3, r9
 8003aa0:	4621      	mov	r1, r4
 8003aa2:	4640      	mov	r0, r8
 8003aa4:	f8cd a000 	str.w	sl, [sp]
 8003aa8:	aa03      	add	r2, sp, #12
 8003aaa:	f7ff fedf 	bl	800386c <_printf_common>
 8003aae:	3001      	adds	r0, #1
 8003ab0:	d14a      	bne.n	8003b48 <_printf_i+0x1f8>
 8003ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab6:	b004      	add	sp, #16
 8003ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003abc:	6823      	ldr	r3, [r4, #0]
 8003abe:	f043 0320 	orr.w	r3, r3, #32
 8003ac2:	6023      	str	r3, [r4, #0]
 8003ac4:	2778      	movs	r7, #120	; 0x78
 8003ac6:	4832      	ldr	r0, [pc, #200]	; (8003b90 <_printf_i+0x240>)
 8003ac8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003acc:	6823      	ldr	r3, [r4, #0]
 8003ace:	6829      	ldr	r1, [r5, #0]
 8003ad0:	061f      	lsls	r7, r3, #24
 8003ad2:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ad6:	d402      	bmi.n	8003ade <_printf_i+0x18e>
 8003ad8:	065f      	lsls	r7, r3, #25
 8003ada:	bf48      	it	mi
 8003adc:	b2b6      	uxthmi	r6, r6
 8003ade:	07df      	lsls	r7, r3, #31
 8003ae0:	bf48      	it	mi
 8003ae2:	f043 0320 	orrmi.w	r3, r3, #32
 8003ae6:	6029      	str	r1, [r5, #0]
 8003ae8:	bf48      	it	mi
 8003aea:	6023      	strmi	r3, [r4, #0]
 8003aec:	b91e      	cbnz	r6, 8003af6 <_printf_i+0x1a6>
 8003aee:	6823      	ldr	r3, [r4, #0]
 8003af0:	f023 0320 	bic.w	r3, r3, #32
 8003af4:	6023      	str	r3, [r4, #0]
 8003af6:	2310      	movs	r3, #16
 8003af8:	e7a6      	b.n	8003a48 <_printf_i+0xf8>
 8003afa:	4824      	ldr	r0, [pc, #144]	; (8003b8c <_printf_i+0x23c>)
 8003afc:	e7e4      	b.n	8003ac8 <_printf_i+0x178>
 8003afe:	4615      	mov	r5, r2
 8003b00:	e7bd      	b.n	8003a7e <_printf_i+0x12e>
 8003b02:	682b      	ldr	r3, [r5, #0]
 8003b04:	6826      	ldr	r6, [r4, #0]
 8003b06:	1d18      	adds	r0, r3, #4
 8003b08:	6961      	ldr	r1, [r4, #20]
 8003b0a:	6028      	str	r0, [r5, #0]
 8003b0c:	0635      	lsls	r5, r6, #24
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	d501      	bpl.n	8003b16 <_printf_i+0x1c6>
 8003b12:	6019      	str	r1, [r3, #0]
 8003b14:	e002      	b.n	8003b1c <_printf_i+0x1cc>
 8003b16:	0670      	lsls	r0, r6, #25
 8003b18:	d5fb      	bpl.n	8003b12 <_printf_i+0x1c2>
 8003b1a:	8019      	strh	r1, [r3, #0]
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	4615      	mov	r5, r2
 8003b20:	6123      	str	r3, [r4, #16]
 8003b22:	e7bc      	b.n	8003a9e <_printf_i+0x14e>
 8003b24:	682b      	ldr	r3, [r5, #0]
 8003b26:	2100      	movs	r1, #0
 8003b28:	1d1a      	adds	r2, r3, #4
 8003b2a:	602a      	str	r2, [r5, #0]
 8003b2c:	681d      	ldr	r5, [r3, #0]
 8003b2e:	6862      	ldr	r2, [r4, #4]
 8003b30:	4628      	mov	r0, r5
 8003b32:	f000 fbcf 	bl	80042d4 <memchr>
 8003b36:	b108      	cbz	r0, 8003b3c <_printf_i+0x1ec>
 8003b38:	1b40      	subs	r0, r0, r5
 8003b3a:	6060      	str	r0, [r4, #4]
 8003b3c:	6863      	ldr	r3, [r4, #4]
 8003b3e:	6123      	str	r3, [r4, #16]
 8003b40:	2300      	movs	r3, #0
 8003b42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b46:	e7aa      	b.n	8003a9e <_printf_i+0x14e>
 8003b48:	462a      	mov	r2, r5
 8003b4a:	4649      	mov	r1, r9
 8003b4c:	4640      	mov	r0, r8
 8003b4e:	6923      	ldr	r3, [r4, #16]
 8003b50:	47d0      	blx	sl
 8003b52:	3001      	adds	r0, #1
 8003b54:	d0ad      	beq.n	8003ab2 <_printf_i+0x162>
 8003b56:	6823      	ldr	r3, [r4, #0]
 8003b58:	079b      	lsls	r3, r3, #30
 8003b5a:	d413      	bmi.n	8003b84 <_printf_i+0x234>
 8003b5c:	68e0      	ldr	r0, [r4, #12]
 8003b5e:	9b03      	ldr	r3, [sp, #12]
 8003b60:	4298      	cmp	r0, r3
 8003b62:	bfb8      	it	lt
 8003b64:	4618      	movlt	r0, r3
 8003b66:	e7a6      	b.n	8003ab6 <_printf_i+0x166>
 8003b68:	2301      	movs	r3, #1
 8003b6a:	4632      	mov	r2, r6
 8003b6c:	4649      	mov	r1, r9
 8003b6e:	4640      	mov	r0, r8
 8003b70:	47d0      	blx	sl
 8003b72:	3001      	adds	r0, #1
 8003b74:	d09d      	beq.n	8003ab2 <_printf_i+0x162>
 8003b76:	3501      	adds	r5, #1
 8003b78:	68e3      	ldr	r3, [r4, #12]
 8003b7a:	9903      	ldr	r1, [sp, #12]
 8003b7c:	1a5b      	subs	r3, r3, r1
 8003b7e:	42ab      	cmp	r3, r5
 8003b80:	dcf2      	bgt.n	8003b68 <_printf_i+0x218>
 8003b82:	e7eb      	b.n	8003b5c <_printf_i+0x20c>
 8003b84:	2500      	movs	r5, #0
 8003b86:	f104 0619 	add.w	r6, r4, #25
 8003b8a:	e7f5      	b.n	8003b78 <_printf_i+0x228>
 8003b8c:	08007ab8 	.word	0x08007ab8
 8003b90:	08007ac9 	.word	0x08007ac9

08003b94 <_scanf_float>:
 8003b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b98:	b087      	sub	sp, #28
 8003b9a:	9303      	str	r3, [sp, #12]
 8003b9c:	688b      	ldr	r3, [r1, #8]
 8003b9e:	4617      	mov	r7, r2
 8003ba0:	1e5a      	subs	r2, r3, #1
 8003ba2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003ba6:	bf85      	ittet	hi
 8003ba8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003bac:	195b      	addhi	r3, r3, r5
 8003bae:	2300      	movls	r3, #0
 8003bb0:	9302      	strhi	r3, [sp, #8]
 8003bb2:	bf88      	it	hi
 8003bb4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003bb8:	468b      	mov	fp, r1
 8003bba:	f04f 0500 	mov.w	r5, #0
 8003bbe:	bf8c      	ite	hi
 8003bc0:	608b      	strhi	r3, [r1, #8]
 8003bc2:	9302      	strls	r3, [sp, #8]
 8003bc4:	680b      	ldr	r3, [r1, #0]
 8003bc6:	4680      	mov	r8, r0
 8003bc8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003bcc:	f84b 3b1c 	str.w	r3, [fp], #28
 8003bd0:	460c      	mov	r4, r1
 8003bd2:	465e      	mov	r6, fp
 8003bd4:	46aa      	mov	sl, r5
 8003bd6:	46a9      	mov	r9, r5
 8003bd8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003bdc:	9501      	str	r5, [sp, #4]
 8003bde:	68a2      	ldr	r2, [r4, #8]
 8003be0:	b152      	cbz	r2, 8003bf8 <_scanf_float+0x64>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2b4e      	cmp	r3, #78	; 0x4e
 8003be8:	d864      	bhi.n	8003cb4 <_scanf_float+0x120>
 8003bea:	2b40      	cmp	r3, #64	; 0x40
 8003bec:	d83c      	bhi.n	8003c68 <_scanf_float+0xd4>
 8003bee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003bf2:	b2c8      	uxtb	r0, r1
 8003bf4:	280e      	cmp	r0, #14
 8003bf6:	d93a      	bls.n	8003c6e <_scanf_float+0xda>
 8003bf8:	f1b9 0f00 	cmp.w	r9, #0
 8003bfc:	d003      	beq.n	8003c06 <_scanf_float+0x72>
 8003bfe:	6823      	ldr	r3, [r4, #0]
 8003c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c04:	6023      	str	r3, [r4, #0]
 8003c06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003c0a:	f1ba 0f01 	cmp.w	sl, #1
 8003c0e:	f200 8113 	bhi.w	8003e38 <_scanf_float+0x2a4>
 8003c12:	455e      	cmp	r6, fp
 8003c14:	f200 8105 	bhi.w	8003e22 <_scanf_float+0x28e>
 8003c18:	2501      	movs	r5, #1
 8003c1a:	4628      	mov	r0, r5
 8003c1c:	b007      	add	sp, #28
 8003c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c22:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003c26:	2a0d      	cmp	r2, #13
 8003c28:	d8e6      	bhi.n	8003bf8 <_scanf_float+0x64>
 8003c2a:	a101      	add	r1, pc, #4	; (adr r1, 8003c30 <_scanf_float+0x9c>)
 8003c2c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003c30:	08003d6f 	.word	0x08003d6f
 8003c34:	08003bf9 	.word	0x08003bf9
 8003c38:	08003bf9 	.word	0x08003bf9
 8003c3c:	08003bf9 	.word	0x08003bf9
 8003c40:	08003dcf 	.word	0x08003dcf
 8003c44:	08003da7 	.word	0x08003da7
 8003c48:	08003bf9 	.word	0x08003bf9
 8003c4c:	08003bf9 	.word	0x08003bf9
 8003c50:	08003d7d 	.word	0x08003d7d
 8003c54:	08003bf9 	.word	0x08003bf9
 8003c58:	08003bf9 	.word	0x08003bf9
 8003c5c:	08003bf9 	.word	0x08003bf9
 8003c60:	08003bf9 	.word	0x08003bf9
 8003c64:	08003d35 	.word	0x08003d35
 8003c68:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003c6c:	e7db      	b.n	8003c26 <_scanf_float+0x92>
 8003c6e:	290e      	cmp	r1, #14
 8003c70:	d8c2      	bhi.n	8003bf8 <_scanf_float+0x64>
 8003c72:	a001      	add	r0, pc, #4	; (adr r0, 8003c78 <_scanf_float+0xe4>)
 8003c74:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003c78:	08003d27 	.word	0x08003d27
 8003c7c:	08003bf9 	.word	0x08003bf9
 8003c80:	08003d27 	.word	0x08003d27
 8003c84:	08003dbb 	.word	0x08003dbb
 8003c88:	08003bf9 	.word	0x08003bf9
 8003c8c:	08003cd5 	.word	0x08003cd5
 8003c90:	08003d11 	.word	0x08003d11
 8003c94:	08003d11 	.word	0x08003d11
 8003c98:	08003d11 	.word	0x08003d11
 8003c9c:	08003d11 	.word	0x08003d11
 8003ca0:	08003d11 	.word	0x08003d11
 8003ca4:	08003d11 	.word	0x08003d11
 8003ca8:	08003d11 	.word	0x08003d11
 8003cac:	08003d11 	.word	0x08003d11
 8003cb0:	08003d11 	.word	0x08003d11
 8003cb4:	2b6e      	cmp	r3, #110	; 0x6e
 8003cb6:	d809      	bhi.n	8003ccc <_scanf_float+0x138>
 8003cb8:	2b60      	cmp	r3, #96	; 0x60
 8003cba:	d8b2      	bhi.n	8003c22 <_scanf_float+0x8e>
 8003cbc:	2b54      	cmp	r3, #84	; 0x54
 8003cbe:	d077      	beq.n	8003db0 <_scanf_float+0x21c>
 8003cc0:	2b59      	cmp	r3, #89	; 0x59
 8003cc2:	d199      	bne.n	8003bf8 <_scanf_float+0x64>
 8003cc4:	2d07      	cmp	r5, #7
 8003cc6:	d197      	bne.n	8003bf8 <_scanf_float+0x64>
 8003cc8:	2508      	movs	r5, #8
 8003cca:	e029      	b.n	8003d20 <_scanf_float+0x18c>
 8003ccc:	2b74      	cmp	r3, #116	; 0x74
 8003cce:	d06f      	beq.n	8003db0 <_scanf_float+0x21c>
 8003cd0:	2b79      	cmp	r3, #121	; 0x79
 8003cd2:	e7f6      	b.n	8003cc2 <_scanf_float+0x12e>
 8003cd4:	6821      	ldr	r1, [r4, #0]
 8003cd6:	05c8      	lsls	r0, r1, #23
 8003cd8:	d51a      	bpl.n	8003d10 <_scanf_float+0x17c>
 8003cda:	9b02      	ldr	r3, [sp, #8]
 8003cdc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003ce0:	6021      	str	r1, [r4, #0]
 8003ce2:	f109 0901 	add.w	r9, r9, #1
 8003ce6:	b11b      	cbz	r3, 8003cf0 <_scanf_float+0x15c>
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	3201      	adds	r2, #1
 8003cec:	9302      	str	r3, [sp, #8]
 8003cee:	60a2      	str	r2, [r4, #8]
 8003cf0:	68a3      	ldr	r3, [r4, #8]
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	60a3      	str	r3, [r4, #8]
 8003cf6:	6923      	ldr	r3, [r4, #16]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	6123      	str	r3, [r4, #16]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	607b      	str	r3, [r7, #4]
 8003d04:	f340 8084 	ble.w	8003e10 <_scanf_float+0x27c>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	603b      	str	r3, [r7, #0]
 8003d0e:	e766      	b.n	8003bde <_scanf_float+0x4a>
 8003d10:	eb1a 0f05 	cmn.w	sl, r5
 8003d14:	f47f af70 	bne.w	8003bf8 <_scanf_float+0x64>
 8003d18:	6822      	ldr	r2, [r4, #0]
 8003d1a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003d1e:	6022      	str	r2, [r4, #0]
 8003d20:	f806 3b01 	strb.w	r3, [r6], #1
 8003d24:	e7e4      	b.n	8003cf0 <_scanf_float+0x15c>
 8003d26:	6822      	ldr	r2, [r4, #0]
 8003d28:	0610      	lsls	r0, r2, #24
 8003d2a:	f57f af65 	bpl.w	8003bf8 <_scanf_float+0x64>
 8003d2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d32:	e7f4      	b.n	8003d1e <_scanf_float+0x18a>
 8003d34:	f1ba 0f00 	cmp.w	sl, #0
 8003d38:	d10e      	bne.n	8003d58 <_scanf_float+0x1c4>
 8003d3a:	f1b9 0f00 	cmp.w	r9, #0
 8003d3e:	d10e      	bne.n	8003d5e <_scanf_float+0x1ca>
 8003d40:	6822      	ldr	r2, [r4, #0]
 8003d42:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003d46:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003d4a:	d108      	bne.n	8003d5e <_scanf_float+0x1ca>
 8003d4c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003d50:	f04f 0a01 	mov.w	sl, #1
 8003d54:	6022      	str	r2, [r4, #0]
 8003d56:	e7e3      	b.n	8003d20 <_scanf_float+0x18c>
 8003d58:	f1ba 0f02 	cmp.w	sl, #2
 8003d5c:	d055      	beq.n	8003e0a <_scanf_float+0x276>
 8003d5e:	2d01      	cmp	r5, #1
 8003d60:	d002      	beq.n	8003d68 <_scanf_float+0x1d4>
 8003d62:	2d04      	cmp	r5, #4
 8003d64:	f47f af48 	bne.w	8003bf8 <_scanf_float+0x64>
 8003d68:	3501      	adds	r5, #1
 8003d6a:	b2ed      	uxtb	r5, r5
 8003d6c:	e7d8      	b.n	8003d20 <_scanf_float+0x18c>
 8003d6e:	f1ba 0f01 	cmp.w	sl, #1
 8003d72:	f47f af41 	bne.w	8003bf8 <_scanf_float+0x64>
 8003d76:	f04f 0a02 	mov.w	sl, #2
 8003d7a:	e7d1      	b.n	8003d20 <_scanf_float+0x18c>
 8003d7c:	b97d      	cbnz	r5, 8003d9e <_scanf_float+0x20a>
 8003d7e:	f1b9 0f00 	cmp.w	r9, #0
 8003d82:	f47f af3c 	bne.w	8003bfe <_scanf_float+0x6a>
 8003d86:	6822      	ldr	r2, [r4, #0]
 8003d88:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003d8c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003d90:	f47f af39 	bne.w	8003c06 <_scanf_float+0x72>
 8003d94:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003d98:	2501      	movs	r5, #1
 8003d9a:	6022      	str	r2, [r4, #0]
 8003d9c:	e7c0      	b.n	8003d20 <_scanf_float+0x18c>
 8003d9e:	2d03      	cmp	r5, #3
 8003da0:	d0e2      	beq.n	8003d68 <_scanf_float+0x1d4>
 8003da2:	2d05      	cmp	r5, #5
 8003da4:	e7de      	b.n	8003d64 <_scanf_float+0x1d0>
 8003da6:	2d02      	cmp	r5, #2
 8003da8:	f47f af26 	bne.w	8003bf8 <_scanf_float+0x64>
 8003dac:	2503      	movs	r5, #3
 8003dae:	e7b7      	b.n	8003d20 <_scanf_float+0x18c>
 8003db0:	2d06      	cmp	r5, #6
 8003db2:	f47f af21 	bne.w	8003bf8 <_scanf_float+0x64>
 8003db6:	2507      	movs	r5, #7
 8003db8:	e7b2      	b.n	8003d20 <_scanf_float+0x18c>
 8003dba:	6822      	ldr	r2, [r4, #0]
 8003dbc:	0591      	lsls	r1, r2, #22
 8003dbe:	f57f af1b 	bpl.w	8003bf8 <_scanf_float+0x64>
 8003dc2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003dc6:	6022      	str	r2, [r4, #0]
 8003dc8:	f8cd 9004 	str.w	r9, [sp, #4]
 8003dcc:	e7a8      	b.n	8003d20 <_scanf_float+0x18c>
 8003dce:	6822      	ldr	r2, [r4, #0]
 8003dd0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003dd4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003dd8:	d006      	beq.n	8003de8 <_scanf_float+0x254>
 8003dda:	0550      	lsls	r0, r2, #21
 8003ddc:	f57f af0c 	bpl.w	8003bf8 <_scanf_float+0x64>
 8003de0:	f1b9 0f00 	cmp.w	r9, #0
 8003de4:	f43f af0f 	beq.w	8003c06 <_scanf_float+0x72>
 8003de8:	0591      	lsls	r1, r2, #22
 8003dea:	bf58      	it	pl
 8003dec:	9901      	ldrpl	r1, [sp, #4]
 8003dee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003df2:	bf58      	it	pl
 8003df4:	eba9 0101 	subpl.w	r1, r9, r1
 8003df8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003dfc:	f04f 0900 	mov.w	r9, #0
 8003e00:	bf58      	it	pl
 8003e02:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003e06:	6022      	str	r2, [r4, #0]
 8003e08:	e78a      	b.n	8003d20 <_scanf_float+0x18c>
 8003e0a:	f04f 0a03 	mov.w	sl, #3
 8003e0e:	e787      	b.n	8003d20 <_scanf_float+0x18c>
 8003e10:	4639      	mov	r1, r7
 8003e12:	4640      	mov	r0, r8
 8003e14:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003e18:	4798      	blx	r3
 8003e1a:	2800      	cmp	r0, #0
 8003e1c:	f43f aedf 	beq.w	8003bde <_scanf_float+0x4a>
 8003e20:	e6ea      	b.n	8003bf8 <_scanf_float+0x64>
 8003e22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e26:	463a      	mov	r2, r7
 8003e28:	4640      	mov	r0, r8
 8003e2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003e2e:	4798      	blx	r3
 8003e30:	6923      	ldr	r3, [r4, #16]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	6123      	str	r3, [r4, #16]
 8003e36:	e6ec      	b.n	8003c12 <_scanf_float+0x7e>
 8003e38:	1e6b      	subs	r3, r5, #1
 8003e3a:	2b06      	cmp	r3, #6
 8003e3c:	d825      	bhi.n	8003e8a <_scanf_float+0x2f6>
 8003e3e:	2d02      	cmp	r5, #2
 8003e40:	d836      	bhi.n	8003eb0 <_scanf_float+0x31c>
 8003e42:	455e      	cmp	r6, fp
 8003e44:	f67f aee8 	bls.w	8003c18 <_scanf_float+0x84>
 8003e48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e4c:	463a      	mov	r2, r7
 8003e4e:	4640      	mov	r0, r8
 8003e50:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003e54:	4798      	blx	r3
 8003e56:	6923      	ldr	r3, [r4, #16]
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	6123      	str	r3, [r4, #16]
 8003e5c:	e7f1      	b.n	8003e42 <_scanf_float+0x2ae>
 8003e5e:	9802      	ldr	r0, [sp, #8]
 8003e60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e64:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003e68:	463a      	mov	r2, r7
 8003e6a:	9002      	str	r0, [sp, #8]
 8003e6c:	4640      	mov	r0, r8
 8003e6e:	4798      	blx	r3
 8003e70:	6923      	ldr	r3, [r4, #16]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	6123      	str	r3, [r4, #16]
 8003e76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e7a:	fa5f fa8a 	uxtb.w	sl, sl
 8003e7e:	f1ba 0f02 	cmp.w	sl, #2
 8003e82:	d1ec      	bne.n	8003e5e <_scanf_float+0x2ca>
 8003e84:	3d03      	subs	r5, #3
 8003e86:	b2ed      	uxtb	r5, r5
 8003e88:	1b76      	subs	r6, r6, r5
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	05da      	lsls	r2, r3, #23
 8003e8e:	d52f      	bpl.n	8003ef0 <_scanf_float+0x35c>
 8003e90:	055b      	lsls	r3, r3, #21
 8003e92:	d510      	bpl.n	8003eb6 <_scanf_float+0x322>
 8003e94:	455e      	cmp	r6, fp
 8003e96:	f67f aebf 	bls.w	8003c18 <_scanf_float+0x84>
 8003e9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003e9e:	463a      	mov	r2, r7
 8003ea0:	4640      	mov	r0, r8
 8003ea2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003ea6:	4798      	blx	r3
 8003ea8:	6923      	ldr	r3, [r4, #16]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	6123      	str	r3, [r4, #16]
 8003eae:	e7f1      	b.n	8003e94 <_scanf_float+0x300>
 8003eb0:	46aa      	mov	sl, r5
 8003eb2:	9602      	str	r6, [sp, #8]
 8003eb4:	e7df      	b.n	8003e76 <_scanf_float+0x2e2>
 8003eb6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003eba:	6923      	ldr	r3, [r4, #16]
 8003ebc:	2965      	cmp	r1, #101	; 0x65
 8003ebe:	f103 33ff 	add.w	r3, r3, #4294967295
 8003ec2:	f106 35ff 	add.w	r5, r6, #4294967295
 8003ec6:	6123      	str	r3, [r4, #16]
 8003ec8:	d00c      	beq.n	8003ee4 <_scanf_float+0x350>
 8003eca:	2945      	cmp	r1, #69	; 0x45
 8003ecc:	d00a      	beq.n	8003ee4 <_scanf_float+0x350>
 8003ece:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003ed2:	463a      	mov	r2, r7
 8003ed4:	4640      	mov	r0, r8
 8003ed6:	4798      	blx	r3
 8003ed8:	6923      	ldr	r3, [r4, #16]
 8003eda:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	1eb5      	subs	r5, r6, #2
 8003ee2:	6123      	str	r3, [r4, #16]
 8003ee4:	463a      	mov	r2, r7
 8003ee6:	4640      	mov	r0, r8
 8003ee8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003eec:	4798      	blx	r3
 8003eee:	462e      	mov	r6, r5
 8003ef0:	6825      	ldr	r5, [r4, #0]
 8003ef2:	f015 0510 	ands.w	r5, r5, #16
 8003ef6:	d155      	bne.n	8003fa4 <_scanf_float+0x410>
 8003ef8:	7035      	strb	r5, [r6, #0]
 8003efa:	6823      	ldr	r3, [r4, #0]
 8003efc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f04:	d11d      	bne.n	8003f42 <_scanf_float+0x3ae>
 8003f06:	9b01      	ldr	r3, [sp, #4]
 8003f08:	454b      	cmp	r3, r9
 8003f0a:	eba3 0209 	sub.w	r2, r3, r9
 8003f0e:	d125      	bne.n	8003f5c <_scanf_float+0x3c8>
 8003f10:	2200      	movs	r2, #0
 8003f12:	4659      	mov	r1, fp
 8003f14:	4640      	mov	r0, r8
 8003f16:	f002 fc0f 	bl	8006738 <_strtod_r>
 8003f1a:	9b03      	ldr	r3, [sp, #12]
 8003f1c:	f8d4 c000 	ldr.w	ip, [r4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f01c 0f02 	tst.w	ip, #2
 8003f26:	4606      	mov	r6, r0
 8003f28:	460f      	mov	r7, r1
 8003f2a:	f103 0204 	add.w	r2, r3, #4
 8003f2e:	d020      	beq.n	8003f72 <_scanf_float+0x3de>
 8003f30:	9903      	ldr	r1, [sp, #12]
 8003f32:	600a      	str	r2, [r1, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	e9c3 6700 	strd	r6, r7, [r3]
 8003f3a:	68e3      	ldr	r3, [r4, #12]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	60e3      	str	r3, [r4, #12]
 8003f40:	e66b      	b.n	8003c1a <_scanf_float+0x86>
 8003f42:	9b04      	ldr	r3, [sp, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0e3      	beq.n	8003f10 <_scanf_float+0x37c>
 8003f48:	9905      	ldr	r1, [sp, #20]
 8003f4a:	230a      	movs	r3, #10
 8003f4c:	462a      	mov	r2, r5
 8003f4e:	4640      	mov	r0, r8
 8003f50:	3101      	adds	r1, #1
 8003f52:	f002 fc75 	bl	8006840 <_strtol_r>
 8003f56:	9b04      	ldr	r3, [sp, #16]
 8003f58:	9e05      	ldr	r6, [sp, #20]
 8003f5a:	1ac2      	subs	r2, r0, r3
 8003f5c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003f60:	429e      	cmp	r6, r3
 8003f62:	bf28      	it	cs
 8003f64:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003f68:	4630      	mov	r0, r6
 8003f6a:	490f      	ldr	r1, [pc, #60]	; (8003fa8 <_scanf_float+0x414>)
 8003f6c:	f000 f8d0 	bl	8004110 <siprintf>
 8003f70:	e7ce      	b.n	8003f10 <_scanf_float+0x37c>
 8003f72:	f01c 0f04 	tst.w	ip, #4
 8003f76:	d1db      	bne.n	8003f30 <_scanf_float+0x39c>
 8003f78:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003f7c:	f8cc 2000 	str.w	r2, [ip]
 8003f80:	f8d3 8000 	ldr.w	r8, [r3]
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	f7fc fd40 	bl	8000a0c <__aeabi_dcmpun>
 8003f8c:	b128      	cbz	r0, 8003f9a <_scanf_float+0x406>
 8003f8e:	4807      	ldr	r0, [pc, #28]	; (8003fac <_scanf_float+0x418>)
 8003f90:	f000 f9ae 	bl	80042f0 <nanf>
 8003f94:	f8c8 0000 	str.w	r0, [r8]
 8003f98:	e7cf      	b.n	8003f3a <_scanf_float+0x3a6>
 8003f9a:	4630      	mov	r0, r6
 8003f9c:	4639      	mov	r1, r7
 8003f9e:	f7fc fd93 	bl	8000ac8 <__aeabi_d2f>
 8003fa2:	e7f7      	b.n	8003f94 <_scanf_float+0x400>
 8003fa4:	2500      	movs	r5, #0
 8003fa6:	e638      	b.n	8003c1a <_scanf_float+0x86>
 8003fa8:	08007ada 	.word	0x08007ada
 8003fac:	08007e6d 	.word	0x08007e6d

08003fb0 <std>:
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	b510      	push	{r4, lr}
 8003fb4:	4604      	mov	r4, r0
 8003fb6:	e9c0 3300 	strd	r3, r3, [r0]
 8003fba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003fbe:	6083      	str	r3, [r0, #8]
 8003fc0:	8181      	strh	r1, [r0, #12]
 8003fc2:	6643      	str	r3, [r0, #100]	; 0x64
 8003fc4:	81c2      	strh	r2, [r0, #14]
 8003fc6:	6183      	str	r3, [r0, #24]
 8003fc8:	4619      	mov	r1, r3
 8003fca:	2208      	movs	r2, #8
 8003fcc:	305c      	adds	r0, #92	; 0x5c
 8003fce:	f000 f902 	bl	80041d6 <memset>
 8003fd2:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <std+0x38>)
 8003fd4:	6224      	str	r4, [r4, #32]
 8003fd6:	6263      	str	r3, [r4, #36]	; 0x24
 8003fd8:	4b04      	ldr	r3, [pc, #16]	; (8003fec <std+0x3c>)
 8003fda:	62a3      	str	r3, [r4, #40]	; 0x28
 8003fdc:	4b04      	ldr	r3, [pc, #16]	; (8003ff0 <std+0x40>)
 8003fde:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003fe0:	4b04      	ldr	r3, [pc, #16]	; (8003ff4 <std+0x44>)
 8003fe2:	6323      	str	r3, [r4, #48]	; 0x30
 8003fe4:	bd10      	pop	{r4, pc}
 8003fe6:	bf00      	nop
 8003fe8:	08004151 	.word	0x08004151
 8003fec:	08004173 	.word	0x08004173
 8003ff0:	080041ab 	.word	0x080041ab
 8003ff4:	080041cf 	.word	0x080041cf

08003ff8 <stdio_exit_handler>:
 8003ff8:	4a02      	ldr	r2, [pc, #8]	; (8004004 <stdio_exit_handler+0xc>)
 8003ffa:	4903      	ldr	r1, [pc, #12]	; (8004008 <stdio_exit_handler+0x10>)
 8003ffc:	4803      	ldr	r0, [pc, #12]	; (800400c <stdio_exit_handler+0x14>)
 8003ffe:	f000 b869 	b.w	80040d4 <_fwalk_sglue>
 8004002:	bf00      	nop
 8004004:	2000000c 	.word	0x2000000c
 8004008:	08006bf9 	.word	0x08006bf9
 800400c:	20000018 	.word	0x20000018

08004010 <cleanup_stdio>:
 8004010:	6841      	ldr	r1, [r0, #4]
 8004012:	4b0c      	ldr	r3, [pc, #48]	; (8004044 <cleanup_stdio+0x34>)
 8004014:	b510      	push	{r4, lr}
 8004016:	4299      	cmp	r1, r3
 8004018:	4604      	mov	r4, r0
 800401a:	d001      	beq.n	8004020 <cleanup_stdio+0x10>
 800401c:	f002 fdec 	bl	8006bf8 <_fflush_r>
 8004020:	68a1      	ldr	r1, [r4, #8]
 8004022:	4b09      	ldr	r3, [pc, #36]	; (8004048 <cleanup_stdio+0x38>)
 8004024:	4299      	cmp	r1, r3
 8004026:	d002      	beq.n	800402e <cleanup_stdio+0x1e>
 8004028:	4620      	mov	r0, r4
 800402a:	f002 fde5 	bl	8006bf8 <_fflush_r>
 800402e:	68e1      	ldr	r1, [r4, #12]
 8004030:	4b06      	ldr	r3, [pc, #24]	; (800404c <cleanup_stdio+0x3c>)
 8004032:	4299      	cmp	r1, r3
 8004034:	d004      	beq.n	8004040 <cleanup_stdio+0x30>
 8004036:	4620      	mov	r0, r4
 8004038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800403c:	f002 bddc 	b.w	8006bf8 <_fflush_r>
 8004040:	bd10      	pop	{r4, pc}
 8004042:	bf00      	nop
 8004044:	200002c4 	.word	0x200002c4
 8004048:	2000032c 	.word	0x2000032c
 800404c:	20000394 	.word	0x20000394

08004050 <global_stdio_init.part.0>:
 8004050:	b510      	push	{r4, lr}
 8004052:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <global_stdio_init.part.0+0x30>)
 8004054:	4c0b      	ldr	r4, [pc, #44]	; (8004084 <global_stdio_init.part.0+0x34>)
 8004056:	4a0c      	ldr	r2, [pc, #48]	; (8004088 <global_stdio_init.part.0+0x38>)
 8004058:	4620      	mov	r0, r4
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	2104      	movs	r1, #4
 800405e:	2200      	movs	r2, #0
 8004060:	f7ff ffa6 	bl	8003fb0 <std>
 8004064:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004068:	2201      	movs	r2, #1
 800406a:	2109      	movs	r1, #9
 800406c:	f7ff ffa0 	bl	8003fb0 <std>
 8004070:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004074:	2202      	movs	r2, #2
 8004076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800407a:	2112      	movs	r1, #18
 800407c:	f7ff bf98 	b.w	8003fb0 <std>
 8004080:	200003fc 	.word	0x200003fc
 8004084:	200002c4 	.word	0x200002c4
 8004088:	08003ff9 	.word	0x08003ff9

0800408c <__sfp_lock_acquire>:
 800408c:	4801      	ldr	r0, [pc, #4]	; (8004094 <__sfp_lock_acquire+0x8>)
 800408e:	f000 b91f 	b.w	80042d0 <__retarget_lock_acquire_recursive>
 8004092:	bf00      	nop
 8004094:	20000405 	.word	0x20000405

08004098 <__sfp_lock_release>:
 8004098:	4801      	ldr	r0, [pc, #4]	; (80040a0 <__sfp_lock_release+0x8>)
 800409a:	f000 b91a 	b.w	80042d2 <__retarget_lock_release_recursive>
 800409e:	bf00      	nop
 80040a0:	20000405 	.word	0x20000405

080040a4 <__sinit>:
 80040a4:	b510      	push	{r4, lr}
 80040a6:	4604      	mov	r4, r0
 80040a8:	f7ff fff0 	bl	800408c <__sfp_lock_acquire>
 80040ac:	6a23      	ldr	r3, [r4, #32]
 80040ae:	b11b      	cbz	r3, 80040b8 <__sinit+0x14>
 80040b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040b4:	f7ff bff0 	b.w	8004098 <__sfp_lock_release>
 80040b8:	4b04      	ldr	r3, [pc, #16]	; (80040cc <__sinit+0x28>)
 80040ba:	6223      	str	r3, [r4, #32]
 80040bc:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <__sinit+0x2c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1f5      	bne.n	80040b0 <__sinit+0xc>
 80040c4:	f7ff ffc4 	bl	8004050 <global_stdio_init.part.0>
 80040c8:	e7f2      	b.n	80040b0 <__sinit+0xc>
 80040ca:	bf00      	nop
 80040cc:	08004011 	.word	0x08004011
 80040d0:	200003fc 	.word	0x200003fc

080040d4 <_fwalk_sglue>:
 80040d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040d8:	4607      	mov	r7, r0
 80040da:	4688      	mov	r8, r1
 80040dc:	4614      	mov	r4, r2
 80040de:	2600      	movs	r6, #0
 80040e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80040e4:	f1b9 0901 	subs.w	r9, r9, #1
 80040e8:	d505      	bpl.n	80040f6 <_fwalk_sglue+0x22>
 80040ea:	6824      	ldr	r4, [r4, #0]
 80040ec:	2c00      	cmp	r4, #0
 80040ee:	d1f7      	bne.n	80040e0 <_fwalk_sglue+0xc>
 80040f0:	4630      	mov	r0, r6
 80040f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040f6:	89ab      	ldrh	r3, [r5, #12]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d907      	bls.n	800410c <_fwalk_sglue+0x38>
 80040fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004100:	3301      	adds	r3, #1
 8004102:	d003      	beq.n	800410c <_fwalk_sglue+0x38>
 8004104:	4629      	mov	r1, r5
 8004106:	4638      	mov	r0, r7
 8004108:	47c0      	blx	r8
 800410a:	4306      	orrs	r6, r0
 800410c:	3568      	adds	r5, #104	; 0x68
 800410e:	e7e9      	b.n	80040e4 <_fwalk_sglue+0x10>

08004110 <siprintf>:
 8004110:	b40e      	push	{r1, r2, r3}
 8004112:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004116:	b500      	push	{lr}
 8004118:	b09c      	sub	sp, #112	; 0x70
 800411a:	ab1d      	add	r3, sp, #116	; 0x74
 800411c:	9002      	str	r0, [sp, #8]
 800411e:	9006      	str	r0, [sp, #24]
 8004120:	9107      	str	r1, [sp, #28]
 8004122:	9104      	str	r1, [sp, #16]
 8004124:	4808      	ldr	r0, [pc, #32]	; (8004148 <siprintf+0x38>)
 8004126:	4909      	ldr	r1, [pc, #36]	; (800414c <siprintf+0x3c>)
 8004128:	f853 2b04 	ldr.w	r2, [r3], #4
 800412c:	9105      	str	r1, [sp, #20]
 800412e:	6800      	ldr	r0, [r0, #0]
 8004130:	a902      	add	r1, sp, #8
 8004132:	9301      	str	r3, [sp, #4]
 8004134:	f002 fbe0 	bl	80068f8 <_svfiprintf_r>
 8004138:	2200      	movs	r2, #0
 800413a:	9b02      	ldr	r3, [sp, #8]
 800413c:	701a      	strb	r2, [r3, #0]
 800413e:	b01c      	add	sp, #112	; 0x70
 8004140:	f85d eb04 	ldr.w	lr, [sp], #4
 8004144:	b003      	add	sp, #12
 8004146:	4770      	bx	lr
 8004148:	20000064 	.word	0x20000064
 800414c:	ffff0208 	.word	0xffff0208

08004150 <__sread>:
 8004150:	b510      	push	{r4, lr}
 8004152:	460c      	mov	r4, r1
 8004154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004158:	f000 f86c 	bl	8004234 <_read_r>
 800415c:	2800      	cmp	r0, #0
 800415e:	bfab      	itete	ge
 8004160:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004162:	89a3      	ldrhlt	r3, [r4, #12]
 8004164:	181b      	addge	r3, r3, r0
 8004166:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800416a:	bfac      	ite	ge
 800416c:	6563      	strge	r3, [r4, #84]	; 0x54
 800416e:	81a3      	strhlt	r3, [r4, #12]
 8004170:	bd10      	pop	{r4, pc}

08004172 <__swrite>:
 8004172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004176:	461f      	mov	r7, r3
 8004178:	898b      	ldrh	r3, [r1, #12]
 800417a:	4605      	mov	r5, r0
 800417c:	05db      	lsls	r3, r3, #23
 800417e:	460c      	mov	r4, r1
 8004180:	4616      	mov	r6, r2
 8004182:	d505      	bpl.n	8004190 <__swrite+0x1e>
 8004184:	2302      	movs	r3, #2
 8004186:	2200      	movs	r2, #0
 8004188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800418c:	f000 f840 	bl	8004210 <_lseek_r>
 8004190:	89a3      	ldrh	r3, [r4, #12]
 8004192:	4632      	mov	r2, r6
 8004194:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004198:	81a3      	strh	r3, [r4, #12]
 800419a:	4628      	mov	r0, r5
 800419c:	463b      	mov	r3, r7
 800419e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041a6:	f000 b857 	b.w	8004258 <_write_r>

080041aa <__sseek>:
 80041aa:	b510      	push	{r4, lr}
 80041ac:	460c      	mov	r4, r1
 80041ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041b2:	f000 f82d 	bl	8004210 <_lseek_r>
 80041b6:	1c43      	adds	r3, r0, #1
 80041b8:	89a3      	ldrh	r3, [r4, #12]
 80041ba:	bf15      	itete	ne
 80041bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80041be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80041c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80041c6:	81a3      	strheq	r3, [r4, #12]
 80041c8:	bf18      	it	ne
 80041ca:	81a3      	strhne	r3, [r4, #12]
 80041cc:	bd10      	pop	{r4, pc}

080041ce <__sclose>:
 80041ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041d2:	f000 b80d 	b.w	80041f0 <_close_r>

080041d6 <memset>:
 80041d6:	4603      	mov	r3, r0
 80041d8:	4402      	add	r2, r0
 80041da:	4293      	cmp	r3, r2
 80041dc:	d100      	bne.n	80041e0 <memset+0xa>
 80041de:	4770      	bx	lr
 80041e0:	f803 1b01 	strb.w	r1, [r3], #1
 80041e4:	e7f9      	b.n	80041da <memset+0x4>
	...

080041e8 <_localeconv_r>:
 80041e8:	4800      	ldr	r0, [pc, #0]	; (80041ec <_localeconv_r+0x4>)
 80041ea:	4770      	bx	lr
 80041ec:	20000158 	.word	0x20000158

080041f0 <_close_r>:
 80041f0:	b538      	push	{r3, r4, r5, lr}
 80041f2:	2300      	movs	r3, #0
 80041f4:	4d05      	ldr	r5, [pc, #20]	; (800420c <_close_r+0x1c>)
 80041f6:	4604      	mov	r4, r0
 80041f8:	4608      	mov	r0, r1
 80041fa:	602b      	str	r3, [r5, #0]
 80041fc:	f7fc ff42 	bl	8001084 <_close>
 8004200:	1c43      	adds	r3, r0, #1
 8004202:	d102      	bne.n	800420a <_close_r+0x1a>
 8004204:	682b      	ldr	r3, [r5, #0]
 8004206:	b103      	cbz	r3, 800420a <_close_r+0x1a>
 8004208:	6023      	str	r3, [r4, #0]
 800420a:	bd38      	pop	{r3, r4, r5, pc}
 800420c:	20000400 	.word	0x20000400

08004210 <_lseek_r>:
 8004210:	b538      	push	{r3, r4, r5, lr}
 8004212:	4604      	mov	r4, r0
 8004214:	4608      	mov	r0, r1
 8004216:	4611      	mov	r1, r2
 8004218:	2200      	movs	r2, #0
 800421a:	4d05      	ldr	r5, [pc, #20]	; (8004230 <_lseek_r+0x20>)
 800421c:	602a      	str	r2, [r5, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	f7fc ff54 	bl	80010cc <_lseek>
 8004224:	1c43      	adds	r3, r0, #1
 8004226:	d102      	bne.n	800422e <_lseek_r+0x1e>
 8004228:	682b      	ldr	r3, [r5, #0]
 800422a:	b103      	cbz	r3, 800422e <_lseek_r+0x1e>
 800422c:	6023      	str	r3, [r4, #0]
 800422e:	bd38      	pop	{r3, r4, r5, pc}
 8004230:	20000400 	.word	0x20000400

08004234 <_read_r>:
 8004234:	b538      	push	{r3, r4, r5, lr}
 8004236:	4604      	mov	r4, r0
 8004238:	4608      	mov	r0, r1
 800423a:	4611      	mov	r1, r2
 800423c:	2200      	movs	r2, #0
 800423e:	4d05      	ldr	r5, [pc, #20]	; (8004254 <_read_r+0x20>)
 8004240:	602a      	str	r2, [r5, #0]
 8004242:	461a      	mov	r2, r3
 8004244:	f7fc fee5 	bl	8001012 <_read>
 8004248:	1c43      	adds	r3, r0, #1
 800424a:	d102      	bne.n	8004252 <_read_r+0x1e>
 800424c:	682b      	ldr	r3, [r5, #0]
 800424e:	b103      	cbz	r3, 8004252 <_read_r+0x1e>
 8004250:	6023      	str	r3, [r4, #0]
 8004252:	bd38      	pop	{r3, r4, r5, pc}
 8004254:	20000400 	.word	0x20000400

08004258 <_write_r>:
 8004258:	b538      	push	{r3, r4, r5, lr}
 800425a:	4604      	mov	r4, r0
 800425c:	4608      	mov	r0, r1
 800425e:	4611      	mov	r1, r2
 8004260:	2200      	movs	r2, #0
 8004262:	4d05      	ldr	r5, [pc, #20]	; (8004278 <_write_r+0x20>)
 8004264:	602a      	str	r2, [r5, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	f7fc fef0 	bl	800104c <_write>
 800426c:	1c43      	adds	r3, r0, #1
 800426e:	d102      	bne.n	8004276 <_write_r+0x1e>
 8004270:	682b      	ldr	r3, [r5, #0]
 8004272:	b103      	cbz	r3, 8004276 <_write_r+0x1e>
 8004274:	6023      	str	r3, [r4, #0]
 8004276:	bd38      	pop	{r3, r4, r5, pc}
 8004278:	20000400 	.word	0x20000400

0800427c <__errno>:
 800427c:	4b01      	ldr	r3, [pc, #4]	; (8004284 <__errno+0x8>)
 800427e:	6818      	ldr	r0, [r3, #0]
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	20000064 	.word	0x20000064

08004288 <__libc_init_array>:
 8004288:	b570      	push	{r4, r5, r6, lr}
 800428a:	2600      	movs	r6, #0
 800428c:	4d0c      	ldr	r5, [pc, #48]	; (80042c0 <__libc_init_array+0x38>)
 800428e:	4c0d      	ldr	r4, [pc, #52]	; (80042c4 <__libc_init_array+0x3c>)
 8004290:	1b64      	subs	r4, r4, r5
 8004292:	10a4      	asrs	r4, r4, #2
 8004294:	42a6      	cmp	r6, r4
 8004296:	d109      	bne.n	80042ac <__libc_init_array+0x24>
 8004298:	f003 fbc0 	bl	8007a1c <_init>
 800429c:	2600      	movs	r6, #0
 800429e:	4d0a      	ldr	r5, [pc, #40]	; (80042c8 <__libc_init_array+0x40>)
 80042a0:	4c0a      	ldr	r4, [pc, #40]	; (80042cc <__libc_init_array+0x44>)
 80042a2:	1b64      	subs	r4, r4, r5
 80042a4:	10a4      	asrs	r4, r4, #2
 80042a6:	42a6      	cmp	r6, r4
 80042a8:	d105      	bne.n	80042b6 <__libc_init_array+0x2e>
 80042aa:	bd70      	pop	{r4, r5, r6, pc}
 80042ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80042b0:	4798      	blx	r3
 80042b2:	3601      	adds	r6, #1
 80042b4:	e7ee      	b.n	8004294 <__libc_init_array+0xc>
 80042b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ba:	4798      	blx	r3
 80042bc:	3601      	adds	r6, #1
 80042be:	e7f2      	b.n	80042a6 <__libc_init_array+0x1e>
 80042c0:	08007ed0 	.word	0x08007ed0
 80042c4:	08007ed0 	.word	0x08007ed0
 80042c8:	08007ed0 	.word	0x08007ed0
 80042cc:	08007ed4 	.word	0x08007ed4

080042d0 <__retarget_lock_acquire_recursive>:
 80042d0:	4770      	bx	lr

080042d2 <__retarget_lock_release_recursive>:
 80042d2:	4770      	bx	lr

080042d4 <memchr>:
 80042d4:	4603      	mov	r3, r0
 80042d6:	b510      	push	{r4, lr}
 80042d8:	b2c9      	uxtb	r1, r1
 80042da:	4402      	add	r2, r0
 80042dc:	4293      	cmp	r3, r2
 80042de:	4618      	mov	r0, r3
 80042e0:	d101      	bne.n	80042e6 <memchr+0x12>
 80042e2:	2000      	movs	r0, #0
 80042e4:	e003      	b.n	80042ee <memchr+0x1a>
 80042e6:	7804      	ldrb	r4, [r0, #0]
 80042e8:	3301      	adds	r3, #1
 80042ea:	428c      	cmp	r4, r1
 80042ec:	d1f6      	bne.n	80042dc <memchr+0x8>
 80042ee:	bd10      	pop	{r4, pc}

080042f0 <nanf>:
 80042f0:	4800      	ldr	r0, [pc, #0]	; (80042f4 <nanf+0x4>)
 80042f2:	4770      	bx	lr
 80042f4:	7fc00000 	.word	0x7fc00000

080042f8 <quorem>:
 80042f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042fc:	6903      	ldr	r3, [r0, #16]
 80042fe:	690c      	ldr	r4, [r1, #16]
 8004300:	4607      	mov	r7, r0
 8004302:	42a3      	cmp	r3, r4
 8004304:	db7f      	blt.n	8004406 <quorem+0x10e>
 8004306:	3c01      	subs	r4, #1
 8004308:	f100 0514 	add.w	r5, r0, #20
 800430c:	f101 0814 	add.w	r8, r1, #20
 8004310:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004314:	9301      	str	r3, [sp, #4]
 8004316:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800431a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800431e:	3301      	adds	r3, #1
 8004320:	429a      	cmp	r2, r3
 8004322:	fbb2 f6f3 	udiv	r6, r2, r3
 8004326:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800432a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800432e:	d331      	bcc.n	8004394 <quorem+0x9c>
 8004330:	f04f 0e00 	mov.w	lr, #0
 8004334:	4640      	mov	r0, r8
 8004336:	46ac      	mov	ip, r5
 8004338:	46f2      	mov	sl, lr
 800433a:	f850 2b04 	ldr.w	r2, [r0], #4
 800433e:	b293      	uxth	r3, r2
 8004340:	fb06 e303 	mla	r3, r6, r3, lr
 8004344:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004348:	0c1a      	lsrs	r2, r3, #16
 800434a:	b29b      	uxth	r3, r3
 800434c:	fb06 220e 	mla	r2, r6, lr, r2
 8004350:	ebaa 0303 	sub.w	r3, sl, r3
 8004354:	f8dc a000 	ldr.w	sl, [ip]
 8004358:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800435c:	fa1f fa8a 	uxth.w	sl, sl
 8004360:	4453      	add	r3, sl
 8004362:	f8dc a000 	ldr.w	sl, [ip]
 8004366:	b292      	uxth	r2, r2
 8004368:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800436c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004370:	b29b      	uxth	r3, r3
 8004372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004376:	4581      	cmp	r9, r0
 8004378:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800437c:	f84c 3b04 	str.w	r3, [ip], #4
 8004380:	d2db      	bcs.n	800433a <quorem+0x42>
 8004382:	f855 300b 	ldr.w	r3, [r5, fp]
 8004386:	b92b      	cbnz	r3, 8004394 <quorem+0x9c>
 8004388:	9b01      	ldr	r3, [sp, #4]
 800438a:	3b04      	subs	r3, #4
 800438c:	429d      	cmp	r5, r3
 800438e:	461a      	mov	r2, r3
 8004390:	d32d      	bcc.n	80043ee <quorem+0xf6>
 8004392:	613c      	str	r4, [r7, #16]
 8004394:	4638      	mov	r0, r7
 8004396:	f001 f9df 	bl	8005758 <__mcmp>
 800439a:	2800      	cmp	r0, #0
 800439c:	db23      	blt.n	80043e6 <quorem+0xee>
 800439e:	4629      	mov	r1, r5
 80043a0:	2000      	movs	r0, #0
 80043a2:	3601      	adds	r6, #1
 80043a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80043a8:	f8d1 c000 	ldr.w	ip, [r1]
 80043ac:	b293      	uxth	r3, r2
 80043ae:	1ac3      	subs	r3, r0, r3
 80043b0:	0c12      	lsrs	r2, r2, #16
 80043b2:	fa1f f08c 	uxth.w	r0, ip
 80043b6:	4403      	add	r3, r0
 80043b8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80043bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80043c6:	45c1      	cmp	r9, r8
 80043c8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80043cc:	f841 3b04 	str.w	r3, [r1], #4
 80043d0:	d2e8      	bcs.n	80043a4 <quorem+0xac>
 80043d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80043d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80043da:	b922      	cbnz	r2, 80043e6 <quorem+0xee>
 80043dc:	3b04      	subs	r3, #4
 80043de:	429d      	cmp	r5, r3
 80043e0:	461a      	mov	r2, r3
 80043e2:	d30a      	bcc.n	80043fa <quorem+0x102>
 80043e4:	613c      	str	r4, [r7, #16]
 80043e6:	4630      	mov	r0, r6
 80043e8:	b003      	add	sp, #12
 80043ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ee:	6812      	ldr	r2, [r2, #0]
 80043f0:	3b04      	subs	r3, #4
 80043f2:	2a00      	cmp	r2, #0
 80043f4:	d1cd      	bne.n	8004392 <quorem+0x9a>
 80043f6:	3c01      	subs	r4, #1
 80043f8:	e7c8      	b.n	800438c <quorem+0x94>
 80043fa:	6812      	ldr	r2, [r2, #0]
 80043fc:	3b04      	subs	r3, #4
 80043fe:	2a00      	cmp	r2, #0
 8004400:	d1f0      	bne.n	80043e4 <quorem+0xec>
 8004402:	3c01      	subs	r4, #1
 8004404:	e7eb      	b.n	80043de <quorem+0xe6>
 8004406:	2000      	movs	r0, #0
 8004408:	e7ee      	b.n	80043e8 <quorem+0xf0>
 800440a:	0000      	movs	r0, r0
 800440c:	0000      	movs	r0, r0
	...

08004410 <_dtoa_r>:
 8004410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004414:	4616      	mov	r6, r2
 8004416:	461f      	mov	r7, r3
 8004418:	69c4      	ldr	r4, [r0, #28]
 800441a:	b099      	sub	sp, #100	; 0x64
 800441c:	4605      	mov	r5, r0
 800441e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004422:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004426:	b974      	cbnz	r4, 8004446 <_dtoa_r+0x36>
 8004428:	2010      	movs	r0, #16
 800442a:	f000 fe1d 	bl	8005068 <malloc>
 800442e:	4602      	mov	r2, r0
 8004430:	61e8      	str	r0, [r5, #28]
 8004432:	b920      	cbnz	r0, 800443e <_dtoa_r+0x2e>
 8004434:	21ef      	movs	r1, #239	; 0xef
 8004436:	4bac      	ldr	r3, [pc, #688]	; (80046e8 <_dtoa_r+0x2d8>)
 8004438:	48ac      	ldr	r0, [pc, #688]	; (80046ec <_dtoa_r+0x2dc>)
 800443a:	f002 fc55 	bl	8006ce8 <__assert_func>
 800443e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004442:	6004      	str	r4, [r0, #0]
 8004444:	60c4      	str	r4, [r0, #12]
 8004446:	69eb      	ldr	r3, [r5, #28]
 8004448:	6819      	ldr	r1, [r3, #0]
 800444a:	b151      	cbz	r1, 8004462 <_dtoa_r+0x52>
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	2301      	movs	r3, #1
 8004450:	4093      	lsls	r3, r2
 8004452:	604a      	str	r2, [r1, #4]
 8004454:	608b      	str	r3, [r1, #8]
 8004456:	4628      	mov	r0, r5
 8004458:	f000 fefa 	bl	8005250 <_Bfree>
 800445c:	2200      	movs	r2, #0
 800445e:	69eb      	ldr	r3, [r5, #28]
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	1e3b      	subs	r3, r7, #0
 8004464:	bfaf      	iteee	ge
 8004466:	2300      	movge	r3, #0
 8004468:	2201      	movlt	r2, #1
 800446a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800446e:	9305      	strlt	r3, [sp, #20]
 8004470:	bfa8      	it	ge
 8004472:	f8c8 3000 	strge.w	r3, [r8]
 8004476:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800447a:	4b9d      	ldr	r3, [pc, #628]	; (80046f0 <_dtoa_r+0x2e0>)
 800447c:	bfb8      	it	lt
 800447e:	f8c8 2000 	strlt.w	r2, [r8]
 8004482:	ea33 0309 	bics.w	r3, r3, r9
 8004486:	d119      	bne.n	80044bc <_dtoa_r+0xac>
 8004488:	f242 730f 	movw	r3, #9999	; 0x270f
 800448c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004494:	4333      	orrs	r3, r6
 8004496:	f000 8589 	beq.w	8004fac <_dtoa_r+0xb9c>
 800449a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800449c:	b953      	cbnz	r3, 80044b4 <_dtoa_r+0xa4>
 800449e:	4b95      	ldr	r3, [pc, #596]	; (80046f4 <_dtoa_r+0x2e4>)
 80044a0:	e023      	b.n	80044ea <_dtoa_r+0xda>
 80044a2:	4b95      	ldr	r3, [pc, #596]	; (80046f8 <_dtoa_r+0x2e8>)
 80044a4:	9303      	str	r3, [sp, #12]
 80044a6:	3308      	adds	r3, #8
 80044a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80044aa:	6013      	str	r3, [r2, #0]
 80044ac:	9803      	ldr	r0, [sp, #12]
 80044ae:	b019      	add	sp, #100	; 0x64
 80044b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044b4:	4b8f      	ldr	r3, [pc, #572]	; (80046f4 <_dtoa_r+0x2e4>)
 80044b6:	9303      	str	r3, [sp, #12]
 80044b8:	3303      	adds	r3, #3
 80044ba:	e7f5      	b.n	80044a8 <_dtoa_r+0x98>
 80044bc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80044c0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80044c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80044c8:	2200      	movs	r2, #0
 80044ca:	2300      	movs	r3, #0
 80044cc:	f7fc fa6c 	bl	80009a8 <__aeabi_dcmpeq>
 80044d0:	4680      	mov	r8, r0
 80044d2:	b160      	cbz	r0, 80044ee <_dtoa_r+0xde>
 80044d4:	2301      	movs	r3, #1
 80044d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 8562 	beq.w	8004fa6 <_dtoa_r+0xb96>
 80044e2:	4b86      	ldr	r3, [pc, #536]	; (80046fc <_dtoa_r+0x2ec>)
 80044e4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	3b01      	subs	r3, #1
 80044ea:	9303      	str	r3, [sp, #12]
 80044ec:	e7de      	b.n	80044ac <_dtoa_r+0x9c>
 80044ee:	ab16      	add	r3, sp, #88	; 0x58
 80044f0:	9301      	str	r3, [sp, #4]
 80044f2:	ab17      	add	r3, sp, #92	; 0x5c
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	4628      	mov	r0, r5
 80044f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80044fc:	f001 fa3c 	bl	8005978 <__d2b>
 8004500:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004504:	4682      	mov	sl, r0
 8004506:	2c00      	cmp	r4, #0
 8004508:	d07e      	beq.n	8004608 <_dtoa_r+0x1f8>
 800450a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800450e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004510:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004514:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004518:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800451c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004520:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004524:	4619      	mov	r1, r3
 8004526:	2200      	movs	r2, #0
 8004528:	4b75      	ldr	r3, [pc, #468]	; (8004700 <_dtoa_r+0x2f0>)
 800452a:	f7fb fe1d 	bl	8000168 <__aeabi_dsub>
 800452e:	a368      	add	r3, pc, #416	; (adr r3, 80046d0 <_dtoa_r+0x2c0>)
 8004530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004534:	f7fb ffd0 	bl	80004d8 <__aeabi_dmul>
 8004538:	a367      	add	r3, pc, #412	; (adr r3, 80046d8 <_dtoa_r+0x2c8>)
 800453a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453e:	f7fb fe15 	bl	800016c <__adddf3>
 8004542:	4606      	mov	r6, r0
 8004544:	4620      	mov	r0, r4
 8004546:	460f      	mov	r7, r1
 8004548:	f7fb ff5c 	bl	8000404 <__aeabi_i2d>
 800454c:	a364      	add	r3, pc, #400	; (adr r3, 80046e0 <_dtoa_r+0x2d0>)
 800454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004552:	f7fb ffc1 	bl	80004d8 <__aeabi_dmul>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	4630      	mov	r0, r6
 800455c:	4639      	mov	r1, r7
 800455e:	f7fb fe05 	bl	800016c <__adddf3>
 8004562:	4606      	mov	r6, r0
 8004564:	460f      	mov	r7, r1
 8004566:	f7fc fa67 	bl	8000a38 <__aeabi_d2iz>
 800456a:	2200      	movs	r2, #0
 800456c:	4683      	mov	fp, r0
 800456e:	2300      	movs	r3, #0
 8004570:	4630      	mov	r0, r6
 8004572:	4639      	mov	r1, r7
 8004574:	f7fc fa22 	bl	80009bc <__aeabi_dcmplt>
 8004578:	b148      	cbz	r0, 800458e <_dtoa_r+0x17e>
 800457a:	4658      	mov	r0, fp
 800457c:	f7fb ff42 	bl	8000404 <__aeabi_i2d>
 8004580:	4632      	mov	r2, r6
 8004582:	463b      	mov	r3, r7
 8004584:	f7fc fa10 	bl	80009a8 <__aeabi_dcmpeq>
 8004588:	b908      	cbnz	r0, 800458e <_dtoa_r+0x17e>
 800458a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800458e:	f1bb 0f16 	cmp.w	fp, #22
 8004592:	d857      	bhi.n	8004644 <_dtoa_r+0x234>
 8004594:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004598:	4b5a      	ldr	r3, [pc, #360]	; (8004704 <_dtoa_r+0x2f4>)
 800459a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800459e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a2:	f7fc fa0b 	bl	80009bc <__aeabi_dcmplt>
 80045a6:	2800      	cmp	r0, #0
 80045a8:	d04e      	beq.n	8004648 <_dtoa_r+0x238>
 80045aa:	2300      	movs	r3, #0
 80045ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80045b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80045b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80045b4:	1b1b      	subs	r3, r3, r4
 80045b6:	1e5a      	subs	r2, r3, #1
 80045b8:	bf46      	itte	mi
 80045ba:	f1c3 0901 	rsbmi	r9, r3, #1
 80045be:	2300      	movmi	r3, #0
 80045c0:	f04f 0900 	movpl.w	r9, #0
 80045c4:	9209      	str	r2, [sp, #36]	; 0x24
 80045c6:	bf48      	it	mi
 80045c8:	9309      	strmi	r3, [sp, #36]	; 0x24
 80045ca:	f1bb 0f00 	cmp.w	fp, #0
 80045ce:	db3d      	blt.n	800464c <_dtoa_r+0x23c>
 80045d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045d2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80045d6:	445b      	add	r3, fp
 80045d8:	9309      	str	r3, [sp, #36]	; 0x24
 80045da:	2300      	movs	r3, #0
 80045dc:	930a      	str	r3, [sp, #40]	; 0x28
 80045de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80045e0:	2b09      	cmp	r3, #9
 80045e2:	d867      	bhi.n	80046b4 <_dtoa_r+0x2a4>
 80045e4:	2b05      	cmp	r3, #5
 80045e6:	bfc4      	itt	gt
 80045e8:	3b04      	subgt	r3, #4
 80045ea:	9322      	strgt	r3, [sp, #136]	; 0x88
 80045ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80045ee:	bfc8      	it	gt
 80045f0:	2400      	movgt	r4, #0
 80045f2:	f1a3 0302 	sub.w	r3, r3, #2
 80045f6:	bfd8      	it	le
 80045f8:	2401      	movle	r4, #1
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	f200 8086 	bhi.w	800470c <_dtoa_r+0x2fc>
 8004600:	e8df f003 	tbb	[pc, r3]
 8004604:	5637392c 	.word	0x5637392c
 8004608:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800460c:	441c      	add	r4, r3
 800460e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004612:	2b20      	cmp	r3, #32
 8004614:	bfc1      	itttt	gt
 8004616:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800461a:	fa09 f903 	lslgt.w	r9, r9, r3
 800461e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8004622:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004626:	bfd6      	itet	le
 8004628:	f1c3 0320 	rsble	r3, r3, #32
 800462c:	ea49 0003 	orrgt.w	r0, r9, r3
 8004630:	fa06 f003 	lslle.w	r0, r6, r3
 8004634:	f7fb fed6 	bl	80003e4 <__aeabi_ui2d>
 8004638:	2201      	movs	r2, #1
 800463a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800463e:	3c01      	subs	r4, #1
 8004640:	9213      	str	r2, [sp, #76]	; 0x4c
 8004642:	e76f      	b.n	8004524 <_dtoa_r+0x114>
 8004644:	2301      	movs	r3, #1
 8004646:	e7b3      	b.n	80045b0 <_dtoa_r+0x1a0>
 8004648:	900f      	str	r0, [sp, #60]	; 0x3c
 800464a:	e7b2      	b.n	80045b2 <_dtoa_r+0x1a2>
 800464c:	f1cb 0300 	rsb	r3, fp, #0
 8004650:	930a      	str	r3, [sp, #40]	; 0x28
 8004652:	2300      	movs	r3, #0
 8004654:	eba9 090b 	sub.w	r9, r9, fp
 8004658:	930e      	str	r3, [sp, #56]	; 0x38
 800465a:	e7c0      	b.n	80045de <_dtoa_r+0x1ce>
 800465c:	2300      	movs	r3, #0
 800465e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004660:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004662:	2b00      	cmp	r3, #0
 8004664:	dc55      	bgt.n	8004712 <_dtoa_r+0x302>
 8004666:	2301      	movs	r3, #1
 8004668:	461a      	mov	r2, r3
 800466a:	9306      	str	r3, [sp, #24]
 800466c:	9308      	str	r3, [sp, #32]
 800466e:	9223      	str	r2, [sp, #140]	; 0x8c
 8004670:	e00b      	b.n	800468a <_dtoa_r+0x27a>
 8004672:	2301      	movs	r3, #1
 8004674:	e7f3      	b.n	800465e <_dtoa_r+0x24e>
 8004676:	2300      	movs	r3, #0
 8004678:	930b      	str	r3, [sp, #44]	; 0x2c
 800467a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800467c:	445b      	add	r3, fp
 800467e:	9306      	str	r3, [sp, #24]
 8004680:	3301      	adds	r3, #1
 8004682:	2b01      	cmp	r3, #1
 8004684:	9308      	str	r3, [sp, #32]
 8004686:	bfb8      	it	lt
 8004688:	2301      	movlt	r3, #1
 800468a:	2100      	movs	r1, #0
 800468c:	2204      	movs	r2, #4
 800468e:	69e8      	ldr	r0, [r5, #28]
 8004690:	f102 0614 	add.w	r6, r2, #20
 8004694:	429e      	cmp	r6, r3
 8004696:	d940      	bls.n	800471a <_dtoa_r+0x30a>
 8004698:	6041      	str	r1, [r0, #4]
 800469a:	4628      	mov	r0, r5
 800469c:	f000 fd98 	bl	80051d0 <_Balloc>
 80046a0:	9003      	str	r0, [sp, #12]
 80046a2:	2800      	cmp	r0, #0
 80046a4:	d13c      	bne.n	8004720 <_dtoa_r+0x310>
 80046a6:	4602      	mov	r2, r0
 80046a8:	f240 11af 	movw	r1, #431	; 0x1af
 80046ac:	4b16      	ldr	r3, [pc, #88]	; (8004708 <_dtoa_r+0x2f8>)
 80046ae:	e6c3      	b.n	8004438 <_dtoa_r+0x28>
 80046b0:	2301      	movs	r3, #1
 80046b2:	e7e1      	b.n	8004678 <_dtoa_r+0x268>
 80046b4:	2401      	movs	r4, #1
 80046b6:	2300      	movs	r3, #0
 80046b8:	940b      	str	r4, [sp, #44]	; 0x2c
 80046ba:	9322      	str	r3, [sp, #136]	; 0x88
 80046bc:	f04f 33ff 	mov.w	r3, #4294967295
 80046c0:	2200      	movs	r2, #0
 80046c2:	9306      	str	r3, [sp, #24]
 80046c4:	9308      	str	r3, [sp, #32]
 80046c6:	2312      	movs	r3, #18
 80046c8:	e7d1      	b.n	800466e <_dtoa_r+0x25e>
 80046ca:	bf00      	nop
 80046cc:	f3af 8000 	nop.w
 80046d0:	636f4361 	.word	0x636f4361
 80046d4:	3fd287a7 	.word	0x3fd287a7
 80046d8:	8b60c8b3 	.word	0x8b60c8b3
 80046dc:	3fc68a28 	.word	0x3fc68a28
 80046e0:	509f79fb 	.word	0x509f79fb
 80046e4:	3fd34413 	.word	0x3fd34413
 80046e8:	08007aec 	.word	0x08007aec
 80046ec:	08007b03 	.word	0x08007b03
 80046f0:	7ff00000 	.word	0x7ff00000
 80046f4:	08007ae8 	.word	0x08007ae8
 80046f8:	08007adf 	.word	0x08007adf
 80046fc:	08007ab7 	.word	0x08007ab7
 8004700:	3ff80000 	.word	0x3ff80000
 8004704:	08007bf0 	.word	0x08007bf0
 8004708:	08007b5b 	.word	0x08007b5b
 800470c:	2301      	movs	r3, #1
 800470e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004710:	e7d4      	b.n	80046bc <_dtoa_r+0x2ac>
 8004712:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004714:	9306      	str	r3, [sp, #24]
 8004716:	9308      	str	r3, [sp, #32]
 8004718:	e7b7      	b.n	800468a <_dtoa_r+0x27a>
 800471a:	3101      	adds	r1, #1
 800471c:	0052      	lsls	r2, r2, #1
 800471e:	e7b7      	b.n	8004690 <_dtoa_r+0x280>
 8004720:	69eb      	ldr	r3, [r5, #28]
 8004722:	9a03      	ldr	r2, [sp, #12]
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	9b08      	ldr	r3, [sp, #32]
 8004728:	2b0e      	cmp	r3, #14
 800472a:	f200 80a8 	bhi.w	800487e <_dtoa_r+0x46e>
 800472e:	2c00      	cmp	r4, #0
 8004730:	f000 80a5 	beq.w	800487e <_dtoa_r+0x46e>
 8004734:	f1bb 0f00 	cmp.w	fp, #0
 8004738:	dd34      	ble.n	80047a4 <_dtoa_r+0x394>
 800473a:	4b9a      	ldr	r3, [pc, #616]	; (80049a4 <_dtoa_r+0x594>)
 800473c:	f00b 020f 	and.w	r2, fp, #15
 8004740:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004744:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004748:	e9d3 3400 	ldrd	r3, r4, [r3]
 800474c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004750:	ea4f 142b 	mov.w	r4, fp, asr #4
 8004754:	d016      	beq.n	8004784 <_dtoa_r+0x374>
 8004756:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800475a:	4b93      	ldr	r3, [pc, #588]	; (80049a8 <_dtoa_r+0x598>)
 800475c:	2703      	movs	r7, #3
 800475e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004762:	f7fb ffe3 	bl	800072c <__aeabi_ddiv>
 8004766:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800476a:	f004 040f 	and.w	r4, r4, #15
 800476e:	4e8e      	ldr	r6, [pc, #568]	; (80049a8 <_dtoa_r+0x598>)
 8004770:	b954      	cbnz	r4, 8004788 <_dtoa_r+0x378>
 8004772:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004776:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800477a:	f7fb ffd7 	bl	800072c <__aeabi_ddiv>
 800477e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004782:	e029      	b.n	80047d8 <_dtoa_r+0x3c8>
 8004784:	2702      	movs	r7, #2
 8004786:	e7f2      	b.n	800476e <_dtoa_r+0x35e>
 8004788:	07e1      	lsls	r1, r4, #31
 800478a:	d508      	bpl.n	800479e <_dtoa_r+0x38e>
 800478c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004790:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004794:	f7fb fea0 	bl	80004d8 <__aeabi_dmul>
 8004798:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800479c:	3701      	adds	r7, #1
 800479e:	1064      	asrs	r4, r4, #1
 80047a0:	3608      	adds	r6, #8
 80047a2:	e7e5      	b.n	8004770 <_dtoa_r+0x360>
 80047a4:	f000 80a5 	beq.w	80048f2 <_dtoa_r+0x4e2>
 80047a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80047ac:	f1cb 0400 	rsb	r4, fp, #0
 80047b0:	4b7c      	ldr	r3, [pc, #496]	; (80049a4 <_dtoa_r+0x594>)
 80047b2:	f004 020f 	and.w	r2, r4, #15
 80047b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047be:	f7fb fe8b 	bl	80004d8 <__aeabi_dmul>
 80047c2:	2702      	movs	r7, #2
 80047c4:	2300      	movs	r3, #0
 80047c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047ca:	4e77      	ldr	r6, [pc, #476]	; (80049a8 <_dtoa_r+0x598>)
 80047cc:	1124      	asrs	r4, r4, #4
 80047ce:	2c00      	cmp	r4, #0
 80047d0:	f040 8084 	bne.w	80048dc <_dtoa_r+0x4cc>
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1d2      	bne.n	800477e <_dtoa_r+0x36e>
 80047d8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80047dc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80047e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 8087 	beq.w	80048f6 <_dtoa_r+0x4e6>
 80047e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80047ec:	2200      	movs	r2, #0
 80047ee:	4b6f      	ldr	r3, [pc, #444]	; (80049ac <_dtoa_r+0x59c>)
 80047f0:	f7fc f8e4 	bl	80009bc <__aeabi_dcmplt>
 80047f4:	2800      	cmp	r0, #0
 80047f6:	d07e      	beq.n	80048f6 <_dtoa_r+0x4e6>
 80047f8:	9b08      	ldr	r3, [sp, #32]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d07b      	beq.n	80048f6 <_dtoa_r+0x4e6>
 80047fe:	9b06      	ldr	r3, [sp, #24]
 8004800:	2b00      	cmp	r3, #0
 8004802:	dd38      	ble.n	8004876 <_dtoa_r+0x466>
 8004804:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004808:	2200      	movs	r2, #0
 800480a:	4b69      	ldr	r3, [pc, #420]	; (80049b0 <_dtoa_r+0x5a0>)
 800480c:	f7fb fe64 	bl	80004d8 <__aeabi_dmul>
 8004810:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004814:	9c06      	ldr	r4, [sp, #24]
 8004816:	f10b 38ff 	add.w	r8, fp, #4294967295
 800481a:	3701      	adds	r7, #1
 800481c:	4638      	mov	r0, r7
 800481e:	f7fb fdf1 	bl	8000404 <__aeabi_i2d>
 8004822:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004826:	f7fb fe57 	bl	80004d8 <__aeabi_dmul>
 800482a:	2200      	movs	r2, #0
 800482c:	4b61      	ldr	r3, [pc, #388]	; (80049b4 <_dtoa_r+0x5a4>)
 800482e:	f7fb fc9d 	bl	800016c <__adddf3>
 8004832:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004836:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800483a:	9611      	str	r6, [sp, #68]	; 0x44
 800483c:	2c00      	cmp	r4, #0
 800483e:	d15d      	bne.n	80048fc <_dtoa_r+0x4ec>
 8004840:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004844:	2200      	movs	r2, #0
 8004846:	4b5c      	ldr	r3, [pc, #368]	; (80049b8 <_dtoa_r+0x5a8>)
 8004848:	f7fb fc8e 	bl	8000168 <__aeabi_dsub>
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004854:	4633      	mov	r3, r6
 8004856:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004858:	f7fc f8ce 	bl	80009f8 <__aeabi_dcmpgt>
 800485c:	2800      	cmp	r0, #0
 800485e:	f040 8295 	bne.w	8004d8c <_dtoa_r+0x97c>
 8004862:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004866:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004868:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800486c:	f7fc f8a6 	bl	80009bc <__aeabi_dcmplt>
 8004870:	2800      	cmp	r0, #0
 8004872:	f040 8289 	bne.w	8004d88 <_dtoa_r+0x978>
 8004876:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800487a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800487e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004880:	2b00      	cmp	r3, #0
 8004882:	f2c0 8151 	blt.w	8004b28 <_dtoa_r+0x718>
 8004886:	f1bb 0f0e 	cmp.w	fp, #14
 800488a:	f300 814d 	bgt.w	8004b28 <_dtoa_r+0x718>
 800488e:	4b45      	ldr	r3, [pc, #276]	; (80049a4 <_dtoa_r+0x594>)
 8004890:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004894:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004898:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800489c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f280 80da 	bge.w	8004a58 <_dtoa_r+0x648>
 80048a4:	9b08      	ldr	r3, [sp, #32]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f300 80d6 	bgt.w	8004a58 <_dtoa_r+0x648>
 80048ac:	f040 826b 	bne.w	8004d86 <_dtoa_r+0x976>
 80048b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048b4:	2200      	movs	r2, #0
 80048b6:	4b40      	ldr	r3, [pc, #256]	; (80049b8 <_dtoa_r+0x5a8>)
 80048b8:	f7fb fe0e 	bl	80004d8 <__aeabi_dmul>
 80048bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048c0:	f7fc f890 	bl	80009e4 <__aeabi_dcmpge>
 80048c4:	9c08      	ldr	r4, [sp, #32]
 80048c6:	4626      	mov	r6, r4
 80048c8:	2800      	cmp	r0, #0
 80048ca:	f040 8241 	bne.w	8004d50 <_dtoa_r+0x940>
 80048ce:	2331      	movs	r3, #49	; 0x31
 80048d0:	9f03      	ldr	r7, [sp, #12]
 80048d2:	f10b 0b01 	add.w	fp, fp, #1
 80048d6:	f807 3b01 	strb.w	r3, [r7], #1
 80048da:	e23d      	b.n	8004d58 <_dtoa_r+0x948>
 80048dc:	07e2      	lsls	r2, r4, #31
 80048de:	d505      	bpl.n	80048ec <_dtoa_r+0x4dc>
 80048e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80048e4:	f7fb fdf8 	bl	80004d8 <__aeabi_dmul>
 80048e8:	2301      	movs	r3, #1
 80048ea:	3701      	adds	r7, #1
 80048ec:	1064      	asrs	r4, r4, #1
 80048ee:	3608      	adds	r6, #8
 80048f0:	e76d      	b.n	80047ce <_dtoa_r+0x3be>
 80048f2:	2702      	movs	r7, #2
 80048f4:	e770      	b.n	80047d8 <_dtoa_r+0x3c8>
 80048f6:	46d8      	mov	r8, fp
 80048f8:	9c08      	ldr	r4, [sp, #32]
 80048fa:	e78f      	b.n	800481c <_dtoa_r+0x40c>
 80048fc:	9903      	ldr	r1, [sp, #12]
 80048fe:	4b29      	ldr	r3, [pc, #164]	; (80049a4 <_dtoa_r+0x594>)
 8004900:	4421      	add	r1, r4
 8004902:	9112      	str	r1, [sp, #72]	; 0x48
 8004904:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004906:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800490a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800490e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004912:	2900      	cmp	r1, #0
 8004914:	d054      	beq.n	80049c0 <_dtoa_r+0x5b0>
 8004916:	2000      	movs	r0, #0
 8004918:	4928      	ldr	r1, [pc, #160]	; (80049bc <_dtoa_r+0x5ac>)
 800491a:	f7fb ff07 	bl	800072c <__aeabi_ddiv>
 800491e:	463b      	mov	r3, r7
 8004920:	4632      	mov	r2, r6
 8004922:	f7fb fc21 	bl	8000168 <__aeabi_dsub>
 8004926:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800492a:	9f03      	ldr	r7, [sp, #12]
 800492c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004930:	f7fc f882 	bl	8000a38 <__aeabi_d2iz>
 8004934:	4604      	mov	r4, r0
 8004936:	f7fb fd65 	bl	8000404 <__aeabi_i2d>
 800493a:	4602      	mov	r2, r0
 800493c:	460b      	mov	r3, r1
 800493e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004942:	f7fb fc11 	bl	8000168 <__aeabi_dsub>
 8004946:	4602      	mov	r2, r0
 8004948:	460b      	mov	r3, r1
 800494a:	3430      	adds	r4, #48	; 0x30
 800494c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004950:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004954:	f807 4b01 	strb.w	r4, [r7], #1
 8004958:	f7fc f830 	bl	80009bc <__aeabi_dcmplt>
 800495c:	2800      	cmp	r0, #0
 800495e:	d173      	bne.n	8004a48 <_dtoa_r+0x638>
 8004960:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004964:	2000      	movs	r0, #0
 8004966:	4911      	ldr	r1, [pc, #68]	; (80049ac <_dtoa_r+0x59c>)
 8004968:	f7fb fbfe 	bl	8000168 <__aeabi_dsub>
 800496c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004970:	f7fc f824 	bl	80009bc <__aeabi_dcmplt>
 8004974:	2800      	cmp	r0, #0
 8004976:	f040 80b6 	bne.w	8004ae6 <_dtoa_r+0x6d6>
 800497a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800497c:	429f      	cmp	r7, r3
 800497e:	f43f af7a 	beq.w	8004876 <_dtoa_r+0x466>
 8004982:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004986:	2200      	movs	r2, #0
 8004988:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <_dtoa_r+0x5a0>)
 800498a:	f7fb fda5 	bl	80004d8 <__aeabi_dmul>
 800498e:	2200      	movs	r2, #0
 8004990:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004994:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004998:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <_dtoa_r+0x5a0>)
 800499a:	f7fb fd9d 	bl	80004d8 <__aeabi_dmul>
 800499e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049a2:	e7c3      	b.n	800492c <_dtoa_r+0x51c>
 80049a4:	08007bf0 	.word	0x08007bf0
 80049a8:	08007bc8 	.word	0x08007bc8
 80049ac:	3ff00000 	.word	0x3ff00000
 80049b0:	40240000 	.word	0x40240000
 80049b4:	401c0000 	.word	0x401c0000
 80049b8:	40140000 	.word	0x40140000
 80049bc:	3fe00000 	.word	0x3fe00000
 80049c0:	4630      	mov	r0, r6
 80049c2:	4639      	mov	r1, r7
 80049c4:	f7fb fd88 	bl	80004d8 <__aeabi_dmul>
 80049c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80049ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80049ce:	9c03      	ldr	r4, [sp, #12]
 80049d0:	9314      	str	r3, [sp, #80]	; 0x50
 80049d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049d6:	f7fc f82f 	bl	8000a38 <__aeabi_d2iz>
 80049da:	9015      	str	r0, [sp, #84]	; 0x54
 80049dc:	f7fb fd12 	bl	8000404 <__aeabi_i2d>
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049e8:	f7fb fbbe 	bl	8000168 <__aeabi_dsub>
 80049ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80049ee:	4606      	mov	r6, r0
 80049f0:	3330      	adds	r3, #48	; 0x30
 80049f2:	f804 3b01 	strb.w	r3, [r4], #1
 80049f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80049f8:	460f      	mov	r7, r1
 80049fa:	429c      	cmp	r4, r3
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	d124      	bne.n	8004a4c <_dtoa_r+0x63c>
 8004a02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a06:	4baf      	ldr	r3, [pc, #700]	; (8004cc4 <_dtoa_r+0x8b4>)
 8004a08:	f7fb fbb0 	bl	800016c <__adddf3>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4630      	mov	r0, r6
 8004a12:	4639      	mov	r1, r7
 8004a14:	f7fb fff0 	bl	80009f8 <__aeabi_dcmpgt>
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	d163      	bne.n	8004ae4 <_dtoa_r+0x6d4>
 8004a1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004a20:	2000      	movs	r0, #0
 8004a22:	49a8      	ldr	r1, [pc, #672]	; (8004cc4 <_dtoa_r+0x8b4>)
 8004a24:	f7fb fba0 	bl	8000168 <__aeabi_dsub>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	4630      	mov	r0, r6
 8004a2e:	4639      	mov	r1, r7
 8004a30:	f7fb ffc4 	bl	80009bc <__aeabi_dcmplt>
 8004a34:	2800      	cmp	r0, #0
 8004a36:	f43f af1e 	beq.w	8004876 <_dtoa_r+0x466>
 8004a3a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004a3c:	1e7b      	subs	r3, r7, #1
 8004a3e:	9314      	str	r3, [sp, #80]	; 0x50
 8004a40:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004a44:	2b30      	cmp	r3, #48	; 0x30
 8004a46:	d0f8      	beq.n	8004a3a <_dtoa_r+0x62a>
 8004a48:	46c3      	mov	fp, r8
 8004a4a:	e03b      	b.n	8004ac4 <_dtoa_r+0x6b4>
 8004a4c:	4b9e      	ldr	r3, [pc, #632]	; (8004cc8 <_dtoa_r+0x8b8>)
 8004a4e:	f7fb fd43 	bl	80004d8 <__aeabi_dmul>
 8004a52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a56:	e7bc      	b.n	80049d2 <_dtoa_r+0x5c2>
 8004a58:	9f03      	ldr	r7, [sp, #12]
 8004a5a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004a5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a62:	4640      	mov	r0, r8
 8004a64:	4649      	mov	r1, r9
 8004a66:	f7fb fe61 	bl	800072c <__aeabi_ddiv>
 8004a6a:	f7fb ffe5 	bl	8000a38 <__aeabi_d2iz>
 8004a6e:	4604      	mov	r4, r0
 8004a70:	f7fb fcc8 	bl	8000404 <__aeabi_i2d>
 8004a74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a78:	f7fb fd2e 	bl	80004d8 <__aeabi_dmul>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4640      	mov	r0, r8
 8004a82:	4649      	mov	r1, r9
 8004a84:	f7fb fb70 	bl	8000168 <__aeabi_dsub>
 8004a88:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004a8c:	f807 6b01 	strb.w	r6, [r7], #1
 8004a90:	9e03      	ldr	r6, [sp, #12]
 8004a92:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004a96:	1bbe      	subs	r6, r7, r6
 8004a98:	45b4      	cmp	ip, r6
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	d136      	bne.n	8004b0e <_dtoa_r+0x6fe>
 8004aa0:	f7fb fb64 	bl	800016c <__adddf3>
 8004aa4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004aa8:	4680      	mov	r8, r0
 8004aaa:	4689      	mov	r9, r1
 8004aac:	f7fb ffa4 	bl	80009f8 <__aeabi_dcmpgt>
 8004ab0:	bb58      	cbnz	r0, 8004b0a <_dtoa_r+0x6fa>
 8004ab2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ab6:	4640      	mov	r0, r8
 8004ab8:	4649      	mov	r1, r9
 8004aba:	f7fb ff75 	bl	80009a8 <__aeabi_dcmpeq>
 8004abe:	b108      	cbz	r0, 8004ac4 <_dtoa_r+0x6b4>
 8004ac0:	07e3      	lsls	r3, r4, #31
 8004ac2:	d422      	bmi.n	8004b0a <_dtoa_r+0x6fa>
 8004ac4:	4651      	mov	r1, sl
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	f000 fbc2 	bl	8005250 <_Bfree>
 8004acc:	2300      	movs	r3, #0
 8004ace:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004ad0:	703b      	strb	r3, [r7, #0]
 8004ad2:	f10b 0301 	add.w	r3, fp, #1
 8004ad6:	6013      	str	r3, [r2, #0]
 8004ad8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f43f ace6 	beq.w	80044ac <_dtoa_r+0x9c>
 8004ae0:	601f      	str	r7, [r3, #0]
 8004ae2:	e4e3      	b.n	80044ac <_dtoa_r+0x9c>
 8004ae4:	4627      	mov	r7, r4
 8004ae6:	463b      	mov	r3, r7
 8004ae8:	461f      	mov	r7, r3
 8004aea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004aee:	2a39      	cmp	r2, #57	; 0x39
 8004af0:	d107      	bne.n	8004b02 <_dtoa_r+0x6f2>
 8004af2:	9a03      	ldr	r2, [sp, #12]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d1f7      	bne.n	8004ae8 <_dtoa_r+0x6d8>
 8004af8:	2230      	movs	r2, #48	; 0x30
 8004afa:	9903      	ldr	r1, [sp, #12]
 8004afc:	f108 0801 	add.w	r8, r8, #1
 8004b00:	700a      	strb	r2, [r1, #0]
 8004b02:	781a      	ldrb	r2, [r3, #0]
 8004b04:	3201      	adds	r2, #1
 8004b06:	701a      	strb	r2, [r3, #0]
 8004b08:	e79e      	b.n	8004a48 <_dtoa_r+0x638>
 8004b0a:	46d8      	mov	r8, fp
 8004b0c:	e7eb      	b.n	8004ae6 <_dtoa_r+0x6d6>
 8004b0e:	2200      	movs	r2, #0
 8004b10:	4b6d      	ldr	r3, [pc, #436]	; (8004cc8 <_dtoa_r+0x8b8>)
 8004b12:	f7fb fce1 	bl	80004d8 <__aeabi_dmul>
 8004b16:	2200      	movs	r2, #0
 8004b18:	2300      	movs	r3, #0
 8004b1a:	4680      	mov	r8, r0
 8004b1c:	4689      	mov	r9, r1
 8004b1e:	f7fb ff43 	bl	80009a8 <__aeabi_dcmpeq>
 8004b22:	2800      	cmp	r0, #0
 8004b24:	d09b      	beq.n	8004a5e <_dtoa_r+0x64e>
 8004b26:	e7cd      	b.n	8004ac4 <_dtoa_r+0x6b4>
 8004b28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b2a:	2a00      	cmp	r2, #0
 8004b2c:	f000 80c4 	beq.w	8004cb8 <_dtoa_r+0x8a8>
 8004b30:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004b32:	2a01      	cmp	r2, #1
 8004b34:	f300 80a8 	bgt.w	8004c88 <_dtoa_r+0x878>
 8004b38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004b3a:	2a00      	cmp	r2, #0
 8004b3c:	f000 80a0 	beq.w	8004c80 <_dtoa_r+0x870>
 8004b40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004b44:	464f      	mov	r7, r9
 8004b46:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004b48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	441a      	add	r2, r3
 8004b4e:	4628      	mov	r0, r5
 8004b50:	4499      	add	r9, r3
 8004b52:	9209      	str	r2, [sp, #36]	; 0x24
 8004b54:	f000 fc7c 	bl	8005450 <__i2b>
 8004b58:	4606      	mov	r6, r0
 8004b5a:	b15f      	cbz	r7, 8004b74 <_dtoa_r+0x764>
 8004b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	dd08      	ble.n	8004b74 <_dtoa_r+0x764>
 8004b62:	42bb      	cmp	r3, r7
 8004b64:	bfa8      	it	ge
 8004b66:	463b      	movge	r3, r7
 8004b68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b6a:	eba9 0903 	sub.w	r9, r9, r3
 8004b6e:	1aff      	subs	r7, r7, r3
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	9309      	str	r3, [sp, #36]	; 0x24
 8004b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b76:	b1f3      	cbz	r3, 8004bb6 <_dtoa_r+0x7a6>
 8004b78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f000 80a0 	beq.w	8004cc0 <_dtoa_r+0x8b0>
 8004b80:	2c00      	cmp	r4, #0
 8004b82:	dd10      	ble.n	8004ba6 <_dtoa_r+0x796>
 8004b84:	4631      	mov	r1, r6
 8004b86:	4622      	mov	r2, r4
 8004b88:	4628      	mov	r0, r5
 8004b8a:	f000 fd1f 	bl	80055cc <__pow5mult>
 8004b8e:	4652      	mov	r2, sl
 8004b90:	4601      	mov	r1, r0
 8004b92:	4606      	mov	r6, r0
 8004b94:	4628      	mov	r0, r5
 8004b96:	f000 fc71 	bl	800547c <__multiply>
 8004b9a:	4680      	mov	r8, r0
 8004b9c:	4651      	mov	r1, sl
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	f000 fb56 	bl	8005250 <_Bfree>
 8004ba4:	46c2      	mov	sl, r8
 8004ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ba8:	1b1a      	subs	r2, r3, r4
 8004baa:	d004      	beq.n	8004bb6 <_dtoa_r+0x7a6>
 8004bac:	4651      	mov	r1, sl
 8004bae:	4628      	mov	r0, r5
 8004bb0:	f000 fd0c 	bl	80055cc <__pow5mult>
 8004bb4:	4682      	mov	sl, r0
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	4628      	mov	r0, r5
 8004bba:	f000 fc49 	bl	8005450 <__i2b>
 8004bbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bc0:	4604      	mov	r4, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f340 8082 	ble.w	8004ccc <_dtoa_r+0x8bc>
 8004bc8:	461a      	mov	r2, r3
 8004bca:	4601      	mov	r1, r0
 8004bcc:	4628      	mov	r0, r5
 8004bce:	f000 fcfd 	bl	80055cc <__pow5mult>
 8004bd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	dd7b      	ble.n	8004cd2 <_dtoa_r+0x8c2>
 8004bda:	f04f 0800 	mov.w	r8, #0
 8004bde:	6923      	ldr	r3, [r4, #16]
 8004be0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004be4:	6918      	ldr	r0, [r3, #16]
 8004be6:	f000 fbe5 	bl	80053b4 <__hi0bits>
 8004bea:	f1c0 0020 	rsb	r0, r0, #32
 8004bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bf0:	4418      	add	r0, r3
 8004bf2:	f010 001f 	ands.w	r0, r0, #31
 8004bf6:	f000 8092 	beq.w	8004d1e <_dtoa_r+0x90e>
 8004bfa:	f1c0 0320 	rsb	r3, r0, #32
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	f340 8085 	ble.w	8004d0e <_dtoa_r+0x8fe>
 8004c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c06:	f1c0 001c 	rsb	r0, r0, #28
 8004c0a:	4403      	add	r3, r0
 8004c0c:	4481      	add	r9, r0
 8004c0e:	4407      	add	r7, r0
 8004c10:	9309      	str	r3, [sp, #36]	; 0x24
 8004c12:	f1b9 0f00 	cmp.w	r9, #0
 8004c16:	dd05      	ble.n	8004c24 <_dtoa_r+0x814>
 8004c18:	4651      	mov	r1, sl
 8004c1a:	464a      	mov	r2, r9
 8004c1c:	4628      	mov	r0, r5
 8004c1e:	f000 fd2f 	bl	8005680 <__lshift>
 8004c22:	4682      	mov	sl, r0
 8004c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	dd05      	ble.n	8004c36 <_dtoa_r+0x826>
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	4628      	mov	r0, r5
 8004c30:	f000 fd26 	bl	8005680 <__lshift>
 8004c34:	4604      	mov	r4, r0
 8004c36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d072      	beq.n	8004d22 <_dtoa_r+0x912>
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	4650      	mov	r0, sl
 8004c40:	f000 fd8a 	bl	8005758 <__mcmp>
 8004c44:	2800      	cmp	r0, #0
 8004c46:	da6c      	bge.n	8004d22 <_dtoa_r+0x912>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	4651      	mov	r1, sl
 8004c4c:	220a      	movs	r2, #10
 8004c4e:	4628      	mov	r0, r5
 8004c50:	f000 fb20 	bl	8005294 <__multadd>
 8004c54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c56:	4682      	mov	sl, r0
 8004c58:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 81ac 	beq.w	8004fba <_dtoa_r+0xbaa>
 8004c62:	2300      	movs	r3, #0
 8004c64:	4631      	mov	r1, r6
 8004c66:	220a      	movs	r2, #10
 8004c68:	4628      	mov	r0, r5
 8004c6a:	f000 fb13 	bl	8005294 <__multadd>
 8004c6e:	9b06      	ldr	r3, [sp, #24]
 8004c70:	4606      	mov	r6, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f300 8093 	bgt.w	8004d9e <_dtoa_r+0x98e>
 8004c78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	dc59      	bgt.n	8004d32 <_dtoa_r+0x922>
 8004c7e:	e08e      	b.n	8004d9e <_dtoa_r+0x98e>
 8004c80:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004c82:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004c86:	e75d      	b.n	8004b44 <_dtoa_r+0x734>
 8004c88:	9b08      	ldr	r3, [sp, #32]
 8004c8a:	1e5c      	subs	r4, r3, #1
 8004c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c8e:	42a3      	cmp	r3, r4
 8004c90:	bfbf      	itttt	lt
 8004c92:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004c94:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8004c96:	1ae3      	sublt	r3, r4, r3
 8004c98:	18d2      	addlt	r2, r2, r3
 8004c9a:	bfa8      	it	ge
 8004c9c:	1b1c      	subge	r4, r3, r4
 8004c9e:	9b08      	ldr	r3, [sp, #32]
 8004ca0:	bfbe      	ittt	lt
 8004ca2:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004ca4:	920e      	strlt	r2, [sp, #56]	; 0x38
 8004ca6:	2400      	movlt	r4, #0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	bfb5      	itete	lt
 8004cac:	eba9 0703 	sublt.w	r7, r9, r3
 8004cb0:	464f      	movge	r7, r9
 8004cb2:	2300      	movlt	r3, #0
 8004cb4:	9b08      	ldrge	r3, [sp, #32]
 8004cb6:	e747      	b.n	8004b48 <_dtoa_r+0x738>
 8004cb8:	464f      	mov	r7, r9
 8004cba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004cbc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004cbe:	e74c      	b.n	8004b5a <_dtoa_r+0x74a>
 8004cc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cc2:	e773      	b.n	8004bac <_dtoa_r+0x79c>
 8004cc4:	3fe00000 	.word	0x3fe00000
 8004cc8:	40240000 	.word	0x40240000
 8004ccc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	dc18      	bgt.n	8004d04 <_dtoa_r+0x8f4>
 8004cd2:	9b04      	ldr	r3, [sp, #16]
 8004cd4:	b9b3      	cbnz	r3, 8004d04 <_dtoa_r+0x8f4>
 8004cd6:	9b05      	ldr	r3, [sp, #20]
 8004cd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cdc:	b993      	cbnz	r3, 8004d04 <_dtoa_r+0x8f4>
 8004cde:	9b05      	ldr	r3, [sp, #20]
 8004ce0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ce4:	0d1b      	lsrs	r3, r3, #20
 8004ce6:	051b      	lsls	r3, r3, #20
 8004ce8:	b17b      	cbz	r3, 8004d0a <_dtoa_r+0x8fa>
 8004cea:	f04f 0801 	mov.w	r8, #1
 8004cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cf0:	f109 0901 	add.w	r9, r9, #1
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8004cf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f47f af6f 	bne.w	8004bde <_dtoa_r+0x7ce>
 8004d00:	2001      	movs	r0, #1
 8004d02:	e774      	b.n	8004bee <_dtoa_r+0x7de>
 8004d04:	f04f 0800 	mov.w	r8, #0
 8004d08:	e7f6      	b.n	8004cf8 <_dtoa_r+0x8e8>
 8004d0a:	4698      	mov	r8, r3
 8004d0c:	e7f4      	b.n	8004cf8 <_dtoa_r+0x8e8>
 8004d0e:	d080      	beq.n	8004c12 <_dtoa_r+0x802>
 8004d10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d12:	331c      	adds	r3, #28
 8004d14:	441a      	add	r2, r3
 8004d16:	4499      	add	r9, r3
 8004d18:	441f      	add	r7, r3
 8004d1a:	9209      	str	r2, [sp, #36]	; 0x24
 8004d1c:	e779      	b.n	8004c12 <_dtoa_r+0x802>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	e7f6      	b.n	8004d10 <_dtoa_r+0x900>
 8004d22:	9b08      	ldr	r3, [sp, #32]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	dc34      	bgt.n	8004d92 <_dtoa_r+0x982>
 8004d28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	dd31      	ble.n	8004d92 <_dtoa_r+0x982>
 8004d2e:	9b08      	ldr	r3, [sp, #32]
 8004d30:	9306      	str	r3, [sp, #24]
 8004d32:	9b06      	ldr	r3, [sp, #24]
 8004d34:	b963      	cbnz	r3, 8004d50 <_dtoa_r+0x940>
 8004d36:	4621      	mov	r1, r4
 8004d38:	2205      	movs	r2, #5
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	f000 faaa 	bl	8005294 <__multadd>
 8004d40:	4601      	mov	r1, r0
 8004d42:	4604      	mov	r4, r0
 8004d44:	4650      	mov	r0, sl
 8004d46:	f000 fd07 	bl	8005758 <__mcmp>
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	f73f adbf 	bgt.w	80048ce <_dtoa_r+0x4be>
 8004d50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004d52:	9f03      	ldr	r7, [sp, #12]
 8004d54:	ea6f 0b03 	mvn.w	fp, r3
 8004d58:	f04f 0800 	mov.w	r8, #0
 8004d5c:	4621      	mov	r1, r4
 8004d5e:	4628      	mov	r0, r5
 8004d60:	f000 fa76 	bl	8005250 <_Bfree>
 8004d64:	2e00      	cmp	r6, #0
 8004d66:	f43f aead 	beq.w	8004ac4 <_dtoa_r+0x6b4>
 8004d6a:	f1b8 0f00 	cmp.w	r8, #0
 8004d6e:	d005      	beq.n	8004d7c <_dtoa_r+0x96c>
 8004d70:	45b0      	cmp	r8, r6
 8004d72:	d003      	beq.n	8004d7c <_dtoa_r+0x96c>
 8004d74:	4641      	mov	r1, r8
 8004d76:	4628      	mov	r0, r5
 8004d78:	f000 fa6a 	bl	8005250 <_Bfree>
 8004d7c:	4631      	mov	r1, r6
 8004d7e:	4628      	mov	r0, r5
 8004d80:	f000 fa66 	bl	8005250 <_Bfree>
 8004d84:	e69e      	b.n	8004ac4 <_dtoa_r+0x6b4>
 8004d86:	2400      	movs	r4, #0
 8004d88:	4626      	mov	r6, r4
 8004d8a:	e7e1      	b.n	8004d50 <_dtoa_r+0x940>
 8004d8c:	46c3      	mov	fp, r8
 8004d8e:	4626      	mov	r6, r4
 8004d90:	e59d      	b.n	80048ce <_dtoa_r+0x4be>
 8004d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 80c8 	beq.w	8004f2a <_dtoa_r+0xb1a>
 8004d9a:	9b08      	ldr	r3, [sp, #32]
 8004d9c:	9306      	str	r3, [sp, #24]
 8004d9e:	2f00      	cmp	r7, #0
 8004da0:	dd05      	ble.n	8004dae <_dtoa_r+0x99e>
 8004da2:	4631      	mov	r1, r6
 8004da4:	463a      	mov	r2, r7
 8004da6:	4628      	mov	r0, r5
 8004da8:	f000 fc6a 	bl	8005680 <__lshift>
 8004dac:	4606      	mov	r6, r0
 8004dae:	f1b8 0f00 	cmp.w	r8, #0
 8004db2:	d05b      	beq.n	8004e6c <_dtoa_r+0xa5c>
 8004db4:	4628      	mov	r0, r5
 8004db6:	6871      	ldr	r1, [r6, #4]
 8004db8:	f000 fa0a 	bl	80051d0 <_Balloc>
 8004dbc:	4607      	mov	r7, r0
 8004dbe:	b928      	cbnz	r0, 8004dcc <_dtoa_r+0x9bc>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004dc6:	4b81      	ldr	r3, [pc, #516]	; (8004fcc <_dtoa_r+0xbbc>)
 8004dc8:	f7ff bb36 	b.w	8004438 <_dtoa_r+0x28>
 8004dcc:	6932      	ldr	r2, [r6, #16]
 8004dce:	f106 010c 	add.w	r1, r6, #12
 8004dd2:	3202      	adds	r2, #2
 8004dd4:	0092      	lsls	r2, r2, #2
 8004dd6:	300c      	adds	r0, #12
 8004dd8:	f001 ff72 	bl	8006cc0 <memcpy>
 8004ddc:	2201      	movs	r2, #1
 8004dde:	4639      	mov	r1, r7
 8004de0:	4628      	mov	r0, r5
 8004de2:	f000 fc4d 	bl	8005680 <__lshift>
 8004de6:	46b0      	mov	r8, r6
 8004de8:	4606      	mov	r6, r0
 8004dea:	9b03      	ldr	r3, [sp, #12]
 8004dec:	9a03      	ldr	r2, [sp, #12]
 8004dee:	3301      	adds	r3, #1
 8004df0:	9308      	str	r3, [sp, #32]
 8004df2:	9b06      	ldr	r3, [sp, #24]
 8004df4:	4413      	add	r3, r2
 8004df6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004df8:	9b04      	ldr	r3, [sp, #16]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	930a      	str	r3, [sp, #40]	; 0x28
 8004e00:	9b08      	ldr	r3, [sp, #32]
 8004e02:	4621      	mov	r1, r4
 8004e04:	3b01      	subs	r3, #1
 8004e06:	4650      	mov	r0, sl
 8004e08:	9304      	str	r3, [sp, #16]
 8004e0a:	f7ff fa75 	bl	80042f8 <quorem>
 8004e0e:	4641      	mov	r1, r8
 8004e10:	9006      	str	r0, [sp, #24]
 8004e12:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004e16:	4650      	mov	r0, sl
 8004e18:	f000 fc9e 	bl	8005758 <__mcmp>
 8004e1c:	4632      	mov	r2, r6
 8004e1e:	9009      	str	r0, [sp, #36]	; 0x24
 8004e20:	4621      	mov	r1, r4
 8004e22:	4628      	mov	r0, r5
 8004e24:	f000 fcb4 	bl	8005790 <__mdiff>
 8004e28:	68c2      	ldr	r2, [r0, #12]
 8004e2a:	4607      	mov	r7, r0
 8004e2c:	bb02      	cbnz	r2, 8004e70 <_dtoa_r+0xa60>
 8004e2e:	4601      	mov	r1, r0
 8004e30:	4650      	mov	r0, sl
 8004e32:	f000 fc91 	bl	8005758 <__mcmp>
 8004e36:	4602      	mov	r2, r0
 8004e38:	4639      	mov	r1, r7
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	920c      	str	r2, [sp, #48]	; 0x30
 8004e3e:	f000 fa07 	bl	8005250 <_Bfree>
 8004e42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e46:	9f08      	ldr	r7, [sp, #32]
 8004e48:	ea43 0102 	orr.w	r1, r3, r2
 8004e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e4e:	4319      	orrs	r1, r3
 8004e50:	d110      	bne.n	8004e74 <_dtoa_r+0xa64>
 8004e52:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004e56:	d029      	beq.n	8004eac <_dtoa_r+0xa9c>
 8004e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	dd02      	ble.n	8004e64 <_dtoa_r+0xa54>
 8004e5e:	9b06      	ldr	r3, [sp, #24]
 8004e60:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004e64:	9b04      	ldr	r3, [sp, #16]
 8004e66:	f883 9000 	strb.w	r9, [r3]
 8004e6a:	e777      	b.n	8004d5c <_dtoa_r+0x94c>
 8004e6c:	4630      	mov	r0, r6
 8004e6e:	e7ba      	b.n	8004de6 <_dtoa_r+0x9d6>
 8004e70:	2201      	movs	r2, #1
 8004e72:	e7e1      	b.n	8004e38 <_dtoa_r+0xa28>
 8004e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	db04      	blt.n	8004e84 <_dtoa_r+0xa74>
 8004e7a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004e7c:	430b      	orrs	r3, r1
 8004e7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004e80:	430b      	orrs	r3, r1
 8004e82:	d120      	bne.n	8004ec6 <_dtoa_r+0xab6>
 8004e84:	2a00      	cmp	r2, #0
 8004e86:	dded      	ble.n	8004e64 <_dtoa_r+0xa54>
 8004e88:	4651      	mov	r1, sl
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	f000 fbf7 	bl	8005680 <__lshift>
 8004e92:	4621      	mov	r1, r4
 8004e94:	4682      	mov	sl, r0
 8004e96:	f000 fc5f 	bl	8005758 <__mcmp>
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	dc03      	bgt.n	8004ea6 <_dtoa_r+0xa96>
 8004e9e:	d1e1      	bne.n	8004e64 <_dtoa_r+0xa54>
 8004ea0:	f019 0f01 	tst.w	r9, #1
 8004ea4:	d0de      	beq.n	8004e64 <_dtoa_r+0xa54>
 8004ea6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004eaa:	d1d8      	bne.n	8004e5e <_dtoa_r+0xa4e>
 8004eac:	2339      	movs	r3, #57	; 0x39
 8004eae:	9a04      	ldr	r2, [sp, #16]
 8004eb0:	7013      	strb	r3, [r2, #0]
 8004eb2:	463b      	mov	r3, r7
 8004eb4:	461f      	mov	r7, r3
 8004eb6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	2a39      	cmp	r2, #57	; 0x39
 8004ebe:	d06b      	beq.n	8004f98 <_dtoa_r+0xb88>
 8004ec0:	3201      	adds	r2, #1
 8004ec2:	701a      	strb	r2, [r3, #0]
 8004ec4:	e74a      	b.n	8004d5c <_dtoa_r+0x94c>
 8004ec6:	2a00      	cmp	r2, #0
 8004ec8:	dd07      	ble.n	8004eda <_dtoa_r+0xaca>
 8004eca:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004ece:	d0ed      	beq.n	8004eac <_dtoa_r+0xa9c>
 8004ed0:	9a04      	ldr	r2, [sp, #16]
 8004ed2:	f109 0301 	add.w	r3, r9, #1
 8004ed6:	7013      	strb	r3, [r2, #0]
 8004ed8:	e740      	b.n	8004d5c <_dtoa_r+0x94c>
 8004eda:	9b08      	ldr	r3, [sp, #32]
 8004edc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ede:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d042      	beq.n	8004f6c <_dtoa_r+0xb5c>
 8004ee6:	4651      	mov	r1, sl
 8004ee8:	2300      	movs	r3, #0
 8004eea:	220a      	movs	r2, #10
 8004eec:	4628      	mov	r0, r5
 8004eee:	f000 f9d1 	bl	8005294 <__multadd>
 8004ef2:	45b0      	cmp	r8, r6
 8004ef4:	4682      	mov	sl, r0
 8004ef6:	f04f 0300 	mov.w	r3, #0
 8004efa:	f04f 020a 	mov.w	r2, #10
 8004efe:	4641      	mov	r1, r8
 8004f00:	4628      	mov	r0, r5
 8004f02:	d107      	bne.n	8004f14 <_dtoa_r+0xb04>
 8004f04:	f000 f9c6 	bl	8005294 <__multadd>
 8004f08:	4680      	mov	r8, r0
 8004f0a:	4606      	mov	r6, r0
 8004f0c:	9b08      	ldr	r3, [sp, #32]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	9308      	str	r3, [sp, #32]
 8004f12:	e775      	b.n	8004e00 <_dtoa_r+0x9f0>
 8004f14:	f000 f9be 	bl	8005294 <__multadd>
 8004f18:	4631      	mov	r1, r6
 8004f1a:	4680      	mov	r8, r0
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	220a      	movs	r2, #10
 8004f20:	4628      	mov	r0, r5
 8004f22:	f000 f9b7 	bl	8005294 <__multadd>
 8004f26:	4606      	mov	r6, r0
 8004f28:	e7f0      	b.n	8004f0c <_dtoa_r+0xafc>
 8004f2a:	9b08      	ldr	r3, [sp, #32]
 8004f2c:	9306      	str	r3, [sp, #24]
 8004f2e:	9f03      	ldr	r7, [sp, #12]
 8004f30:	4621      	mov	r1, r4
 8004f32:	4650      	mov	r0, sl
 8004f34:	f7ff f9e0 	bl	80042f8 <quorem>
 8004f38:	9b03      	ldr	r3, [sp, #12]
 8004f3a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004f3e:	f807 9b01 	strb.w	r9, [r7], #1
 8004f42:	1afa      	subs	r2, r7, r3
 8004f44:	9b06      	ldr	r3, [sp, #24]
 8004f46:	4293      	cmp	r3, r2
 8004f48:	dd07      	ble.n	8004f5a <_dtoa_r+0xb4a>
 8004f4a:	4651      	mov	r1, sl
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	220a      	movs	r2, #10
 8004f50:	4628      	mov	r0, r5
 8004f52:	f000 f99f 	bl	8005294 <__multadd>
 8004f56:	4682      	mov	sl, r0
 8004f58:	e7ea      	b.n	8004f30 <_dtoa_r+0xb20>
 8004f5a:	9b06      	ldr	r3, [sp, #24]
 8004f5c:	f04f 0800 	mov.w	r8, #0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	bfcc      	ite	gt
 8004f64:	461f      	movgt	r7, r3
 8004f66:	2701      	movle	r7, #1
 8004f68:	9b03      	ldr	r3, [sp, #12]
 8004f6a:	441f      	add	r7, r3
 8004f6c:	4651      	mov	r1, sl
 8004f6e:	2201      	movs	r2, #1
 8004f70:	4628      	mov	r0, r5
 8004f72:	f000 fb85 	bl	8005680 <__lshift>
 8004f76:	4621      	mov	r1, r4
 8004f78:	4682      	mov	sl, r0
 8004f7a:	f000 fbed 	bl	8005758 <__mcmp>
 8004f7e:	2800      	cmp	r0, #0
 8004f80:	dc97      	bgt.n	8004eb2 <_dtoa_r+0xaa2>
 8004f82:	d102      	bne.n	8004f8a <_dtoa_r+0xb7a>
 8004f84:	f019 0f01 	tst.w	r9, #1
 8004f88:	d193      	bne.n	8004eb2 <_dtoa_r+0xaa2>
 8004f8a:	463b      	mov	r3, r7
 8004f8c:	461f      	mov	r7, r3
 8004f8e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f92:	2a30      	cmp	r2, #48	; 0x30
 8004f94:	d0fa      	beq.n	8004f8c <_dtoa_r+0xb7c>
 8004f96:	e6e1      	b.n	8004d5c <_dtoa_r+0x94c>
 8004f98:	9a03      	ldr	r2, [sp, #12]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d18a      	bne.n	8004eb4 <_dtoa_r+0xaa4>
 8004f9e:	2331      	movs	r3, #49	; 0x31
 8004fa0:	f10b 0b01 	add.w	fp, fp, #1
 8004fa4:	e797      	b.n	8004ed6 <_dtoa_r+0xac6>
 8004fa6:	4b0a      	ldr	r3, [pc, #40]	; (8004fd0 <_dtoa_r+0xbc0>)
 8004fa8:	f7ff ba9f 	b.w	80044ea <_dtoa_r+0xda>
 8004fac:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f47f aa77 	bne.w	80044a2 <_dtoa_r+0x92>
 8004fb4:	4b07      	ldr	r3, [pc, #28]	; (8004fd4 <_dtoa_r+0xbc4>)
 8004fb6:	f7ff ba98 	b.w	80044ea <_dtoa_r+0xda>
 8004fba:	9b06      	ldr	r3, [sp, #24]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	dcb6      	bgt.n	8004f2e <_dtoa_r+0xb1e>
 8004fc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	f73f aeb5 	bgt.w	8004d32 <_dtoa_r+0x922>
 8004fc8:	e7b1      	b.n	8004f2e <_dtoa_r+0xb1e>
 8004fca:	bf00      	nop
 8004fcc:	08007b5b 	.word	0x08007b5b
 8004fd0:	08007ab6 	.word	0x08007ab6
 8004fd4:	08007adf 	.word	0x08007adf

08004fd8 <_free_r>:
 8004fd8:	b538      	push	{r3, r4, r5, lr}
 8004fda:	4605      	mov	r5, r0
 8004fdc:	2900      	cmp	r1, #0
 8004fde:	d040      	beq.n	8005062 <_free_r+0x8a>
 8004fe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fe4:	1f0c      	subs	r4, r1, #4
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	bfb8      	it	lt
 8004fea:	18e4      	addlt	r4, r4, r3
 8004fec:	f000 f8e4 	bl	80051b8 <__malloc_lock>
 8004ff0:	4a1c      	ldr	r2, [pc, #112]	; (8005064 <_free_r+0x8c>)
 8004ff2:	6813      	ldr	r3, [r2, #0]
 8004ff4:	b933      	cbnz	r3, 8005004 <_free_r+0x2c>
 8004ff6:	6063      	str	r3, [r4, #4]
 8004ff8:	6014      	str	r4, [r2, #0]
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005000:	f000 b8e0 	b.w	80051c4 <__malloc_unlock>
 8005004:	42a3      	cmp	r3, r4
 8005006:	d908      	bls.n	800501a <_free_r+0x42>
 8005008:	6820      	ldr	r0, [r4, #0]
 800500a:	1821      	adds	r1, r4, r0
 800500c:	428b      	cmp	r3, r1
 800500e:	bf01      	itttt	eq
 8005010:	6819      	ldreq	r1, [r3, #0]
 8005012:	685b      	ldreq	r3, [r3, #4]
 8005014:	1809      	addeq	r1, r1, r0
 8005016:	6021      	streq	r1, [r4, #0]
 8005018:	e7ed      	b.n	8004ff6 <_free_r+0x1e>
 800501a:	461a      	mov	r2, r3
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	b10b      	cbz	r3, 8005024 <_free_r+0x4c>
 8005020:	42a3      	cmp	r3, r4
 8005022:	d9fa      	bls.n	800501a <_free_r+0x42>
 8005024:	6811      	ldr	r1, [r2, #0]
 8005026:	1850      	adds	r0, r2, r1
 8005028:	42a0      	cmp	r0, r4
 800502a:	d10b      	bne.n	8005044 <_free_r+0x6c>
 800502c:	6820      	ldr	r0, [r4, #0]
 800502e:	4401      	add	r1, r0
 8005030:	1850      	adds	r0, r2, r1
 8005032:	4283      	cmp	r3, r0
 8005034:	6011      	str	r1, [r2, #0]
 8005036:	d1e0      	bne.n	8004ffa <_free_r+0x22>
 8005038:	6818      	ldr	r0, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	4408      	add	r0, r1
 800503e:	6010      	str	r0, [r2, #0]
 8005040:	6053      	str	r3, [r2, #4]
 8005042:	e7da      	b.n	8004ffa <_free_r+0x22>
 8005044:	d902      	bls.n	800504c <_free_r+0x74>
 8005046:	230c      	movs	r3, #12
 8005048:	602b      	str	r3, [r5, #0]
 800504a:	e7d6      	b.n	8004ffa <_free_r+0x22>
 800504c:	6820      	ldr	r0, [r4, #0]
 800504e:	1821      	adds	r1, r4, r0
 8005050:	428b      	cmp	r3, r1
 8005052:	bf01      	itttt	eq
 8005054:	6819      	ldreq	r1, [r3, #0]
 8005056:	685b      	ldreq	r3, [r3, #4]
 8005058:	1809      	addeq	r1, r1, r0
 800505a:	6021      	streq	r1, [r4, #0]
 800505c:	6063      	str	r3, [r4, #4]
 800505e:	6054      	str	r4, [r2, #4]
 8005060:	e7cb      	b.n	8004ffa <_free_r+0x22>
 8005062:	bd38      	pop	{r3, r4, r5, pc}
 8005064:	20000408 	.word	0x20000408

08005068 <malloc>:
 8005068:	4b02      	ldr	r3, [pc, #8]	; (8005074 <malloc+0xc>)
 800506a:	4601      	mov	r1, r0
 800506c:	6818      	ldr	r0, [r3, #0]
 800506e:	f000 b823 	b.w	80050b8 <_malloc_r>
 8005072:	bf00      	nop
 8005074:	20000064 	.word	0x20000064

08005078 <sbrk_aligned>:
 8005078:	b570      	push	{r4, r5, r6, lr}
 800507a:	4e0e      	ldr	r6, [pc, #56]	; (80050b4 <sbrk_aligned+0x3c>)
 800507c:	460c      	mov	r4, r1
 800507e:	6831      	ldr	r1, [r6, #0]
 8005080:	4605      	mov	r5, r0
 8005082:	b911      	cbnz	r1, 800508a <sbrk_aligned+0x12>
 8005084:	f001 fe0c 	bl	8006ca0 <_sbrk_r>
 8005088:	6030      	str	r0, [r6, #0]
 800508a:	4621      	mov	r1, r4
 800508c:	4628      	mov	r0, r5
 800508e:	f001 fe07 	bl	8006ca0 <_sbrk_r>
 8005092:	1c43      	adds	r3, r0, #1
 8005094:	d00a      	beq.n	80050ac <sbrk_aligned+0x34>
 8005096:	1cc4      	adds	r4, r0, #3
 8005098:	f024 0403 	bic.w	r4, r4, #3
 800509c:	42a0      	cmp	r0, r4
 800509e:	d007      	beq.n	80050b0 <sbrk_aligned+0x38>
 80050a0:	1a21      	subs	r1, r4, r0
 80050a2:	4628      	mov	r0, r5
 80050a4:	f001 fdfc 	bl	8006ca0 <_sbrk_r>
 80050a8:	3001      	adds	r0, #1
 80050aa:	d101      	bne.n	80050b0 <sbrk_aligned+0x38>
 80050ac:	f04f 34ff 	mov.w	r4, #4294967295
 80050b0:	4620      	mov	r0, r4
 80050b2:	bd70      	pop	{r4, r5, r6, pc}
 80050b4:	2000040c 	.word	0x2000040c

080050b8 <_malloc_r>:
 80050b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050bc:	1ccd      	adds	r5, r1, #3
 80050be:	f025 0503 	bic.w	r5, r5, #3
 80050c2:	3508      	adds	r5, #8
 80050c4:	2d0c      	cmp	r5, #12
 80050c6:	bf38      	it	cc
 80050c8:	250c      	movcc	r5, #12
 80050ca:	2d00      	cmp	r5, #0
 80050cc:	4607      	mov	r7, r0
 80050ce:	db01      	blt.n	80050d4 <_malloc_r+0x1c>
 80050d0:	42a9      	cmp	r1, r5
 80050d2:	d905      	bls.n	80050e0 <_malloc_r+0x28>
 80050d4:	230c      	movs	r3, #12
 80050d6:	2600      	movs	r6, #0
 80050d8:	603b      	str	r3, [r7, #0]
 80050da:	4630      	mov	r0, r6
 80050dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80051b4 <_malloc_r+0xfc>
 80050e4:	f000 f868 	bl	80051b8 <__malloc_lock>
 80050e8:	f8d8 3000 	ldr.w	r3, [r8]
 80050ec:	461c      	mov	r4, r3
 80050ee:	bb5c      	cbnz	r4, 8005148 <_malloc_r+0x90>
 80050f0:	4629      	mov	r1, r5
 80050f2:	4638      	mov	r0, r7
 80050f4:	f7ff ffc0 	bl	8005078 <sbrk_aligned>
 80050f8:	1c43      	adds	r3, r0, #1
 80050fa:	4604      	mov	r4, r0
 80050fc:	d155      	bne.n	80051aa <_malloc_r+0xf2>
 80050fe:	f8d8 4000 	ldr.w	r4, [r8]
 8005102:	4626      	mov	r6, r4
 8005104:	2e00      	cmp	r6, #0
 8005106:	d145      	bne.n	8005194 <_malloc_r+0xdc>
 8005108:	2c00      	cmp	r4, #0
 800510a:	d048      	beq.n	800519e <_malloc_r+0xe6>
 800510c:	6823      	ldr	r3, [r4, #0]
 800510e:	4631      	mov	r1, r6
 8005110:	4638      	mov	r0, r7
 8005112:	eb04 0903 	add.w	r9, r4, r3
 8005116:	f001 fdc3 	bl	8006ca0 <_sbrk_r>
 800511a:	4581      	cmp	r9, r0
 800511c:	d13f      	bne.n	800519e <_malloc_r+0xe6>
 800511e:	6821      	ldr	r1, [r4, #0]
 8005120:	4638      	mov	r0, r7
 8005122:	1a6d      	subs	r5, r5, r1
 8005124:	4629      	mov	r1, r5
 8005126:	f7ff ffa7 	bl	8005078 <sbrk_aligned>
 800512a:	3001      	adds	r0, #1
 800512c:	d037      	beq.n	800519e <_malloc_r+0xe6>
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	442b      	add	r3, r5
 8005132:	6023      	str	r3, [r4, #0]
 8005134:	f8d8 3000 	ldr.w	r3, [r8]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d038      	beq.n	80051ae <_malloc_r+0xf6>
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	42a2      	cmp	r2, r4
 8005140:	d12b      	bne.n	800519a <_malloc_r+0xe2>
 8005142:	2200      	movs	r2, #0
 8005144:	605a      	str	r2, [r3, #4]
 8005146:	e00f      	b.n	8005168 <_malloc_r+0xb0>
 8005148:	6822      	ldr	r2, [r4, #0]
 800514a:	1b52      	subs	r2, r2, r5
 800514c:	d41f      	bmi.n	800518e <_malloc_r+0xd6>
 800514e:	2a0b      	cmp	r2, #11
 8005150:	d917      	bls.n	8005182 <_malloc_r+0xca>
 8005152:	1961      	adds	r1, r4, r5
 8005154:	42a3      	cmp	r3, r4
 8005156:	6025      	str	r5, [r4, #0]
 8005158:	bf18      	it	ne
 800515a:	6059      	strne	r1, [r3, #4]
 800515c:	6863      	ldr	r3, [r4, #4]
 800515e:	bf08      	it	eq
 8005160:	f8c8 1000 	streq.w	r1, [r8]
 8005164:	5162      	str	r2, [r4, r5]
 8005166:	604b      	str	r3, [r1, #4]
 8005168:	4638      	mov	r0, r7
 800516a:	f104 060b 	add.w	r6, r4, #11
 800516e:	f000 f829 	bl	80051c4 <__malloc_unlock>
 8005172:	f026 0607 	bic.w	r6, r6, #7
 8005176:	1d23      	adds	r3, r4, #4
 8005178:	1af2      	subs	r2, r6, r3
 800517a:	d0ae      	beq.n	80050da <_malloc_r+0x22>
 800517c:	1b9b      	subs	r3, r3, r6
 800517e:	50a3      	str	r3, [r4, r2]
 8005180:	e7ab      	b.n	80050da <_malloc_r+0x22>
 8005182:	42a3      	cmp	r3, r4
 8005184:	6862      	ldr	r2, [r4, #4]
 8005186:	d1dd      	bne.n	8005144 <_malloc_r+0x8c>
 8005188:	f8c8 2000 	str.w	r2, [r8]
 800518c:	e7ec      	b.n	8005168 <_malloc_r+0xb0>
 800518e:	4623      	mov	r3, r4
 8005190:	6864      	ldr	r4, [r4, #4]
 8005192:	e7ac      	b.n	80050ee <_malloc_r+0x36>
 8005194:	4634      	mov	r4, r6
 8005196:	6876      	ldr	r6, [r6, #4]
 8005198:	e7b4      	b.n	8005104 <_malloc_r+0x4c>
 800519a:	4613      	mov	r3, r2
 800519c:	e7cc      	b.n	8005138 <_malloc_r+0x80>
 800519e:	230c      	movs	r3, #12
 80051a0:	4638      	mov	r0, r7
 80051a2:	603b      	str	r3, [r7, #0]
 80051a4:	f000 f80e 	bl	80051c4 <__malloc_unlock>
 80051a8:	e797      	b.n	80050da <_malloc_r+0x22>
 80051aa:	6025      	str	r5, [r4, #0]
 80051ac:	e7dc      	b.n	8005168 <_malloc_r+0xb0>
 80051ae:	605b      	str	r3, [r3, #4]
 80051b0:	deff      	udf	#255	; 0xff
 80051b2:	bf00      	nop
 80051b4:	20000408 	.word	0x20000408

080051b8 <__malloc_lock>:
 80051b8:	4801      	ldr	r0, [pc, #4]	; (80051c0 <__malloc_lock+0x8>)
 80051ba:	f7ff b889 	b.w	80042d0 <__retarget_lock_acquire_recursive>
 80051be:	bf00      	nop
 80051c0:	20000404 	.word	0x20000404

080051c4 <__malloc_unlock>:
 80051c4:	4801      	ldr	r0, [pc, #4]	; (80051cc <__malloc_unlock+0x8>)
 80051c6:	f7ff b884 	b.w	80042d2 <__retarget_lock_release_recursive>
 80051ca:	bf00      	nop
 80051cc:	20000404 	.word	0x20000404

080051d0 <_Balloc>:
 80051d0:	b570      	push	{r4, r5, r6, lr}
 80051d2:	69c6      	ldr	r6, [r0, #28]
 80051d4:	4604      	mov	r4, r0
 80051d6:	460d      	mov	r5, r1
 80051d8:	b976      	cbnz	r6, 80051f8 <_Balloc+0x28>
 80051da:	2010      	movs	r0, #16
 80051dc:	f7ff ff44 	bl	8005068 <malloc>
 80051e0:	4602      	mov	r2, r0
 80051e2:	61e0      	str	r0, [r4, #28]
 80051e4:	b920      	cbnz	r0, 80051f0 <_Balloc+0x20>
 80051e6:	216b      	movs	r1, #107	; 0x6b
 80051e8:	4b17      	ldr	r3, [pc, #92]	; (8005248 <_Balloc+0x78>)
 80051ea:	4818      	ldr	r0, [pc, #96]	; (800524c <_Balloc+0x7c>)
 80051ec:	f001 fd7c 	bl	8006ce8 <__assert_func>
 80051f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80051f4:	6006      	str	r6, [r0, #0]
 80051f6:	60c6      	str	r6, [r0, #12]
 80051f8:	69e6      	ldr	r6, [r4, #28]
 80051fa:	68f3      	ldr	r3, [r6, #12]
 80051fc:	b183      	cbz	r3, 8005220 <_Balloc+0x50>
 80051fe:	69e3      	ldr	r3, [r4, #28]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005206:	b9b8      	cbnz	r0, 8005238 <_Balloc+0x68>
 8005208:	2101      	movs	r1, #1
 800520a:	fa01 f605 	lsl.w	r6, r1, r5
 800520e:	1d72      	adds	r2, r6, #5
 8005210:	4620      	mov	r0, r4
 8005212:	0092      	lsls	r2, r2, #2
 8005214:	f001 fd86 	bl	8006d24 <_calloc_r>
 8005218:	b160      	cbz	r0, 8005234 <_Balloc+0x64>
 800521a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800521e:	e00e      	b.n	800523e <_Balloc+0x6e>
 8005220:	2221      	movs	r2, #33	; 0x21
 8005222:	2104      	movs	r1, #4
 8005224:	4620      	mov	r0, r4
 8005226:	f001 fd7d 	bl	8006d24 <_calloc_r>
 800522a:	69e3      	ldr	r3, [r4, #28]
 800522c:	60f0      	str	r0, [r6, #12]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1e4      	bne.n	80051fe <_Balloc+0x2e>
 8005234:	2000      	movs	r0, #0
 8005236:	bd70      	pop	{r4, r5, r6, pc}
 8005238:	6802      	ldr	r2, [r0, #0]
 800523a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800523e:	2300      	movs	r3, #0
 8005240:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005244:	e7f7      	b.n	8005236 <_Balloc+0x66>
 8005246:	bf00      	nop
 8005248:	08007aec 	.word	0x08007aec
 800524c:	08007b6c 	.word	0x08007b6c

08005250 <_Bfree>:
 8005250:	b570      	push	{r4, r5, r6, lr}
 8005252:	69c6      	ldr	r6, [r0, #28]
 8005254:	4605      	mov	r5, r0
 8005256:	460c      	mov	r4, r1
 8005258:	b976      	cbnz	r6, 8005278 <_Bfree+0x28>
 800525a:	2010      	movs	r0, #16
 800525c:	f7ff ff04 	bl	8005068 <malloc>
 8005260:	4602      	mov	r2, r0
 8005262:	61e8      	str	r0, [r5, #28]
 8005264:	b920      	cbnz	r0, 8005270 <_Bfree+0x20>
 8005266:	218f      	movs	r1, #143	; 0x8f
 8005268:	4b08      	ldr	r3, [pc, #32]	; (800528c <_Bfree+0x3c>)
 800526a:	4809      	ldr	r0, [pc, #36]	; (8005290 <_Bfree+0x40>)
 800526c:	f001 fd3c 	bl	8006ce8 <__assert_func>
 8005270:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005274:	6006      	str	r6, [r0, #0]
 8005276:	60c6      	str	r6, [r0, #12]
 8005278:	b13c      	cbz	r4, 800528a <_Bfree+0x3a>
 800527a:	69eb      	ldr	r3, [r5, #28]
 800527c:	6862      	ldr	r2, [r4, #4]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005284:	6021      	str	r1, [r4, #0]
 8005286:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800528a:	bd70      	pop	{r4, r5, r6, pc}
 800528c:	08007aec 	.word	0x08007aec
 8005290:	08007b6c 	.word	0x08007b6c

08005294 <__multadd>:
 8005294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005298:	4607      	mov	r7, r0
 800529a:	460c      	mov	r4, r1
 800529c:	461e      	mov	r6, r3
 800529e:	2000      	movs	r0, #0
 80052a0:	690d      	ldr	r5, [r1, #16]
 80052a2:	f101 0c14 	add.w	ip, r1, #20
 80052a6:	f8dc 3000 	ldr.w	r3, [ip]
 80052aa:	3001      	adds	r0, #1
 80052ac:	b299      	uxth	r1, r3
 80052ae:	fb02 6101 	mla	r1, r2, r1, r6
 80052b2:	0c1e      	lsrs	r6, r3, #16
 80052b4:	0c0b      	lsrs	r3, r1, #16
 80052b6:	fb02 3306 	mla	r3, r2, r6, r3
 80052ba:	b289      	uxth	r1, r1
 80052bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80052c0:	4285      	cmp	r5, r0
 80052c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80052c6:	f84c 1b04 	str.w	r1, [ip], #4
 80052ca:	dcec      	bgt.n	80052a6 <__multadd+0x12>
 80052cc:	b30e      	cbz	r6, 8005312 <__multadd+0x7e>
 80052ce:	68a3      	ldr	r3, [r4, #8]
 80052d0:	42ab      	cmp	r3, r5
 80052d2:	dc19      	bgt.n	8005308 <__multadd+0x74>
 80052d4:	6861      	ldr	r1, [r4, #4]
 80052d6:	4638      	mov	r0, r7
 80052d8:	3101      	adds	r1, #1
 80052da:	f7ff ff79 	bl	80051d0 <_Balloc>
 80052de:	4680      	mov	r8, r0
 80052e0:	b928      	cbnz	r0, 80052ee <__multadd+0x5a>
 80052e2:	4602      	mov	r2, r0
 80052e4:	21ba      	movs	r1, #186	; 0xba
 80052e6:	4b0c      	ldr	r3, [pc, #48]	; (8005318 <__multadd+0x84>)
 80052e8:	480c      	ldr	r0, [pc, #48]	; (800531c <__multadd+0x88>)
 80052ea:	f001 fcfd 	bl	8006ce8 <__assert_func>
 80052ee:	6922      	ldr	r2, [r4, #16]
 80052f0:	f104 010c 	add.w	r1, r4, #12
 80052f4:	3202      	adds	r2, #2
 80052f6:	0092      	lsls	r2, r2, #2
 80052f8:	300c      	adds	r0, #12
 80052fa:	f001 fce1 	bl	8006cc0 <memcpy>
 80052fe:	4621      	mov	r1, r4
 8005300:	4638      	mov	r0, r7
 8005302:	f7ff ffa5 	bl	8005250 <_Bfree>
 8005306:	4644      	mov	r4, r8
 8005308:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800530c:	3501      	adds	r5, #1
 800530e:	615e      	str	r6, [r3, #20]
 8005310:	6125      	str	r5, [r4, #16]
 8005312:	4620      	mov	r0, r4
 8005314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005318:	08007b5b 	.word	0x08007b5b
 800531c:	08007b6c 	.word	0x08007b6c

08005320 <__s2b>:
 8005320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005324:	4615      	mov	r5, r2
 8005326:	2209      	movs	r2, #9
 8005328:	461f      	mov	r7, r3
 800532a:	3308      	adds	r3, #8
 800532c:	460c      	mov	r4, r1
 800532e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005332:	4606      	mov	r6, r0
 8005334:	2201      	movs	r2, #1
 8005336:	2100      	movs	r1, #0
 8005338:	429a      	cmp	r2, r3
 800533a:	db09      	blt.n	8005350 <__s2b+0x30>
 800533c:	4630      	mov	r0, r6
 800533e:	f7ff ff47 	bl	80051d0 <_Balloc>
 8005342:	b940      	cbnz	r0, 8005356 <__s2b+0x36>
 8005344:	4602      	mov	r2, r0
 8005346:	21d3      	movs	r1, #211	; 0xd3
 8005348:	4b18      	ldr	r3, [pc, #96]	; (80053ac <__s2b+0x8c>)
 800534a:	4819      	ldr	r0, [pc, #100]	; (80053b0 <__s2b+0x90>)
 800534c:	f001 fccc 	bl	8006ce8 <__assert_func>
 8005350:	0052      	lsls	r2, r2, #1
 8005352:	3101      	adds	r1, #1
 8005354:	e7f0      	b.n	8005338 <__s2b+0x18>
 8005356:	9b08      	ldr	r3, [sp, #32]
 8005358:	2d09      	cmp	r5, #9
 800535a:	6143      	str	r3, [r0, #20]
 800535c:	f04f 0301 	mov.w	r3, #1
 8005360:	6103      	str	r3, [r0, #16]
 8005362:	dd16      	ble.n	8005392 <__s2b+0x72>
 8005364:	f104 0909 	add.w	r9, r4, #9
 8005368:	46c8      	mov	r8, r9
 800536a:	442c      	add	r4, r5
 800536c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005370:	4601      	mov	r1, r0
 8005372:	220a      	movs	r2, #10
 8005374:	4630      	mov	r0, r6
 8005376:	3b30      	subs	r3, #48	; 0x30
 8005378:	f7ff ff8c 	bl	8005294 <__multadd>
 800537c:	45a0      	cmp	r8, r4
 800537e:	d1f5      	bne.n	800536c <__s2b+0x4c>
 8005380:	f1a5 0408 	sub.w	r4, r5, #8
 8005384:	444c      	add	r4, r9
 8005386:	1b2d      	subs	r5, r5, r4
 8005388:	1963      	adds	r3, r4, r5
 800538a:	42bb      	cmp	r3, r7
 800538c:	db04      	blt.n	8005398 <__s2b+0x78>
 800538e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005392:	2509      	movs	r5, #9
 8005394:	340a      	adds	r4, #10
 8005396:	e7f6      	b.n	8005386 <__s2b+0x66>
 8005398:	f814 3b01 	ldrb.w	r3, [r4], #1
 800539c:	4601      	mov	r1, r0
 800539e:	220a      	movs	r2, #10
 80053a0:	4630      	mov	r0, r6
 80053a2:	3b30      	subs	r3, #48	; 0x30
 80053a4:	f7ff ff76 	bl	8005294 <__multadd>
 80053a8:	e7ee      	b.n	8005388 <__s2b+0x68>
 80053aa:	bf00      	nop
 80053ac:	08007b5b 	.word	0x08007b5b
 80053b0:	08007b6c 	.word	0x08007b6c

080053b4 <__hi0bits>:
 80053b4:	0c02      	lsrs	r2, r0, #16
 80053b6:	0412      	lsls	r2, r2, #16
 80053b8:	4603      	mov	r3, r0
 80053ba:	b9ca      	cbnz	r2, 80053f0 <__hi0bits+0x3c>
 80053bc:	0403      	lsls	r3, r0, #16
 80053be:	2010      	movs	r0, #16
 80053c0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80053c4:	bf04      	itt	eq
 80053c6:	021b      	lsleq	r3, r3, #8
 80053c8:	3008      	addeq	r0, #8
 80053ca:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80053ce:	bf04      	itt	eq
 80053d0:	011b      	lsleq	r3, r3, #4
 80053d2:	3004      	addeq	r0, #4
 80053d4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80053d8:	bf04      	itt	eq
 80053da:	009b      	lsleq	r3, r3, #2
 80053dc:	3002      	addeq	r0, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	db05      	blt.n	80053ee <__hi0bits+0x3a>
 80053e2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80053e6:	f100 0001 	add.w	r0, r0, #1
 80053ea:	bf08      	it	eq
 80053ec:	2020      	moveq	r0, #32
 80053ee:	4770      	bx	lr
 80053f0:	2000      	movs	r0, #0
 80053f2:	e7e5      	b.n	80053c0 <__hi0bits+0xc>

080053f4 <__lo0bits>:
 80053f4:	6803      	ldr	r3, [r0, #0]
 80053f6:	4602      	mov	r2, r0
 80053f8:	f013 0007 	ands.w	r0, r3, #7
 80053fc:	d00b      	beq.n	8005416 <__lo0bits+0x22>
 80053fe:	07d9      	lsls	r1, r3, #31
 8005400:	d421      	bmi.n	8005446 <__lo0bits+0x52>
 8005402:	0798      	lsls	r0, r3, #30
 8005404:	bf49      	itett	mi
 8005406:	085b      	lsrmi	r3, r3, #1
 8005408:	089b      	lsrpl	r3, r3, #2
 800540a:	2001      	movmi	r0, #1
 800540c:	6013      	strmi	r3, [r2, #0]
 800540e:	bf5c      	itt	pl
 8005410:	2002      	movpl	r0, #2
 8005412:	6013      	strpl	r3, [r2, #0]
 8005414:	4770      	bx	lr
 8005416:	b299      	uxth	r1, r3
 8005418:	b909      	cbnz	r1, 800541e <__lo0bits+0x2a>
 800541a:	2010      	movs	r0, #16
 800541c:	0c1b      	lsrs	r3, r3, #16
 800541e:	b2d9      	uxtb	r1, r3
 8005420:	b909      	cbnz	r1, 8005426 <__lo0bits+0x32>
 8005422:	3008      	adds	r0, #8
 8005424:	0a1b      	lsrs	r3, r3, #8
 8005426:	0719      	lsls	r1, r3, #28
 8005428:	bf04      	itt	eq
 800542a:	091b      	lsreq	r3, r3, #4
 800542c:	3004      	addeq	r0, #4
 800542e:	0799      	lsls	r1, r3, #30
 8005430:	bf04      	itt	eq
 8005432:	089b      	lsreq	r3, r3, #2
 8005434:	3002      	addeq	r0, #2
 8005436:	07d9      	lsls	r1, r3, #31
 8005438:	d403      	bmi.n	8005442 <__lo0bits+0x4e>
 800543a:	085b      	lsrs	r3, r3, #1
 800543c:	f100 0001 	add.w	r0, r0, #1
 8005440:	d003      	beq.n	800544a <__lo0bits+0x56>
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	4770      	bx	lr
 8005446:	2000      	movs	r0, #0
 8005448:	4770      	bx	lr
 800544a:	2020      	movs	r0, #32
 800544c:	4770      	bx	lr
	...

08005450 <__i2b>:
 8005450:	b510      	push	{r4, lr}
 8005452:	460c      	mov	r4, r1
 8005454:	2101      	movs	r1, #1
 8005456:	f7ff febb 	bl	80051d0 <_Balloc>
 800545a:	4602      	mov	r2, r0
 800545c:	b928      	cbnz	r0, 800546a <__i2b+0x1a>
 800545e:	f240 1145 	movw	r1, #325	; 0x145
 8005462:	4b04      	ldr	r3, [pc, #16]	; (8005474 <__i2b+0x24>)
 8005464:	4804      	ldr	r0, [pc, #16]	; (8005478 <__i2b+0x28>)
 8005466:	f001 fc3f 	bl	8006ce8 <__assert_func>
 800546a:	2301      	movs	r3, #1
 800546c:	6144      	str	r4, [r0, #20]
 800546e:	6103      	str	r3, [r0, #16]
 8005470:	bd10      	pop	{r4, pc}
 8005472:	bf00      	nop
 8005474:	08007b5b 	.word	0x08007b5b
 8005478:	08007b6c 	.word	0x08007b6c

0800547c <__multiply>:
 800547c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005480:	4691      	mov	r9, r2
 8005482:	690a      	ldr	r2, [r1, #16]
 8005484:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005488:	460c      	mov	r4, r1
 800548a:	429a      	cmp	r2, r3
 800548c:	bfbe      	ittt	lt
 800548e:	460b      	movlt	r3, r1
 8005490:	464c      	movlt	r4, r9
 8005492:	4699      	movlt	r9, r3
 8005494:	6927      	ldr	r7, [r4, #16]
 8005496:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800549a:	68a3      	ldr	r3, [r4, #8]
 800549c:	6861      	ldr	r1, [r4, #4]
 800549e:	eb07 060a 	add.w	r6, r7, sl
 80054a2:	42b3      	cmp	r3, r6
 80054a4:	b085      	sub	sp, #20
 80054a6:	bfb8      	it	lt
 80054a8:	3101      	addlt	r1, #1
 80054aa:	f7ff fe91 	bl	80051d0 <_Balloc>
 80054ae:	b930      	cbnz	r0, 80054be <__multiply+0x42>
 80054b0:	4602      	mov	r2, r0
 80054b2:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80054b6:	4b43      	ldr	r3, [pc, #268]	; (80055c4 <__multiply+0x148>)
 80054b8:	4843      	ldr	r0, [pc, #268]	; (80055c8 <__multiply+0x14c>)
 80054ba:	f001 fc15 	bl	8006ce8 <__assert_func>
 80054be:	f100 0514 	add.w	r5, r0, #20
 80054c2:	462b      	mov	r3, r5
 80054c4:	2200      	movs	r2, #0
 80054c6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80054ca:	4543      	cmp	r3, r8
 80054cc:	d321      	bcc.n	8005512 <__multiply+0x96>
 80054ce:	f104 0314 	add.w	r3, r4, #20
 80054d2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80054d6:	f109 0314 	add.w	r3, r9, #20
 80054da:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80054de:	9202      	str	r2, [sp, #8]
 80054e0:	1b3a      	subs	r2, r7, r4
 80054e2:	3a15      	subs	r2, #21
 80054e4:	f022 0203 	bic.w	r2, r2, #3
 80054e8:	3204      	adds	r2, #4
 80054ea:	f104 0115 	add.w	r1, r4, #21
 80054ee:	428f      	cmp	r7, r1
 80054f0:	bf38      	it	cc
 80054f2:	2204      	movcc	r2, #4
 80054f4:	9201      	str	r2, [sp, #4]
 80054f6:	9a02      	ldr	r2, [sp, #8]
 80054f8:	9303      	str	r3, [sp, #12]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d80c      	bhi.n	8005518 <__multiply+0x9c>
 80054fe:	2e00      	cmp	r6, #0
 8005500:	dd03      	ble.n	800550a <__multiply+0x8e>
 8005502:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005506:	2b00      	cmp	r3, #0
 8005508:	d05a      	beq.n	80055c0 <__multiply+0x144>
 800550a:	6106      	str	r6, [r0, #16]
 800550c:	b005      	add	sp, #20
 800550e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005512:	f843 2b04 	str.w	r2, [r3], #4
 8005516:	e7d8      	b.n	80054ca <__multiply+0x4e>
 8005518:	f8b3 a000 	ldrh.w	sl, [r3]
 800551c:	f1ba 0f00 	cmp.w	sl, #0
 8005520:	d023      	beq.n	800556a <__multiply+0xee>
 8005522:	46a9      	mov	r9, r5
 8005524:	f04f 0c00 	mov.w	ip, #0
 8005528:	f104 0e14 	add.w	lr, r4, #20
 800552c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005530:	f8d9 1000 	ldr.w	r1, [r9]
 8005534:	fa1f fb82 	uxth.w	fp, r2
 8005538:	b289      	uxth	r1, r1
 800553a:	fb0a 110b 	mla	r1, sl, fp, r1
 800553e:	4461      	add	r1, ip
 8005540:	f8d9 c000 	ldr.w	ip, [r9]
 8005544:	0c12      	lsrs	r2, r2, #16
 8005546:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800554a:	fb0a c202 	mla	r2, sl, r2, ip
 800554e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005552:	b289      	uxth	r1, r1
 8005554:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005558:	4577      	cmp	r7, lr
 800555a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800555e:	f849 1b04 	str.w	r1, [r9], #4
 8005562:	d8e3      	bhi.n	800552c <__multiply+0xb0>
 8005564:	9a01      	ldr	r2, [sp, #4]
 8005566:	f845 c002 	str.w	ip, [r5, r2]
 800556a:	9a03      	ldr	r2, [sp, #12]
 800556c:	3304      	adds	r3, #4
 800556e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005572:	f1b9 0f00 	cmp.w	r9, #0
 8005576:	d021      	beq.n	80055bc <__multiply+0x140>
 8005578:	46ae      	mov	lr, r5
 800557a:	f04f 0a00 	mov.w	sl, #0
 800557e:	6829      	ldr	r1, [r5, #0]
 8005580:	f104 0c14 	add.w	ip, r4, #20
 8005584:	f8bc b000 	ldrh.w	fp, [ip]
 8005588:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800558c:	b289      	uxth	r1, r1
 800558e:	fb09 220b 	mla	r2, r9, fp, r2
 8005592:	4452      	add	r2, sl
 8005594:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005598:	f84e 1b04 	str.w	r1, [lr], #4
 800559c:	f85c 1b04 	ldr.w	r1, [ip], #4
 80055a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80055a4:	f8be 1000 	ldrh.w	r1, [lr]
 80055a8:	4567      	cmp	r7, ip
 80055aa:	fb09 110a 	mla	r1, r9, sl, r1
 80055ae:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80055b2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80055b6:	d8e5      	bhi.n	8005584 <__multiply+0x108>
 80055b8:	9a01      	ldr	r2, [sp, #4]
 80055ba:	50a9      	str	r1, [r5, r2]
 80055bc:	3504      	adds	r5, #4
 80055be:	e79a      	b.n	80054f6 <__multiply+0x7a>
 80055c0:	3e01      	subs	r6, #1
 80055c2:	e79c      	b.n	80054fe <__multiply+0x82>
 80055c4:	08007b5b 	.word	0x08007b5b
 80055c8:	08007b6c 	.word	0x08007b6c

080055cc <__pow5mult>:
 80055cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055d0:	4615      	mov	r5, r2
 80055d2:	f012 0203 	ands.w	r2, r2, #3
 80055d6:	4606      	mov	r6, r0
 80055d8:	460f      	mov	r7, r1
 80055da:	d007      	beq.n	80055ec <__pow5mult+0x20>
 80055dc:	4c25      	ldr	r4, [pc, #148]	; (8005674 <__pow5mult+0xa8>)
 80055de:	3a01      	subs	r2, #1
 80055e0:	2300      	movs	r3, #0
 80055e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80055e6:	f7ff fe55 	bl	8005294 <__multadd>
 80055ea:	4607      	mov	r7, r0
 80055ec:	10ad      	asrs	r5, r5, #2
 80055ee:	d03d      	beq.n	800566c <__pow5mult+0xa0>
 80055f0:	69f4      	ldr	r4, [r6, #28]
 80055f2:	b97c      	cbnz	r4, 8005614 <__pow5mult+0x48>
 80055f4:	2010      	movs	r0, #16
 80055f6:	f7ff fd37 	bl	8005068 <malloc>
 80055fa:	4602      	mov	r2, r0
 80055fc:	61f0      	str	r0, [r6, #28]
 80055fe:	b928      	cbnz	r0, 800560c <__pow5mult+0x40>
 8005600:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005604:	4b1c      	ldr	r3, [pc, #112]	; (8005678 <__pow5mult+0xac>)
 8005606:	481d      	ldr	r0, [pc, #116]	; (800567c <__pow5mult+0xb0>)
 8005608:	f001 fb6e 	bl	8006ce8 <__assert_func>
 800560c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005610:	6004      	str	r4, [r0, #0]
 8005612:	60c4      	str	r4, [r0, #12]
 8005614:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005618:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800561c:	b94c      	cbnz	r4, 8005632 <__pow5mult+0x66>
 800561e:	f240 2171 	movw	r1, #625	; 0x271
 8005622:	4630      	mov	r0, r6
 8005624:	f7ff ff14 	bl	8005450 <__i2b>
 8005628:	2300      	movs	r3, #0
 800562a:	4604      	mov	r4, r0
 800562c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005630:	6003      	str	r3, [r0, #0]
 8005632:	f04f 0900 	mov.w	r9, #0
 8005636:	07eb      	lsls	r3, r5, #31
 8005638:	d50a      	bpl.n	8005650 <__pow5mult+0x84>
 800563a:	4639      	mov	r1, r7
 800563c:	4622      	mov	r2, r4
 800563e:	4630      	mov	r0, r6
 8005640:	f7ff ff1c 	bl	800547c <__multiply>
 8005644:	4680      	mov	r8, r0
 8005646:	4639      	mov	r1, r7
 8005648:	4630      	mov	r0, r6
 800564a:	f7ff fe01 	bl	8005250 <_Bfree>
 800564e:	4647      	mov	r7, r8
 8005650:	106d      	asrs	r5, r5, #1
 8005652:	d00b      	beq.n	800566c <__pow5mult+0xa0>
 8005654:	6820      	ldr	r0, [r4, #0]
 8005656:	b938      	cbnz	r0, 8005668 <__pow5mult+0x9c>
 8005658:	4622      	mov	r2, r4
 800565a:	4621      	mov	r1, r4
 800565c:	4630      	mov	r0, r6
 800565e:	f7ff ff0d 	bl	800547c <__multiply>
 8005662:	6020      	str	r0, [r4, #0]
 8005664:	f8c0 9000 	str.w	r9, [r0]
 8005668:	4604      	mov	r4, r0
 800566a:	e7e4      	b.n	8005636 <__pow5mult+0x6a>
 800566c:	4638      	mov	r0, r7
 800566e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005672:	bf00      	nop
 8005674:	08007cb8 	.word	0x08007cb8
 8005678:	08007aec 	.word	0x08007aec
 800567c:	08007b6c 	.word	0x08007b6c

08005680 <__lshift>:
 8005680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005684:	460c      	mov	r4, r1
 8005686:	4607      	mov	r7, r0
 8005688:	4691      	mov	r9, r2
 800568a:	6923      	ldr	r3, [r4, #16]
 800568c:	6849      	ldr	r1, [r1, #4]
 800568e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005692:	68a3      	ldr	r3, [r4, #8]
 8005694:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005698:	f108 0601 	add.w	r6, r8, #1
 800569c:	42b3      	cmp	r3, r6
 800569e:	db0b      	blt.n	80056b8 <__lshift+0x38>
 80056a0:	4638      	mov	r0, r7
 80056a2:	f7ff fd95 	bl	80051d0 <_Balloc>
 80056a6:	4605      	mov	r5, r0
 80056a8:	b948      	cbnz	r0, 80056be <__lshift+0x3e>
 80056aa:	4602      	mov	r2, r0
 80056ac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80056b0:	4b27      	ldr	r3, [pc, #156]	; (8005750 <__lshift+0xd0>)
 80056b2:	4828      	ldr	r0, [pc, #160]	; (8005754 <__lshift+0xd4>)
 80056b4:	f001 fb18 	bl	8006ce8 <__assert_func>
 80056b8:	3101      	adds	r1, #1
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	e7ee      	b.n	800569c <__lshift+0x1c>
 80056be:	2300      	movs	r3, #0
 80056c0:	f100 0114 	add.w	r1, r0, #20
 80056c4:	f100 0210 	add.w	r2, r0, #16
 80056c8:	4618      	mov	r0, r3
 80056ca:	4553      	cmp	r3, sl
 80056cc:	db33      	blt.n	8005736 <__lshift+0xb6>
 80056ce:	6920      	ldr	r0, [r4, #16]
 80056d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80056d4:	f104 0314 	add.w	r3, r4, #20
 80056d8:	f019 091f 	ands.w	r9, r9, #31
 80056dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80056e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80056e4:	d02b      	beq.n	800573e <__lshift+0xbe>
 80056e6:	468a      	mov	sl, r1
 80056e8:	2200      	movs	r2, #0
 80056ea:	f1c9 0e20 	rsb	lr, r9, #32
 80056ee:	6818      	ldr	r0, [r3, #0]
 80056f0:	fa00 f009 	lsl.w	r0, r0, r9
 80056f4:	4310      	orrs	r0, r2
 80056f6:	f84a 0b04 	str.w	r0, [sl], #4
 80056fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80056fe:	459c      	cmp	ip, r3
 8005700:	fa22 f20e 	lsr.w	r2, r2, lr
 8005704:	d8f3      	bhi.n	80056ee <__lshift+0x6e>
 8005706:	ebac 0304 	sub.w	r3, ip, r4
 800570a:	3b15      	subs	r3, #21
 800570c:	f023 0303 	bic.w	r3, r3, #3
 8005710:	3304      	adds	r3, #4
 8005712:	f104 0015 	add.w	r0, r4, #21
 8005716:	4584      	cmp	ip, r0
 8005718:	bf38      	it	cc
 800571a:	2304      	movcc	r3, #4
 800571c:	50ca      	str	r2, [r1, r3]
 800571e:	b10a      	cbz	r2, 8005724 <__lshift+0xa4>
 8005720:	f108 0602 	add.w	r6, r8, #2
 8005724:	3e01      	subs	r6, #1
 8005726:	4638      	mov	r0, r7
 8005728:	4621      	mov	r1, r4
 800572a:	612e      	str	r6, [r5, #16]
 800572c:	f7ff fd90 	bl	8005250 <_Bfree>
 8005730:	4628      	mov	r0, r5
 8005732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005736:	f842 0f04 	str.w	r0, [r2, #4]!
 800573a:	3301      	adds	r3, #1
 800573c:	e7c5      	b.n	80056ca <__lshift+0x4a>
 800573e:	3904      	subs	r1, #4
 8005740:	f853 2b04 	ldr.w	r2, [r3], #4
 8005744:	459c      	cmp	ip, r3
 8005746:	f841 2f04 	str.w	r2, [r1, #4]!
 800574a:	d8f9      	bhi.n	8005740 <__lshift+0xc0>
 800574c:	e7ea      	b.n	8005724 <__lshift+0xa4>
 800574e:	bf00      	nop
 8005750:	08007b5b 	.word	0x08007b5b
 8005754:	08007b6c 	.word	0x08007b6c

08005758 <__mcmp>:
 8005758:	4603      	mov	r3, r0
 800575a:	690a      	ldr	r2, [r1, #16]
 800575c:	6900      	ldr	r0, [r0, #16]
 800575e:	b530      	push	{r4, r5, lr}
 8005760:	1a80      	subs	r0, r0, r2
 8005762:	d10d      	bne.n	8005780 <__mcmp+0x28>
 8005764:	3314      	adds	r3, #20
 8005766:	3114      	adds	r1, #20
 8005768:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800576c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005770:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005774:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005778:	4295      	cmp	r5, r2
 800577a:	d002      	beq.n	8005782 <__mcmp+0x2a>
 800577c:	d304      	bcc.n	8005788 <__mcmp+0x30>
 800577e:	2001      	movs	r0, #1
 8005780:	bd30      	pop	{r4, r5, pc}
 8005782:	42a3      	cmp	r3, r4
 8005784:	d3f4      	bcc.n	8005770 <__mcmp+0x18>
 8005786:	e7fb      	b.n	8005780 <__mcmp+0x28>
 8005788:	f04f 30ff 	mov.w	r0, #4294967295
 800578c:	e7f8      	b.n	8005780 <__mcmp+0x28>
	...

08005790 <__mdiff>:
 8005790:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005794:	460d      	mov	r5, r1
 8005796:	4607      	mov	r7, r0
 8005798:	4611      	mov	r1, r2
 800579a:	4628      	mov	r0, r5
 800579c:	4614      	mov	r4, r2
 800579e:	f7ff ffdb 	bl	8005758 <__mcmp>
 80057a2:	1e06      	subs	r6, r0, #0
 80057a4:	d111      	bne.n	80057ca <__mdiff+0x3a>
 80057a6:	4631      	mov	r1, r6
 80057a8:	4638      	mov	r0, r7
 80057aa:	f7ff fd11 	bl	80051d0 <_Balloc>
 80057ae:	4602      	mov	r2, r0
 80057b0:	b928      	cbnz	r0, 80057be <__mdiff+0x2e>
 80057b2:	f240 2137 	movw	r1, #567	; 0x237
 80057b6:	4b3a      	ldr	r3, [pc, #232]	; (80058a0 <__mdiff+0x110>)
 80057b8:	483a      	ldr	r0, [pc, #232]	; (80058a4 <__mdiff+0x114>)
 80057ba:	f001 fa95 	bl	8006ce8 <__assert_func>
 80057be:	2301      	movs	r3, #1
 80057c0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80057c4:	4610      	mov	r0, r2
 80057c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ca:	bfa4      	itt	ge
 80057cc:	4623      	movge	r3, r4
 80057ce:	462c      	movge	r4, r5
 80057d0:	4638      	mov	r0, r7
 80057d2:	6861      	ldr	r1, [r4, #4]
 80057d4:	bfa6      	itte	ge
 80057d6:	461d      	movge	r5, r3
 80057d8:	2600      	movge	r6, #0
 80057da:	2601      	movlt	r6, #1
 80057dc:	f7ff fcf8 	bl	80051d0 <_Balloc>
 80057e0:	4602      	mov	r2, r0
 80057e2:	b918      	cbnz	r0, 80057ec <__mdiff+0x5c>
 80057e4:	f240 2145 	movw	r1, #581	; 0x245
 80057e8:	4b2d      	ldr	r3, [pc, #180]	; (80058a0 <__mdiff+0x110>)
 80057ea:	e7e5      	b.n	80057b8 <__mdiff+0x28>
 80057ec:	f102 0814 	add.w	r8, r2, #20
 80057f0:	46c2      	mov	sl, r8
 80057f2:	f04f 0c00 	mov.w	ip, #0
 80057f6:	6927      	ldr	r7, [r4, #16]
 80057f8:	60c6      	str	r6, [r0, #12]
 80057fa:	692e      	ldr	r6, [r5, #16]
 80057fc:	f104 0014 	add.w	r0, r4, #20
 8005800:	f105 0914 	add.w	r9, r5, #20
 8005804:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005808:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800580c:	3410      	adds	r4, #16
 800580e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005812:	f859 3b04 	ldr.w	r3, [r9], #4
 8005816:	fa1f f18b 	uxth.w	r1, fp
 800581a:	4461      	add	r1, ip
 800581c:	fa1f fc83 	uxth.w	ip, r3
 8005820:	0c1b      	lsrs	r3, r3, #16
 8005822:	eba1 010c 	sub.w	r1, r1, ip
 8005826:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800582a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800582e:	b289      	uxth	r1, r1
 8005830:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005834:	454e      	cmp	r6, r9
 8005836:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800583a:	f84a 1b04 	str.w	r1, [sl], #4
 800583e:	d8e6      	bhi.n	800580e <__mdiff+0x7e>
 8005840:	1b73      	subs	r3, r6, r5
 8005842:	3b15      	subs	r3, #21
 8005844:	f023 0303 	bic.w	r3, r3, #3
 8005848:	3515      	adds	r5, #21
 800584a:	3304      	adds	r3, #4
 800584c:	42ae      	cmp	r6, r5
 800584e:	bf38      	it	cc
 8005850:	2304      	movcc	r3, #4
 8005852:	4418      	add	r0, r3
 8005854:	4443      	add	r3, r8
 8005856:	461e      	mov	r6, r3
 8005858:	4605      	mov	r5, r0
 800585a:	4575      	cmp	r5, lr
 800585c:	d30e      	bcc.n	800587c <__mdiff+0xec>
 800585e:	f10e 0103 	add.w	r1, lr, #3
 8005862:	1a09      	subs	r1, r1, r0
 8005864:	f021 0103 	bic.w	r1, r1, #3
 8005868:	3803      	subs	r0, #3
 800586a:	4586      	cmp	lr, r0
 800586c:	bf38      	it	cc
 800586e:	2100      	movcc	r1, #0
 8005870:	440b      	add	r3, r1
 8005872:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005876:	b189      	cbz	r1, 800589c <__mdiff+0x10c>
 8005878:	6117      	str	r7, [r2, #16]
 800587a:	e7a3      	b.n	80057c4 <__mdiff+0x34>
 800587c:	f855 8b04 	ldr.w	r8, [r5], #4
 8005880:	fa1f f188 	uxth.w	r1, r8
 8005884:	4461      	add	r1, ip
 8005886:	140c      	asrs	r4, r1, #16
 8005888:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800588c:	b289      	uxth	r1, r1
 800588e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005892:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005896:	f846 1b04 	str.w	r1, [r6], #4
 800589a:	e7de      	b.n	800585a <__mdiff+0xca>
 800589c:	3f01      	subs	r7, #1
 800589e:	e7e8      	b.n	8005872 <__mdiff+0xe2>
 80058a0:	08007b5b 	.word	0x08007b5b
 80058a4:	08007b6c 	.word	0x08007b6c

080058a8 <__ulp>:
 80058a8:	4b0e      	ldr	r3, [pc, #56]	; (80058e4 <__ulp+0x3c>)
 80058aa:	400b      	ands	r3, r1
 80058ac:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	dc08      	bgt.n	80058c6 <__ulp+0x1e>
 80058b4:	425b      	negs	r3, r3
 80058b6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80058ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 80058be:	da04      	bge.n	80058ca <__ulp+0x22>
 80058c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80058c4:	4113      	asrs	r3, r2
 80058c6:	2200      	movs	r2, #0
 80058c8:	e008      	b.n	80058dc <__ulp+0x34>
 80058ca:	f1a2 0314 	sub.w	r3, r2, #20
 80058ce:	2b1e      	cmp	r3, #30
 80058d0:	bfd6      	itet	le
 80058d2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80058d6:	2201      	movgt	r2, #1
 80058d8:	40da      	lsrle	r2, r3
 80058da:	2300      	movs	r3, #0
 80058dc:	4619      	mov	r1, r3
 80058de:	4610      	mov	r0, r2
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	7ff00000 	.word	0x7ff00000

080058e8 <__b2d>:
 80058e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ea:	6905      	ldr	r5, [r0, #16]
 80058ec:	f100 0714 	add.w	r7, r0, #20
 80058f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80058f4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80058f8:	1f2e      	subs	r6, r5, #4
 80058fa:	4620      	mov	r0, r4
 80058fc:	f7ff fd5a 	bl	80053b4 <__hi0bits>
 8005900:	f1c0 0220 	rsb	r2, r0, #32
 8005904:	280a      	cmp	r0, #10
 8005906:	4603      	mov	r3, r0
 8005908:	f8df c068 	ldr.w	ip, [pc, #104]	; 8005974 <__b2d+0x8c>
 800590c:	600a      	str	r2, [r1, #0]
 800590e:	dc12      	bgt.n	8005936 <__b2d+0x4e>
 8005910:	f1c0 0e0b 	rsb	lr, r0, #11
 8005914:	fa24 f20e 	lsr.w	r2, r4, lr
 8005918:	42b7      	cmp	r7, r6
 800591a:	ea42 010c 	orr.w	r1, r2, ip
 800591e:	bf2c      	ite	cs
 8005920:	2200      	movcs	r2, #0
 8005922:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8005926:	3315      	adds	r3, #21
 8005928:	fa04 f303 	lsl.w	r3, r4, r3
 800592c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005930:	431a      	orrs	r2, r3
 8005932:	4610      	mov	r0, r2
 8005934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005936:	42b7      	cmp	r7, r6
 8005938:	bf2e      	itee	cs
 800593a:	2200      	movcs	r2, #0
 800593c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8005940:	f1a5 0608 	subcc.w	r6, r5, #8
 8005944:	3b0b      	subs	r3, #11
 8005946:	d012      	beq.n	800596e <__b2d+0x86>
 8005948:	f1c3 0520 	rsb	r5, r3, #32
 800594c:	fa22 f105 	lsr.w	r1, r2, r5
 8005950:	409c      	lsls	r4, r3
 8005952:	430c      	orrs	r4, r1
 8005954:	42be      	cmp	r6, r7
 8005956:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800595a:	bf94      	ite	ls
 800595c:	2400      	movls	r4, #0
 800595e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8005962:	409a      	lsls	r2, r3
 8005964:	40ec      	lsrs	r4, r5
 8005966:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800596a:	4322      	orrs	r2, r4
 800596c:	e7e1      	b.n	8005932 <__b2d+0x4a>
 800596e:	ea44 010c 	orr.w	r1, r4, ip
 8005972:	e7de      	b.n	8005932 <__b2d+0x4a>
 8005974:	3ff00000 	.word	0x3ff00000

08005978 <__d2b>:
 8005978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800597a:	2101      	movs	r1, #1
 800597c:	4617      	mov	r7, r2
 800597e:	461c      	mov	r4, r3
 8005980:	9e08      	ldr	r6, [sp, #32]
 8005982:	f7ff fc25 	bl	80051d0 <_Balloc>
 8005986:	4605      	mov	r5, r0
 8005988:	b930      	cbnz	r0, 8005998 <__d2b+0x20>
 800598a:	4602      	mov	r2, r0
 800598c:	f240 310f 	movw	r1, #783	; 0x30f
 8005990:	4b22      	ldr	r3, [pc, #136]	; (8005a1c <__d2b+0xa4>)
 8005992:	4823      	ldr	r0, [pc, #140]	; (8005a20 <__d2b+0xa8>)
 8005994:	f001 f9a8 	bl	8006ce8 <__assert_func>
 8005998:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800599c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80059a0:	bb24      	cbnz	r4, 80059ec <__d2b+0x74>
 80059a2:	2f00      	cmp	r7, #0
 80059a4:	9301      	str	r3, [sp, #4]
 80059a6:	d026      	beq.n	80059f6 <__d2b+0x7e>
 80059a8:	4668      	mov	r0, sp
 80059aa:	9700      	str	r7, [sp, #0]
 80059ac:	f7ff fd22 	bl	80053f4 <__lo0bits>
 80059b0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80059b4:	b1e8      	cbz	r0, 80059f2 <__d2b+0x7a>
 80059b6:	f1c0 0320 	rsb	r3, r0, #32
 80059ba:	fa02 f303 	lsl.w	r3, r2, r3
 80059be:	430b      	orrs	r3, r1
 80059c0:	40c2      	lsrs	r2, r0
 80059c2:	616b      	str	r3, [r5, #20]
 80059c4:	9201      	str	r2, [sp, #4]
 80059c6:	9b01      	ldr	r3, [sp, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	bf14      	ite	ne
 80059cc:	2102      	movne	r1, #2
 80059ce:	2101      	moveq	r1, #1
 80059d0:	61ab      	str	r3, [r5, #24]
 80059d2:	6129      	str	r1, [r5, #16]
 80059d4:	b1bc      	cbz	r4, 8005a06 <__d2b+0x8e>
 80059d6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80059da:	4404      	add	r4, r0
 80059dc:	6034      	str	r4, [r6, #0]
 80059de:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80059e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059e4:	6018      	str	r0, [r3, #0]
 80059e6:	4628      	mov	r0, r5
 80059e8:	b003      	add	sp, #12
 80059ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059f0:	e7d7      	b.n	80059a2 <__d2b+0x2a>
 80059f2:	6169      	str	r1, [r5, #20]
 80059f4:	e7e7      	b.n	80059c6 <__d2b+0x4e>
 80059f6:	a801      	add	r0, sp, #4
 80059f8:	f7ff fcfc 	bl	80053f4 <__lo0bits>
 80059fc:	9b01      	ldr	r3, [sp, #4]
 80059fe:	2101      	movs	r1, #1
 8005a00:	616b      	str	r3, [r5, #20]
 8005a02:	3020      	adds	r0, #32
 8005a04:	e7e5      	b.n	80059d2 <__d2b+0x5a>
 8005a06:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005a0a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8005a0e:	6030      	str	r0, [r6, #0]
 8005a10:	6918      	ldr	r0, [r3, #16]
 8005a12:	f7ff fccf 	bl	80053b4 <__hi0bits>
 8005a16:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005a1a:	e7e2      	b.n	80059e2 <__d2b+0x6a>
 8005a1c:	08007b5b 	.word	0x08007b5b
 8005a20:	08007b6c 	.word	0x08007b6c

08005a24 <__ratio>:
 8005a24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a28:	4688      	mov	r8, r1
 8005a2a:	4669      	mov	r1, sp
 8005a2c:	4681      	mov	r9, r0
 8005a2e:	f7ff ff5b 	bl	80058e8 <__b2d>
 8005a32:	460f      	mov	r7, r1
 8005a34:	4604      	mov	r4, r0
 8005a36:	460d      	mov	r5, r1
 8005a38:	4640      	mov	r0, r8
 8005a3a:	a901      	add	r1, sp, #4
 8005a3c:	f7ff ff54 	bl	80058e8 <__b2d>
 8005a40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005a44:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8005a48:	468b      	mov	fp, r1
 8005a4a:	eba3 0c02 	sub.w	ip, r3, r2
 8005a4e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005a52:	1a9b      	subs	r3, r3, r2
 8005a54:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	bfd5      	itete	le
 8005a5c:	460a      	movle	r2, r1
 8005a5e:	462a      	movgt	r2, r5
 8005a60:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005a64:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8005a68:	bfd8      	it	le
 8005a6a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8005a6e:	465b      	mov	r3, fp
 8005a70:	4602      	mov	r2, r0
 8005a72:	4639      	mov	r1, r7
 8005a74:	4620      	mov	r0, r4
 8005a76:	f7fa fe59 	bl	800072c <__aeabi_ddiv>
 8005a7a:	b003      	add	sp, #12
 8005a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005a80 <__copybits>:
 8005a80:	3901      	subs	r1, #1
 8005a82:	b570      	push	{r4, r5, r6, lr}
 8005a84:	1149      	asrs	r1, r1, #5
 8005a86:	6914      	ldr	r4, [r2, #16]
 8005a88:	3101      	adds	r1, #1
 8005a8a:	f102 0314 	add.w	r3, r2, #20
 8005a8e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005a92:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005a96:	1f05      	subs	r5, r0, #4
 8005a98:	42a3      	cmp	r3, r4
 8005a9a:	d30c      	bcc.n	8005ab6 <__copybits+0x36>
 8005a9c:	1aa3      	subs	r3, r4, r2
 8005a9e:	3b11      	subs	r3, #17
 8005aa0:	f023 0303 	bic.w	r3, r3, #3
 8005aa4:	3211      	adds	r2, #17
 8005aa6:	42a2      	cmp	r2, r4
 8005aa8:	bf88      	it	hi
 8005aaa:	2300      	movhi	r3, #0
 8005aac:	4418      	add	r0, r3
 8005aae:	2300      	movs	r3, #0
 8005ab0:	4288      	cmp	r0, r1
 8005ab2:	d305      	bcc.n	8005ac0 <__copybits+0x40>
 8005ab4:	bd70      	pop	{r4, r5, r6, pc}
 8005ab6:	f853 6b04 	ldr.w	r6, [r3], #4
 8005aba:	f845 6f04 	str.w	r6, [r5, #4]!
 8005abe:	e7eb      	b.n	8005a98 <__copybits+0x18>
 8005ac0:	f840 3b04 	str.w	r3, [r0], #4
 8005ac4:	e7f4      	b.n	8005ab0 <__copybits+0x30>

08005ac6 <__any_on>:
 8005ac6:	f100 0214 	add.w	r2, r0, #20
 8005aca:	6900      	ldr	r0, [r0, #16]
 8005acc:	114b      	asrs	r3, r1, #5
 8005ace:	4298      	cmp	r0, r3
 8005ad0:	b510      	push	{r4, lr}
 8005ad2:	db11      	blt.n	8005af8 <__any_on+0x32>
 8005ad4:	dd0a      	ble.n	8005aec <__any_on+0x26>
 8005ad6:	f011 011f 	ands.w	r1, r1, #31
 8005ada:	d007      	beq.n	8005aec <__any_on+0x26>
 8005adc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005ae0:	fa24 f001 	lsr.w	r0, r4, r1
 8005ae4:	fa00 f101 	lsl.w	r1, r0, r1
 8005ae8:	428c      	cmp	r4, r1
 8005aea:	d10b      	bne.n	8005b04 <__any_on+0x3e>
 8005aec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d803      	bhi.n	8005afc <__any_on+0x36>
 8005af4:	2000      	movs	r0, #0
 8005af6:	bd10      	pop	{r4, pc}
 8005af8:	4603      	mov	r3, r0
 8005afa:	e7f7      	b.n	8005aec <__any_on+0x26>
 8005afc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005b00:	2900      	cmp	r1, #0
 8005b02:	d0f5      	beq.n	8005af0 <__any_on+0x2a>
 8005b04:	2001      	movs	r0, #1
 8005b06:	e7f6      	b.n	8005af6 <__any_on+0x30>

08005b08 <sulp>:
 8005b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b0c:	460f      	mov	r7, r1
 8005b0e:	4690      	mov	r8, r2
 8005b10:	f7ff feca 	bl	80058a8 <__ulp>
 8005b14:	4604      	mov	r4, r0
 8005b16:	460d      	mov	r5, r1
 8005b18:	f1b8 0f00 	cmp.w	r8, #0
 8005b1c:	d011      	beq.n	8005b42 <sulp+0x3a>
 8005b1e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005b22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	dd0b      	ble.n	8005b42 <sulp+0x3a>
 8005b2a:	2400      	movs	r4, #0
 8005b2c:	051b      	lsls	r3, r3, #20
 8005b2e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005b32:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005b36:	4622      	mov	r2, r4
 8005b38:	462b      	mov	r3, r5
 8005b3a:	f7fa fccd 	bl	80004d8 <__aeabi_dmul>
 8005b3e:	4604      	mov	r4, r0
 8005b40:	460d      	mov	r5, r1
 8005b42:	4620      	mov	r0, r4
 8005b44:	4629      	mov	r1, r5
 8005b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b4a:	0000      	movs	r0, r0
 8005b4c:	0000      	movs	r0, r0
	...

08005b50 <_strtod_l>:
 8005b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b54:	b09f      	sub	sp, #124	; 0x7c
 8005b56:	9217      	str	r2, [sp, #92]	; 0x5c
 8005b58:	2200      	movs	r2, #0
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	921a      	str	r2, [sp, #104]	; 0x68
 8005b5e:	460d      	mov	r5, r1
 8005b60:	f04f 0800 	mov.w	r8, #0
 8005b64:	f04f 0900 	mov.w	r9, #0
 8005b68:	460a      	mov	r2, r1
 8005b6a:	9219      	str	r2, [sp, #100]	; 0x64
 8005b6c:	7811      	ldrb	r1, [r2, #0]
 8005b6e:	292b      	cmp	r1, #43	; 0x2b
 8005b70:	d04a      	beq.n	8005c08 <_strtod_l+0xb8>
 8005b72:	d838      	bhi.n	8005be6 <_strtod_l+0x96>
 8005b74:	290d      	cmp	r1, #13
 8005b76:	d832      	bhi.n	8005bde <_strtod_l+0x8e>
 8005b78:	2908      	cmp	r1, #8
 8005b7a:	d832      	bhi.n	8005be2 <_strtod_l+0x92>
 8005b7c:	2900      	cmp	r1, #0
 8005b7e:	d03b      	beq.n	8005bf8 <_strtod_l+0xa8>
 8005b80:	2200      	movs	r2, #0
 8005b82:	920e      	str	r2, [sp, #56]	; 0x38
 8005b84:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005b86:	7832      	ldrb	r2, [r6, #0]
 8005b88:	2a30      	cmp	r2, #48	; 0x30
 8005b8a:	f040 80b2 	bne.w	8005cf2 <_strtod_l+0x1a2>
 8005b8e:	7872      	ldrb	r2, [r6, #1]
 8005b90:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005b94:	2a58      	cmp	r2, #88	; 0x58
 8005b96:	d16e      	bne.n	8005c76 <_strtod_l+0x126>
 8005b98:	9302      	str	r3, [sp, #8]
 8005b9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	9301      	str	r3, [sp, #4]
 8005ba0:	ab1a      	add	r3, sp, #104	; 0x68
 8005ba2:	9300      	str	r3, [sp, #0]
 8005ba4:	4a8c      	ldr	r2, [pc, #560]	; (8005dd8 <_strtod_l+0x288>)
 8005ba6:	ab1b      	add	r3, sp, #108	; 0x6c
 8005ba8:	a919      	add	r1, sp, #100	; 0x64
 8005baa:	f001 f937 	bl	8006e1c <__gethex>
 8005bae:	f010 070f 	ands.w	r7, r0, #15
 8005bb2:	4605      	mov	r5, r0
 8005bb4:	d005      	beq.n	8005bc2 <_strtod_l+0x72>
 8005bb6:	2f06      	cmp	r7, #6
 8005bb8:	d128      	bne.n	8005c0c <_strtod_l+0xbc>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	3601      	adds	r6, #1
 8005bbe:	9619      	str	r6, [sp, #100]	; 0x64
 8005bc0:	930e      	str	r3, [sp, #56]	; 0x38
 8005bc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f040 85a0 	bne.w	800670a <_strtod_l+0xbba>
 8005bca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bcc:	b1cb      	cbz	r3, 8005c02 <_strtod_l+0xb2>
 8005bce:	4642      	mov	r2, r8
 8005bd0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	b01f      	add	sp, #124	; 0x7c
 8005bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bde:	2920      	cmp	r1, #32
 8005be0:	d1ce      	bne.n	8005b80 <_strtod_l+0x30>
 8005be2:	3201      	adds	r2, #1
 8005be4:	e7c1      	b.n	8005b6a <_strtod_l+0x1a>
 8005be6:	292d      	cmp	r1, #45	; 0x2d
 8005be8:	d1ca      	bne.n	8005b80 <_strtod_l+0x30>
 8005bea:	2101      	movs	r1, #1
 8005bec:	910e      	str	r1, [sp, #56]	; 0x38
 8005bee:	1c51      	adds	r1, r2, #1
 8005bf0:	9119      	str	r1, [sp, #100]	; 0x64
 8005bf2:	7852      	ldrb	r2, [r2, #1]
 8005bf4:	2a00      	cmp	r2, #0
 8005bf6:	d1c5      	bne.n	8005b84 <_strtod_l+0x34>
 8005bf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005bfa:	9519      	str	r5, [sp, #100]	; 0x64
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f040 8582 	bne.w	8006706 <_strtod_l+0xbb6>
 8005c02:	4642      	mov	r2, r8
 8005c04:	464b      	mov	r3, r9
 8005c06:	e7e5      	b.n	8005bd4 <_strtod_l+0x84>
 8005c08:	2100      	movs	r1, #0
 8005c0a:	e7ef      	b.n	8005bec <_strtod_l+0x9c>
 8005c0c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005c0e:	b13a      	cbz	r2, 8005c20 <_strtod_l+0xd0>
 8005c10:	2135      	movs	r1, #53	; 0x35
 8005c12:	a81c      	add	r0, sp, #112	; 0x70
 8005c14:	f7ff ff34 	bl	8005a80 <__copybits>
 8005c18:	4620      	mov	r0, r4
 8005c1a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005c1c:	f7ff fb18 	bl	8005250 <_Bfree>
 8005c20:	3f01      	subs	r7, #1
 8005c22:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005c24:	2f04      	cmp	r7, #4
 8005c26:	d806      	bhi.n	8005c36 <_strtod_l+0xe6>
 8005c28:	e8df f007 	tbb	[pc, r7]
 8005c2c:	201d0314 	.word	0x201d0314
 8005c30:	14          	.byte	0x14
 8005c31:	00          	.byte	0x00
 8005c32:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005c36:	05e9      	lsls	r1, r5, #23
 8005c38:	bf48      	it	mi
 8005c3a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8005c3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c42:	0d1b      	lsrs	r3, r3, #20
 8005c44:	051b      	lsls	r3, r3, #20
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1bb      	bne.n	8005bc2 <_strtod_l+0x72>
 8005c4a:	f7fe fb17 	bl	800427c <__errno>
 8005c4e:	2322      	movs	r3, #34	; 0x22
 8005c50:	6003      	str	r3, [r0, #0]
 8005c52:	e7b6      	b.n	8005bc2 <_strtod_l+0x72>
 8005c54:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005c58:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005c5c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005c60:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005c64:	e7e7      	b.n	8005c36 <_strtod_l+0xe6>
 8005c66:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8005ddc <_strtod_l+0x28c>
 8005c6a:	e7e4      	b.n	8005c36 <_strtod_l+0xe6>
 8005c6c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005c70:	f04f 38ff 	mov.w	r8, #4294967295
 8005c74:	e7df      	b.n	8005c36 <_strtod_l+0xe6>
 8005c76:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	9219      	str	r2, [sp, #100]	; 0x64
 8005c7c:	785b      	ldrb	r3, [r3, #1]
 8005c7e:	2b30      	cmp	r3, #48	; 0x30
 8005c80:	d0f9      	beq.n	8005c76 <_strtod_l+0x126>
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d09d      	beq.n	8005bc2 <_strtod_l+0x72>
 8005c86:	2301      	movs	r3, #1
 8005c88:	f04f 0a00 	mov.w	sl, #0
 8005c8c:	220a      	movs	r2, #10
 8005c8e:	46d3      	mov	fp, sl
 8005c90:	9305      	str	r3, [sp, #20]
 8005c92:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c94:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8005c98:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c9a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005c9c:	7806      	ldrb	r6, [r0, #0]
 8005c9e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005ca2:	b2d9      	uxtb	r1, r3
 8005ca4:	2909      	cmp	r1, #9
 8005ca6:	d926      	bls.n	8005cf6 <_strtod_l+0x1a6>
 8005ca8:	2201      	movs	r2, #1
 8005caa:	494d      	ldr	r1, [pc, #308]	; (8005de0 <_strtod_l+0x290>)
 8005cac:	f000 ffe6 	bl	8006c7c <strncmp>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	d030      	beq.n	8005d16 <_strtod_l+0x1c6>
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	4632      	mov	r2, r6
 8005cb8:	4603      	mov	r3, r0
 8005cba:	465e      	mov	r6, fp
 8005cbc:	9008      	str	r0, [sp, #32]
 8005cbe:	2a65      	cmp	r2, #101	; 0x65
 8005cc0:	d001      	beq.n	8005cc6 <_strtod_l+0x176>
 8005cc2:	2a45      	cmp	r2, #69	; 0x45
 8005cc4:	d113      	bne.n	8005cee <_strtod_l+0x19e>
 8005cc6:	b91e      	cbnz	r6, 8005cd0 <_strtod_l+0x180>
 8005cc8:	9a05      	ldr	r2, [sp, #20]
 8005cca:	4302      	orrs	r2, r0
 8005ccc:	d094      	beq.n	8005bf8 <_strtod_l+0xa8>
 8005cce:	2600      	movs	r6, #0
 8005cd0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005cd2:	1c6a      	adds	r2, r5, #1
 8005cd4:	9219      	str	r2, [sp, #100]	; 0x64
 8005cd6:	786a      	ldrb	r2, [r5, #1]
 8005cd8:	2a2b      	cmp	r2, #43	; 0x2b
 8005cda:	d074      	beq.n	8005dc6 <_strtod_l+0x276>
 8005cdc:	2a2d      	cmp	r2, #45	; 0x2d
 8005cde:	d078      	beq.n	8005dd2 <_strtod_l+0x282>
 8005ce0:	f04f 0c00 	mov.w	ip, #0
 8005ce4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005ce8:	2909      	cmp	r1, #9
 8005cea:	d97f      	bls.n	8005dec <_strtod_l+0x29c>
 8005cec:	9519      	str	r5, [sp, #100]	; 0x64
 8005cee:	2700      	movs	r7, #0
 8005cf0:	e09e      	b.n	8005e30 <_strtod_l+0x2e0>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	e7c8      	b.n	8005c88 <_strtod_l+0x138>
 8005cf6:	f1bb 0f08 	cmp.w	fp, #8
 8005cfa:	bfd8      	it	le
 8005cfc:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8005cfe:	f100 0001 	add.w	r0, r0, #1
 8005d02:	bfd6      	itet	le
 8005d04:	fb02 3301 	mlale	r3, r2, r1, r3
 8005d08:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8005d0c:	930a      	strle	r3, [sp, #40]	; 0x28
 8005d0e:	f10b 0b01 	add.w	fp, fp, #1
 8005d12:	9019      	str	r0, [sp, #100]	; 0x64
 8005d14:	e7c1      	b.n	8005c9a <_strtod_l+0x14a>
 8005d16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	9219      	str	r2, [sp, #100]	; 0x64
 8005d1c:	785a      	ldrb	r2, [r3, #1]
 8005d1e:	f1bb 0f00 	cmp.w	fp, #0
 8005d22:	d037      	beq.n	8005d94 <_strtod_l+0x244>
 8005d24:	465e      	mov	r6, fp
 8005d26:	9008      	str	r0, [sp, #32]
 8005d28:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005d2c:	2b09      	cmp	r3, #9
 8005d2e:	d912      	bls.n	8005d56 <_strtod_l+0x206>
 8005d30:	2301      	movs	r3, #1
 8005d32:	e7c4      	b.n	8005cbe <_strtod_l+0x16e>
 8005d34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d36:	3001      	adds	r0, #1
 8005d38:	1c5a      	adds	r2, r3, #1
 8005d3a:	9219      	str	r2, [sp, #100]	; 0x64
 8005d3c:	785a      	ldrb	r2, [r3, #1]
 8005d3e:	2a30      	cmp	r2, #48	; 0x30
 8005d40:	d0f8      	beq.n	8005d34 <_strtod_l+0x1e4>
 8005d42:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005d46:	2b08      	cmp	r3, #8
 8005d48:	f200 84e4 	bhi.w	8006714 <_strtod_l+0xbc4>
 8005d4c:	9008      	str	r0, [sp, #32]
 8005d4e:	2000      	movs	r0, #0
 8005d50:	4606      	mov	r6, r0
 8005d52:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d54:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d56:	3a30      	subs	r2, #48	; 0x30
 8005d58:	f100 0301 	add.w	r3, r0, #1
 8005d5c:	d014      	beq.n	8005d88 <_strtod_l+0x238>
 8005d5e:	9908      	ldr	r1, [sp, #32]
 8005d60:	eb00 0c06 	add.w	ip, r0, r6
 8005d64:	4419      	add	r1, r3
 8005d66:	9108      	str	r1, [sp, #32]
 8005d68:	4633      	mov	r3, r6
 8005d6a:	210a      	movs	r1, #10
 8005d6c:	4563      	cmp	r3, ip
 8005d6e:	d113      	bne.n	8005d98 <_strtod_l+0x248>
 8005d70:	1833      	adds	r3, r6, r0
 8005d72:	2b08      	cmp	r3, #8
 8005d74:	f106 0601 	add.w	r6, r6, #1
 8005d78:	4406      	add	r6, r0
 8005d7a:	dc1a      	bgt.n	8005db2 <_strtod_l+0x262>
 8005d7c:	230a      	movs	r3, #10
 8005d7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d80:	fb03 2301 	mla	r3, r3, r1, r2
 8005d84:	930a      	str	r3, [sp, #40]	; 0x28
 8005d86:	2300      	movs	r3, #0
 8005d88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	1c51      	adds	r1, r2, #1
 8005d8e:	9119      	str	r1, [sp, #100]	; 0x64
 8005d90:	7852      	ldrb	r2, [r2, #1]
 8005d92:	e7c9      	b.n	8005d28 <_strtod_l+0x1d8>
 8005d94:	4658      	mov	r0, fp
 8005d96:	e7d2      	b.n	8005d3e <_strtod_l+0x1ee>
 8005d98:	2b08      	cmp	r3, #8
 8005d9a:	f103 0301 	add.w	r3, r3, #1
 8005d9e:	dc03      	bgt.n	8005da8 <_strtod_l+0x258>
 8005da0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005da2:	434f      	muls	r7, r1
 8005da4:	970a      	str	r7, [sp, #40]	; 0x28
 8005da6:	e7e1      	b.n	8005d6c <_strtod_l+0x21c>
 8005da8:	2b10      	cmp	r3, #16
 8005daa:	bfd8      	it	le
 8005dac:	fb01 fa0a 	mulle.w	sl, r1, sl
 8005db0:	e7dc      	b.n	8005d6c <_strtod_l+0x21c>
 8005db2:	2e10      	cmp	r6, #16
 8005db4:	bfdc      	itt	le
 8005db6:	230a      	movle	r3, #10
 8005db8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8005dbc:	e7e3      	b.n	8005d86 <_strtod_l+0x236>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	9308      	str	r3, [sp, #32]
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e780      	b.n	8005cc8 <_strtod_l+0x178>
 8005dc6:	f04f 0c00 	mov.w	ip, #0
 8005dca:	1caa      	adds	r2, r5, #2
 8005dcc:	9219      	str	r2, [sp, #100]	; 0x64
 8005dce:	78aa      	ldrb	r2, [r5, #2]
 8005dd0:	e788      	b.n	8005ce4 <_strtod_l+0x194>
 8005dd2:	f04f 0c01 	mov.w	ip, #1
 8005dd6:	e7f8      	b.n	8005dca <_strtod_l+0x27a>
 8005dd8:	08007cc8 	.word	0x08007cc8
 8005ddc:	7ff00000 	.word	0x7ff00000
 8005de0:	08007cc4 	.word	0x08007cc4
 8005de4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005de6:	1c51      	adds	r1, r2, #1
 8005de8:	9119      	str	r1, [sp, #100]	; 0x64
 8005dea:	7852      	ldrb	r2, [r2, #1]
 8005dec:	2a30      	cmp	r2, #48	; 0x30
 8005dee:	d0f9      	beq.n	8005de4 <_strtod_l+0x294>
 8005df0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005df4:	2908      	cmp	r1, #8
 8005df6:	f63f af7a 	bhi.w	8005cee <_strtod_l+0x19e>
 8005dfa:	3a30      	subs	r2, #48	; 0x30
 8005dfc:	9209      	str	r2, [sp, #36]	; 0x24
 8005dfe:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005e00:	920c      	str	r2, [sp, #48]	; 0x30
 8005e02:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005e04:	1c57      	adds	r7, r2, #1
 8005e06:	9719      	str	r7, [sp, #100]	; 0x64
 8005e08:	7852      	ldrb	r2, [r2, #1]
 8005e0a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005e0e:	f1be 0f09 	cmp.w	lr, #9
 8005e12:	d938      	bls.n	8005e86 <_strtod_l+0x336>
 8005e14:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e16:	1a7f      	subs	r7, r7, r1
 8005e18:	2f08      	cmp	r7, #8
 8005e1a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005e1e:	dc03      	bgt.n	8005e28 <_strtod_l+0x2d8>
 8005e20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e22:	428f      	cmp	r7, r1
 8005e24:	bfa8      	it	ge
 8005e26:	460f      	movge	r7, r1
 8005e28:	f1bc 0f00 	cmp.w	ip, #0
 8005e2c:	d000      	beq.n	8005e30 <_strtod_l+0x2e0>
 8005e2e:	427f      	negs	r7, r7
 8005e30:	2e00      	cmp	r6, #0
 8005e32:	d14f      	bne.n	8005ed4 <_strtod_l+0x384>
 8005e34:	9905      	ldr	r1, [sp, #20]
 8005e36:	4301      	orrs	r1, r0
 8005e38:	f47f aec3 	bne.w	8005bc2 <_strtod_l+0x72>
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f47f aedb 	bne.w	8005bf8 <_strtod_l+0xa8>
 8005e42:	2a69      	cmp	r2, #105	; 0x69
 8005e44:	d029      	beq.n	8005e9a <_strtod_l+0x34a>
 8005e46:	dc26      	bgt.n	8005e96 <_strtod_l+0x346>
 8005e48:	2a49      	cmp	r2, #73	; 0x49
 8005e4a:	d026      	beq.n	8005e9a <_strtod_l+0x34a>
 8005e4c:	2a4e      	cmp	r2, #78	; 0x4e
 8005e4e:	f47f aed3 	bne.w	8005bf8 <_strtod_l+0xa8>
 8005e52:	499a      	ldr	r1, [pc, #616]	; (80060bc <_strtod_l+0x56c>)
 8005e54:	a819      	add	r0, sp, #100	; 0x64
 8005e56:	f001 fa23 	bl	80072a0 <__match>
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	f43f aecc 	beq.w	8005bf8 <_strtod_l+0xa8>
 8005e60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	2b28      	cmp	r3, #40	; 0x28
 8005e66:	d12f      	bne.n	8005ec8 <_strtod_l+0x378>
 8005e68:	4995      	ldr	r1, [pc, #596]	; (80060c0 <_strtod_l+0x570>)
 8005e6a:	aa1c      	add	r2, sp, #112	; 0x70
 8005e6c:	a819      	add	r0, sp, #100	; 0x64
 8005e6e:	f001 fa2b 	bl	80072c8 <__hexnan>
 8005e72:	2805      	cmp	r0, #5
 8005e74:	d128      	bne.n	8005ec8 <_strtod_l+0x378>
 8005e76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005e78:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005e7c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005e80:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005e84:	e69d      	b.n	8005bc2 <_strtod_l+0x72>
 8005e86:	210a      	movs	r1, #10
 8005e88:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005e8a:	fb01 2107 	mla	r1, r1, r7, r2
 8005e8e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8005e92:	9209      	str	r2, [sp, #36]	; 0x24
 8005e94:	e7b5      	b.n	8005e02 <_strtod_l+0x2b2>
 8005e96:	2a6e      	cmp	r2, #110	; 0x6e
 8005e98:	e7d9      	b.n	8005e4e <_strtod_l+0x2fe>
 8005e9a:	498a      	ldr	r1, [pc, #552]	; (80060c4 <_strtod_l+0x574>)
 8005e9c:	a819      	add	r0, sp, #100	; 0x64
 8005e9e:	f001 f9ff 	bl	80072a0 <__match>
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	f43f aea8 	beq.w	8005bf8 <_strtod_l+0xa8>
 8005ea8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005eaa:	4987      	ldr	r1, [pc, #540]	; (80060c8 <_strtod_l+0x578>)
 8005eac:	3b01      	subs	r3, #1
 8005eae:	a819      	add	r0, sp, #100	; 0x64
 8005eb0:	9319      	str	r3, [sp, #100]	; 0x64
 8005eb2:	f001 f9f5 	bl	80072a0 <__match>
 8005eb6:	b910      	cbnz	r0, 8005ebe <_strtod_l+0x36e>
 8005eb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005eba:	3301      	adds	r3, #1
 8005ebc:	9319      	str	r3, [sp, #100]	; 0x64
 8005ebe:	f04f 0800 	mov.w	r8, #0
 8005ec2:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80060cc <_strtod_l+0x57c>
 8005ec6:	e67c      	b.n	8005bc2 <_strtod_l+0x72>
 8005ec8:	4881      	ldr	r0, [pc, #516]	; (80060d0 <_strtod_l+0x580>)
 8005eca:	f000 ff07 	bl	8006cdc <nan>
 8005ece:	4680      	mov	r8, r0
 8005ed0:	4689      	mov	r9, r1
 8005ed2:	e676      	b.n	8005bc2 <_strtod_l+0x72>
 8005ed4:	9b08      	ldr	r3, [sp, #32]
 8005ed6:	f1bb 0f00 	cmp.w	fp, #0
 8005eda:	bf08      	it	eq
 8005edc:	46b3      	moveq	fp, r6
 8005ede:	1afb      	subs	r3, r7, r3
 8005ee0:	2e10      	cmp	r6, #16
 8005ee2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005ee4:	4635      	mov	r5, r6
 8005ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ee8:	bfa8      	it	ge
 8005eea:	2510      	movge	r5, #16
 8005eec:	f7fa fa7a 	bl	80003e4 <__aeabi_ui2d>
 8005ef0:	2e09      	cmp	r6, #9
 8005ef2:	4680      	mov	r8, r0
 8005ef4:	4689      	mov	r9, r1
 8005ef6:	dd13      	ble.n	8005f20 <_strtod_l+0x3d0>
 8005ef8:	4b76      	ldr	r3, [pc, #472]	; (80060d4 <_strtod_l+0x584>)
 8005efa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005efe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005f02:	f7fa fae9 	bl	80004d8 <__aeabi_dmul>
 8005f06:	4680      	mov	r8, r0
 8005f08:	4650      	mov	r0, sl
 8005f0a:	4689      	mov	r9, r1
 8005f0c:	f7fa fa6a 	bl	80003e4 <__aeabi_ui2d>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	4640      	mov	r0, r8
 8005f16:	4649      	mov	r1, r9
 8005f18:	f7fa f928 	bl	800016c <__adddf3>
 8005f1c:	4680      	mov	r8, r0
 8005f1e:	4689      	mov	r9, r1
 8005f20:	2e0f      	cmp	r6, #15
 8005f22:	dc36      	bgt.n	8005f92 <_strtod_l+0x442>
 8005f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f43f ae4b 	beq.w	8005bc2 <_strtod_l+0x72>
 8005f2c:	dd22      	ble.n	8005f74 <_strtod_l+0x424>
 8005f2e:	2b16      	cmp	r3, #22
 8005f30:	dc09      	bgt.n	8005f46 <_strtod_l+0x3f6>
 8005f32:	4968      	ldr	r1, [pc, #416]	; (80060d4 <_strtod_l+0x584>)
 8005f34:	4642      	mov	r2, r8
 8005f36:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005f3a:	464b      	mov	r3, r9
 8005f3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f40:	f7fa faca 	bl	80004d8 <__aeabi_dmul>
 8005f44:	e7c3      	b.n	8005ece <_strtod_l+0x37e>
 8005f46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f48:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	db20      	blt.n	8005f92 <_strtod_l+0x442>
 8005f50:	4c60      	ldr	r4, [pc, #384]	; (80060d4 <_strtod_l+0x584>)
 8005f52:	f1c6 060f 	rsb	r6, r6, #15
 8005f56:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8005f5a:	4642      	mov	r2, r8
 8005f5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f60:	464b      	mov	r3, r9
 8005f62:	f7fa fab9 	bl	80004d8 <__aeabi_dmul>
 8005f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f68:	1b9e      	subs	r6, r3, r6
 8005f6a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8005f6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005f72:	e7e5      	b.n	8005f40 <_strtod_l+0x3f0>
 8005f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f76:	3316      	adds	r3, #22
 8005f78:	db0b      	blt.n	8005f92 <_strtod_l+0x442>
 8005f7a:	9b08      	ldr	r3, [sp, #32]
 8005f7c:	4640      	mov	r0, r8
 8005f7e:	1bdf      	subs	r7, r3, r7
 8005f80:	4b54      	ldr	r3, [pc, #336]	; (80060d4 <_strtod_l+0x584>)
 8005f82:	4649      	mov	r1, r9
 8005f84:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f8c:	f7fa fbce 	bl	800072c <__aeabi_ddiv>
 8005f90:	e79d      	b.n	8005ece <_strtod_l+0x37e>
 8005f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f94:	1b75      	subs	r5, r6, r5
 8005f96:	441d      	add	r5, r3
 8005f98:	2d00      	cmp	r5, #0
 8005f9a:	dd70      	ble.n	800607e <_strtod_l+0x52e>
 8005f9c:	f015 030f 	ands.w	r3, r5, #15
 8005fa0:	d00a      	beq.n	8005fb8 <_strtod_l+0x468>
 8005fa2:	494c      	ldr	r1, [pc, #304]	; (80060d4 <_strtod_l+0x584>)
 8005fa4:	4642      	mov	r2, r8
 8005fa6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005faa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fae:	464b      	mov	r3, r9
 8005fb0:	f7fa fa92 	bl	80004d8 <__aeabi_dmul>
 8005fb4:	4680      	mov	r8, r0
 8005fb6:	4689      	mov	r9, r1
 8005fb8:	f035 050f 	bics.w	r5, r5, #15
 8005fbc:	d04d      	beq.n	800605a <_strtod_l+0x50a>
 8005fbe:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8005fc2:	dd22      	ble.n	800600a <_strtod_l+0x4ba>
 8005fc4:	2600      	movs	r6, #0
 8005fc6:	46b3      	mov	fp, r6
 8005fc8:	960b      	str	r6, [sp, #44]	; 0x2c
 8005fca:	9608      	str	r6, [sp, #32]
 8005fcc:	2322      	movs	r3, #34	; 0x22
 8005fce:	f04f 0800 	mov.w	r8, #0
 8005fd2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80060cc <_strtod_l+0x57c>
 8005fd6:	6023      	str	r3, [r4, #0]
 8005fd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f43f adf1 	beq.w	8005bc2 <_strtod_l+0x72>
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005fe4:	f7ff f934 	bl	8005250 <_Bfree>
 8005fe8:	4620      	mov	r0, r4
 8005fea:	9908      	ldr	r1, [sp, #32]
 8005fec:	f7ff f930 	bl	8005250 <_Bfree>
 8005ff0:	4659      	mov	r1, fp
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f7ff f92c 	bl	8005250 <_Bfree>
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ffc:	f7ff f928 	bl	8005250 <_Bfree>
 8006000:	4631      	mov	r1, r6
 8006002:	4620      	mov	r0, r4
 8006004:	f7ff f924 	bl	8005250 <_Bfree>
 8006008:	e5db      	b.n	8005bc2 <_strtod_l+0x72>
 800600a:	4b33      	ldr	r3, [pc, #204]	; (80060d8 <_strtod_l+0x588>)
 800600c:	4640      	mov	r0, r8
 800600e:	9305      	str	r3, [sp, #20]
 8006010:	2300      	movs	r3, #0
 8006012:	4649      	mov	r1, r9
 8006014:	469a      	mov	sl, r3
 8006016:	112d      	asrs	r5, r5, #4
 8006018:	2d01      	cmp	r5, #1
 800601a:	dc21      	bgt.n	8006060 <_strtod_l+0x510>
 800601c:	b10b      	cbz	r3, 8006022 <_strtod_l+0x4d2>
 800601e:	4680      	mov	r8, r0
 8006020:	4689      	mov	r9, r1
 8006022:	492d      	ldr	r1, [pc, #180]	; (80060d8 <_strtod_l+0x588>)
 8006024:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006028:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800602c:	4642      	mov	r2, r8
 800602e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006032:	464b      	mov	r3, r9
 8006034:	f7fa fa50 	bl	80004d8 <__aeabi_dmul>
 8006038:	4b24      	ldr	r3, [pc, #144]	; (80060cc <_strtod_l+0x57c>)
 800603a:	460a      	mov	r2, r1
 800603c:	400b      	ands	r3, r1
 800603e:	4927      	ldr	r1, [pc, #156]	; (80060dc <_strtod_l+0x58c>)
 8006040:	4680      	mov	r8, r0
 8006042:	428b      	cmp	r3, r1
 8006044:	d8be      	bhi.n	8005fc4 <_strtod_l+0x474>
 8006046:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800604a:	428b      	cmp	r3, r1
 800604c:	bf86      	itte	hi
 800604e:	f04f 38ff 	movhi.w	r8, #4294967295
 8006052:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80060e0 <_strtod_l+0x590>
 8006056:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800605a:	2300      	movs	r3, #0
 800605c:	9305      	str	r3, [sp, #20]
 800605e:	e07b      	b.n	8006158 <_strtod_l+0x608>
 8006060:	07ea      	lsls	r2, r5, #31
 8006062:	d505      	bpl.n	8006070 <_strtod_l+0x520>
 8006064:	9b05      	ldr	r3, [sp, #20]
 8006066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606a:	f7fa fa35 	bl	80004d8 <__aeabi_dmul>
 800606e:	2301      	movs	r3, #1
 8006070:	9a05      	ldr	r2, [sp, #20]
 8006072:	f10a 0a01 	add.w	sl, sl, #1
 8006076:	3208      	adds	r2, #8
 8006078:	106d      	asrs	r5, r5, #1
 800607a:	9205      	str	r2, [sp, #20]
 800607c:	e7cc      	b.n	8006018 <_strtod_l+0x4c8>
 800607e:	d0ec      	beq.n	800605a <_strtod_l+0x50a>
 8006080:	426d      	negs	r5, r5
 8006082:	f015 020f 	ands.w	r2, r5, #15
 8006086:	d00a      	beq.n	800609e <_strtod_l+0x54e>
 8006088:	4b12      	ldr	r3, [pc, #72]	; (80060d4 <_strtod_l+0x584>)
 800608a:	4640      	mov	r0, r8
 800608c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006090:	4649      	mov	r1, r9
 8006092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006096:	f7fa fb49 	bl	800072c <__aeabi_ddiv>
 800609a:	4680      	mov	r8, r0
 800609c:	4689      	mov	r9, r1
 800609e:	112d      	asrs	r5, r5, #4
 80060a0:	d0db      	beq.n	800605a <_strtod_l+0x50a>
 80060a2:	2d1f      	cmp	r5, #31
 80060a4:	dd1e      	ble.n	80060e4 <_strtod_l+0x594>
 80060a6:	2600      	movs	r6, #0
 80060a8:	46b3      	mov	fp, r6
 80060aa:	960b      	str	r6, [sp, #44]	; 0x2c
 80060ac:	9608      	str	r6, [sp, #32]
 80060ae:	2322      	movs	r3, #34	; 0x22
 80060b0:	f04f 0800 	mov.w	r8, #0
 80060b4:	f04f 0900 	mov.w	r9, #0
 80060b8:	6023      	str	r3, [r4, #0]
 80060ba:	e78d      	b.n	8005fd8 <_strtod_l+0x488>
 80060bc:	08007ab3 	.word	0x08007ab3
 80060c0:	08007cdc 	.word	0x08007cdc
 80060c4:	08007aab 	.word	0x08007aab
 80060c8:	08007ae2 	.word	0x08007ae2
 80060cc:	7ff00000 	.word	0x7ff00000
 80060d0:	08007e6d 	.word	0x08007e6d
 80060d4:	08007bf0 	.word	0x08007bf0
 80060d8:	08007bc8 	.word	0x08007bc8
 80060dc:	7ca00000 	.word	0x7ca00000
 80060e0:	7fefffff 	.word	0x7fefffff
 80060e4:	f015 0310 	ands.w	r3, r5, #16
 80060e8:	bf18      	it	ne
 80060ea:	236a      	movne	r3, #106	; 0x6a
 80060ec:	4640      	mov	r0, r8
 80060ee:	9305      	str	r3, [sp, #20]
 80060f0:	4649      	mov	r1, r9
 80060f2:	2300      	movs	r3, #0
 80060f4:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 80063c0 <_strtod_l+0x870>
 80060f8:	07ea      	lsls	r2, r5, #31
 80060fa:	d504      	bpl.n	8006106 <_strtod_l+0x5b6>
 80060fc:	e9da 2300 	ldrd	r2, r3, [sl]
 8006100:	f7fa f9ea 	bl	80004d8 <__aeabi_dmul>
 8006104:	2301      	movs	r3, #1
 8006106:	106d      	asrs	r5, r5, #1
 8006108:	f10a 0a08 	add.w	sl, sl, #8
 800610c:	d1f4      	bne.n	80060f8 <_strtod_l+0x5a8>
 800610e:	b10b      	cbz	r3, 8006114 <_strtod_l+0x5c4>
 8006110:	4680      	mov	r8, r0
 8006112:	4689      	mov	r9, r1
 8006114:	9b05      	ldr	r3, [sp, #20]
 8006116:	b1bb      	cbz	r3, 8006148 <_strtod_l+0x5f8>
 8006118:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800611c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006120:	2b00      	cmp	r3, #0
 8006122:	4649      	mov	r1, r9
 8006124:	dd10      	ble.n	8006148 <_strtod_l+0x5f8>
 8006126:	2b1f      	cmp	r3, #31
 8006128:	f340 8128 	ble.w	800637c <_strtod_l+0x82c>
 800612c:	2b34      	cmp	r3, #52	; 0x34
 800612e:	bfd8      	it	le
 8006130:	f04f 33ff 	movle.w	r3, #4294967295
 8006134:	f04f 0800 	mov.w	r8, #0
 8006138:	bfcf      	iteee	gt
 800613a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800613e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006142:	4093      	lslle	r3, r2
 8006144:	ea03 0901 	andle.w	r9, r3, r1
 8006148:	2200      	movs	r2, #0
 800614a:	2300      	movs	r3, #0
 800614c:	4640      	mov	r0, r8
 800614e:	4649      	mov	r1, r9
 8006150:	f7fa fc2a 	bl	80009a8 <__aeabi_dcmpeq>
 8006154:	2800      	cmp	r0, #0
 8006156:	d1a6      	bne.n	80060a6 <_strtod_l+0x556>
 8006158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800615a:	465a      	mov	r2, fp
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	4620      	mov	r0, r4
 8006160:	4633      	mov	r3, r6
 8006162:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006164:	f7ff f8dc 	bl	8005320 <__s2b>
 8006168:	900b      	str	r0, [sp, #44]	; 0x2c
 800616a:	2800      	cmp	r0, #0
 800616c:	f43f af2a 	beq.w	8005fc4 <_strtod_l+0x474>
 8006170:	2600      	movs	r6, #0
 8006172:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006174:	9b08      	ldr	r3, [sp, #32]
 8006176:	2a00      	cmp	r2, #0
 8006178:	eba3 0307 	sub.w	r3, r3, r7
 800617c:	bfa8      	it	ge
 800617e:	2300      	movge	r3, #0
 8006180:	46b3      	mov	fp, r6
 8006182:	9312      	str	r3, [sp, #72]	; 0x48
 8006184:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006188:	9316      	str	r3, [sp, #88]	; 0x58
 800618a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800618c:	4620      	mov	r0, r4
 800618e:	6859      	ldr	r1, [r3, #4]
 8006190:	f7ff f81e 	bl	80051d0 <_Balloc>
 8006194:	9008      	str	r0, [sp, #32]
 8006196:	2800      	cmp	r0, #0
 8006198:	f43f af18 	beq.w	8005fcc <_strtod_l+0x47c>
 800619c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800619e:	300c      	adds	r0, #12
 80061a0:	691a      	ldr	r2, [r3, #16]
 80061a2:	f103 010c 	add.w	r1, r3, #12
 80061a6:	3202      	adds	r2, #2
 80061a8:	0092      	lsls	r2, r2, #2
 80061aa:	f000 fd89 	bl	8006cc0 <memcpy>
 80061ae:	ab1c      	add	r3, sp, #112	; 0x70
 80061b0:	9301      	str	r3, [sp, #4]
 80061b2:	ab1b      	add	r3, sp, #108	; 0x6c
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	4642      	mov	r2, r8
 80061b8:	464b      	mov	r3, r9
 80061ba:	4620      	mov	r0, r4
 80061bc:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80061c0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80061c4:	f7ff fbd8 	bl	8005978 <__d2b>
 80061c8:	901a      	str	r0, [sp, #104]	; 0x68
 80061ca:	2800      	cmp	r0, #0
 80061cc:	f43f aefe 	beq.w	8005fcc <_strtod_l+0x47c>
 80061d0:	2101      	movs	r1, #1
 80061d2:	4620      	mov	r0, r4
 80061d4:	f7ff f93c 	bl	8005450 <__i2b>
 80061d8:	4683      	mov	fp, r0
 80061da:	2800      	cmp	r0, #0
 80061dc:	f43f aef6 	beq.w	8005fcc <_strtod_l+0x47c>
 80061e0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80061e2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80061e4:	2f00      	cmp	r7, #0
 80061e6:	bfab      	itete	ge
 80061e8:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80061ea:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80061ec:	eb07 0a03 	addge.w	sl, r7, r3
 80061f0:	1bdd      	sublt	r5, r3, r7
 80061f2:	9b05      	ldr	r3, [sp, #20]
 80061f4:	bfa8      	it	ge
 80061f6:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80061f8:	eba7 0703 	sub.w	r7, r7, r3
 80061fc:	4417      	add	r7, r2
 80061fe:	4b71      	ldr	r3, [pc, #452]	; (80063c4 <_strtod_l+0x874>)
 8006200:	f107 37ff 	add.w	r7, r7, #4294967295
 8006204:	bfb8      	it	lt
 8006206:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800620a:	429f      	cmp	r7, r3
 800620c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006210:	f280 80c7 	bge.w	80063a2 <_strtod_l+0x852>
 8006214:	1bdb      	subs	r3, r3, r7
 8006216:	2b1f      	cmp	r3, #31
 8006218:	f04f 0101 	mov.w	r1, #1
 800621c:	eba2 0203 	sub.w	r2, r2, r3
 8006220:	f300 80b3 	bgt.w	800638a <_strtod_l+0x83a>
 8006224:	fa01 f303 	lsl.w	r3, r1, r3
 8006228:	9313      	str	r3, [sp, #76]	; 0x4c
 800622a:	2300      	movs	r3, #0
 800622c:	9310      	str	r3, [sp, #64]	; 0x40
 800622e:	eb0a 0702 	add.w	r7, sl, r2
 8006232:	9b05      	ldr	r3, [sp, #20]
 8006234:	45ba      	cmp	sl, r7
 8006236:	4415      	add	r5, r2
 8006238:	441d      	add	r5, r3
 800623a:	4653      	mov	r3, sl
 800623c:	bfa8      	it	ge
 800623e:	463b      	movge	r3, r7
 8006240:	42ab      	cmp	r3, r5
 8006242:	bfa8      	it	ge
 8006244:	462b      	movge	r3, r5
 8006246:	2b00      	cmp	r3, #0
 8006248:	bfc2      	ittt	gt
 800624a:	1aff      	subgt	r7, r7, r3
 800624c:	1aed      	subgt	r5, r5, r3
 800624e:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006252:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006254:	2b00      	cmp	r3, #0
 8006256:	dd17      	ble.n	8006288 <_strtod_l+0x738>
 8006258:	4659      	mov	r1, fp
 800625a:	461a      	mov	r2, r3
 800625c:	4620      	mov	r0, r4
 800625e:	f7ff f9b5 	bl	80055cc <__pow5mult>
 8006262:	4683      	mov	fp, r0
 8006264:	2800      	cmp	r0, #0
 8006266:	f43f aeb1 	beq.w	8005fcc <_strtod_l+0x47c>
 800626a:	4601      	mov	r1, r0
 800626c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800626e:	4620      	mov	r0, r4
 8006270:	f7ff f904 	bl	800547c <__multiply>
 8006274:	900a      	str	r0, [sp, #40]	; 0x28
 8006276:	2800      	cmp	r0, #0
 8006278:	f43f aea8 	beq.w	8005fcc <_strtod_l+0x47c>
 800627c:	4620      	mov	r0, r4
 800627e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006280:	f7fe ffe6 	bl	8005250 <_Bfree>
 8006284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006286:	931a      	str	r3, [sp, #104]	; 0x68
 8006288:	2f00      	cmp	r7, #0
 800628a:	f300 808f 	bgt.w	80063ac <_strtod_l+0x85c>
 800628e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006290:	2b00      	cmp	r3, #0
 8006292:	dd08      	ble.n	80062a6 <_strtod_l+0x756>
 8006294:	4620      	mov	r0, r4
 8006296:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006298:	9908      	ldr	r1, [sp, #32]
 800629a:	f7ff f997 	bl	80055cc <__pow5mult>
 800629e:	9008      	str	r0, [sp, #32]
 80062a0:	2800      	cmp	r0, #0
 80062a2:	f43f ae93 	beq.w	8005fcc <_strtod_l+0x47c>
 80062a6:	2d00      	cmp	r5, #0
 80062a8:	dd08      	ble.n	80062bc <_strtod_l+0x76c>
 80062aa:	462a      	mov	r2, r5
 80062ac:	4620      	mov	r0, r4
 80062ae:	9908      	ldr	r1, [sp, #32]
 80062b0:	f7ff f9e6 	bl	8005680 <__lshift>
 80062b4:	9008      	str	r0, [sp, #32]
 80062b6:	2800      	cmp	r0, #0
 80062b8:	f43f ae88 	beq.w	8005fcc <_strtod_l+0x47c>
 80062bc:	f1ba 0f00 	cmp.w	sl, #0
 80062c0:	dd08      	ble.n	80062d4 <_strtod_l+0x784>
 80062c2:	4659      	mov	r1, fp
 80062c4:	4652      	mov	r2, sl
 80062c6:	4620      	mov	r0, r4
 80062c8:	f7ff f9da 	bl	8005680 <__lshift>
 80062cc:	4683      	mov	fp, r0
 80062ce:	2800      	cmp	r0, #0
 80062d0:	f43f ae7c 	beq.w	8005fcc <_strtod_l+0x47c>
 80062d4:	4620      	mov	r0, r4
 80062d6:	9a08      	ldr	r2, [sp, #32]
 80062d8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80062da:	f7ff fa59 	bl	8005790 <__mdiff>
 80062de:	4606      	mov	r6, r0
 80062e0:	2800      	cmp	r0, #0
 80062e2:	f43f ae73 	beq.w	8005fcc <_strtod_l+0x47c>
 80062e6:	2500      	movs	r5, #0
 80062e8:	68c3      	ldr	r3, [r0, #12]
 80062ea:	4659      	mov	r1, fp
 80062ec:	60c5      	str	r5, [r0, #12]
 80062ee:	930a      	str	r3, [sp, #40]	; 0x28
 80062f0:	f7ff fa32 	bl	8005758 <__mcmp>
 80062f4:	42a8      	cmp	r0, r5
 80062f6:	da6b      	bge.n	80063d0 <_strtod_l+0x880>
 80062f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062fa:	ea53 0308 	orrs.w	r3, r3, r8
 80062fe:	f040 808f 	bne.w	8006420 <_strtod_l+0x8d0>
 8006302:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006306:	2b00      	cmp	r3, #0
 8006308:	f040 808a 	bne.w	8006420 <_strtod_l+0x8d0>
 800630c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006310:	0d1b      	lsrs	r3, r3, #20
 8006312:	051b      	lsls	r3, r3, #20
 8006314:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006318:	f240 8082 	bls.w	8006420 <_strtod_l+0x8d0>
 800631c:	6973      	ldr	r3, [r6, #20]
 800631e:	b913      	cbnz	r3, 8006326 <_strtod_l+0x7d6>
 8006320:	6933      	ldr	r3, [r6, #16]
 8006322:	2b01      	cmp	r3, #1
 8006324:	dd7c      	ble.n	8006420 <_strtod_l+0x8d0>
 8006326:	4631      	mov	r1, r6
 8006328:	2201      	movs	r2, #1
 800632a:	4620      	mov	r0, r4
 800632c:	f7ff f9a8 	bl	8005680 <__lshift>
 8006330:	4659      	mov	r1, fp
 8006332:	4606      	mov	r6, r0
 8006334:	f7ff fa10 	bl	8005758 <__mcmp>
 8006338:	2800      	cmp	r0, #0
 800633a:	dd71      	ble.n	8006420 <_strtod_l+0x8d0>
 800633c:	9905      	ldr	r1, [sp, #20]
 800633e:	464b      	mov	r3, r9
 8006340:	4a21      	ldr	r2, [pc, #132]	; (80063c8 <_strtod_l+0x878>)
 8006342:	2900      	cmp	r1, #0
 8006344:	f000 808d 	beq.w	8006462 <_strtod_l+0x912>
 8006348:	ea02 0109 	and.w	r1, r2, r9
 800634c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006350:	f300 8087 	bgt.w	8006462 <_strtod_l+0x912>
 8006354:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006358:	f77f aea9 	ble.w	80060ae <_strtod_l+0x55e>
 800635c:	4640      	mov	r0, r8
 800635e:	4649      	mov	r1, r9
 8006360:	4b1a      	ldr	r3, [pc, #104]	; (80063cc <_strtod_l+0x87c>)
 8006362:	2200      	movs	r2, #0
 8006364:	f7fa f8b8 	bl	80004d8 <__aeabi_dmul>
 8006368:	4b17      	ldr	r3, [pc, #92]	; (80063c8 <_strtod_l+0x878>)
 800636a:	4680      	mov	r8, r0
 800636c:	400b      	ands	r3, r1
 800636e:	4689      	mov	r9, r1
 8006370:	2b00      	cmp	r3, #0
 8006372:	f47f ae35 	bne.w	8005fe0 <_strtod_l+0x490>
 8006376:	2322      	movs	r3, #34	; 0x22
 8006378:	6023      	str	r3, [r4, #0]
 800637a:	e631      	b.n	8005fe0 <_strtod_l+0x490>
 800637c:	f04f 32ff 	mov.w	r2, #4294967295
 8006380:	fa02 f303 	lsl.w	r3, r2, r3
 8006384:	ea03 0808 	and.w	r8, r3, r8
 8006388:	e6de      	b.n	8006148 <_strtod_l+0x5f8>
 800638a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800638e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8006392:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8006396:	37e2      	adds	r7, #226	; 0xe2
 8006398:	fa01 f307 	lsl.w	r3, r1, r7
 800639c:	9310      	str	r3, [sp, #64]	; 0x40
 800639e:	9113      	str	r1, [sp, #76]	; 0x4c
 80063a0:	e745      	b.n	800622e <_strtod_l+0x6de>
 80063a2:	2300      	movs	r3, #0
 80063a4:	9310      	str	r3, [sp, #64]	; 0x40
 80063a6:	2301      	movs	r3, #1
 80063a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80063aa:	e740      	b.n	800622e <_strtod_l+0x6de>
 80063ac:	463a      	mov	r2, r7
 80063ae:	4620      	mov	r0, r4
 80063b0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80063b2:	f7ff f965 	bl	8005680 <__lshift>
 80063b6:	901a      	str	r0, [sp, #104]	; 0x68
 80063b8:	2800      	cmp	r0, #0
 80063ba:	f47f af68 	bne.w	800628e <_strtod_l+0x73e>
 80063be:	e605      	b.n	8005fcc <_strtod_l+0x47c>
 80063c0:	08007cf0 	.word	0x08007cf0
 80063c4:	fffffc02 	.word	0xfffffc02
 80063c8:	7ff00000 	.word	0x7ff00000
 80063cc:	39500000 	.word	0x39500000
 80063d0:	46ca      	mov	sl, r9
 80063d2:	d165      	bne.n	80064a0 <_strtod_l+0x950>
 80063d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80063da:	b352      	cbz	r2, 8006432 <_strtod_l+0x8e2>
 80063dc:	4a9e      	ldr	r2, [pc, #632]	; (8006658 <_strtod_l+0xb08>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d12a      	bne.n	8006438 <_strtod_l+0x8e8>
 80063e2:	9b05      	ldr	r3, [sp, #20]
 80063e4:	4641      	mov	r1, r8
 80063e6:	b1fb      	cbz	r3, 8006428 <_strtod_l+0x8d8>
 80063e8:	4b9c      	ldr	r3, [pc, #624]	; (800665c <_strtod_l+0xb0c>)
 80063ea:	f04f 32ff 	mov.w	r2, #4294967295
 80063ee:	ea09 0303 	and.w	r3, r9, r3
 80063f2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80063f6:	d81a      	bhi.n	800642e <_strtod_l+0x8de>
 80063f8:	0d1b      	lsrs	r3, r3, #20
 80063fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80063fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006402:	4299      	cmp	r1, r3
 8006404:	d118      	bne.n	8006438 <_strtod_l+0x8e8>
 8006406:	4b96      	ldr	r3, [pc, #600]	; (8006660 <_strtod_l+0xb10>)
 8006408:	459a      	cmp	sl, r3
 800640a:	d102      	bne.n	8006412 <_strtod_l+0x8c2>
 800640c:	3101      	adds	r1, #1
 800640e:	f43f addd 	beq.w	8005fcc <_strtod_l+0x47c>
 8006412:	f04f 0800 	mov.w	r8, #0
 8006416:	4b91      	ldr	r3, [pc, #580]	; (800665c <_strtod_l+0xb0c>)
 8006418:	ea0a 0303 	and.w	r3, sl, r3
 800641c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8006420:	9b05      	ldr	r3, [sp, #20]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d19a      	bne.n	800635c <_strtod_l+0x80c>
 8006426:	e5db      	b.n	8005fe0 <_strtod_l+0x490>
 8006428:	f04f 33ff 	mov.w	r3, #4294967295
 800642c:	e7e9      	b.n	8006402 <_strtod_l+0x8b2>
 800642e:	4613      	mov	r3, r2
 8006430:	e7e7      	b.n	8006402 <_strtod_l+0x8b2>
 8006432:	ea53 0308 	orrs.w	r3, r3, r8
 8006436:	d081      	beq.n	800633c <_strtod_l+0x7ec>
 8006438:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800643a:	b1e3      	cbz	r3, 8006476 <_strtod_l+0x926>
 800643c:	ea13 0f0a 	tst.w	r3, sl
 8006440:	d0ee      	beq.n	8006420 <_strtod_l+0x8d0>
 8006442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006444:	4640      	mov	r0, r8
 8006446:	4649      	mov	r1, r9
 8006448:	9a05      	ldr	r2, [sp, #20]
 800644a:	b1c3      	cbz	r3, 800647e <_strtod_l+0x92e>
 800644c:	f7ff fb5c 	bl	8005b08 <sulp>
 8006450:	4602      	mov	r2, r0
 8006452:	460b      	mov	r3, r1
 8006454:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006456:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006458:	f7f9 fe88 	bl	800016c <__adddf3>
 800645c:	4680      	mov	r8, r0
 800645e:	4689      	mov	r9, r1
 8006460:	e7de      	b.n	8006420 <_strtod_l+0x8d0>
 8006462:	4013      	ands	r3, r2
 8006464:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006468:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800646c:	f04f 38ff 	mov.w	r8, #4294967295
 8006470:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006474:	e7d4      	b.n	8006420 <_strtod_l+0x8d0>
 8006476:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006478:	ea13 0f08 	tst.w	r3, r8
 800647c:	e7e0      	b.n	8006440 <_strtod_l+0x8f0>
 800647e:	f7ff fb43 	bl	8005b08 <sulp>
 8006482:	4602      	mov	r2, r0
 8006484:	460b      	mov	r3, r1
 8006486:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006488:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800648a:	f7f9 fe6d 	bl	8000168 <__aeabi_dsub>
 800648e:	2200      	movs	r2, #0
 8006490:	2300      	movs	r3, #0
 8006492:	4680      	mov	r8, r0
 8006494:	4689      	mov	r9, r1
 8006496:	f7fa fa87 	bl	80009a8 <__aeabi_dcmpeq>
 800649a:	2800      	cmp	r0, #0
 800649c:	d0c0      	beq.n	8006420 <_strtod_l+0x8d0>
 800649e:	e606      	b.n	80060ae <_strtod_l+0x55e>
 80064a0:	4659      	mov	r1, fp
 80064a2:	4630      	mov	r0, r6
 80064a4:	f7ff fabe 	bl	8005a24 <__ratio>
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80064b0:	2200      	movs	r2, #0
 80064b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80064b6:	f7fa fa8b 	bl	80009d0 <__aeabi_dcmple>
 80064ba:	2800      	cmp	r0, #0
 80064bc:	d06f      	beq.n	800659e <_strtod_l+0xa4e>
 80064be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d17c      	bne.n	80065be <_strtod_l+0xa6e>
 80064c4:	f1b8 0f00 	cmp.w	r8, #0
 80064c8:	d159      	bne.n	800657e <_strtod_l+0xa2e>
 80064ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d17b      	bne.n	80065ca <_strtod_l+0xa7a>
 80064d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80064d6:	2200      	movs	r2, #0
 80064d8:	4b62      	ldr	r3, [pc, #392]	; (8006664 <_strtod_l+0xb14>)
 80064da:	f7fa fa6f 	bl	80009bc <__aeabi_dcmplt>
 80064de:	2800      	cmp	r0, #0
 80064e0:	d15a      	bne.n	8006598 <_strtod_l+0xa48>
 80064e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80064e6:	2200      	movs	r2, #0
 80064e8:	4b5f      	ldr	r3, [pc, #380]	; (8006668 <_strtod_l+0xb18>)
 80064ea:	f7f9 fff5 	bl	80004d8 <__aeabi_dmul>
 80064ee:	4605      	mov	r5, r0
 80064f0:	460f      	mov	r7, r1
 80064f2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80064f6:	9506      	str	r5, [sp, #24]
 80064f8:	9307      	str	r3, [sp, #28]
 80064fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80064fe:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006502:	4b56      	ldr	r3, [pc, #344]	; (800665c <_strtod_l+0xb0c>)
 8006504:	4a55      	ldr	r2, [pc, #340]	; (800665c <_strtod_l+0xb0c>)
 8006506:	ea0a 0303 	and.w	r3, sl, r3
 800650a:	9313      	str	r3, [sp, #76]	; 0x4c
 800650c:	4b57      	ldr	r3, [pc, #348]	; (800666c <_strtod_l+0xb1c>)
 800650e:	ea0a 0202 	and.w	r2, sl, r2
 8006512:	429a      	cmp	r2, r3
 8006514:	f040 80b0 	bne.w	8006678 <_strtod_l+0xb28>
 8006518:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800651c:	4640      	mov	r0, r8
 800651e:	4649      	mov	r1, r9
 8006520:	f7ff f9c2 	bl	80058a8 <__ulp>
 8006524:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006528:	f7f9 ffd6 	bl	80004d8 <__aeabi_dmul>
 800652c:	4642      	mov	r2, r8
 800652e:	464b      	mov	r3, r9
 8006530:	f7f9 fe1c 	bl	800016c <__adddf3>
 8006534:	f8df a124 	ldr.w	sl, [pc, #292]	; 800665c <_strtod_l+0xb0c>
 8006538:	4a4d      	ldr	r2, [pc, #308]	; (8006670 <_strtod_l+0xb20>)
 800653a:	ea01 0a0a 	and.w	sl, r1, sl
 800653e:	4592      	cmp	sl, r2
 8006540:	4680      	mov	r8, r0
 8006542:	d948      	bls.n	80065d6 <_strtod_l+0xa86>
 8006544:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006546:	4b46      	ldr	r3, [pc, #280]	; (8006660 <_strtod_l+0xb10>)
 8006548:	429a      	cmp	r2, r3
 800654a:	d103      	bne.n	8006554 <_strtod_l+0xa04>
 800654c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800654e:	3301      	adds	r3, #1
 8006550:	f43f ad3c 	beq.w	8005fcc <_strtod_l+0x47c>
 8006554:	f04f 38ff 	mov.w	r8, #4294967295
 8006558:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8006660 <_strtod_l+0xb10>
 800655c:	4620      	mov	r0, r4
 800655e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006560:	f7fe fe76 	bl	8005250 <_Bfree>
 8006564:	4620      	mov	r0, r4
 8006566:	9908      	ldr	r1, [sp, #32]
 8006568:	f7fe fe72 	bl	8005250 <_Bfree>
 800656c:	4659      	mov	r1, fp
 800656e:	4620      	mov	r0, r4
 8006570:	f7fe fe6e 	bl	8005250 <_Bfree>
 8006574:	4631      	mov	r1, r6
 8006576:	4620      	mov	r0, r4
 8006578:	f7fe fe6a 	bl	8005250 <_Bfree>
 800657c:	e605      	b.n	800618a <_strtod_l+0x63a>
 800657e:	f1b8 0f01 	cmp.w	r8, #1
 8006582:	d103      	bne.n	800658c <_strtod_l+0xa3c>
 8006584:	f1b9 0f00 	cmp.w	r9, #0
 8006588:	f43f ad91 	beq.w	80060ae <_strtod_l+0x55e>
 800658c:	2200      	movs	r2, #0
 800658e:	4b39      	ldr	r3, [pc, #228]	; (8006674 <_strtod_l+0xb24>)
 8006590:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006592:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006596:	e016      	b.n	80065c6 <_strtod_l+0xa76>
 8006598:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800659a:	4f33      	ldr	r7, [pc, #204]	; (8006668 <_strtod_l+0xb18>)
 800659c:	e7a9      	b.n	80064f2 <_strtod_l+0x9a2>
 800659e:	4b32      	ldr	r3, [pc, #200]	; (8006668 <_strtod_l+0xb18>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065a6:	f7f9 ff97 	bl	80004d8 <__aeabi_dmul>
 80065aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065ac:	4605      	mov	r5, r0
 80065ae:	460f      	mov	r7, r1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d09e      	beq.n	80064f2 <_strtod_l+0x9a2>
 80065b4:	4602      	mov	r2, r0
 80065b6:	460b      	mov	r3, r1
 80065b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80065bc:	e79d      	b.n	80064fa <_strtod_l+0x9aa>
 80065be:	2200      	movs	r2, #0
 80065c0:	4b28      	ldr	r3, [pc, #160]	; (8006664 <_strtod_l+0xb14>)
 80065c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80065c6:	4f27      	ldr	r7, [pc, #156]	; (8006664 <_strtod_l+0xb14>)
 80065c8:	e797      	b.n	80064fa <_strtod_l+0x9aa>
 80065ca:	2200      	movs	r2, #0
 80065cc:	4b29      	ldr	r3, [pc, #164]	; (8006674 <_strtod_l+0xb24>)
 80065ce:	4645      	mov	r5, r8
 80065d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80065d4:	e7f7      	b.n	80065c6 <_strtod_l+0xa76>
 80065d6:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80065da:	9b05      	ldr	r3, [sp, #20]
 80065dc:	46ca      	mov	sl, r9
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1bc      	bne.n	800655c <_strtod_l+0xa0c>
 80065e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80065e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80065e8:	0d1b      	lsrs	r3, r3, #20
 80065ea:	051b      	lsls	r3, r3, #20
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d1b5      	bne.n	800655c <_strtod_l+0xa0c>
 80065f0:	4628      	mov	r0, r5
 80065f2:	4639      	mov	r1, r7
 80065f4:	f7fa fab8 	bl	8000b68 <__aeabi_d2lz>
 80065f8:	f7f9 ff40 	bl	800047c <__aeabi_l2d>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	4628      	mov	r0, r5
 8006602:	4639      	mov	r1, r7
 8006604:	f7f9 fdb0 	bl	8000168 <__aeabi_dsub>
 8006608:	460b      	mov	r3, r1
 800660a:	4602      	mov	r2, r0
 800660c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8006610:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006616:	ea4a 0a08 	orr.w	sl, sl, r8
 800661a:	ea5a 0a03 	orrs.w	sl, sl, r3
 800661e:	d06c      	beq.n	80066fa <_strtod_l+0xbaa>
 8006620:	a309      	add	r3, pc, #36	; (adr r3, 8006648 <_strtod_l+0xaf8>)
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	f7fa f9c9 	bl	80009bc <__aeabi_dcmplt>
 800662a:	2800      	cmp	r0, #0
 800662c:	f47f acd8 	bne.w	8005fe0 <_strtod_l+0x490>
 8006630:	a307      	add	r3, pc, #28	; (adr r3, 8006650 <_strtod_l+0xb00>)
 8006632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006636:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800663a:	f7fa f9dd 	bl	80009f8 <__aeabi_dcmpgt>
 800663e:	2800      	cmp	r0, #0
 8006640:	d08c      	beq.n	800655c <_strtod_l+0xa0c>
 8006642:	e4cd      	b.n	8005fe0 <_strtod_l+0x490>
 8006644:	f3af 8000 	nop.w
 8006648:	94a03595 	.word	0x94a03595
 800664c:	3fdfffff 	.word	0x3fdfffff
 8006650:	35afe535 	.word	0x35afe535
 8006654:	3fe00000 	.word	0x3fe00000
 8006658:	000fffff 	.word	0x000fffff
 800665c:	7ff00000 	.word	0x7ff00000
 8006660:	7fefffff 	.word	0x7fefffff
 8006664:	3ff00000 	.word	0x3ff00000
 8006668:	3fe00000 	.word	0x3fe00000
 800666c:	7fe00000 	.word	0x7fe00000
 8006670:	7c9fffff 	.word	0x7c9fffff
 8006674:	bff00000 	.word	0xbff00000
 8006678:	9b05      	ldr	r3, [sp, #20]
 800667a:	b333      	cbz	r3, 80066ca <_strtod_l+0xb7a>
 800667c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800667e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006682:	d822      	bhi.n	80066ca <_strtod_l+0xb7a>
 8006684:	a328      	add	r3, pc, #160	; (adr r3, 8006728 <_strtod_l+0xbd8>)
 8006686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668a:	4628      	mov	r0, r5
 800668c:	4639      	mov	r1, r7
 800668e:	f7fa f99f 	bl	80009d0 <__aeabi_dcmple>
 8006692:	b1a0      	cbz	r0, 80066be <_strtod_l+0xb6e>
 8006694:	4639      	mov	r1, r7
 8006696:	4628      	mov	r0, r5
 8006698:	f7fa f9f6 	bl	8000a88 <__aeabi_d2uiz>
 800669c:	2801      	cmp	r0, #1
 800669e:	bf38      	it	cc
 80066a0:	2001      	movcc	r0, #1
 80066a2:	f7f9 fe9f 	bl	80003e4 <__aeabi_ui2d>
 80066a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066a8:	4605      	mov	r5, r0
 80066aa:	460f      	mov	r7, r1
 80066ac:	bb03      	cbnz	r3, 80066f0 <_strtod_l+0xba0>
 80066ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066b2:	9014      	str	r0, [sp, #80]	; 0x50
 80066b4:	9315      	str	r3, [sp, #84]	; 0x54
 80066b6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80066ba:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80066be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80066c2:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80066c6:	1a9b      	subs	r3, r3, r2
 80066c8:	9311      	str	r3, [sp, #68]	; 0x44
 80066ca:	980c      	ldr	r0, [sp, #48]	; 0x30
 80066cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80066ce:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80066d2:	f7ff f8e9 	bl	80058a8 <__ulp>
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	4640      	mov	r0, r8
 80066dc:	4649      	mov	r1, r9
 80066de:	f7f9 fefb 	bl	80004d8 <__aeabi_dmul>
 80066e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066e6:	f7f9 fd41 	bl	800016c <__adddf3>
 80066ea:	4680      	mov	r8, r0
 80066ec:	4689      	mov	r9, r1
 80066ee:	e774      	b.n	80065da <_strtod_l+0xa8a>
 80066f0:	4602      	mov	r2, r0
 80066f2:	460b      	mov	r3, r1
 80066f4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80066f8:	e7dd      	b.n	80066b6 <_strtod_l+0xb66>
 80066fa:	a30d      	add	r3, pc, #52	; (adr r3, 8006730 <_strtod_l+0xbe0>)
 80066fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006700:	f7fa f95c 	bl	80009bc <__aeabi_dcmplt>
 8006704:	e79b      	b.n	800663e <_strtod_l+0xaee>
 8006706:	2300      	movs	r3, #0
 8006708:	930e      	str	r3, [sp, #56]	; 0x38
 800670a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800670c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800670e:	6013      	str	r3, [r2, #0]
 8006710:	f7ff ba5b 	b.w	8005bca <_strtod_l+0x7a>
 8006714:	2a65      	cmp	r2, #101	; 0x65
 8006716:	f43f ab52 	beq.w	8005dbe <_strtod_l+0x26e>
 800671a:	2a45      	cmp	r2, #69	; 0x45
 800671c:	f43f ab4f 	beq.w	8005dbe <_strtod_l+0x26e>
 8006720:	2301      	movs	r3, #1
 8006722:	f7ff bb87 	b.w	8005e34 <_strtod_l+0x2e4>
 8006726:	bf00      	nop
 8006728:	ffc00000 	.word	0xffc00000
 800672c:	41dfffff 	.word	0x41dfffff
 8006730:	94a03595 	.word	0x94a03595
 8006734:	3fcfffff 	.word	0x3fcfffff

08006738 <_strtod_r>:
 8006738:	4b01      	ldr	r3, [pc, #4]	; (8006740 <_strtod_r+0x8>)
 800673a:	f7ff ba09 	b.w	8005b50 <_strtod_l>
 800673e:	bf00      	nop
 8006740:	20000068 	.word	0x20000068

08006744 <_strtol_l.constprop.0>:
 8006744:	2b01      	cmp	r3, #1
 8006746:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800674a:	4686      	mov	lr, r0
 800674c:	4690      	mov	r8, r2
 800674e:	d001      	beq.n	8006754 <_strtol_l.constprop.0+0x10>
 8006750:	2b24      	cmp	r3, #36	; 0x24
 8006752:	d906      	bls.n	8006762 <_strtol_l.constprop.0+0x1e>
 8006754:	f7fd fd92 	bl	800427c <__errno>
 8006758:	2316      	movs	r3, #22
 800675a:	6003      	str	r3, [r0, #0]
 800675c:	2000      	movs	r0, #0
 800675e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006762:	460d      	mov	r5, r1
 8006764:	4835      	ldr	r0, [pc, #212]	; (800683c <_strtol_l.constprop.0+0xf8>)
 8006766:	462a      	mov	r2, r5
 8006768:	f815 4b01 	ldrb.w	r4, [r5], #1
 800676c:	5d06      	ldrb	r6, [r0, r4]
 800676e:	f016 0608 	ands.w	r6, r6, #8
 8006772:	d1f8      	bne.n	8006766 <_strtol_l.constprop.0+0x22>
 8006774:	2c2d      	cmp	r4, #45	; 0x2d
 8006776:	d12e      	bne.n	80067d6 <_strtol_l.constprop.0+0x92>
 8006778:	2601      	movs	r6, #1
 800677a:	782c      	ldrb	r4, [r5, #0]
 800677c:	1c95      	adds	r5, r2, #2
 800677e:	2b00      	cmp	r3, #0
 8006780:	d057      	beq.n	8006832 <_strtol_l.constprop.0+0xee>
 8006782:	2b10      	cmp	r3, #16
 8006784:	d109      	bne.n	800679a <_strtol_l.constprop.0+0x56>
 8006786:	2c30      	cmp	r4, #48	; 0x30
 8006788:	d107      	bne.n	800679a <_strtol_l.constprop.0+0x56>
 800678a:	782a      	ldrb	r2, [r5, #0]
 800678c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006790:	2a58      	cmp	r2, #88	; 0x58
 8006792:	d149      	bne.n	8006828 <_strtol_l.constprop.0+0xe4>
 8006794:	2310      	movs	r3, #16
 8006796:	786c      	ldrb	r4, [r5, #1]
 8006798:	3502      	adds	r5, #2
 800679a:	2200      	movs	r2, #0
 800679c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80067a0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80067a4:	fbbc f9f3 	udiv	r9, ip, r3
 80067a8:	4610      	mov	r0, r2
 80067aa:	fb03 ca19 	mls	sl, r3, r9, ip
 80067ae:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80067b2:	2f09      	cmp	r7, #9
 80067b4:	d814      	bhi.n	80067e0 <_strtol_l.constprop.0+0x9c>
 80067b6:	463c      	mov	r4, r7
 80067b8:	42a3      	cmp	r3, r4
 80067ba:	dd20      	ble.n	80067fe <_strtol_l.constprop.0+0xba>
 80067bc:	1c57      	adds	r7, r2, #1
 80067be:	d007      	beq.n	80067d0 <_strtol_l.constprop.0+0x8c>
 80067c0:	4581      	cmp	r9, r0
 80067c2:	d319      	bcc.n	80067f8 <_strtol_l.constprop.0+0xb4>
 80067c4:	d101      	bne.n	80067ca <_strtol_l.constprop.0+0x86>
 80067c6:	45a2      	cmp	sl, r4
 80067c8:	db16      	blt.n	80067f8 <_strtol_l.constprop.0+0xb4>
 80067ca:	2201      	movs	r2, #1
 80067cc:	fb00 4003 	mla	r0, r0, r3, r4
 80067d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80067d4:	e7eb      	b.n	80067ae <_strtol_l.constprop.0+0x6a>
 80067d6:	2c2b      	cmp	r4, #43	; 0x2b
 80067d8:	bf04      	itt	eq
 80067da:	782c      	ldrbeq	r4, [r5, #0]
 80067dc:	1c95      	addeq	r5, r2, #2
 80067de:	e7ce      	b.n	800677e <_strtol_l.constprop.0+0x3a>
 80067e0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80067e4:	2f19      	cmp	r7, #25
 80067e6:	d801      	bhi.n	80067ec <_strtol_l.constprop.0+0xa8>
 80067e8:	3c37      	subs	r4, #55	; 0x37
 80067ea:	e7e5      	b.n	80067b8 <_strtol_l.constprop.0+0x74>
 80067ec:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80067f0:	2f19      	cmp	r7, #25
 80067f2:	d804      	bhi.n	80067fe <_strtol_l.constprop.0+0xba>
 80067f4:	3c57      	subs	r4, #87	; 0x57
 80067f6:	e7df      	b.n	80067b8 <_strtol_l.constprop.0+0x74>
 80067f8:	f04f 32ff 	mov.w	r2, #4294967295
 80067fc:	e7e8      	b.n	80067d0 <_strtol_l.constprop.0+0x8c>
 80067fe:	1c53      	adds	r3, r2, #1
 8006800:	d108      	bne.n	8006814 <_strtol_l.constprop.0+0xd0>
 8006802:	2322      	movs	r3, #34	; 0x22
 8006804:	4660      	mov	r0, ip
 8006806:	f8ce 3000 	str.w	r3, [lr]
 800680a:	f1b8 0f00 	cmp.w	r8, #0
 800680e:	d0a6      	beq.n	800675e <_strtol_l.constprop.0+0x1a>
 8006810:	1e69      	subs	r1, r5, #1
 8006812:	e006      	b.n	8006822 <_strtol_l.constprop.0+0xde>
 8006814:	b106      	cbz	r6, 8006818 <_strtol_l.constprop.0+0xd4>
 8006816:	4240      	negs	r0, r0
 8006818:	f1b8 0f00 	cmp.w	r8, #0
 800681c:	d09f      	beq.n	800675e <_strtol_l.constprop.0+0x1a>
 800681e:	2a00      	cmp	r2, #0
 8006820:	d1f6      	bne.n	8006810 <_strtol_l.constprop.0+0xcc>
 8006822:	f8c8 1000 	str.w	r1, [r8]
 8006826:	e79a      	b.n	800675e <_strtol_l.constprop.0+0x1a>
 8006828:	2430      	movs	r4, #48	; 0x30
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1b5      	bne.n	800679a <_strtol_l.constprop.0+0x56>
 800682e:	2308      	movs	r3, #8
 8006830:	e7b3      	b.n	800679a <_strtol_l.constprop.0+0x56>
 8006832:	2c30      	cmp	r4, #48	; 0x30
 8006834:	d0a9      	beq.n	800678a <_strtol_l.constprop.0+0x46>
 8006836:	230a      	movs	r3, #10
 8006838:	e7af      	b.n	800679a <_strtol_l.constprop.0+0x56>
 800683a:	bf00      	nop
 800683c:	08007d19 	.word	0x08007d19

08006840 <_strtol_r>:
 8006840:	f7ff bf80 	b.w	8006744 <_strtol_l.constprop.0>

08006844 <__ssputs_r>:
 8006844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006848:	461f      	mov	r7, r3
 800684a:	688e      	ldr	r6, [r1, #8]
 800684c:	4682      	mov	sl, r0
 800684e:	42be      	cmp	r6, r7
 8006850:	460c      	mov	r4, r1
 8006852:	4690      	mov	r8, r2
 8006854:	680b      	ldr	r3, [r1, #0]
 8006856:	d82c      	bhi.n	80068b2 <__ssputs_r+0x6e>
 8006858:	898a      	ldrh	r2, [r1, #12]
 800685a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800685e:	d026      	beq.n	80068ae <__ssputs_r+0x6a>
 8006860:	6965      	ldr	r5, [r4, #20]
 8006862:	6909      	ldr	r1, [r1, #16]
 8006864:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006868:	eba3 0901 	sub.w	r9, r3, r1
 800686c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006870:	1c7b      	adds	r3, r7, #1
 8006872:	444b      	add	r3, r9
 8006874:	106d      	asrs	r5, r5, #1
 8006876:	429d      	cmp	r5, r3
 8006878:	bf38      	it	cc
 800687a:	461d      	movcc	r5, r3
 800687c:	0553      	lsls	r3, r2, #21
 800687e:	d527      	bpl.n	80068d0 <__ssputs_r+0x8c>
 8006880:	4629      	mov	r1, r5
 8006882:	f7fe fc19 	bl	80050b8 <_malloc_r>
 8006886:	4606      	mov	r6, r0
 8006888:	b360      	cbz	r0, 80068e4 <__ssputs_r+0xa0>
 800688a:	464a      	mov	r2, r9
 800688c:	6921      	ldr	r1, [r4, #16]
 800688e:	f000 fa17 	bl	8006cc0 <memcpy>
 8006892:	89a3      	ldrh	r3, [r4, #12]
 8006894:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800689c:	81a3      	strh	r3, [r4, #12]
 800689e:	6126      	str	r6, [r4, #16]
 80068a0:	444e      	add	r6, r9
 80068a2:	6026      	str	r6, [r4, #0]
 80068a4:	463e      	mov	r6, r7
 80068a6:	6165      	str	r5, [r4, #20]
 80068a8:	eba5 0509 	sub.w	r5, r5, r9
 80068ac:	60a5      	str	r5, [r4, #8]
 80068ae:	42be      	cmp	r6, r7
 80068b0:	d900      	bls.n	80068b4 <__ssputs_r+0x70>
 80068b2:	463e      	mov	r6, r7
 80068b4:	4632      	mov	r2, r6
 80068b6:	4641      	mov	r1, r8
 80068b8:	6820      	ldr	r0, [r4, #0]
 80068ba:	f000 f9c5 	bl	8006c48 <memmove>
 80068be:	2000      	movs	r0, #0
 80068c0:	68a3      	ldr	r3, [r4, #8]
 80068c2:	1b9b      	subs	r3, r3, r6
 80068c4:	60a3      	str	r3, [r4, #8]
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	4433      	add	r3, r6
 80068ca:	6023      	str	r3, [r4, #0]
 80068cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068d0:	462a      	mov	r2, r5
 80068d2:	f000 fda6 	bl	8007422 <_realloc_r>
 80068d6:	4606      	mov	r6, r0
 80068d8:	2800      	cmp	r0, #0
 80068da:	d1e0      	bne.n	800689e <__ssputs_r+0x5a>
 80068dc:	4650      	mov	r0, sl
 80068de:	6921      	ldr	r1, [r4, #16]
 80068e0:	f7fe fb7a 	bl	8004fd8 <_free_r>
 80068e4:	230c      	movs	r3, #12
 80068e6:	f8ca 3000 	str.w	r3, [sl]
 80068ea:	89a3      	ldrh	r3, [r4, #12]
 80068ec:	f04f 30ff 	mov.w	r0, #4294967295
 80068f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068f4:	81a3      	strh	r3, [r4, #12]
 80068f6:	e7e9      	b.n	80068cc <__ssputs_r+0x88>

080068f8 <_svfiprintf_r>:
 80068f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068fc:	4698      	mov	r8, r3
 80068fe:	898b      	ldrh	r3, [r1, #12]
 8006900:	4607      	mov	r7, r0
 8006902:	061b      	lsls	r3, r3, #24
 8006904:	460d      	mov	r5, r1
 8006906:	4614      	mov	r4, r2
 8006908:	b09d      	sub	sp, #116	; 0x74
 800690a:	d50e      	bpl.n	800692a <_svfiprintf_r+0x32>
 800690c:	690b      	ldr	r3, [r1, #16]
 800690e:	b963      	cbnz	r3, 800692a <_svfiprintf_r+0x32>
 8006910:	2140      	movs	r1, #64	; 0x40
 8006912:	f7fe fbd1 	bl	80050b8 <_malloc_r>
 8006916:	6028      	str	r0, [r5, #0]
 8006918:	6128      	str	r0, [r5, #16]
 800691a:	b920      	cbnz	r0, 8006926 <_svfiprintf_r+0x2e>
 800691c:	230c      	movs	r3, #12
 800691e:	603b      	str	r3, [r7, #0]
 8006920:	f04f 30ff 	mov.w	r0, #4294967295
 8006924:	e0d0      	b.n	8006ac8 <_svfiprintf_r+0x1d0>
 8006926:	2340      	movs	r3, #64	; 0x40
 8006928:	616b      	str	r3, [r5, #20]
 800692a:	2300      	movs	r3, #0
 800692c:	9309      	str	r3, [sp, #36]	; 0x24
 800692e:	2320      	movs	r3, #32
 8006930:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006934:	2330      	movs	r3, #48	; 0x30
 8006936:	f04f 0901 	mov.w	r9, #1
 800693a:	f8cd 800c 	str.w	r8, [sp, #12]
 800693e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006ae0 <_svfiprintf_r+0x1e8>
 8006942:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006946:	4623      	mov	r3, r4
 8006948:	469a      	mov	sl, r3
 800694a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800694e:	b10a      	cbz	r2, 8006954 <_svfiprintf_r+0x5c>
 8006950:	2a25      	cmp	r2, #37	; 0x25
 8006952:	d1f9      	bne.n	8006948 <_svfiprintf_r+0x50>
 8006954:	ebba 0b04 	subs.w	fp, sl, r4
 8006958:	d00b      	beq.n	8006972 <_svfiprintf_r+0x7a>
 800695a:	465b      	mov	r3, fp
 800695c:	4622      	mov	r2, r4
 800695e:	4629      	mov	r1, r5
 8006960:	4638      	mov	r0, r7
 8006962:	f7ff ff6f 	bl	8006844 <__ssputs_r>
 8006966:	3001      	adds	r0, #1
 8006968:	f000 80a9 	beq.w	8006abe <_svfiprintf_r+0x1c6>
 800696c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800696e:	445a      	add	r2, fp
 8006970:	9209      	str	r2, [sp, #36]	; 0x24
 8006972:	f89a 3000 	ldrb.w	r3, [sl]
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 80a1 	beq.w	8006abe <_svfiprintf_r+0x1c6>
 800697c:	2300      	movs	r3, #0
 800697e:	f04f 32ff 	mov.w	r2, #4294967295
 8006982:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006986:	f10a 0a01 	add.w	sl, sl, #1
 800698a:	9304      	str	r3, [sp, #16]
 800698c:	9307      	str	r3, [sp, #28]
 800698e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006992:	931a      	str	r3, [sp, #104]	; 0x68
 8006994:	4654      	mov	r4, sl
 8006996:	2205      	movs	r2, #5
 8006998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800699c:	4850      	ldr	r0, [pc, #320]	; (8006ae0 <_svfiprintf_r+0x1e8>)
 800699e:	f7fd fc99 	bl	80042d4 <memchr>
 80069a2:	9a04      	ldr	r2, [sp, #16]
 80069a4:	b9d8      	cbnz	r0, 80069de <_svfiprintf_r+0xe6>
 80069a6:	06d0      	lsls	r0, r2, #27
 80069a8:	bf44      	itt	mi
 80069aa:	2320      	movmi	r3, #32
 80069ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069b0:	0711      	lsls	r1, r2, #28
 80069b2:	bf44      	itt	mi
 80069b4:	232b      	movmi	r3, #43	; 0x2b
 80069b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069ba:	f89a 3000 	ldrb.w	r3, [sl]
 80069be:	2b2a      	cmp	r3, #42	; 0x2a
 80069c0:	d015      	beq.n	80069ee <_svfiprintf_r+0xf6>
 80069c2:	4654      	mov	r4, sl
 80069c4:	2000      	movs	r0, #0
 80069c6:	f04f 0c0a 	mov.w	ip, #10
 80069ca:	9a07      	ldr	r2, [sp, #28]
 80069cc:	4621      	mov	r1, r4
 80069ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069d2:	3b30      	subs	r3, #48	; 0x30
 80069d4:	2b09      	cmp	r3, #9
 80069d6:	d94d      	bls.n	8006a74 <_svfiprintf_r+0x17c>
 80069d8:	b1b0      	cbz	r0, 8006a08 <_svfiprintf_r+0x110>
 80069da:	9207      	str	r2, [sp, #28]
 80069dc:	e014      	b.n	8006a08 <_svfiprintf_r+0x110>
 80069de:	eba0 0308 	sub.w	r3, r0, r8
 80069e2:	fa09 f303 	lsl.w	r3, r9, r3
 80069e6:	4313      	orrs	r3, r2
 80069e8:	46a2      	mov	sl, r4
 80069ea:	9304      	str	r3, [sp, #16]
 80069ec:	e7d2      	b.n	8006994 <_svfiprintf_r+0x9c>
 80069ee:	9b03      	ldr	r3, [sp, #12]
 80069f0:	1d19      	adds	r1, r3, #4
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	9103      	str	r1, [sp, #12]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	bfbb      	ittet	lt
 80069fa:	425b      	neglt	r3, r3
 80069fc:	f042 0202 	orrlt.w	r2, r2, #2
 8006a00:	9307      	strge	r3, [sp, #28]
 8006a02:	9307      	strlt	r3, [sp, #28]
 8006a04:	bfb8      	it	lt
 8006a06:	9204      	strlt	r2, [sp, #16]
 8006a08:	7823      	ldrb	r3, [r4, #0]
 8006a0a:	2b2e      	cmp	r3, #46	; 0x2e
 8006a0c:	d10c      	bne.n	8006a28 <_svfiprintf_r+0x130>
 8006a0e:	7863      	ldrb	r3, [r4, #1]
 8006a10:	2b2a      	cmp	r3, #42	; 0x2a
 8006a12:	d134      	bne.n	8006a7e <_svfiprintf_r+0x186>
 8006a14:	9b03      	ldr	r3, [sp, #12]
 8006a16:	3402      	adds	r4, #2
 8006a18:	1d1a      	adds	r2, r3, #4
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	9203      	str	r2, [sp, #12]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	bfb8      	it	lt
 8006a22:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a26:	9305      	str	r3, [sp, #20]
 8006a28:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006ae4 <_svfiprintf_r+0x1ec>
 8006a2c:	2203      	movs	r2, #3
 8006a2e:	4650      	mov	r0, sl
 8006a30:	7821      	ldrb	r1, [r4, #0]
 8006a32:	f7fd fc4f 	bl	80042d4 <memchr>
 8006a36:	b138      	cbz	r0, 8006a48 <_svfiprintf_r+0x150>
 8006a38:	2240      	movs	r2, #64	; 0x40
 8006a3a:	9b04      	ldr	r3, [sp, #16]
 8006a3c:	eba0 000a 	sub.w	r0, r0, sl
 8006a40:	4082      	lsls	r2, r0
 8006a42:	4313      	orrs	r3, r2
 8006a44:	3401      	adds	r4, #1
 8006a46:	9304      	str	r3, [sp, #16]
 8006a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a4c:	2206      	movs	r2, #6
 8006a4e:	4826      	ldr	r0, [pc, #152]	; (8006ae8 <_svfiprintf_r+0x1f0>)
 8006a50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a54:	f7fd fc3e 	bl	80042d4 <memchr>
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	d038      	beq.n	8006ace <_svfiprintf_r+0x1d6>
 8006a5c:	4b23      	ldr	r3, [pc, #140]	; (8006aec <_svfiprintf_r+0x1f4>)
 8006a5e:	bb1b      	cbnz	r3, 8006aa8 <_svfiprintf_r+0x1b0>
 8006a60:	9b03      	ldr	r3, [sp, #12]
 8006a62:	3307      	adds	r3, #7
 8006a64:	f023 0307 	bic.w	r3, r3, #7
 8006a68:	3308      	adds	r3, #8
 8006a6a:	9303      	str	r3, [sp, #12]
 8006a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a6e:	4433      	add	r3, r6
 8006a70:	9309      	str	r3, [sp, #36]	; 0x24
 8006a72:	e768      	b.n	8006946 <_svfiprintf_r+0x4e>
 8006a74:	460c      	mov	r4, r1
 8006a76:	2001      	movs	r0, #1
 8006a78:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a7c:	e7a6      	b.n	80069cc <_svfiprintf_r+0xd4>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	f04f 0c0a 	mov.w	ip, #10
 8006a84:	4619      	mov	r1, r3
 8006a86:	3401      	adds	r4, #1
 8006a88:	9305      	str	r3, [sp, #20]
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a90:	3a30      	subs	r2, #48	; 0x30
 8006a92:	2a09      	cmp	r2, #9
 8006a94:	d903      	bls.n	8006a9e <_svfiprintf_r+0x1a6>
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d0c6      	beq.n	8006a28 <_svfiprintf_r+0x130>
 8006a9a:	9105      	str	r1, [sp, #20]
 8006a9c:	e7c4      	b.n	8006a28 <_svfiprintf_r+0x130>
 8006a9e:	4604      	mov	r4, r0
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006aa6:	e7f0      	b.n	8006a8a <_svfiprintf_r+0x192>
 8006aa8:	ab03      	add	r3, sp, #12
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	462a      	mov	r2, r5
 8006aae:	4638      	mov	r0, r7
 8006ab0:	4b0f      	ldr	r3, [pc, #60]	; (8006af0 <_svfiprintf_r+0x1f8>)
 8006ab2:	a904      	add	r1, sp, #16
 8006ab4:	f7fc fcac 	bl	8003410 <_printf_float>
 8006ab8:	1c42      	adds	r2, r0, #1
 8006aba:	4606      	mov	r6, r0
 8006abc:	d1d6      	bne.n	8006a6c <_svfiprintf_r+0x174>
 8006abe:	89ab      	ldrh	r3, [r5, #12]
 8006ac0:	065b      	lsls	r3, r3, #25
 8006ac2:	f53f af2d 	bmi.w	8006920 <_svfiprintf_r+0x28>
 8006ac6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ac8:	b01d      	add	sp, #116	; 0x74
 8006aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ace:	ab03      	add	r3, sp, #12
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	462a      	mov	r2, r5
 8006ad4:	4638      	mov	r0, r7
 8006ad6:	4b06      	ldr	r3, [pc, #24]	; (8006af0 <_svfiprintf_r+0x1f8>)
 8006ad8:	a904      	add	r1, sp, #16
 8006ada:	f7fc ff39 	bl	8003950 <_printf_i>
 8006ade:	e7eb      	b.n	8006ab8 <_svfiprintf_r+0x1c0>
 8006ae0:	08007e19 	.word	0x08007e19
 8006ae4:	08007e1f 	.word	0x08007e1f
 8006ae8:	08007e23 	.word	0x08007e23
 8006aec:	08003411 	.word	0x08003411
 8006af0:	08006845 	.word	0x08006845

08006af4 <__sflush_r>:
 8006af4:	898a      	ldrh	r2, [r1, #12]
 8006af6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af8:	4605      	mov	r5, r0
 8006afa:	0710      	lsls	r0, r2, #28
 8006afc:	460c      	mov	r4, r1
 8006afe:	d457      	bmi.n	8006bb0 <__sflush_r+0xbc>
 8006b00:	684b      	ldr	r3, [r1, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	dc04      	bgt.n	8006b10 <__sflush_r+0x1c>
 8006b06:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	dc01      	bgt.n	8006b10 <__sflush_r+0x1c>
 8006b0c:	2000      	movs	r0, #0
 8006b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b12:	2e00      	cmp	r6, #0
 8006b14:	d0fa      	beq.n	8006b0c <__sflush_r+0x18>
 8006b16:	2300      	movs	r3, #0
 8006b18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b1c:	682f      	ldr	r7, [r5, #0]
 8006b1e:	6a21      	ldr	r1, [r4, #32]
 8006b20:	602b      	str	r3, [r5, #0]
 8006b22:	d032      	beq.n	8006b8a <__sflush_r+0x96>
 8006b24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b26:	89a3      	ldrh	r3, [r4, #12]
 8006b28:	075a      	lsls	r2, r3, #29
 8006b2a:	d505      	bpl.n	8006b38 <__sflush_r+0x44>
 8006b2c:	6863      	ldr	r3, [r4, #4]
 8006b2e:	1ac0      	subs	r0, r0, r3
 8006b30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b32:	b10b      	cbz	r3, 8006b38 <__sflush_r+0x44>
 8006b34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b36:	1ac0      	subs	r0, r0, r3
 8006b38:	2300      	movs	r3, #0
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b3e:	4628      	mov	r0, r5
 8006b40:	6a21      	ldr	r1, [r4, #32]
 8006b42:	47b0      	blx	r6
 8006b44:	1c43      	adds	r3, r0, #1
 8006b46:	89a3      	ldrh	r3, [r4, #12]
 8006b48:	d106      	bne.n	8006b58 <__sflush_r+0x64>
 8006b4a:	6829      	ldr	r1, [r5, #0]
 8006b4c:	291d      	cmp	r1, #29
 8006b4e:	d82b      	bhi.n	8006ba8 <__sflush_r+0xb4>
 8006b50:	4a28      	ldr	r2, [pc, #160]	; (8006bf4 <__sflush_r+0x100>)
 8006b52:	410a      	asrs	r2, r1
 8006b54:	07d6      	lsls	r6, r2, #31
 8006b56:	d427      	bmi.n	8006ba8 <__sflush_r+0xb4>
 8006b58:	2200      	movs	r2, #0
 8006b5a:	6062      	str	r2, [r4, #4]
 8006b5c:	6922      	ldr	r2, [r4, #16]
 8006b5e:	04d9      	lsls	r1, r3, #19
 8006b60:	6022      	str	r2, [r4, #0]
 8006b62:	d504      	bpl.n	8006b6e <__sflush_r+0x7a>
 8006b64:	1c42      	adds	r2, r0, #1
 8006b66:	d101      	bne.n	8006b6c <__sflush_r+0x78>
 8006b68:	682b      	ldr	r3, [r5, #0]
 8006b6a:	b903      	cbnz	r3, 8006b6e <__sflush_r+0x7a>
 8006b6c:	6560      	str	r0, [r4, #84]	; 0x54
 8006b6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b70:	602f      	str	r7, [r5, #0]
 8006b72:	2900      	cmp	r1, #0
 8006b74:	d0ca      	beq.n	8006b0c <__sflush_r+0x18>
 8006b76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b7a:	4299      	cmp	r1, r3
 8006b7c:	d002      	beq.n	8006b84 <__sflush_r+0x90>
 8006b7e:	4628      	mov	r0, r5
 8006b80:	f7fe fa2a 	bl	8004fd8 <_free_r>
 8006b84:	2000      	movs	r0, #0
 8006b86:	6360      	str	r0, [r4, #52]	; 0x34
 8006b88:	e7c1      	b.n	8006b0e <__sflush_r+0x1a>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	47b0      	blx	r6
 8006b90:	1c41      	adds	r1, r0, #1
 8006b92:	d1c8      	bne.n	8006b26 <__sflush_r+0x32>
 8006b94:	682b      	ldr	r3, [r5, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0c5      	beq.n	8006b26 <__sflush_r+0x32>
 8006b9a:	2b1d      	cmp	r3, #29
 8006b9c:	d001      	beq.n	8006ba2 <__sflush_r+0xae>
 8006b9e:	2b16      	cmp	r3, #22
 8006ba0:	d101      	bne.n	8006ba6 <__sflush_r+0xb2>
 8006ba2:	602f      	str	r7, [r5, #0]
 8006ba4:	e7b2      	b.n	8006b0c <__sflush_r+0x18>
 8006ba6:	89a3      	ldrh	r3, [r4, #12]
 8006ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bac:	81a3      	strh	r3, [r4, #12]
 8006bae:	e7ae      	b.n	8006b0e <__sflush_r+0x1a>
 8006bb0:	690f      	ldr	r7, [r1, #16]
 8006bb2:	2f00      	cmp	r7, #0
 8006bb4:	d0aa      	beq.n	8006b0c <__sflush_r+0x18>
 8006bb6:	0793      	lsls	r3, r2, #30
 8006bb8:	bf18      	it	ne
 8006bba:	2300      	movne	r3, #0
 8006bbc:	680e      	ldr	r6, [r1, #0]
 8006bbe:	bf08      	it	eq
 8006bc0:	694b      	ldreq	r3, [r1, #20]
 8006bc2:	1bf6      	subs	r6, r6, r7
 8006bc4:	600f      	str	r7, [r1, #0]
 8006bc6:	608b      	str	r3, [r1, #8]
 8006bc8:	2e00      	cmp	r6, #0
 8006bca:	dd9f      	ble.n	8006b0c <__sflush_r+0x18>
 8006bcc:	4633      	mov	r3, r6
 8006bce:	463a      	mov	r2, r7
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	6a21      	ldr	r1, [r4, #32]
 8006bd4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006bd8:	47e0      	blx	ip
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	dc06      	bgt.n	8006bec <__sflush_r+0xf8>
 8006bde:	89a3      	ldrh	r3, [r4, #12]
 8006be0:	f04f 30ff 	mov.w	r0, #4294967295
 8006be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006be8:	81a3      	strh	r3, [r4, #12]
 8006bea:	e790      	b.n	8006b0e <__sflush_r+0x1a>
 8006bec:	4407      	add	r7, r0
 8006bee:	1a36      	subs	r6, r6, r0
 8006bf0:	e7ea      	b.n	8006bc8 <__sflush_r+0xd4>
 8006bf2:	bf00      	nop
 8006bf4:	dfbffffe 	.word	0xdfbffffe

08006bf8 <_fflush_r>:
 8006bf8:	b538      	push	{r3, r4, r5, lr}
 8006bfa:	690b      	ldr	r3, [r1, #16]
 8006bfc:	4605      	mov	r5, r0
 8006bfe:	460c      	mov	r4, r1
 8006c00:	b913      	cbnz	r3, 8006c08 <_fflush_r+0x10>
 8006c02:	2500      	movs	r5, #0
 8006c04:	4628      	mov	r0, r5
 8006c06:	bd38      	pop	{r3, r4, r5, pc}
 8006c08:	b118      	cbz	r0, 8006c12 <_fflush_r+0x1a>
 8006c0a:	6a03      	ldr	r3, [r0, #32]
 8006c0c:	b90b      	cbnz	r3, 8006c12 <_fflush_r+0x1a>
 8006c0e:	f7fd fa49 	bl	80040a4 <__sinit>
 8006c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d0f3      	beq.n	8006c02 <_fflush_r+0xa>
 8006c1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c1c:	07d0      	lsls	r0, r2, #31
 8006c1e:	d404      	bmi.n	8006c2a <_fflush_r+0x32>
 8006c20:	0599      	lsls	r1, r3, #22
 8006c22:	d402      	bmi.n	8006c2a <_fflush_r+0x32>
 8006c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c26:	f7fd fb53 	bl	80042d0 <__retarget_lock_acquire_recursive>
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	4621      	mov	r1, r4
 8006c2e:	f7ff ff61 	bl	8006af4 <__sflush_r>
 8006c32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c34:	4605      	mov	r5, r0
 8006c36:	07da      	lsls	r2, r3, #31
 8006c38:	d4e4      	bmi.n	8006c04 <_fflush_r+0xc>
 8006c3a:	89a3      	ldrh	r3, [r4, #12]
 8006c3c:	059b      	lsls	r3, r3, #22
 8006c3e:	d4e1      	bmi.n	8006c04 <_fflush_r+0xc>
 8006c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c42:	f7fd fb46 	bl	80042d2 <__retarget_lock_release_recursive>
 8006c46:	e7dd      	b.n	8006c04 <_fflush_r+0xc>

08006c48 <memmove>:
 8006c48:	4288      	cmp	r0, r1
 8006c4a:	b510      	push	{r4, lr}
 8006c4c:	eb01 0402 	add.w	r4, r1, r2
 8006c50:	d902      	bls.n	8006c58 <memmove+0x10>
 8006c52:	4284      	cmp	r4, r0
 8006c54:	4623      	mov	r3, r4
 8006c56:	d807      	bhi.n	8006c68 <memmove+0x20>
 8006c58:	1e43      	subs	r3, r0, #1
 8006c5a:	42a1      	cmp	r1, r4
 8006c5c:	d008      	beq.n	8006c70 <memmove+0x28>
 8006c5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c66:	e7f8      	b.n	8006c5a <memmove+0x12>
 8006c68:	4601      	mov	r1, r0
 8006c6a:	4402      	add	r2, r0
 8006c6c:	428a      	cmp	r2, r1
 8006c6e:	d100      	bne.n	8006c72 <memmove+0x2a>
 8006c70:	bd10      	pop	{r4, pc}
 8006c72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c7a:	e7f7      	b.n	8006c6c <memmove+0x24>

08006c7c <strncmp>:
 8006c7c:	b510      	push	{r4, lr}
 8006c7e:	b16a      	cbz	r2, 8006c9c <strncmp+0x20>
 8006c80:	3901      	subs	r1, #1
 8006c82:	1884      	adds	r4, r0, r2
 8006c84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c88:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d103      	bne.n	8006c98 <strncmp+0x1c>
 8006c90:	42a0      	cmp	r0, r4
 8006c92:	d001      	beq.n	8006c98 <strncmp+0x1c>
 8006c94:	2a00      	cmp	r2, #0
 8006c96:	d1f5      	bne.n	8006c84 <strncmp+0x8>
 8006c98:	1ad0      	subs	r0, r2, r3
 8006c9a:	bd10      	pop	{r4, pc}
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	e7fc      	b.n	8006c9a <strncmp+0x1e>

08006ca0 <_sbrk_r>:
 8006ca0:	b538      	push	{r3, r4, r5, lr}
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	4d05      	ldr	r5, [pc, #20]	; (8006cbc <_sbrk_r+0x1c>)
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	4608      	mov	r0, r1
 8006caa:	602b      	str	r3, [r5, #0]
 8006cac:	f7fa fa1a 	bl	80010e4 <_sbrk>
 8006cb0:	1c43      	adds	r3, r0, #1
 8006cb2:	d102      	bne.n	8006cba <_sbrk_r+0x1a>
 8006cb4:	682b      	ldr	r3, [r5, #0]
 8006cb6:	b103      	cbz	r3, 8006cba <_sbrk_r+0x1a>
 8006cb8:	6023      	str	r3, [r4, #0]
 8006cba:	bd38      	pop	{r3, r4, r5, pc}
 8006cbc:	20000400 	.word	0x20000400

08006cc0 <memcpy>:
 8006cc0:	440a      	add	r2, r1
 8006cc2:	4291      	cmp	r1, r2
 8006cc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cc8:	d100      	bne.n	8006ccc <memcpy+0xc>
 8006cca:	4770      	bx	lr
 8006ccc:	b510      	push	{r4, lr}
 8006cce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cd2:	4291      	cmp	r1, r2
 8006cd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cd8:	d1f9      	bne.n	8006cce <memcpy+0xe>
 8006cda:	bd10      	pop	{r4, pc}

08006cdc <nan>:
 8006cdc:	2000      	movs	r0, #0
 8006cde:	4901      	ldr	r1, [pc, #4]	; (8006ce4 <nan+0x8>)
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	7ff80000 	.word	0x7ff80000

08006ce8 <__assert_func>:
 8006ce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006cea:	4614      	mov	r4, r2
 8006cec:	461a      	mov	r2, r3
 8006cee:	4b09      	ldr	r3, [pc, #36]	; (8006d14 <__assert_func+0x2c>)
 8006cf0:	4605      	mov	r5, r0
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68d8      	ldr	r0, [r3, #12]
 8006cf6:	b14c      	cbz	r4, 8006d0c <__assert_func+0x24>
 8006cf8:	4b07      	ldr	r3, [pc, #28]	; (8006d18 <__assert_func+0x30>)
 8006cfa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006cfe:	9100      	str	r1, [sp, #0]
 8006d00:	462b      	mov	r3, r5
 8006d02:	4906      	ldr	r1, [pc, #24]	; (8006d1c <__assert_func+0x34>)
 8006d04:	f000 fbca 	bl	800749c <fiprintf>
 8006d08:	f000 fbda 	bl	80074c0 <abort>
 8006d0c:	4b04      	ldr	r3, [pc, #16]	; (8006d20 <__assert_func+0x38>)
 8006d0e:	461c      	mov	r4, r3
 8006d10:	e7f3      	b.n	8006cfa <__assert_func+0x12>
 8006d12:	bf00      	nop
 8006d14:	20000064 	.word	0x20000064
 8006d18:	08007e32 	.word	0x08007e32
 8006d1c:	08007e3f 	.word	0x08007e3f
 8006d20:	08007e6d 	.word	0x08007e6d

08006d24 <_calloc_r>:
 8006d24:	b570      	push	{r4, r5, r6, lr}
 8006d26:	fba1 5402 	umull	r5, r4, r1, r2
 8006d2a:	b934      	cbnz	r4, 8006d3a <_calloc_r+0x16>
 8006d2c:	4629      	mov	r1, r5
 8006d2e:	f7fe f9c3 	bl	80050b8 <_malloc_r>
 8006d32:	4606      	mov	r6, r0
 8006d34:	b928      	cbnz	r0, 8006d42 <_calloc_r+0x1e>
 8006d36:	4630      	mov	r0, r6
 8006d38:	bd70      	pop	{r4, r5, r6, pc}
 8006d3a:	220c      	movs	r2, #12
 8006d3c:	2600      	movs	r6, #0
 8006d3e:	6002      	str	r2, [r0, #0]
 8006d40:	e7f9      	b.n	8006d36 <_calloc_r+0x12>
 8006d42:	462a      	mov	r2, r5
 8006d44:	4621      	mov	r1, r4
 8006d46:	f7fd fa46 	bl	80041d6 <memset>
 8006d4a:	e7f4      	b.n	8006d36 <_calloc_r+0x12>

08006d4c <rshift>:
 8006d4c:	6903      	ldr	r3, [r0, #16]
 8006d4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d52:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006d56:	f100 0414 	add.w	r4, r0, #20
 8006d5a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006d5e:	dd46      	ble.n	8006dee <rshift+0xa2>
 8006d60:	f011 011f 	ands.w	r1, r1, #31
 8006d64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006d68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006d6c:	d10c      	bne.n	8006d88 <rshift+0x3c>
 8006d6e:	4629      	mov	r1, r5
 8006d70:	f100 0710 	add.w	r7, r0, #16
 8006d74:	42b1      	cmp	r1, r6
 8006d76:	d335      	bcc.n	8006de4 <rshift+0x98>
 8006d78:	1a9b      	subs	r3, r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	1eea      	subs	r2, r5, #3
 8006d7e:	4296      	cmp	r6, r2
 8006d80:	bf38      	it	cc
 8006d82:	2300      	movcc	r3, #0
 8006d84:	4423      	add	r3, r4
 8006d86:	e015      	b.n	8006db4 <rshift+0x68>
 8006d88:	46a1      	mov	r9, r4
 8006d8a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006d8e:	f1c1 0820 	rsb	r8, r1, #32
 8006d92:	40cf      	lsrs	r7, r1
 8006d94:	f105 0e04 	add.w	lr, r5, #4
 8006d98:	4576      	cmp	r6, lr
 8006d9a:	46f4      	mov	ip, lr
 8006d9c:	d816      	bhi.n	8006dcc <rshift+0x80>
 8006d9e:	1a9a      	subs	r2, r3, r2
 8006da0:	0092      	lsls	r2, r2, #2
 8006da2:	3a04      	subs	r2, #4
 8006da4:	3501      	adds	r5, #1
 8006da6:	42ae      	cmp	r6, r5
 8006da8:	bf38      	it	cc
 8006daa:	2200      	movcc	r2, #0
 8006dac:	18a3      	adds	r3, r4, r2
 8006dae:	50a7      	str	r7, [r4, r2]
 8006db0:	b107      	cbz	r7, 8006db4 <rshift+0x68>
 8006db2:	3304      	adds	r3, #4
 8006db4:	42a3      	cmp	r3, r4
 8006db6:	eba3 0204 	sub.w	r2, r3, r4
 8006dba:	bf08      	it	eq
 8006dbc:	2300      	moveq	r3, #0
 8006dbe:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006dc2:	6102      	str	r2, [r0, #16]
 8006dc4:	bf08      	it	eq
 8006dc6:	6143      	streq	r3, [r0, #20]
 8006dc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006dcc:	f8dc c000 	ldr.w	ip, [ip]
 8006dd0:	fa0c fc08 	lsl.w	ip, ip, r8
 8006dd4:	ea4c 0707 	orr.w	r7, ip, r7
 8006dd8:	f849 7b04 	str.w	r7, [r9], #4
 8006ddc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006de0:	40cf      	lsrs	r7, r1
 8006de2:	e7d9      	b.n	8006d98 <rshift+0x4c>
 8006de4:	f851 cb04 	ldr.w	ip, [r1], #4
 8006de8:	f847 cf04 	str.w	ip, [r7, #4]!
 8006dec:	e7c2      	b.n	8006d74 <rshift+0x28>
 8006dee:	4623      	mov	r3, r4
 8006df0:	e7e0      	b.n	8006db4 <rshift+0x68>

08006df2 <__hexdig_fun>:
 8006df2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006df6:	2b09      	cmp	r3, #9
 8006df8:	d802      	bhi.n	8006e00 <__hexdig_fun+0xe>
 8006dfa:	3820      	subs	r0, #32
 8006dfc:	b2c0      	uxtb	r0, r0
 8006dfe:	4770      	bx	lr
 8006e00:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006e04:	2b05      	cmp	r3, #5
 8006e06:	d801      	bhi.n	8006e0c <__hexdig_fun+0x1a>
 8006e08:	3847      	subs	r0, #71	; 0x47
 8006e0a:	e7f7      	b.n	8006dfc <__hexdig_fun+0xa>
 8006e0c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006e10:	2b05      	cmp	r3, #5
 8006e12:	d801      	bhi.n	8006e18 <__hexdig_fun+0x26>
 8006e14:	3827      	subs	r0, #39	; 0x27
 8006e16:	e7f1      	b.n	8006dfc <__hexdig_fun+0xa>
 8006e18:	2000      	movs	r0, #0
 8006e1a:	4770      	bx	lr

08006e1c <__gethex>:
 8006e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e20:	4681      	mov	r9, r0
 8006e22:	468a      	mov	sl, r1
 8006e24:	4617      	mov	r7, r2
 8006e26:	680a      	ldr	r2, [r1, #0]
 8006e28:	b085      	sub	sp, #20
 8006e2a:	f102 0b02 	add.w	fp, r2, #2
 8006e2e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006e32:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006e36:	9302      	str	r3, [sp, #8]
 8006e38:	32fe      	adds	r2, #254	; 0xfe
 8006e3a:	eb02 030b 	add.w	r3, r2, fp
 8006e3e:	46d8      	mov	r8, fp
 8006e40:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8006e44:	9301      	str	r3, [sp, #4]
 8006e46:	2830      	cmp	r0, #48	; 0x30
 8006e48:	d0f7      	beq.n	8006e3a <__gethex+0x1e>
 8006e4a:	f7ff ffd2 	bl	8006df2 <__hexdig_fun>
 8006e4e:	4604      	mov	r4, r0
 8006e50:	2800      	cmp	r0, #0
 8006e52:	d138      	bne.n	8006ec6 <__gethex+0xaa>
 8006e54:	2201      	movs	r2, #1
 8006e56:	4640      	mov	r0, r8
 8006e58:	49a7      	ldr	r1, [pc, #668]	; (80070f8 <__gethex+0x2dc>)
 8006e5a:	f7ff ff0f 	bl	8006c7c <strncmp>
 8006e5e:	4606      	mov	r6, r0
 8006e60:	2800      	cmp	r0, #0
 8006e62:	d169      	bne.n	8006f38 <__gethex+0x11c>
 8006e64:	f898 0001 	ldrb.w	r0, [r8, #1]
 8006e68:	465d      	mov	r5, fp
 8006e6a:	f7ff ffc2 	bl	8006df2 <__hexdig_fun>
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	d064      	beq.n	8006f3c <__gethex+0x120>
 8006e72:	465a      	mov	r2, fp
 8006e74:	7810      	ldrb	r0, [r2, #0]
 8006e76:	4690      	mov	r8, r2
 8006e78:	2830      	cmp	r0, #48	; 0x30
 8006e7a:	f102 0201 	add.w	r2, r2, #1
 8006e7e:	d0f9      	beq.n	8006e74 <__gethex+0x58>
 8006e80:	f7ff ffb7 	bl	8006df2 <__hexdig_fun>
 8006e84:	2301      	movs	r3, #1
 8006e86:	fab0 f480 	clz	r4, r0
 8006e8a:	465e      	mov	r6, fp
 8006e8c:	0964      	lsrs	r4, r4, #5
 8006e8e:	9301      	str	r3, [sp, #4]
 8006e90:	4642      	mov	r2, r8
 8006e92:	4615      	mov	r5, r2
 8006e94:	7828      	ldrb	r0, [r5, #0]
 8006e96:	3201      	adds	r2, #1
 8006e98:	f7ff ffab 	bl	8006df2 <__hexdig_fun>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	d1f8      	bne.n	8006e92 <__gethex+0x76>
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	4994      	ldr	r1, [pc, #592]	; (80070f8 <__gethex+0x2dc>)
 8006ea6:	f7ff fee9 	bl	8006c7c <strncmp>
 8006eaa:	b978      	cbnz	r0, 8006ecc <__gethex+0xb0>
 8006eac:	b946      	cbnz	r6, 8006ec0 <__gethex+0xa4>
 8006eae:	1c6e      	adds	r6, r5, #1
 8006eb0:	4632      	mov	r2, r6
 8006eb2:	4615      	mov	r5, r2
 8006eb4:	7828      	ldrb	r0, [r5, #0]
 8006eb6:	3201      	adds	r2, #1
 8006eb8:	f7ff ff9b 	bl	8006df2 <__hexdig_fun>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	d1f8      	bne.n	8006eb2 <__gethex+0x96>
 8006ec0:	1b73      	subs	r3, r6, r5
 8006ec2:	009e      	lsls	r6, r3, #2
 8006ec4:	e004      	b.n	8006ed0 <__gethex+0xb4>
 8006ec6:	2400      	movs	r4, #0
 8006ec8:	4626      	mov	r6, r4
 8006eca:	e7e1      	b.n	8006e90 <__gethex+0x74>
 8006ecc:	2e00      	cmp	r6, #0
 8006ece:	d1f7      	bne.n	8006ec0 <__gethex+0xa4>
 8006ed0:	782b      	ldrb	r3, [r5, #0]
 8006ed2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006ed6:	2b50      	cmp	r3, #80	; 0x50
 8006ed8:	d13d      	bne.n	8006f56 <__gethex+0x13a>
 8006eda:	786b      	ldrb	r3, [r5, #1]
 8006edc:	2b2b      	cmp	r3, #43	; 0x2b
 8006ede:	d02f      	beq.n	8006f40 <__gethex+0x124>
 8006ee0:	2b2d      	cmp	r3, #45	; 0x2d
 8006ee2:	d031      	beq.n	8006f48 <__gethex+0x12c>
 8006ee4:	f04f 0b00 	mov.w	fp, #0
 8006ee8:	1c69      	adds	r1, r5, #1
 8006eea:	7808      	ldrb	r0, [r1, #0]
 8006eec:	f7ff ff81 	bl	8006df2 <__hexdig_fun>
 8006ef0:	1e42      	subs	r2, r0, #1
 8006ef2:	b2d2      	uxtb	r2, r2
 8006ef4:	2a18      	cmp	r2, #24
 8006ef6:	d82e      	bhi.n	8006f56 <__gethex+0x13a>
 8006ef8:	f1a0 0210 	sub.w	r2, r0, #16
 8006efc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006f00:	f7ff ff77 	bl	8006df2 <__hexdig_fun>
 8006f04:	f100 3cff 	add.w	ip, r0, #4294967295
 8006f08:	fa5f fc8c 	uxtb.w	ip, ip
 8006f0c:	f1bc 0f18 	cmp.w	ip, #24
 8006f10:	d91d      	bls.n	8006f4e <__gethex+0x132>
 8006f12:	f1bb 0f00 	cmp.w	fp, #0
 8006f16:	d000      	beq.n	8006f1a <__gethex+0xfe>
 8006f18:	4252      	negs	r2, r2
 8006f1a:	4416      	add	r6, r2
 8006f1c:	f8ca 1000 	str.w	r1, [sl]
 8006f20:	b1dc      	cbz	r4, 8006f5a <__gethex+0x13e>
 8006f22:	9b01      	ldr	r3, [sp, #4]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	bf14      	ite	ne
 8006f28:	f04f 0800 	movne.w	r8, #0
 8006f2c:	f04f 0806 	moveq.w	r8, #6
 8006f30:	4640      	mov	r0, r8
 8006f32:	b005      	add	sp, #20
 8006f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f38:	4645      	mov	r5, r8
 8006f3a:	4626      	mov	r6, r4
 8006f3c:	2401      	movs	r4, #1
 8006f3e:	e7c7      	b.n	8006ed0 <__gethex+0xb4>
 8006f40:	f04f 0b00 	mov.w	fp, #0
 8006f44:	1ca9      	adds	r1, r5, #2
 8006f46:	e7d0      	b.n	8006eea <__gethex+0xce>
 8006f48:	f04f 0b01 	mov.w	fp, #1
 8006f4c:	e7fa      	b.n	8006f44 <__gethex+0x128>
 8006f4e:	230a      	movs	r3, #10
 8006f50:	fb03 0002 	mla	r0, r3, r2, r0
 8006f54:	e7d0      	b.n	8006ef8 <__gethex+0xdc>
 8006f56:	4629      	mov	r1, r5
 8006f58:	e7e0      	b.n	8006f1c <__gethex+0x100>
 8006f5a:	4621      	mov	r1, r4
 8006f5c:	eba5 0308 	sub.w	r3, r5, r8
 8006f60:	3b01      	subs	r3, #1
 8006f62:	2b07      	cmp	r3, #7
 8006f64:	dc0a      	bgt.n	8006f7c <__gethex+0x160>
 8006f66:	4648      	mov	r0, r9
 8006f68:	f7fe f932 	bl	80051d0 <_Balloc>
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	b940      	cbnz	r0, 8006f82 <__gethex+0x166>
 8006f70:	4602      	mov	r2, r0
 8006f72:	21e4      	movs	r1, #228	; 0xe4
 8006f74:	4b61      	ldr	r3, [pc, #388]	; (80070fc <__gethex+0x2e0>)
 8006f76:	4862      	ldr	r0, [pc, #392]	; (8007100 <__gethex+0x2e4>)
 8006f78:	f7ff feb6 	bl	8006ce8 <__assert_func>
 8006f7c:	3101      	adds	r1, #1
 8006f7e:	105b      	asrs	r3, r3, #1
 8006f80:	e7ef      	b.n	8006f62 <__gethex+0x146>
 8006f82:	2300      	movs	r3, #0
 8006f84:	469b      	mov	fp, r3
 8006f86:	f100 0a14 	add.w	sl, r0, #20
 8006f8a:	f8cd a004 	str.w	sl, [sp, #4]
 8006f8e:	45a8      	cmp	r8, r5
 8006f90:	d344      	bcc.n	800701c <__gethex+0x200>
 8006f92:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006f96:	4658      	mov	r0, fp
 8006f98:	f848 bb04 	str.w	fp, [r8], #4
 8006f9c:	eba8 080a 	sub.w	r8, r8, sl
 8006fa0:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8006fa4:	6122      	str	r2, [r4, #16]
 8006fa6:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8006faa:	f7fe fa03 	bl	80053b4 <__hi0bits>
 8006fae:	683d      	ldr	r5, [r7, #0]
 8006fb0:	eba8 0800 	sub.w	r8, r8, r0
 8006fb4:	45a8      	cmp	r8, r5
 8006fb6:	dd59      	ble.n	800706c <__gethex+0x250>
 8006fb8:	eba8 0805 	sub.w	r8, r8, r5
 8006fbc:	4641      	mov	r1, r8
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	f7fe fd81 	bl	8005ac6 <__any_on>
 8006fc4:	4683      	mov	fp, r0
 8006fc6:	b1b8      	cbz	r0, 8006ff8 <__gethex+0x1dc>
 8006fc8:	f04f 0b01 	mov.w	fp, #1
 8006fcc:	f108 33ff 	add.w	r3, r8, #4294967295
 8006fd0:	1159      	asrs	r1, r3, #5
 8006fd2:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8006fd6:	f003 021f 	and.w	r2, r3, #31
 8006fda:	fa0b f202 	lsl.w	r2, fp, r2
 8006fde:	420a      	tst	r2, r1
 8006fe0:	d00a      	beq.n	8006ff8 <__gethex+0x1dc>
 8006fe2:	455b      	cmp	r3, fp
 8006fe4:	dd06      	ble.n	8006ff4 <__gethex+0x1d8>
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	f1a8 0102 	sub.w	r1, r8, #2
 8006fec:	f7fe fd6b 	bl	8005ac6 <__any_on>
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	d138      	bne.n	8007066 <__gethex+0x24a>
 8006ff4:	f04f 0b02 	mov.w	fp, #2
 8006ff8:	4641      	mov	r1, r8
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f7ff fea6 	bl	8006d4c <rshift>
 8007000:	4446      	add	r6, r8
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	42b3      	cmp	r3, r6
 8007006:	da41      	bge.n	800708c <__gethex+0x270>
 8007008:	4621      	mov	r1, r4
 800700a:	4648      	mov	r0, r9
 800700c:	f7fe f920 	bl	8005250 <_Bfree>
 8007010:	2300      	movs	r3, #0
 8007012:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007014:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8007018:	6013      	str	r3, [r2, #0]
 800701a:	e789      	b.n	8006f30 <__gethex+0x114>
 800701c:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8007020:	2a2e      	cmp	r2, #46	; 0x2e
 8007022:	d014      	beq.n	800704e <__gethex+0x232>
 8007024:	2b20      	cmp	r3, #32
 8007026:	d106      	bne.n	8007036 <__gethex+0x21a>
 8007028:	9b01      	ldr	r3, [sp, #4]
 800702a:	f843 bb04 	str.w	fp, [r3], #4
 800702e:	f04f 0b00 	mov.w	fp, #0
 8007032:	9301      	str	r3, [sp, #4]
 8007034:	465b      	mov	r3, fp
 8007036:	7828      	ldrb	r0, [r5, #0]
 8007038:	9303      	str	r3, [sp, #12]
 800703a:	f7ff feda 	bl	8006df2 <__hexdig_fun>
 800703e:	9b03      	ldr	r3, [sp, #12]
 8007040:	f000 000f 	and.w	r0, r0, #15
 8007044:	4098      	lsls	r0, r3
 8007046:	ea4b 0b00 	orr.w	fp, fp, r0
 800704a:	3304      	adds	r3, #4
 800704c:	e79f      	b.n	8006f8e <__gethex+0x172>
 800704e:	45a8      	cmp	r8, r5
 8007050:	d8e8      	bhi.n	8007024 <__gethex+0x208>
 8007052:	2201      	movs	r2, #1
 8007054:	4628      	mov	r0, r5
 8007056:	4928      	ldr	r1, [pc, #160]	; (80070f8 <__gethex+0x2dc>)
 8007058:	9303      	str	r3, [sp, #12]
 800705a:	f7ff fe0f 	bl	8006c7c <strncmp>
 800705e:	9b03      	ldr	r3, [sp, #12]
 8007060:	2800      	cmp	r0, #0
 8007062:	d1df      	bne.n	8007024 <__gethex+0x208>
 8007064:	e793      	b.n	8006f8e <__gethex+0x172>
 8007066:	f04f 0b03 	mov.w	fp, #3
 800706a:	e7c5      	b.n	8006ff8 <__gethex+0x1dc>
 800706c:	da0b      	bge.n	8007086 <__gethex+0x26a>
 800706e:	eba5 0808 	sub.w	r8, r5, r8
 8007072:	4621      	mov	r1, r4
 8007074:	4642      	mov	r2, r8
 8007076:	4648      	mov	r0, r9
 8007078:	f7fe fb02 	bl	8005680 <__lshift>
 800707c:	4604      	mov	r4, r0
 800707e:	eba6 0608 	sub.w	r6, r6, r8
 8007082:	f100 0a14 	add.w	sl, r0, #20
 8007086:	f04f 0b00 	mov.w	fp, #0
 800708a:	e7ba      	b.n	8007002 <__gethex+0x1e6>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	42b3      	cmp	r3, r6
 8007090:	dd74      	ble.n	800717c <__gethex+0x360>
 8007092:	1b9e      	subs	r6, r3, r6
 8007094:	42b5      	cmp	r5, r6
 8007096:	dc35      	bgt.n	8007104 <__gethex+0x2e8>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2b02      	cmp	r3, #2
 800709c:	d023      	beq.n	80070e6 <__gethex+0x2ca>
 800709e:	2b03      	cmp	r3, #3
 80070a0:	d025      	beq.n	80070ee <__gethex+0x2d2>
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d115      	bne.n	80070d2 <__gethex+0x2b6>
 80070a6:	42b5      	cmp	r5, r6
 80070a8:	d113      	bne.n	80070d2 <__gethex+0x2b6>
 80070aa:	2d01      	cmp	r5, #1
 80070ac:	d10b      	bne.n	80070c6 <__gethex+0x2aa>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	9a02      	ldr	r2, [sp, #8]
 80070b2:	f04f 0862 	mov.w	r8, #98	; 0x62
 80070b6:	6013      	str	r3, [r2, #0]
 80070b8:	2301      	movs	r3, #1
 80070ba:	6123      	str	r3, [r4, #16]
 80070bc:	f8ca 3000 	str.w	r3, [sl]
 80070c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070c2:	601c      	str	r4, [r3, #0]
 80070c4:	e734      	b.n	8006f30 <__gethex+0x114>
 80070c6:	4620      	mov	r0, r4
 80070c8:	1e69      	subs	r1, r5, #1
 80070ca:	f7fe fcfc 	bl	8005ac6 <__any_on>
 80070ce:	2800      	cmp	r0, #0
 80070d0:	d1ed      	bne.n	80070ae <__gethex+0x292>
 80070d2:	4621      	mov	r1, r4
 80070d4:	4648      	mov	r0, r9
 80070d6:	f7fe f8bb 	bl	8005250 <_Bfree>
 80070da:	2300      	movs	r3, #0
 80070dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070de:	f04f 0850 	mov.w	r8, #80	; 0x50
 80070e2:	6013      	str	r3, [r2, #0]
 80070e4:	e724      	b.n	8006f30 <__gethex+0x114>
 80070e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1f2      	bne.n	80070d2 <__gethex+0x2b6>
 80070ec:	e7df      	b.n	80070ae <__gethex+0x292>
 80070ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1dc      	bne.n	80070ae <__gethex+0x292>
 80070f4:	e7ed      	b.n	80070d2 <__gethex+0x2b6>
 80070f6:	bf00      	nop
 80070f8:	08007cc4 	.word	0x08007cc4
 80070fc:	08007b5b 	.word	0x08007b5b
 8007100:	08007e6e 	.word	0x08007e6e
 8007104:	f106 38ff 	add.w	r8, r6, #4294967295
 8007108:	f1bb 0f00 	cmp.w	fp, #0
 800710c:	d133      	bne.n	8007176 <__gethex+0x35a>
 800710e:	f1b8 0f00 	cmp.w	r8, #0
 8007112:	d004      	beq.n	800711e <__gethex+0x302>
 8007114:	4641      	mov	r1, r8
 8007116:	4620      	mov	r0, r4
 8007118:	f7fe fcd5 	bl	8005ac6 <__any_on>
 800711c:	4683      	mov	fp, r0
 800711e:	2301      	movs	r3, #1
 8007120:	ea4f 1268 	mov.w	r2, r8, asr #5
 8007124:	f008 081f 	and.w	r8, r8, #31
 8007128:	fa03 f308 	lsl.w	r3, r3, r8
 800712c:	f04f 0802 	mov.w	r8, #2
 8007130:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007134:	4631      	mov	r1, r6
 8007136:	4213      	tst	r3, r2
 8007138:	4620      	mov	r0, r4
 800713a:	bf18      	it	ne
 800713c:	f04b 0b02 	orrne.w	fp, fp, #2
 8007140:	1bad      	subs	r5, r5, r6
 8007142:	f7ff fe03 	bl	8006d4c <rshift>
 8007146:	687e      	ldr	r6, [r7, #4]
 8007148:	f1bb 0f00 	cmp.w	fp, #0
 800714c:	d04a      	beq.n	80071e4 <__gethex+0x3c8>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2b02      	cmp	r3, #2
 8007152:	d016      	beq.n	8007182 <__gethex+0x366>
 8007154:	2b03      	cmp	r3, #3
 8007156:	d018      	beq.n	800718a <__gethex+0x36e>
 8007158:	2b01      	cmp	r3, #1
 800715a:	d109      	bne.n	8007170 <__gethex+0x354>
 800715c:	f01b 0f02 	tst.w	fp, #2
 8007160:	d006      	beq.n	8007170 <__gethex+0x354>
 8007162:	f8da 3000 	ldr.w	r3, [sl]
 8007166:	ea4b 0b03 	orr.w	fp, fp, r3
 800716a:	f01b 0f01 	tst.w	fp, #1
 800716e:	d10f      	bne.n	8007190 <__gethex+0x374>
 8007170:	f048 0810 	orr.w	r8, r8, #16
 8007174:	e036      	b.n	80071e4 <__gethex+0x3c8>
 8007176:	f04f 0b01 	mov.w	fp, #1
 800717a:	e7d0      	b.n	800711e <__gethex+0x302>
 800717c:	f04f 0801 	mov.w	r8, #1
 8007180:	e7e2      	b.n	8007148 <__gethex+0x32c>
 8007182:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007184:	f1c3 0301 	rsb	r3, r3, #1
 8007188:	930f      	str	r3, [sp, #60]	; 0x3c
 800718a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800718c:	2b00      	cmp	r3, #0
 800718e:	d0ef      	beq.n	8007170 <__gethex+0x354>
 8007190:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007194:	f104 0214 	add.w	r2, r4, #20
 8007198:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800719c:	9301      	str	r3, [sp, #4]
 800719e:	2300      	movs	r3, #0
 80071a0:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80071a4:	4694      	mov	ip, r2
 80071a6:	f852 1b04 	ldr.w	r1, [r2], #4
 80071aa:	f1b1 3fff 	cmp.w	r1, #4294967295
 80071ae:	d01e      	beq.n	80071ee <__gethex+0x3d2>
 80071b0:	3101      	adds	r1, #1
 80071b2:	f8cc 1000 	str.w	r1, [ip]
 80071b6:	f1b8 0f02 	cmp.w	r8, #2
 80071ba:	f104 0214 	add.w	r2, r4, #20
 80071be:	d13d      	bne.n	800723c <__gethex+0x420>
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	3b01      	subs	r3, #1
 80071c4:	42ab      	cmp	r3, r5
 80071c6:	d10b      	bne.n	80071e0 <__gethex+0x3c4>
 80071c8:	2301      	movs	r3, #1
 80071ca:	1169      	asrs	r1, r5, #5
 80071cc:	f005 051f 	and.w	r5, r5, #31
 80071d0:	fa03 f505 	lsl.w	r5, r3, r5
 80071d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071d8:	421d      	tst	r5, r3
 80071da:	bf18      	it	ne
 80071dc:	f04f 0801 	movne.w	r8, #1
 80071e0:	f048 0820 	orr.w	r8, r8, #32
 80071e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071e6:	601c      	str	r4, [r3, #0]
 80071e8:	9b02      	ldr	r3, [sp, #8]
 80071ea:	601e      	str	r6, [r3, #0]
 80071ec:	e6a0      	b.n	8006f30 <__gethex+0x114>
 80071ee:	4290      	cmp	r0, r2
 80071f0:	f842 3c04 	str.w	r3, [r2, #-4]
 80071f4:	d8d6      	bhi.n	80071a4 <__gethex+0x388>
 80071f6:	68a2      	ldr	r2, [r4, #8]
 80071f8:	4593      	cmp	fp, r2
 80071fa:	db17      	blt.n	800722c <__gethex+0x410>
 80071fc:	6861      	ldr	r1, [r4, #4]
 80071fe:	4648      	mov	r0, r9
 8007200:	3101      	adds	r1, #1
 8007202:	f7fd ffe5 	bl	80051d0 <_Balloc>
 8007206:	4682      	mov	sl, r0
 8007208:	b918      	cbnz	r0, 8007212 <__gethex+0x3f6>
 800720a:	4602      	mov	r2, r0
 800720c:	2184      	movs	r1, #132	; 0x84
 800720e:	4b1a      	ldr	r3, [pc, #104]	; (8007278 <__gethex+0x45c>)
 8007210:	e6b1      	b.n	8006f76 <__gethex+0x15a>
 8007212:	6922      	ldr	r2, [r4, #16]
 8007214:	f104 010c 	add.w	r1, r4, #12
 8007218:	3202      	adds	r2, #2
 800721a:	0092      	lsls	r2, r2, #2
 800721c:	300c      	adds	r0, #12
 800721e:	f7ff fd4f 	bl	8006cc0 <memcpy>
 8007222:	4621      	mov	r1, r4
 8007224:	4648      	mov	r0, r9
 8007226:	f7fe f813 	bl	8005250 <_Bfree>
 800722a:	4654      	mov	r4, sl
 800722c:	6922      	ldr	r2, [r4, #16]
 800722e:	1c51      	adds	r1, r2, #1
 8007230:	6121      	str	r1, [r4, #16]
 8007232:	2101      	movs	r1, #1
 8007234:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007238:	6151      	str	r1, [r2, #20]
 800723a:	e7bc      	b.n	80071b6 <__gethex+0x39a>
 800723c:	6921      	ldr	r1, [r4, #16]
 800723e:	4559      	cmp	r1, fp
 8007240:	dd0b      	ble.n	800725a <__gethex+0x43e>
 8007242:	2101      	movs	r1, #1
 8007244:	4620      	mov	r0, r4
 8007246:	f7ff fd81 	bl	8006d4c <rshift>
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	3601      	adds	r6, #1
 800724e:	42b3      	cmp	r3, r6
 8007250:	f6ff aeda 	blt.w	8007008 <__gethex+0x1ec>
 8007254:	f04f 0801 	mov.w	r8, #1
 8007258:	e7c2      	b.n	80071e0 <__gethex+0x3c4>
 800725a:	f015 051f 	ands.w	r5, r5, #31
 800725e:	d0f9      	beq.n	8007254 <__gethex+0x438>
 8007260:	9b01      	ldr	r3, [sp, #4]
 8007262:	f1c5 0520 	rsb	r5, r5, #32
 8007266:	441a      	add	r2, r3
 8007268:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800726c:	f7fe f8a2 	bl	80053b4 <__hi0bits>
 8007270:	42a8      	cmp	r0, r5
 8007272:	dbe6      	blt.n	8007242 <__gethex+0x426>
 8007274:	e7ee      	b.n	8007254 <__gethex+0x438>
 8007276:	bf00      	nop
 8007278:	08007b5b 	.word	0x08007b5b

0800727c <L_shift>:
 800727c:	f1c2 0208 	rsb	r2, r2, #8
 8007280:	0092      	lsls	r2, r2, #2
 8007282:	b570      	push	{r4, r5, r6, lr}
 8007284:	f1c2 0620 	rsb	r6, r2, #32
 8007288:	6843      	ldr	r3, [r0, #4]
 800728a:	6804      	ldr	r4, [r0, #0]
 800728c:	fa03 f506 	lsl.w	r5, r3, r6
 8007290:	432c      	orrs	r4, r5
 8007292:	40d3      	lsrs	r3, r2
 8007294:	6004      	str	r4, [r0, #0]
 8007296:	f840 3f04 	str.w	r3, [r0, #4]!
 800729a:	4288      	cmp	r0, r1
 800729c:	d3f4      	bcc.n	8007288 <L_shift+0xc>
 800729e:	bd70      	pop	{r4, r5, r6, pc}

080072a0 <__match>:
 80072a0:	b530      	push	{r4, r5, lr}
 80072a2:	6803      	ldr	r3, [r0, #0]
 80072a4:	3301      	adds	r3, #1
 80072a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072aa:	b914      	cbnz	r4, 80072b2 <__match+0x12>
 80072ac:	6003      	str	r3, [r0, #0]
 80072ae:	2001      	movs	r0, #1
 80072b0:	bd30      	pop	{r4, r5, pc}
 80072b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80072ba:	2d19      	cmp	r5, #25
 80072bc:	bf98      	it	ls
 80072be:	3220      	addls	r2, #32
 80072c0:	42a2      	cmp	r2, r4
 80072c2:	d0f0      	beq.n	80072a6 <__match+0x6>
 80072c4:	2000      	movs	r0, #0
 80072c6:	e7f3      	b.n	80072b0 <__match+0x10>

080072c8 <__hexnan>:
 80072c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072cc:	2500      	movs	r5, #0
 80072ce:	680b      	ldr	r3, [r1, #0]
 80072d0:	4682      	mov	sl, r0
 80072d2:	115e      	asrs	r6, r3, #5
 80072d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80072d8:	f013 031f 	ands.w	r3, r3, #31
 80072dc:	bf18      	it	ne
 80072de:	3604      	addne	r6, #4
 80072e0:	1f37      	subs	r7, r6, #4
 80072e2:	4690      	mov	r8, r2
 80072e4:	46b9      	mov	r9, r7
 80072e6:	463c      	mov	r4, r7
 80072e8:	46ab      	mov	fp, r5
 80072ea:	b087      	sub	sp, #28
 80072ec:	6801      	ldr	r1, [r0, #0]
 80072ee:	9301      	str	r3, [sp, #4]
 80072f0:	f846 5c04 	str.w	r5, [r6, #-4]
 80072f4:	9502      	str	r5, [sp, #8]
 80072f6:	784a      	ldrb	r2, [r1, #1]
 80072f8:	1c4b      	adds	r3, r1, #1
 80072fa:	9303      	str	r3, [sp, #12]
 80072fc:	b342      	cbz	r2, 8007350 <__hexnan+0x88>
 80072fe:	4610      	mov	r0, r2
 8007300:	9105      	str	r1, [sp, #20]
 8007302:	9204      	str	r2, [sp, #16]
 8007304:	f7ff fd75 	bl	8006df2 <__hexdig_fun>
 8007308:	2800      	cmp	r0, #0
 800730a:	d14f      	bne.n	80073ac <__hexnan+0xe4>
 800730c:	9a04      	ldr	r2, [sp, #16]
 800730e:	9905      	ldr	r1, [sp, #20]
 8007310:	2a20      	cmp	r2, #32
 8007312:	d818      	bhi.n	8007346 <__hexnan+0x7e>
 8007314:	9b02      	ldr	r3, [sp, #8]
 8007316:	459b      	cmp	fp, r3
 8007318:	dd13      	ble.n	8007342 <__hexnan+0x7a>
 800731a:	454c      	cmp	r4, r9
 800731c:	d206      	bcs.n	800732c <__hexnan+0x64>
 800731e:	2d07      	cmp	r5, #7
 8007320:	dc04      	bgt.n	800732c <__hexnan+0x64>
 8007322:	462a      	mov	r2, r5
 8007324:	4649      	mov	r1, r9
 8007326:	4620      	mov	r0, r4
 8007328:	f7ff ffa8 	bl	800727c <L_shift>
 800732c:	4544      	cmp	r4, r8
 800732e:	d950      	bls.n	80073d2 <__hexnan+0x10a>
 8007330:	2300      	movs	r3, #0
 8007332:	f1a4 0904 	sub.w	r9, r4, #4
 8007336:	f844 3c04 	str.w	r3, [r4, #-4]
 800733a:	461d      	mov	r5, r3
 800733c:	464c      	mov	r4, r9
 800733e:	f8cd b008 	str.w	fp, [sp, #8]
 8007342:	9903      	ldr	r1, [sp, #12]
 8007344:	e7d7      	b.n	80072f6 <__hexnan+0x2e>
 8007346:	2a29      	cmp	r2, #41	; 0x29
 8007348:	d155      	bne.n	80073f6 <__hexnan+0x12e>
 800734a:	3102      	adds	r1, #2
 800734c:	f8ca 1000 	str.w	r1, [sl]
 8007350:	f1bb 0f00 	cmp.w	fp, #0
 8007354:	d04f      	beq.n	80073f6 <__hexnan+0x12e>
 8007356:	454c      	cmp	r4, r9
 8007358:	d206      	bcs.n	8007368 <__hexnan+0xa0>
 800735a:	2d07      	cmp	r5, #7
 800735c:	dc04      	bgt.n	8007368 <__hexnan+0xa0>
 800735e:	462a      	mov	r2, r5
 8007360:	4649      	mov	r1, r9
 8007362:	4620      	mov	r0, r4
 8007364:	f7ff ff8a 	bl	800727c <L_shift>
 8007368:	4544      	cmp	r4, r8
 800736a:	d934      	bls.n	80073d6 <__hexnan+0x10e>
 800736c:	4623      	mov	r3, r4
 800736e:	f1a8 0204 	sub.w	r2, r8, #4
 8007372:	f853 1b04 	ldr.w	r1, [r3], #4
 8007376:	429f      	cmp	r7, r3
 8007378:	f842 1f04 	str.w	r1, [r2, #4]!
 800737c:	d2f9      	bcs.n	8007372 <__hexnan+0xaa>
 800737e:	1b3b      	subs	r3, r7, r4
 8007380:	f023 0303 	bic.w	r3, r3, #3
 8007384:	3304      	adds	r3, #4
 8007386:	3e03      	subs	r6, #3
 8007388:	3401      	adds	r4, #1
 800738a:	42a6      	cmp	r6, r4
 800738c:	bf38      	it	cc
 800738e:	2304      	movcc	r3, #4
 8007390:	2200      	movs	r2, #0
 8007392:	4443      	add	r3, r8
 8007394:	f843 2b04 	str.w	r2, [r3], #4
 8007398:	429f      	cmp	r7, r3
 800739a:	d2fb      	bcs.n	8007394 <__hexnan+0xcc>
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	b91b      	cbnz	r3, 80073a8 <__hexnan+0xe0>
 80073a0:	4547      	cmp	r7, r8
 80073a2:	d126      	bne.n	80073f2 <__hexnan+0x12a>
 80073a4:	2301      	movs	r3, #1
 80073a6:	603b      	str	r3, [r7, #0]
 80073a8:	2005      	movs	r0, #5
 80073aa:	e025      	b.n	80073f8 <__hexnan+0x130>
 80073ac:	3501      	adds	r5, #1
 80073ae:	2d08      	cmp	r5, #8
 80073b0:	f10b 0b01 	add.w	fp, fp, #1
 80073b4:	dd06      	ble.n	80073c4 <__hexnan+0xfc>
 80073b6:	4544      	cmp	r4, r8
 80073b8:	d9c3      	bls.n	8007342 <__hexnan+0x7a>
 80073ba:	2300      	movs	r3, #0
 80073bc:	2501      	movs	r5, #1
 80073be:	f844 3c04 	str.w	r3, [r4, #-4]
 80073c2:	3c04      	subs	r4, #4
 80073c4:	6822      	ldr	r2, [r4, #0]
 80073c6:	f000 000f 	and.w	r0, r0, #15
 80073ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80073ce:	6020      	str	r0, [r4, #0]
 80073d0:	e7b7      	b.n	8007342 <__hexnan+0x7a>
 80073d2:	2508      	movs	r5, #8
 80073d4:	e7b5      	b.n	8007342 <__hexnan+0x7a>
 80073d6:	9b01      	ldr	r3, [sp, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d0df      	beq.n	800739c <__hexnan+0xd4>
 80073dc:	f04f 32ff 	mov.w	r2, #4294967295
 80073e0:	f1c3 0320 	rsb	r3, r3, #32
 80073e4:	40da      	lsrs	r2, r3
 80073e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80073ea:	4013      	ands	r3, r2
 80073ec:	f846 3c04 	str.w	r3, [r6, #-4]
 80073f0:	e7d4      	b.n	800739c <__hexnan+0xd4>
 80073f2:	3f04      	subs	r7, #4
 80073f4:	e7d2      	b.n	800739c <__hexnan+0xd4>
 80073f6:	2004      	movs	r0, #4
 80073f8:	b007      	add	sp, #28
 80073fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080073fe <__ascii_mbtowc>:
 80073fe:	b082      	sub	sp, #8
 8007400:	b901      	cbnz	r1, 8007404 <__ascii_mbtowc+0x6>
 8007402:	a901      	add	r1, sp, #4
 8007404:	b142      	cbz	r2, 8007418 <__ascii_mbtowc+0x1a>
 8007406:	b14b      	cbz	r3, 800741c <__ascii_mbtowc+0x1e>
 8007408:	7813      	ldrb	r3, [r2, #0]
 800740a:	600b      	str	r3, [r1, #0]
 800740c:	7812      	ldrb	r2, [r2, #0]
 800740e:	1e10      	subs	r0, r2, #0
 8007410:	bf18      	it	ne
 8007412:	2001      	movne	r0, #1
 8007414:	b002      	add	sp, #8
 8007416:	4770      	bx	lr
 8007418:	4610      	mov	r0, r2
 800741a:	e7fb      	b.n	8007414 <__ascii_mbtowc+0x16>
 800741c:	f06f 0001 	mvn.w	r0, #1
 8007420:	e7f8      	b.n	8007414 <__ascii_mbtowc+0x16>

08007422 <_realloc_r>:
 8007422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007426:	4680      	mov	r8, r0
 8007428:	4614      	mov	r4, r2
 800742a:	460e      	mov	r6, r1
 800742c:	b921      	cbnz	r1, 8007438 <_realloc_r+0x16>
 800742e:	4611      	mov	r1, r2
 8007430:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007434:	f7fd be40 	b.w	80050b8 <_malloc_r>
 8007438:	b92a      	cbnz	r2, 8007446 <_realloc_r+0x24>
 800743a:	f7fd fdcd 	bl	8004fd8 <_free_r>
 800743e:	4625      	mov	r5, r4
 8007440:	4628      	mov	r0, r5
 8007442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007446:	f000 f842 	bl	80074ce <_malloc_usable_size_r>
 800744a:	4284      	cmp	r4, r0
 800744c:	4607      	mov	r7, r0
 800744e:	d802      	bhi.n	8007456 <_realloc_r+0x34>
 8007450:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007454:	d812      	bhi.n	800747c <_realloc_r+0x5a>
 8007456:	4621      	mov	r1, r4
 8007458:	4640      	mov	r0, r8
 800745a:	f7fd fe2d 	bl	80050b8 <_malloc_r>
 800745e:	4605      	mov	r5, r0
 8007460:	2800      	cmp	r0, #0
 8007462:	d0ed      	beq.n	8007440 <_realloc_r+0x1e>
 8007464:	42bc      	cmp	r4, r7
 8007466:	4622      	mov	r2, r4
 8007468:	4631      	mov	r1, r6
 800746a:	bf28      	it	cs
 800746c:	463a      	movcs	r2, r7
 800746e:	f7ff fc27 	bl	8006cc0 <memcpy>
 8007472:	4631      	mov	r1, r6
 8007474:	4640      	mov	r0, r8
 8007476:	f7fd fdaf 	bl	8004fd8 <_free_r>
 800747a:	e7e1      	b.n	8007440 <_realloc_r+0x1e>
 800747c:	4635      	mov	r5, r6
 800747e:	e7df      	b.n	8007440 <_realloc_r+0x1e>

08007480 <__ascii_wctomb>:
 8007480:	4603      	mov	r3, r0
 8007482:	4608      	mov	r0, r1
 8007484:	b141      	cbz	r1, 8007498 <__ascii_wctomb+0x18>
 8007486:	2aff      	cmp	r2, #255	; 0xff
 8007488:	d904      	bls.n	8007494 <__ascii_wctomb+0x14>
 800748a:	228a      	movs	r2, #138	; 0x8a
 800748c:	f04f 30ff 	mov.w	r0, #4294967295
 8007490:	601a      	str	r2, [r3, #0]
 8007492:	4770      	bx	lr
 8007494:	2001      	movs	r0, #1
 8007496:	700a      	strb	r2, [r1, #0]
 8007498:	4770      	bx	lr
	...

0800749c <fiprintf>:
 800749c:	b40e      	push	{r1, r2, r3}
 800749e:	b503      	push	{r0, r1, lr}
 80074a0:	4601      	mov	r1, r0
 80074a2:	ab03      	add	r3, sp, #12
 80074a4:	4805      	ldr	r0, [pc, #20]	; (80074bc <fiprintf+0x20>)
 80074a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80074aa:	6800      	ldr	r0, [r0, #0]
 80074ac:	9301      	str	r3, [sp, #4]
 80074ae:	f000 f83d 	bl	800752c <_vfiprintf_r>
 80074b2:	b002      	add	sp, #8
 80074b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80074b8:	b003      	add	sp, #12
 80074ba:	4770      	bx	lr
 80074bc:	20000064 	.word	0x20000064

080074c0 <abort>:
 80074c0:	2006      	movs	r0, #6
 80074c2:	b508      	push	{r3, lr}
 80074c4:	f000 fa0a 	bl	80078dc <raise>
 80074c8:	2001      	movs	r0, #1
 80074ca:	f7f9 fd98 	bl	8000ffe <_exit>

080074ce <_malloc_usable_size_r>:
 80074ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074d2:	1f18      	subs	r0, r3, #4
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	bfbc      	itt	lt
 80074d8:	580b      	ldrlt	r3, [r1, r0]
 80074da:	18c0      	addlt	r0, r0, r3
 80074dc:	4770      	bx	lr

080074de <__sfputc_r>:
 80074de:	6893      	ldr	r3, [r2, #8]
 80074e0:	b410      	push	{r4}
 80074e2:	3b01      	subs	r3, #1
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	6093      	str	r3, [r2, #8]
 80074e8:	da07      	bge.n	80074fa <__sfputc_r+0x1c>
 80074ea:	6994      	ldr	r4, [r2, #24]
 80074ec:	42a3      	cmp	r3, r4
 80074ee:	db01      	blt.n	80074f4 <__sfputc_r+0x16>
 80074f0:	290a      	cmp	r1, #10
 80074f2:	d102      	bne.n	80074fa <__sfputc_r+0x1c>
 80074f4:	bc10      	pop	{r4}
 80074f6:	f000 b933 	b.w	8007760 <__swbuf_r>
 80074fa:	6813      	ldr	r3, [r2, #0]
 80074fc:	1c58      	adds	r0, r3, #1
 80074fe:	6010      	str	r0, [r2, #0]
 8007500:	7019      	strb	r1, [r3, #0]
 8007502:	4608      	mov	r0, r1
 8007504:	bc10      	pop	{r4}
 8007506:	4770      	bx	lr

08007508 <__sfputs_r>:
 8007508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800750a:	4606      	mov	r6, r0
 800750c:	460f      	mov	r7, r1
 800750e:	4614      	mov	r4, r2
 8007510:	18d5      	adds	r5, r2, r3
 8007512:	42ac      	cmp	r4, r5
 8007514:	d101      	bne.n	800751a <__sfputs_r+0x12>
 8007516:	2000      	movs	r0, #0
 8007518:	e007      	b.n	800752a <__sfputs_r+0x22>
 800751a:	463a      	mov	r2, r7
 800751c:	4630      	mov	r0, r6
 800751e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007522:	f7ff ffdc 	bl	80074de <__sfputc_r>
 8007526:	1c43      	adds	r3, r0, #1
 8007528:	d1f3      	bne.n	8007512 <__sfputs_r+0xa>
 800752a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800752c <_vfiprintf_r>:
 800752c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007530:	460d      	mov	r5, r1
 8007532:	4614      	mov	r4, r2
 8007534:	4698      	mov	r8, r3
 8007536:	4606      	mov	r6, r0
 8007538:	b09d      	sub	sp, #116	; 0x74
 800753a:	b118      	cbz	r0, 8007544 <_vfiprintf_r+0x18>
 800753c:	6a03      	ldr	r3, [r0, #32]
 800753e:	b90b      	cbnz	r3, 8007544 <_vfiprintf_r+0x18>
 8007540:	f7fc fdb0 	bl	80040a4 <__sinit>
 8007544:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007546:	07d9      	lsls	r1, r3, #31
 8007548:	d405      	bmi.n	8007556 <_vfiprintf_r+0x2a>
 800754a:	89ab      	ldrh	r3, [r5, #12]
 800754c:	059a      	lsls	r2, r3, #22
 800754e:	d402      	bmi.n	8007556 <_vfiprintf_r+0x2a>
 8007550:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007552:	f7fc febd 	bl	80042d0 <__retarget_lock_acquire_recursive>
 8007556:	89ab      	ldrh	r3, [r5, #12]
 8007558:	071b      	lsls	r3, r3, #28
 800755a:	d501      	bpl.n	8007560 <_vfiprintf_r+0x34>
 800755c:	692b      	ldr	r3, [r5, #16]
 800755e:	b99b      	cbnz	r3, 8007588 <_vfiprintf_r+0x5c>
 8007560:	4629      	mov	r1, r5
 8007562:	4630      	mov	r0, r6
 8007564:	f000 f93a 	bl	80077dc <__swsetup_r>
 8007568:	b170      	cbz	r0, 8007588 <_vfiprintf_r+0x5c>
 800756a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800756c:	07dc      	lsls	r4, r3, #31
 800756e:	d504      	bpl.n	800757a <_vfiprintf_r+0x4e>
 8007570:	f04f 30ff 	mov.w	r0, #4294967295
 8007574:	b01d      	add	sp, #116	; 0x74
 8007576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800757a:	89ab      	ldrh	r3, [r5, #12]
 800757c:	0598      	lsls	r0, r3, #22
 800757e:	d4f7      	bmi.n	8007570 <_vfiprintf_r+0x44>
 8007580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007582:	f7fc fea6 	bl	80042d2 <__retarget_lock_release_recursive>
 8007586:	e7f3      	b.n	8007570 <_vfiprintf_r+0x44>
 8007588:	2300      	movs	r3, #0
 800758a:	9309      	str	r3, [sp, #36]	; 0x24
 800758c:	2320      	movs	r3, #32
 800758e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007592:	2330      	movs	r3, #48	; 0x30
 8007594:	f04f 0901 	mov.w	r9, #1
 8007598:	f8cd 800c 	str.w	r8, [sp, #12]
 800759c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800774c <_vfiprintf_r+0x220>
 80075a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075a4:	4623      	mov	r3, r4
 80075a6:	469a      	mov	sl, r3
 80075a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075ac:	b10a      	cbz	r2, 80075b2 <_vfiprintf_r+0x86>
 80075ae:	2a25      	cmp	r2, #37	; 0x25
 80075b0:	d1f9      	bne.n	80075a6 <_vfiprintf_r+0x7a>
 80075b2:	ebba 0b04 	subs.w	fp, sl, r4
 80075b6:	d00b      	beq.n	80075d0 <_vfiprintf_r+0xa4>
 80075b8:	465b      	mov	r3, fp
 80075ba:	4622      	mov	r2, r4
 80075bc:	4629      	mov	r1, r5
 80075be:	4630      	mov	r0, r6
 80075c0:	f7ff ffa2 	bl	8007508 <__sfputs_r>
 80075c4:	3001      	adds	r0, #1
 80075c6:	f000 80a9 	beq.w	800771c <_vfiprintf_r+0x1f0>
 80075ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075cc:	445a      	add	r2, fp
 80075ce:	9209      	str	r2, [sp, #36]	; 0x24
 80075d0:	f89a 3000 	ldrb.w	r3, [sl]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f000 80a1 	beq.w	800771c <_vfiprintf_r+0x1f0>
 80075da:	2300      	movs	r3, #0
 80075dc:	f04f 32ff 	mov.w	r2, #4294967295
 80075e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075e4:	f10a 0a01 	add.w	sl, sl, #1
 80075e8:	9304      	str	r3, [sp, #16]
 80075ea:	9307      	str	r3, [sp, #28]
 80075ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075f0:	931a      	str	r3, [sp, #104]	; 0x68
 80075f2:	4654      	mov	r4, sl
 80075f4:	2205      	movs	r2, #5
 80075f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075fa:	4854      	ldr	r0, [pc, #336]	; (800774c <_vfiprintf_r+0x220>)
 80075fc:	f7fc fe6a 	bl	80042d4 <memchr>
 8007600:	9a04      	ldr	r2, [sp, #16]
 8007602:	b9d8      	cbnz	r0, 800763c <_vfiprintf_r+0x110>
 8007604:	06d1      	lsls	r1, r2, #27
 8007606:	bf44      	itt	mi
 8007608:	2320      	movmi	r3, #32
 800760a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800760e:	0713      	lsls	r3, r2, #28
 8007610:	bf44      	itt	mi
 8007612:	232b      	movmi	r3, #43	; 0x2b
 8007614:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007618:	f89a 3000 	ldrb.w	r3, [sl]
 800761c:	2b2a      	cmp	r3, #42	; 0x2a
 800761e:	d015      	beq.n	800764c <_vfiprintf_r+0x120>
 8007620:	4654      	mov	r4, sl
 8007622:	2000      	movs	r0, #0
 8007624:	f04f 0c0a 	mov.w	ip, #10
 8007628:	9a07      	ldr	r2, [sp, #28]
 800762a:	4621      	mov	r1, r4
 800762c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007630:	3b30      	subs	r3, #48	; 0x30
 8007632:	2b09      	cmp	r3, #9
 8007634:	d94d      	bls.n	80076d2 <_vfiprintf_r+0x1a6>
 8007636:	b1b0      	cbz	r0, 8007666 <_vfiprintf_r+0x13a>
 8007638:	9207      	str	r2, [sp, #28]
 800763a:	e014      	b.n	8007666 <_vfiprintf_r+0x13a>
 800763c:	eba0 0308 	sub.w	r3, r0, r8
 8007640:	fa09 f303 	lsl.w	r3, r9, r3
 8007644:	4313      	orrs	r3, r2
 8007646:	46a2      	mov	sl, r4
 8007648:	9304      	str	r3, [sp, #16]
 800764a:	e7d2      	b.n	80075f2 <_vfiprintf_r+0xc6>
 800764c:	9b03      	ldr	r3, [sp, #12]
 800764e:	1d19      	adds	r1, r3, #4
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	9103      	str	r1, [sp, #12]
 8007654:	2b00      	cmp	r3, #0
 8007656:	bfbb      	ittet	lt
 8007658:	425b      	neglt	r3, r3
 800765a:	f042 0202 	orrlt.w	r2, r2, #2
 800765e:	9307      	strge	r3, [sp, #28]
 8007660:	9307      	strlt	r3, [sp, #28]
 8007662:	bfb8      	it	lt
 8007664:	9204      	strlt	r2, [sp, #16]
 8007666:	7823      	ldrb	r3, [r4, #0]
 8007668:	2b2e      	cmp	r3, #46	; 0x2e
 800766a:	d10c      	bne.n	8007686 <_vfiprintf_r+0x15a>
 800766c:	7863      	ldrb	r3, [r4, #1]
 800766e:	2b2a      	cmp	r3, #42	; 0x2a
 8007670:	d134      	bne.n	80076dc <_vfiprintf_r+0x1b0>
 8007672:	9b03      	ldr	r3, [sp, #12]
 8007674:	3402      	adds	r4, #2
 8007676:	1d1a      	adds	r2, r3, #4
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	9203      	str	r2, [sp, #12]
 800767c:	2b00      	cmp	r3, #0
 800767e:	bfb8      	it	lt
 8007680:	f04f 33ff 	movlt.w	r3, #4294967295
 8007684:	9305      	str	r3, [sp, #20]
 8007686:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007750 <_vfiprintf_r+0x224>
 800768a:	2203      	movs	r2, #3
 800768c:	4650      	mov	r0, sl
 800768e:	7821      	ldrb	r1, [r4, #0]
 8007690:	f7fc fe20 	bl	80042d4 <memchr>
 8007694:	b138      	cbz	r0, 80076a6 <_vfiprintf_r+0x17a>
 8007696:	2240      	movs	r2, #64	; 0x40
 8007698:	9b04      	ldr	r3, [sp, #16]
 800769a:	eba0 000a 	sub.w	r0, r0, sl
 800769e:	4082      	lsls	r2, r0
 80076a0:	4313      	orrs	r3, r2
 80076a2:	3401      	adds	r4, #1
 80076a4:	9304      	str	r3, [sp, #16]
 80076a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076aa:	2206      	movs	r2, #6
 80076ac:	4829      	ldr	r0, [pc, #164]	; (8007754 <_vfiprintf_r+0x228>)
 80076ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076b2:	f7fc fe0f 	bl	80042d4 <memchr>
 80076b6:	2800      	cmp	r0, #0
 80076b8:	d03f      	beq.n	800773a <_vfiprintf_r+0x20e>
 80076ba:	4b27      	ldr	r3, [pc, #156]	; (8007758 <_vfiprintf_r+0x22c>)
 80076bc:	bb1b      	cbnz	r3, 8007706 <_vfiprintf_r+0x1da>
 80076be:	9b03      	ldr	r3, [sp, #12]
 80076c0:	3307      	adds	r3, #7
 80076c2:	f023 0307 	bic.w	r3, r3, #7
 80076c6:	3308      	adds	r3, #8
 80076c8:	9303      	str	r3, [sp, #12]
 80076ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076cc:	443b      	add	r3, r7
 80076ce:	9309      	str	r3, [sp, #36]	; 0x24
 80076d0:	e768      	b.n	80075a4 <_vfiprintf_r+0x78>
 80076d2:	460c      	mov	r4, r1
 80076d4:	2001      	movs	r0, #1
 80076d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80076da:	e7a6      	b.n	800762a <_vfiprintf_r+0xfe>
 80076dc:	2300      	movs	r3, #0
 80076de:	f04f 0c0a 	mov.w	ip, #10
 80076e2:	4619      	mov	r1, r3
 80076e4:	3401      	adds	r4, #1
 80076e6:	9305      	str	r3, [sp, #20]
 80076e8:	4620      	mov	r0, r4
 80076ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076ee:	3a30      	subs	r2, #48	; 0x30
 80076f0:	2a09      	cmp	r2, #9
 80076f2:	d903      	bls.n	80076fc <_vfiprintf_r+0x1d0>
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d0c6      	beq.n	8007686 <_vfiprintf_r+0x15a>
 80076f8:	9105      	str	r1, [sp, #20]
 80076fa:	e7c4      	b.n	8007686 <_vfiprintf_r+0x15a>
 80076fc:	4604      	mov	r4, r0
 80076fe:	2301      	movs	r3, #1
 8007700:	fb0c 2101 	mla	r1, ip, r1, r2
 8007704:	e7f0      	b.n	80076e8 <_vfiprintf_r+0x1bc>
 8007706:	ab03      	add	r3, sp, #12
 8007708:	9300      	str	r3, [sp, #0]
 800770a:	462a      	mov	r2, r5
 800770c:	4630      	mov	r0, r6
 800770e:	4b13      	ldr	r3, [pc, #76]	; (800775c <_vfiprintf_r+0x230>)
 8007710:	a904      	add	r1, sp, #16
 8007712:	f7fb fe7d 	bl	8003410 <_printf_float>
 8007716:	4607      	mov	r7, r0
 8007718:	1c78      	adds	r0, r7, #1
 800771a:	d1d6      	bne.n	80076ca <_vfiprintf_r+0x19e>
 800771c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800771e:	07d9      	lsls	r1, r3, #31
 8007720:	d405      	bmi.n	800772e <_vfiprintf_r+0x202>
 8007722:	89ab      	ldrh	r3, [r5, #12]
 8007724:	059a      	lsls	r2, r3, #22
 8007726:	d402      	bmi.n	800772e <_vfiprintf_r+0x202>
 8007728:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800772a:	f7fc fdd2 	bl	80042d2 <__retarget_lock_release_recursive>
 800772e:	89ab      	ldrh	r3, [r5, #12]
 8007730:	065b      	lsls	r3, r3, #25
 8007732:	f53f af1d 	bmi.w	8007570 <_vfiprintf_r+0x44>
 8007736:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007738:	e71c      	b.n	8007574 <_vfiprintf_r+0x48>
 800773a:	ab03      	add	r3, sp, #12
 800773c:	9300      	str	r3, [sp, #0]
 800773e:	462a      	mov	r2, r5
 8007740:	4630      	mov	r0, r6
 8007742:	4b06      	ldr	r3, [pc, #24]	; (800775c <_vfiprintf_r+0x230>)
 8007744:	a904      	add	r1, sp, #16
 8007746:	f7fc f903 	bl	8003950 <_printf_i>
 800774a:	e7e4      	b.n	8007716 <_vfiprintf_r+0x1ea>
 800774c:	08007e19 	.word	0x08007e19
 8007750:	08007e1f 	.word	0x08007e1f
 8007754:	08007e23 	.word	0x08007e23
 8007758:	08003411 	.word	0x08003411
 800775c:	08007509 	.word	0x08007509

08007760 <__swbuf_r>:
 8007760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007762:	460e      	mov	r6, r1
 8007764:	4614      	mov	r4, r2
 8007766:	4605      	mov	r5, r0
 8007768:	b118      	cbz	r0, 8007772 <__swbuf_r+0x12>
 800776a:	6a03      	ldr	r3, [r0, #32]
 800776c:	b90b      	cbnz	r3, 8007772 <__swbuf_r+0x12>
 800776e:	f7fc fc99 	bl	80040a4 <__sinit>
 8007772:	69a3      	ldr	r3, [r4, #24]
 8007774:	60a3      	str	r3, [r4, #8]
 8007776:	89a3      	ldrh	r3, [r4, #12]
 8007778:	071a      	lsls	r2, r3, #28
 800777a:	d525      	bpl.n	80077c8 <__swbuf_r+0x68>
 800777c:	6923      	ldr	r3, [r4, #16]
 800777e:	b31b      	cbz	r3, 80077c8 <__swbuf_r+0x68>
 8007780:	6823      	ldr	r3, [r4, #0]
 8007782:	6922      	ldr	r2, [r4, #16]
 8007784:	b2f6      	uxtb	r6, r6
 8007786:	1a98      	subs	r0, r3, r2
 8007788:	6963      	ldr	r3, [r4, #20]
 800778a:	4637      	mov	r7, r6
 800778c:	4283      	cmp	r3, r0
 800778e:	dc04      	bgt.n	800779a <__swbuf_r+0x3a>
 8007790:	4621      	mov	r1, r4
 8007792:	4628      	mov	r0, r5
 8007794:	f7ff fa30 	bl	8006bf8 <_fflush_r>
 8007798:	b9e0      	cbnz	r0, 80077d4 <__swbuf_r+0x74>
 800779a:	68a3      	ldr	r3, [r4, #8]
 800779c:	3b01      	subs	r3, #1
 800779e:	60a3      	str	r3, [r4, #8]
 80077a0:	6823      	ldr	r3, [r4, #0]
 80077a2:	1c5a      	adds	r2, r3, #1
 80077a4:	6022      	str	r2, [r4, #0]
 80077a6:	701e      	strb	r6, [r3, #0]
 80077a8:	6962      	ldr	r2, [r4, #20]
 80077aa:	1c43      	adds	r3, r0, #1
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d004      	beq.n	80077ba <__swbuf_r+0x5a>
 80077b0:	89a3      	ldrh	r3, [r4, #12]
 80077b2:	07db      	lsls	r3, r3, #31
 80077b4:	d506      	bpl.n	80077c4 <__swbuf_r+0x64>
 80077b6:	2e0a      	cmp	r6, #10
 80077b8:	d104      	bne.n	80077c4 <__swbuf_r+0x64>
 80077ba:	4621      	mov	r1, r4
 80077bc:	4628      	mov	r0, r5
 80077be:	f7ff fa1b 	bl	8006bf8 <_fflush_r>
 80077c2:	b938      	cbnz	r0, 80077d4 <__swbuf_r+0x74>
 80077c4:	4638      	mov	r0, r7
 80077c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077c8:	4621      	mov	r1, r4
 80077ca:	4628      	mov	r0, r5
 80077cc:	f000 f806 	bl	80077dc <__swsetup_r>
 80077d0:	2800      	cmp	r0, #0
 80077d2:	d0d5      	beq.n	8007780 <__swbuf_r+0x20>
 80077d4:	f04f 37ff 	mov.w	r7, #4294967295
 80077d8:	e7f4      	b.n	80077c4 <__swbuf_r+0x64>
	...

080077dc <__swsetup_r>:
 80077dc:	b538      	push	{r3, r4, r5, lr}
 80077de:	4b2a      	ldr	r3, [pc, #168]	; (8007888 <__swsetup_r+0xac>)
 80077e0:	4605      	mov	r5, r0
 80077e2:	6818      	ldr	r0, [r3, #0]
 80077e4:	460c      	mov	r4, r1
 80077e6:	b118      	cbz	r0, 80077f0 <__swsetup_r+0x14>
 80077e8:	6a03      	ldr	r3, [r0, #32]
 80077ea:	b90b      	cbnz	r3, 80077f0 <__swsetup_r+0x14>
 80077ec:	f7fc fc5a 	bl	80040a4 <__sinit>
 80077f0:	89a3      	ldrh	r3, [r4, #12]
 80077f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077f6:	0718      	lsls	r0, r3, #28
 80077f8:	d422      	bmi.n	8007840 <__swsetup_r+0x64>
 80077fa:	06d9      	lsls	r1, r3, #27
 80077fc:	d407      	bmi.n	800780e <__swsetup_r+0x32>
 80077fe:	2309      	movs	r3, #9
 8007800:	602b      	str	r3, [r5, #0]
 8007802:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007806:	f04f 30ff 	mov.w	r0, #4294967295
 800780a:	81a3      	strh	r3, [r4, #12]
 800780c:	e034      	b.n	8007878 <__swsetup_r+0x9c>
 800780e:	0758      	lsls	r0, r3, #29
 8007810:	d512      	bpl.n	8007838 <__swsetup_r+0x5c>
 8007812:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007814:	b141      	cbz	r1, 8007828 <__swsetup_r+0x4c>
 8007816:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800781a:	4299      	cmp	r1, r3
 800781c:	d002      	beq.n	8007824 <__swsetup_r+0x48>
 800781e:	4628      	mov	r0, r5
 8007820:	f7fd fbda 	bl	8004fd8 <_free_r>
 8007824:	2300      	movs	r3, #0
 8007826:	6363      	str	r3, [r4, #52]	; 0x34
 8007828:	89a3      	ldrh	r3, [r4, #12]
 800782a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800782e:	81a3      	strh	r3, [r4, #12]
 8007830:	2300      	movs	r3, #0
 8007832:	6063      	str	r3, [r4, #4]
 8007834:	6923      	ldr	r3, [r4, #16]
 8007836:	6023      	str	r3, [r4, #0]
 8007838:	89a3      	ldrh	r3, [r4, #12]
 800783a:	f043 0308 	orr.w	r3, r3, #8
 800783e:	81a3      	strh	r3, [r4, #12]
 8007840:	6923      	ldr	r3, [r4, #16]
 8007842:	b94b      	cbnz	r3, 8007858 <__swsetup_r+0x7c>
 8007844:	89a3      	ldrh	r3, [r4, #12]
 8007846:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800784a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800784e:	d003      	beq.n	8007858 <__swsetup_r+0x7c>
 8007850:	4621      	mov	r1, r4
 8007852:	4628      	mov	r0, r5
 8007854:	f000 f883 	bl	800795e <__smakebuf_r>
 8007858:	89a0      	ldrh	r0, [r4, #12]
 800785a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800785e:	f010 0301 	ands.w	r3, r0, #1
 8007862:	d00a      	beq.n	800787a <__swsetup_r+0x9e>
 8007864:	2300      	movs	r3, #0
 8007866:	60a3      	str	r3, [r4, #8]
 8007868:	6963      	ldr	r3, [r4, #20]
 800786a:	425b      	negs	r3, r3
 800786c:	61a3      	str	r3, [r4, #24]
 800786e:	6923      	ldr	r3, [r4, #16]
 8007870:	b943      	cbnz	r3, 8007884 <__swsetup_r+0xa8>
 8007872:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007876:	d1c4      	bne.n	8007802 <__swsetup_r+0x26>
 8007878:	bd38      	pop	{r3, r4, r5, pc}
 800787a:	0781      	lsls	r1, r0, #30
 800787c:	bf58      	it	pl
 800787e:	6963      	ldrpl	r3, [r4, #20]
 8007880:	60a3      	str	r3, [r4, #8]
 8007882:	e7f4      	b.n	800786e <__swsetup_r+0x92>
 8007884:	2000      	movs	r0, #0
 8007886:	e7f7      	b.n	8007878 <__swsetup_r+0x9c>
 8007888:	20000064 	.word	0x20000064

0800788c <_raise_r>:
 800788c:	291f      	cmp	r1, #31
 800788e:	b538      	push	{r3, r4, r5, lr}
 8007890:	4604      	mov	r4, r0
 8007892:	460d      	mov	r5, r1
 8007894:	d904      	bls.n	80078a0 <_raise_r+0x14>
 8007896:	2316      	movs	r3, #22
 8007898:	6003      	str	r3, [r0, #0]
 800789a:	f04f 30ff 	mov.w	r0, #4294967295
 800789e:	bd38      	pop	{r3, r4, r5, pc}
 80078a0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80078a2:	b112      	cbz	r2, 80078aa <_raise_r+0x1e>
 80078a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80078a8:	b94b      	cbnz	r3, 80078be <_raise_r+0x32>
 80078aa:	4620      	mov	r0, r4
 80078ac:	f000 f830 	bl	8007910 <_getpid_r>
 80078b0:	462a      	mov	r2, r5
 80078b2:	4601      	mov	r1, r0
 80078b4:	4620      	mov	r0, r4
 80078b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078ba:	f000 b817 	b.w	80078ec <_kill_r>
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d00a      	beq.n	80078d8 <_raise_r+0x4c>
 80078c2:	1c59      	adds	r1, r3, #1
 80078c4:	d103      	bne.n	80078ce <_raise_r+0x42>
 80078c6:	2316      	movs	r3, #22
 80078c8:	6003      	str	r3, [r0, #0]
 80078ca:	2001      	movs	r0, #1
 80078cc:	e7e7      	b.n	800789e <_raise_r+0x12>
 80078ce:	2400      	movs	r4, #0
 80078d0:	4628      	mov	r0, r5
 80078d2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80078d6:	4798      	blx	r3
 80078d8:	2000      	movs	r0, #0
 80078da:	e7e0      	b.n	800789e <_raise_r+0x12>

080078dc <raise>:
 80078dc:	4b02      	ldr	r3, [pc, #8]	; (80078e8 <raise+0xc>)
 80078de:	4601      	mov	r1, r0
 80078e0:	6818      	ldr	r0, [r3, #0]
 80078e2:	f7ff bfd3 	b.w	800788c <_raise_r>
 80078e6:	bf00      	nop
 80078e8:	20000064 	.word	0x20000064

080078ec <_kill_r>:
 80078ec:	b538      	push	{r3, r4, r5, lr}
 80078ee:	2300      	movs	r3, #0
 80078f0:	4d06      	ldr	r5, [pc, #24]	; (800790c <_kill_r+0x20>)
 80078f2:	4604      	mov	r4, r0
 80078f4:	4608      	mov	r0, r1
 80078f6:	4611      	mov	r1, r2
 80078f8:	602b      	str	r3, [r5, #0]
 80078fa:	f7f9 fb70 	bl	8000fde <_kill>
 80078fe:	1c43      	adds	r3, r0, #1
 8007900:	d102      	bne.n	8007908 <_kill_r+0x1c>
 8007902:	682b      	ldr	r3, [r5, #0]
 8007904:	b103      	cbz	r3, 8007908 <_kill_r+0x1c>
 8007906:	6023      	str	r3, [r4, #0]
 8007908:	bd38      	pop	{r3, r4, r5, pc}
 800790a:	bf00      	nop
 800790c:	20000400 	.word	0x20000400

08007910 <_getpid_r>:
 8007910:	f7f9 bb5e 	b.w	8000fd0 <_getpid>

08007914 <__swhatbuf_r>:
 8007914:	b570      	push	{r4, r5, r6, lr}
 8007916:	460c      	mov	r4, r1
 8007918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800791c:	4615      	mov	r5, r2
 800791e:	2900      	cmp	r1, #0
 8007920:	461e      	mov	r6, r3
 8007922:	b096      	sub	sp, #88	; 0x58
 8007924:	da0c      	bge.n	8007940 <__swhatbuf_r+0x2c>
 8007926:	89a3      	ldrh	r3, [r4, #12]
 8007928:	2100      	movs	r1, #0
 800792a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800792e:	bf0c      	ite	eq
 8007930:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007934:	2340      	movne	r3, #64	; 0x40
 8007936:	2000      	movs	r0, #0
 8007938:	6031      	str	r1, [r6, #0]
 800793a:	602b      	str	r3, [r5, #0]
 800793c:	b016      	add	sp, #88	; 0x58
 800793e:	bd70      	pop	{r4, r5, r6, pc}
 8007940:	466a      	mov	r2, sp
 8007942:	f000 f849 	bl	80079d8 <_fstat_r>
 8007946:	2800      	cmp	r0, #0
 8007948:	dbed      	blt.n	8007926 <__swhatbuf_r+0x12>
 800794a:	9901      	ldr	r1, [sp, #4]
 800794c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007950:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007954:	4259      	negs	r1, r3
 8007956:	4159      	adcs	r1, r3
 8007958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800795c:	e7eb      	b.n	8007936 <__swhatbuf_r+0x22>

0800795e <__smakebuf_r>:
 800795e:	898b      	ldrh	r3, [r1, #12]
 8007960:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007962:	079d      	lsls	r5, r3, #30
 8007964:	4606      	mov	r6, r0
 8007966:	460c      	mov	r4, r1
 8007968:	d507      	bpl.n	800797a <__smakebuf_r+0x1c>
 800796a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800796e:	6023      	str	r3, [r4, #0]
 8007970:	6123      	str	r3, [r4, #16]
 8007972:	2301      	movs	r3, #1
 8007974:	6163      	str	r3, [r4, #20]
 8007976:	b002      	add	sp, #8
 8007978:	bd70      	pop	{r4, r5, r6, pc}
 800797a:	466a      	mov	r2, sp
 800797c:	ab01      	add	r3, sp, #4
 800797e:	f7ff ffc9 	bl	8007914 <__swhatbuf_r>
 8007982:	9900      	ldr	r1, [sp, #0]
 8007984:	4605      	mov	r5, r0
 8007986:	4630      	mov	r0, r6
 8007988:	f7fd fb96 	bl	80050b8 <_malloc_r>
 800798c:	b948      	cbnz	r0, 80079a2 <__smakebuf_r+0x44>
 800798e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007992:	059a      	lsls	r2, r3, #22
 8007994:	d4ef      	bmi.n	8007976 <__smakebuf_r+0x18>
 8007996:	f023 0303 	bic.w	r3, r3, #3
 800799a:	f043 0302 	orr.w	r3, r3, #2
 800799e:	81a3      	strh	r3, [r4, #12]
 80079a0:	e7e3      	b.n	800796a <__smakebuf_r+0xc>
 80079a2:	89a3      	ldrh	r3, [r4, #12]
 80079a4:	6020      	str	r0, [r4, #0]
 80079a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079aa:	81a3      	strh	r3, [r4, #12]
 80079ac:	9b00      	ldr	r3, [sp, #0]
 80079ae:	6120      	str	r0, [r4, #16]
 80079b0:	6163      	str	r3, [r4, #20]
 80079b2:	9b01      	ldr	r3, [sp, #4]
 80079b4:	b15b      	cbz	r3, 80079ce <__smakebuf_r+0x70>
 80079b6:	4630      	mov	r0, r6
 80079b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079bc:	f000 f81e 	bl	80079fc <_isatty_r>
 80079c0:	b128      	cbz	r0, 80079ce <__smakebuf_r+0x70>
 80079c2:	89a3      	ldrh	r3, [r4, #12]
 80079c4:	f023 0303 	bic.w	r3, r3, #3
 80079c8:	f043 0301 	orr.w	r3, r3, #1
 80079cc:	81a3      	strh	r3, [r4, #12]
 80079ce:	89a3      	ldrh	r3, [r4, #12]
 80079d0:	431d      	orrs	r5, r3
 80079d2:	81a5      	strh	r5, [r4, #12]
 80079d4:	e7cf      	b.n	8007976 <__smakebuf_r+0x18>
	...

080079d8 <_fstat_r>:
 80079d8:	b538      	push	{r3, r4, r5, lr}
 80079da:	2300      	movs	r3, #0
 80079dc:	4d06      	ldr	r5, [pc, #24]	; (80079f8 <_fstat_r+0x20>)
 80079de:	4604      	mov	r4, r0
 80079e0:	4608      	mov	r0, r1
 80079e2:	4611      	mov	r1, r2
 80079e4:	602b      	str	r3, [r5, #0]
 80079e6:	f7f9 fb58 	bl	800109a <_fstat>
 80079ea:	1c43      	adds	r3, r0, #1
 80079ec:	d102      	bne.n	80079f4 <_fstat_r+0x1c>
 80079ee:	682b      	ldr	r3, [r5, #0]
 80079f0:	b103      	cbz	r3, 80079f4 <_fstat_r+0x1c>
 80079f2:	6023      	str	r3, [r4, #0]
 80079f4:	bd38      	pop	{r3, r4, r5, pc}
 80079f6:	bf00      	nop
 80079f8:	20000400 	.word	0x20000400

080079fc <_isatty_r>:
 80079fc:	b538      	push	{r3, r4, r5, lr}
 80079fe:	2300      	movs	r3, #0
 8007a00:	4d05      	ldr	r5, [pc, #20]	; (8007a18 <_isatty_r+0x1c>)
 8007a02:	4604      	mov	r4, r0
 8007a04:	4608      	mov	r0, r1
 8007a06:	602b      	str	r3, [r5, #0]
 8007a08:	f7f9 fb56 	bl	80010b8 <_isatty>
 8007a0c:	1c43      	adds	r3, r0, #1
 8007a0e:	d102      	bne.n	8007a16 <_isatty_r+0x1a>
 8007a10:	682b      	ldr	r3, [r5, #0]
 8007a12:	b103      	cbz	r3, 8007a16 <_isatty_r+0x1a>
 8007a14:	6023      	str	r3, [r4, #0]
 8007a16:	bd38      	pop	{r3, r4, r5, pc}
 8007a18:	20000400 	.word	0x20000400

08007a1c <_init>:
 8007a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1e:	bf00      	nop
 8007a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a22:	bc08      	pop	{r3}
 8007a24:	469e      	mov	lr, r3
 8007a26:	4770      	bx	lr

08007a28 <_fini>:
 8007a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2a:	bf00      	nop
 8007a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a2e:	bc08      	pop	{r3}
 8007a30:	469e      	mov	lr, r3
 8007a32:	4770      	bx	lr
