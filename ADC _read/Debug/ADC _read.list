
ADC _read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076e4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  080077f8  080077f8  000177f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c90  08007c90  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08007c90  08007c90  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c90  08007c90  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c90  08007c90  00017c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c94  08007c94  00017c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  200001d4  08007e6c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08007e6c  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   000098b5  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001da9  00000000  00000000  00029af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b0  00000000  00000000  0002b8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000693  00000000  00000000  0002c150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018590  00000000  00000000  0002c7e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b2e2  00000000  00000000  00044d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088d13  00000000  00000000  00050055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003700  00000000  00000000  000d8d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000dc468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080077dc 	.word	0x080077dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080077dc 	.word	0x080077dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bdc:	f000 fb02 	bl	80011e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be0:	f000 f80b 	bl	8000bfa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be4:	f000 f8cc 	bl	8000d80 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000be8:	f000 f862 	bl	8000cb0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000bec:	f000 f89e 	bl	8000d2c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ADC_setup();
 8000bf0:	f000 fa9e 	bl	8001130 <ADC_setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Read_ADC();
 8000bf4:	f000 faae 	bl	8001154 <Read_ADC>
 8000bf8:	e7fc      	b.n	8000bf4 <main+0x1c>

08000bfa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b094      	sub	sp, #80	; 0x50
 8000bfe:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c04:	2228      	movs	r2, #40	; 0x28
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f003 fa5b 	bl	80040c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c46:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c50:	4618      	mov	r0, r3
 8000c52:	f001 fa69 	bl	8002128 <HAL_RCC_OscConfig>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c5c:	f000 f8be 	bl	8000ddc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c60:	230f      	movs	r3, #15
 8000c62:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c70:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	2102      	movs	r1, #2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f001 fcd5 	bl	800262c <HAL_RCC_ClockConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c88:	f000 f8a8 	bl	8000ddc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c94:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f001 fe55 	bl	8002948 <HAL_RCCEx_PeriphCLKConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ca4:	f000 f89a 	bl	8000ddc <Error_Handler>
  }
}
 8000ca8:	bf00      	nop
 8000caa:	3750      	adds	r7, #80	; 0x50
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cc0:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <MX_ADC1_Init+0x74>)
 8000cc2:	4a19      	ldr	r2, [pc, #100]	; (8000d28 <MX_ADC1_Init+0x78>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cc6:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <MX_ADC1_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ccc:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <MX_ADC1_Init+0x74>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_ADC1_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <MX_ADC1_Init+0x74>)
 8000cda:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000cde:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ce0:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <MX_ADC1_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_ADC1_Init+0x74>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cec:	480d      	ldr	r0, [pc, #52]	; (8000d24 <MX_ADC1_Init+0x74>)
 8000cee:	f000 fadb 	bl	80012a8 <HAL_ADC_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000cf8:	f000 f870 	bl	8000ddc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000cfc:	2307      	movs	r3, #7
 8000cfe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d00:	2301      	movs	r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_ADC1_Init+0x74>)
 8000d0e:	f000 fd2d 	bl	800176c <HAL_ADC_ConfigChannel>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000d18:	f000 f860 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	200001f0 	.word	0x200001f0
 8000d28:	40012400 	.word	0x40012400

08000d2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d32:	4a12      	ldr	r2, [pc, #72]	; (8000d7c <MX_USART1_UART_Init+0x50>)
 8000d34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d52:	220c      	movs	r2, #12
 8000d54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d64:	f001 ff5c 	bl	8002c20 <HAL_UART_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d6e:	f000 f835 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000220 	.word	0x20000220
 8000d7c:	40013800 	.word	0x40013800

08000d80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d86:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <MX_GPIO_Init+0x58>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	4a13      	ldr	r2, [pc, #76]	; (8000dd8 <MX_GPIO_Init+0x58>)
 8000d8c:	f043 0310 	orr.w	r3, r3, #16
 8000d90:	6193      	str	r3, [r2, #24]
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_GPIO_Init+0x58>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	f003 0310 	and.w	r3, r3, #16
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_GPIO_Init+0x58>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <MX_GPIO_Init+0x58>)
 8000da4:	f043 0320 	orr.w	r3, r3, #32
 8000da8:	6193      	str	r3, [r2, #24]
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <MX_GPIO_Init+0x58>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	f003 0320 	and.w	r3, r3, #32
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <MX_GPIO_Init+0x58>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <MX_GPIO_Init+0x58>)
 8000dbc:	f043 0304 	orr.w	r3, r3, #4
 8000dc0:	6193      	str	r3, [r2, #24]
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <MX_GPIO_Init+0x58>)
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	f003 0304 	and.w	r3, r3, #4
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dce:	bf00      	nop
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr
 8000dd8:	40021000 	.word	0x40021000

08000ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de0:	b672      	cpsid	i
}
 8000de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <Error_Handler+0x8>
	...

08000de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_MspInit+0x40>)
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <HAL_MspInit+0x40>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6193      	str	r3, [r2, #24]
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_MspInit+0x40>)
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <HAL_MspInit+0x40>)
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <HAL_MspInit+0x40>)
 8000e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e10:	61d3      	str	r3, [r2, #28]
 8000e12:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <HAL_MspInit+0x40>)
 8000e14:	69db      	ldr	r3, [r3, #28]
 8000e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	40021000 	.word	0x40021000

08000e2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b088      	sub	sp, #32
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a18      	ldr	r2, [pc, #96]	; (8000ea8 <HAL_ADC_MspInit+0x7c>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d129      	bne.n	8000ea0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e4c:	4b17      	ldr	r3, [pc, #92]	; (8000eac <HAL_ADC_MspInit+0x80>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	4a16      	ldr	r2, [pc, #88]	; (8000eac <HAL_ADC_MspInit+0x80>)
 8000e52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e56:	6193      	str	r3, [r2, #24]
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <HAL_ADC_MspInit+0x80>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <HAL_ADC_MspInit+0x80>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	4a10      	ldr	r2, [pc, #64]	; (8000eac <HAL_ADC_MspInit+0x80>)
 8000e6a:	f043 0304 	orr.w	r3, r3, #4
 8000e6e:	6193      	str	r3, [r2, #24]
 8000e70:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <HAL_ADC_MspInit+0x80>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	f003 0304 	and.w	r3, r3, #4
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e7c:	2380      	movs	r3, #128	; 0x80
 8000e7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e80:	2303      	movs	r3, #3
 8000e82:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 0310 	add.w	r3, r7, #16
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4809      	ldr	r0, [pc, #36]	; (8000eb0 <HAL_ADC_MspInit+0x84>)
 8000e8c:	f000 ffc8 	bl	8001e20 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2100      	movs	r1, #0
 8000e94:	2012      	movs	r0, #18
 8000e96:	f000 ff8c 	bl	8001db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e9a:	2012      	movs	r0, #18
 8000e9c:	f000 ffa5 	bl	8001dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ea0:	bf00      	nop
 8000ea2:	3720      	adds	r7, #32
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40012400 	.word	0x40012400
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40010800 	.word	0x40010800

08000eb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 0310 	add.w	r3, r7, #16
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a1c      	ldr	r2, [pc, #112]	; (8000f40 <HAL_UART_MspInit+0x8c>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d131      	bne.n	8000f38 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <HAL_UART_MspInit+0x90>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	4a1a      	ldr	r2, [pc, #104]	; (8000f44 <HAL_UART_MspInit+0x90>)
 8000eda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ede:	6193      	str	r3, [r2, #24]
 8000ee0:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <HAL_UART_MspInit+0x90>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eec:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <HAL_UART_MspInit+0x90>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a14      	ldr	r2, [pc, #80]	; (8000f44 <HAL_UART_MspInit+0x90>)
 8000ef2:	f043 0304 	orr.w	r3, r3, #4
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_UART_MspInit+0x90>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f003 0304 	and.w	r3, r3, #4
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	f107 0310 	add.w	r3, r7, #16
 8000f16:	4619      	mov	r1, r3
 8000f18:	480b      	ldr	r0, [pc, #44]	; (8000f48 <HAL_UART_MspInit+0x94>)
 8000f1a:	f000 ff81 	bl	8001e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	4619      	mov	r1, r3
 8000f32:	4805      	ldr	r0, [pc, #20]	; (8000f48 <HAL_UART_MspInit+0x94>)
 8000f34:	f000 ff74 	bl	8001e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f38:	bf00      	nop
 8000f3a:	3720      	adds	r7, #32
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40013800 	.word	0x40013800
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40010800 	.word	0x40010800

08000f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <NMI_Handler+0x4>

08000f52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <HardFault_Handler+0x4>

08000f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <MemManage_Handler+0x4>

08000f5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <BusFault_Handler+0x4>

08000f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <UsageFault_Handler+0x4>

08000f6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr

08000f76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr

08000f82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr

08000f8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f92:	f000 f96d 	bl	8001270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <ADC1_2_IRQHandler+0x10>)
 8000fa2:	f000 fb1b 	bl	80015dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200001f0 	.word	0x200001f0

08000fb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return 1;
 8000fb4:	2301      	movs	r3, #1
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr

08000fbe <_kill>:

int _kill(int pid, int sig)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fc8:	f003 f8ce 	bl	8004168 <__errno>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2216      	movs	r2, #22
 8000fd0:	601a      	str	r2, [r3, #0]
  return -1;
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <_exit>:

void _exit (int status)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fe6:	f04f 31ff 	mov.w	r1, #4294967295
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ffe7 	bl	8000fbe <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ff0:	e7fe      	b.n	8000ff0 <_exit+0x12>

08000ff2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b086      	sub	sp, #24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	e00a      	b.n	800101a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001004:	f3af 8000 	nop.w
 8001008:	4601      	mov	r1, r0
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	1c5a      	adds	r2, r3, #1
 800100e:	60ba      	str	r2, [r7, #8]
 8001010:	b2ca      	uxtb	r2, r1
 8001012:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	3301      	adds	r3, #1
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	429a      	cmp	r2, r3
 8001020:	dbf0      	blt.n	8001004 <_read+0x12>
  }

  return len;
 8001022:	687b      	ldr	r3, [r7, #4]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <_close>:
  }
  return len;
}

int _close(int file)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001034:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr

08001042 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001052:	605a      	str	r2, [r3, #4]
  return 0;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr

08001060 <_isatty>:

int _isatty(int file)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001068:	2301      	movs	r3, #1
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr

0800108c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001094:	4a14      	ldr	r2, [pc, #80]	; (80010e8 <_sbrk+0x5c>)
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <_sbrk+0x60>)
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a0:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <_sbrk+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d102      	bne.n	80010ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <_sbrk+0x64>)
 80010aa:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <_sbrk+0x68>)
 80010ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <_sbrk+0x64>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d207      	bcs.n	80010cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010bc:	f003 f854 	bl	8004168 <__errno>
 80010c0:	4603      	mov	r3, r0
 80010c2:	220c      	movs	r2, #12
 80010c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	e009      	b.n	80010e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <_sbrk+0x64>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <_sbrk+0x64>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <_sbrk+0x64>)
 80010dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010de:	68fb      	ldr	r3, [r7, #12]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20005000 	.word	0x20005000
 80010ec:	00000400 	.word	0x00000400
 80010f0:	20000268 	.word	0x20000268
 80010f4:	200003c0 	.word	0x200003c0

080010f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr

08001104 <_write>:
extern ADC_HandleTypeDef hadc1;
extern UART_HandleTypeDef huart1;

uint16_t AD_VAL = 0;

int _write(int fd, char *data, int len) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) data, len, HAL_MAX_DELAY);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	b29a      	uxth	r2, r3
 8001114:	f04f 33ff 	mov.w	r3, #4294967295
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	4804      	ldr	r0, [pc, #16]	; (800112c <_write+0x28>)
 800111c:	f001 fdd0 	bl	8002cc0 <HAL_UART_Transmit>
	return len;
 8001120:	687b      	ldr	r3, [r7, #4]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000220 	.word	0x20000220

08001130 <ADC_setup>:

void ADC_setup() {
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <ADC_setup+0x1c>)
 8001136:	f000 fcad 	bl	8001a94 <HAL_ADCEx_Calibration_Start>
	printf("setting up the ADCs \n");
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <ADC_setup+0x20>)
 800113c:	f002 fec2 	bl	8003ec4 <puts>
	HAL_ADC_Start_IT(&hadc1);
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <ADC_setup+0x1c>)
 8001142:	f000 f989 	bl	8001458 <HAL_ADC_Start_IT>
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200001f0 	.word	0x200001f0
 8001150:	080077f8 	.word	0x080077f8

08001154 <Read_ADC>:

void Read_ADC() {
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0

}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]

	// Read & Update The ADC Result
	AD_VAL = HAL_ADC_GetValue(&hadc1);
 8001168:	4808      	ldr	r0, [pc, #32]	; (800118c <HAL_ADC_ConvCpltCallback+0x2c>)
 800116a:	f000 fa2b 	bl	80015c4 <HAL_ADC_GetValue>
 800116e:	4603      	mov	r3, r0
 8001170:	b29a      	uxth	r2, r3
 8001172:	4b07      	ldr	r3, [pc, #28]	; (8001190 <HAL_ADC_ConvCpltCallback+0x30>)
 8001174:	801a      	strh	r2, [r3, #0]
	printf("ADC value is %d\n", AD_VAL);
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_ADC_ConvCpltCallback+0x30>)
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <HAL_ADC_ConvCpltCallback+0x34>)
 800117e:	f002 fe3b 	bl	8003df8 <iprintf>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200001f0 	.word	0x200001f0
 8001190:	2000026c 	.word	0x2000026c
 8001194:	08007810 	.word	0x08007810

08001198 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001198:	f7ff ffae 	bl	80010f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800119c:	480b      	ldr	r0, [pc, #44]	; (80011cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800119e:	490c      	ldr	r1, [pc, #48]	; (80011d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011a0:	4a0c      	ldr	r2, [pc, #48]	; (80011d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a4:	e002      	b.n	80011ac <LoopCopyDataInit>

080011a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011aa:	3304      	adds	r3, #4

080011ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b0:	d3f9      	bcc.n	80011a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b2:	4a09      	ldr	r2, [pc, #36]	; (80011d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011b4:	4c09      	ldr	r4, [pc, #36]	; (80011dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b8:	e001      	b.n	80011be <LoopFillZerobss>

080011ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011bc:	3204      	adds	r2, #4

080011be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c0:	d3fb      	bcc.n	80011ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011c2:	f002 ffd7 	bl	8004174 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011c6:	f7ff fd07 	bl	8000bd8 <main>
  bx lr
 80011ca:	4770      	bx	lr
  ldr r0, =_sdata
 80011cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80011d4:	08007c98 	.word	0x08007c98
  ldr r2, =_sbss
 80011d8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80011dc:	200003c0 	.word	0x200003c0

080011e0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011e0:	e7fe      	b.n	80011e0 <CAN1_RX1_IRQHandler>
	...

080011e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <HAL_Init+0x28>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a07      	ldr	r2, [pc, #28]	; (800120c <HAL_Init+0x28>)
 80011ee:	f043 0310 	orr.w	r3, r3, #16
 80011f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f4:	2003      	movs	r0, #3
 80011f6:	f000 fdd1 	bl	8001d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fa:	200f      	movs	r0, #15
 80011fc:	f000 f808 	bl	8001210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001200:	f7ff fdf2 	bl	8000de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40022000 	.word	0x40022000

08001210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_InitTick+0x54>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_InitTick+0x58>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4619      	mov	r1, r3
 8001222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001226:	fbb3 f3f1 	udiv	r3, r3, r1
 800122a:	fbb2 f3f3 	udiv	r3, r2, r3
 800122e:	4618      	mov	r0, r3
 8001230:	f000 fde9 	bl	8001e06 <HAL_SYSTICK_Config>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e00e      	b.n	800125c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b0f      	cmp	r3, #15
 8001242:	d80a      	bhi.n	800125a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001244:	2200      	movs	r2, #0
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f000 fdb1 	bl	8001db2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001250:	4a06      	ldr	r2, [pc, #24]	; (800126c <HAL_InitTick+0x5c>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	e000      	b.n	800125c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000000 	.word	0x20000000
 8001268:	20000008 	.word	0x20000008
 800126c:	20000004 	.word	0x20000004

08001270 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <HAL_IncTick+0x1c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <HAL_IncTick+0x20>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4413      	add	r3, r2
 8001280:	4a03      	ldr	r2, [pc, #12]	; (8001290 <HAL_IncTick+0x20>)
 8001282:	6013      	str	r3, [r2, #0]
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	20000008 	.word	0x20000008
 8001290:	20000270 	.word	0x20000270

08001294 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return uwTick;
 8001298:	4b02      	ldr	r3, [pc, #8]	; (80012a4 <HAL_GetTick+0x10>)
 800129a:	681b      	ldr	r3, [r3, #0]
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	20000270 	.word	0x20000270

080012a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b0:	2300      	movs	r3, #0
 80012b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80012b4:	2300      	movs	r3, #0
 80012b6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e0be      	b.n	8001448 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d109      	bne.n	80012ec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff fda0 	bl	8000e2c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 fb8f 	bl	8001a10 <ADC_ConversionStop_Disable>
 80012f2:	4603      	mov	r3, r0
 80012f4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f040 8099 	bne.w	8001436 <HAL_ADC_Init+0x18e>
 8001304:	7dfb      	ldrb	r3, [r7, #23]
 8001306:	2b00      	cmp	r3, #0
 8001308:	f040 8095 	bne.w	8001436 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001310:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001314:	f023 0302 	bic.w	r3, r3, #2
 8001318:	f043 0202 	orr.w	r2, r3, #2
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001328:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	7b1b      	ldrb	r3, [r3, #12]
 800132e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001330:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	4313      	orrs	r3, r2
 8001336:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001340:	d003      	beq.n	800134a <HAL_ADC_Init+0xa2>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d102      	bne.n	8001350 <HAL_ADC_Init+0xa8>
 800134a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800134e:	e000      	b.n	8001352 <HAL_ADC_Init+0xaa>
 8001350:	2300      	movs	r3, #0
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	7d1b      	ldrb	r3, [r3, #20]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d119      	bne.n	8001394 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	7b1b      	ldrb	r3, [r3, #12]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d109      	bne.n	800137c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	3b01      	subs	r3, #1
 800136e:	035a      	lsls	r2, r3, #13
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	e00b      	b.n	8001394 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001380:	f043 0220 	orr.w	r2, r3, #32
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138c:	f043 0201 	orr.w	r2, r3, #1
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	430a      	orrs	r2, r1
 80013a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	4b28      	ldr	r3, [pc, #160]	; (8001450 <HAL_ADC_Init+0x1a8>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	6812      	ldr	r2, [r2, #0]
 80013b6:	68b9      	ldr	r1, [r7, #8]
 80013b8:	430b      	orrs	r3, r1
 80013ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013c4:	d003      	beq.n	80013ce <HAL_ADC_Init+0x126>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d104      	bne.n	80013d8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	051b      	lsls	r3, r3, #20
 80013d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013de:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	430a      	orrs	r2, r1
 80013ea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	4b18      	ldr	r3, [pc, #96]	; (8001454 <HAL_ADC_Init+0x1ac>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d10b      	bne.n	8001414 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001406:	f023 0303 	bic.w	r3, r3, #3
 800140a:	f043 0201 	orr.w	r2, r3, #1
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001412:	e018      	b.n	8001446 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001418:	f023 0312 	bic.w	r3, r3, #18
 800141c:	f043 0210 	orr.w	r2, r3, #16
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001428:	f043 0201 	orr.w	r2, r3, #1
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001434:	e007      	b.n	8001446 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143a:	f043 0210 	orr.w	r2, r3, #16
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001446:	7dfb      	ldrb	r3, [r7, #23]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	ffe1f7fd 	.word	0xffe1f7fd
 8001454:	ff1f0efe 	.word	0xff1f0efe

08001458 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001460:	2300      	movs	r3, #0
 8001462:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800146a:	2b01      	cmp	r3, #1
 800146c:	d101      	bne.n	8001472 <HAL_ADC_Start_IT+0x1a>
 800146e:	2302      	movs	r3, #2
 8001470:	e0a0      	b.n	80015b4 <HAL_ADC_Start_IT+0x15c>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2201      	movs	r2, #1
 8001476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 fa6e 	bl	800195c <ADC_Enable>
 8001480:	4603      	mov	r3, r0
 8001482:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	2b00      	cmp	r3, #0
 8001488:	f040 808f 	bne.w	80015aa <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001490:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001494:	f023 0301 	bic.w	r3, r3, #1
 8001498:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a45      	ldr	r2, [pc, #276]	; (80015bc <HAL_ADC_Start_IT+0x164>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d105      	bne.n	80014b6 <HAL_ADC_Start_IT+0x5e>
 80014aa:	4b45      	ldr	r3, [pc, #276]	; (80015c0 <HAL_ADC_Start_IT+0x168>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d115      	bne.n	80014e2 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d026      	beq.n	800151e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014e0:	e01d      	b.n	800151e <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a33      	ldr	r2, [pc, #204]	; (80015c0 <HAL_ADC_Start_IT+0x168>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d004      	beq.n	8001502 <HAL_ADC_Start_IT+0xaa>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a2f      	ldr	r2, [pc, #188]	; (80015bc <HAL_ADC_Start_IT+0x164>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d10d      	bne.n	800151e <HAL_ADC_Start_IT+0xc6>
 8001502:	4b2f      	ldr	r3, [pc, #188]	; (80015c0 <HAL_ADC_Start_IT+0x168>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800150a:	2b00      	cmp	r3, #0
 800150c:	d007      	beq.n	800151e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001512:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001516:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001522:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d006      	beq.n	8001538 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152e:	f023 0206 	bic.w	r2, r3, #6
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	62da      	str	r2, [r3, #44]	; 0x2c
 8001536:	e002      	b.n	800153e <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f06f 0202 	mvn.w	r2, #2
 800154e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f042 0220 	orr.w	r2, r2, #32
 800155e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800156a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800156e:	d113      	bne.n	8001598 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001574:	4a11      	ldr	r2, [pc, #68]	; (80015bc <HAL_ADC_Start_IT+0x164>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d105      	bne.n	8001586 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800157a:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <HAL_ADC_Start_IT+0x168>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001582:	2b00      	cmp	r3, #0
 8001584:	d108      	bne.n	8001598 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	e00c      	b.n	80015b2 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	e003      	b.n	80015b2 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40012800 	.word	0x40012800
 80015c0:	40012400 	.word	0x40012400

080015c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	f003 0320 	and.w	r3, r3, #32
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d03e      	beq.n	800167c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d039      	beq.n	800167c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160c:	f003 0310 	and.w	r3, r3, #16
 8001610:	2b00      	cmp	r3, #0
 8001612:	d105      	bne.n	8001620 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001618:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800162a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800162e:	d11d      	bne.n	800166c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001634:	2b00      	cmp	r3, #0
 8001636:	d119      	bne.n	800166c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 0220 	bic.w	r2, r2, #32
 8001646:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001658:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d105      	bne.n	800166c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001664:	f043 0201 	orr.w	r2, r3, #1
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff fd77 	bl	8001160 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f06f 0212 	mvn.w	r2, #18
 800167a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001682:	2b00      	cmp	r3, #0
 8001684:	d04d      	beq.n	8001722 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	d048      	beq.n	8001722 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	2b00      	cmp	r3, #0
 800169a:	d105      	bne.n	80016a8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80016b2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80016b6:	d012      	beq.n	80016de <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d125      	bne.n	8001712 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80016d0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016d4:	d11d      	bne.n	8001712 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d119      	bne.n	8001712 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016ec:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001702:	2b00      	cmp	r3, #0
 8001704:	d105      	bne.n	8001712 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170a:	f043 0201 	orr.w	r2, r3, #1
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 fa6c 	bl	8001bf0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f06f 020c 	mvn.w	r2, #12
 8001720:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001728:	2b00      	cmp	r3, #0
 800172a:	d012      	beq.n	8001752 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00d      	beq.n	8001752 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f809 	bl	800175a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f06f 0201 	mvn.w	r2, #1
 8001750:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001776:	2300      	movs	r3, #0
 8001778:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800177a:	2300      	movs	r3, #0
 800177c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001784:	2b01      	cmp	r3, #1
 8001786:	d101      	bne.n	800178c <HAL_ADC_ConfigChannel+0x20>
 8001788:	2302      	movs	r3, #2
 800178a:	e0dc      	b.n	8001946 <HAL_ADC_ConfigChannel+0x1da>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b06      	cmp	r3, #6
 800179a:	d81c      	bhi.n	80017d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	3b05      	subs	r3, #5
 80017ae:	221f      	movs	r2, #31
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	4019      	ands	r1, r3
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	6818      	ldr	r0, [r3, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	3b05      	subs	r3, #5
 80017c8:	fa00 f203 	lsl.w	r2, r0, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	635a      	str	r2, [r3, #52]	; 0x34
 80017d4:	e03c      	b.n	8001850 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b0c      	cmp	r3, #12
 80017dc:	d81c      	bhi.n	8001818 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	3b23      	subs	r3, #35	; 0x23
 80017f0:	221f      	movs	r2, #31
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43db      	mvns	r3, r3
 80017f8:	4019      	ands	r1, r3
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	6818      	ldr	r0, [r3, #0]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	3b23      	subs	r3, #35	; 0x23
 800180a:	fa00 f203 	lsl.w	r2, r0, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	631a      	str	r2, [r3, #48]	; 0x30
 8001816:	e01b      	b.n	8001850 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	3b41      	subs	r3, #65	; 0x41
 800182a:	221f      	movs	r2, #31
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	4019      	ands	r1, r3
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	6818      	ldr	r0, [r3, #0]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	3b41      	subs	r3, #65	; 0x41
 8001844:	fa00 f203 	lsl.w	r2, r0, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b09      	cmp	r3, #9
 8001856:	d91c      	bls.n	8001892 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68d9      	ldr	r1, [r3, #12]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	3b1e      	subs	r3, #30
 800186a:	2207      	movs	r2, #7
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	4019      	ands	r1, r3
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	6898      	ldr	r0, [r3, #8]
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4613      	mov	r3, r2
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4413      	add	r3, r2
 8001882:	3b1e      	subs	r3, #30
 8001884:	fa00 f203 	lsl.w	r2, r0, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	60da      	str	r2, [r3, #12]
 8001890:	e019      	b.n	80018c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6919      	ldr	r1, [r3, #16]
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4613      	mov	r3, r2
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	4413      	add	r3, r2
 80018a2:	2207      	movs	r2, #7
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	4019      	ands	r1, r3
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	6898      	ldr	r0, [r3, #8]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4613      	mov	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4413      	add	r3, r2
 80018ba:	fa00 f203 	lsl.w	r2, r0, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b10      	cmp	r3, #16
 80018cc:	d003      	beq.n	80018d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018d2:	2b11      	cmp	r3, #17
 80018d4:	d132      	bne.n	800193c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a1d      	ldr	r2, [pc, #116]	; (8001950 <HAL_ADC_ConfigChannel+0x1e4>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d125      	bne.n	800192c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d126      	bne.n	800193c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80018fc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2b10      	cmp	r3, #16
 8001904:	d11a      	bne.n	800193c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001906:	4b13      	ldr	r3, [pc, #76]	; (8001954 <HAL_ADC_ConfigChannel+0x1e8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a13      	ldr	r2, [pc, #76]	; (8001958 <HAL_ADC_ConfigChannel+0x1ec>)
 800190c:	fba2 2303 	umull	r2, r3, r2, r3
 8001910:	0c9a      	lsrs	r2, r3, #18
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800191c:	e002      	b.n	8001924 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	3b01      	subs	r3, #1
 8001922:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f9      	bne.n	800191e <HAL_ADC_ConfigChannel+0x1b2>
 800192a:	e007      	b.n	800193c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001930:	f043 0220 	orr.w	r2, r3, #32
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001944:	7bfb      	ldrb	r3, [r7, #15]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	40012400 	.word	0x40012400
 8001954:	20000000 	.word	0x20000000
 8001958:	431bde83 	.word	0x431bde83

0800195c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b01      	cmp	r3, #1
 8001978:	d040      	beq.n	80019fc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f042 0201 	orr.w	r2, r2, #1
 8001988:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800198a:	4b1f      	ldr	r3, [pc, #124]	; (8001a08 <ADC_Enable+0xac>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a1f      	ldr	r2, [pc, #124]	; (8001a0c <ADC_Enable+0xb0>)
 8001990:	fba2 2303 	umull	r2, r3, r2, r3
 8001994:	0c9b      	lsrs	r3, r3, #18
 8001996:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001998:	e002      	b.n	80019a0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	3b01      	subs	r3, #1
 800199e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f9      	bne.n	800199a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019a6:	f7ff fc75 	bl	8001294 <HAL_GetTick>
 80019aa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019ac:	e01f      	b.n	80019ee <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019ae:	f7ff fc71 	bl	8001294 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d918      	bls.n	80019ee <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d011      	beq.n	80019ee <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ce:	f043 0210 	orr.w	r2, r3, #16
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019da:	f043 0201 	orr.w	r2, r3, #1
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e007      	b.n	80019fe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d1d8      	bne.n	80019ae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	431bde83 	.word	0x431bde83

08001a10 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d12e      	bne.n	8001a88 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0201 	bic.w	r2, r2, #1
 8001a38:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a3a:	f7ff fc2b 	bl	8001294 <HAL_GetTick>
 8001a3e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a40:	e01b      	b.n	8001a7a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a42:	f7ff fc27 	bl	8001294 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d914      	bls.n	8001a7a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d10d      	bne.n	8001a7a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a62:	f043 0210 	orr.w	r2, r3, #16
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6e:	f043 0201 	orr.w	r2, r3, #1
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e007      	b.n	8001a8a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d0dc      	beq.n	8001a42 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001a94:	b590      	push	{r4, r7, lr}
 8001a96:	b087      	sub	sp, #28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <HAL_ADCEx_Calibration_Start+0x1e>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e097      	b.n	8001be2 <HAL_ADCEx_Calibration_Start+0x14e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ffa8 	bl	8001a10 <ADC_ConversionStop_Disable>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ff49 	bl	800195c <ADC_Enable>
 8001aca:	4603      	mov	r3, r0
 8001acc:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001ace:	7dfb      	ldrb	r3, [r7, #23]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f040 8081 	bne.w	8001bd8 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ada:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ade:	f023 0302 	bic.w	r3, r3, #2
 8001ae2:	f043 0202 	orr.w	r2, r3, #2
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001aea:	4b40      	ldr	r3, [pc, #256]	; (8001bec <HAL_ADCEx_Calibration_Start+0x158>)
 8001aec:	681c      	ldr	r4, [r3, #0]
 8001aee:	2002      	movs	r0, #2
 8001af0:	f000 ffe0 	bl	8002ab4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001af4:	4603      	mov	r3, r0
 8001af6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001afa:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001afc:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001afe:	e002      	b.n	8001b06 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1f9      	bne.n	8001b00 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0208 	orr.w	r2, r2, #8
 8001b1a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001b1c:	f7ff fbba 	bl	8001294 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b22:	e01b      	b.n	8001b5c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001b24:	f7ff fbb6 	bl	8001294 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b0a      	cmp	r3, #10
 8001b30:	d914      	bls.n	8001b5c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00d      	beq.n	8001b5c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b44:	f023 0312 	bic.w	r3, r3, #18
 8001b48:	f043 0210 	orr.w	r2, r3, #16
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e042      	b.n	8001be2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1dc      	bne.n	8001b24 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f042 0204 	orr.w	r2, r2, #4
 8001b78:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001b7a:	f7ff fb8b 	bl	8001294 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b80:	e01b      	b.n	8001bba <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001b82:	f7ff fb87 	bl	8001294 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b0a      	cmp	r3, #10
 8001b8e:	d914      	bls.n	8001bba <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00d      	beq.n	8001bba <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba2:	f023 0312 	bic.w	r3, r3, #18
 8001ba6:	f043 0210 	orr.w	r2, r3, #16
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e013      	b.n	8001be2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1dc      	bne.n	8001b82 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bcc:	f023 0303 	bic.w	r3, r3, #3
 8001bd0:	f043 0201 	orr.w	r2, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	371c      	adds	r7, #28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd90      	pop	{r4, r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000000 	.word	0x20000000

08001bf0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
	...

08001c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c20:	4013      	ands	r3, r2
 8001c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c36:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	60d3      	str	r3, [r2, #12]
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c50:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <__NVIC_GetPriorityGrouping+0x18>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	0a1b      	lsrs	r3, r3, #8
 8001c56:	f003 0307 	and.w	r3, r3, #7
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	db0b      	blt.n	8001c92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	f003 021f 	and.w	r2, r3, #31
 8001c80:	4906      	ldr	r1, [pc, #24]	; (8001c9c <__NVIC_EnableIRQ+0x34>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	095b      	lsrs	r3, r3, #5
 8001c88:	2001      	movs	r0, #1
 8001c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr
 8001c9c:	e000e100 	.word	0xe000e100

08001ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	6039      	str	r1, [r7, #0]
 8001caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	db0a      	blt.n	8001cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	490c      	ldr	r1, [pc, #48]	; (8001cec <__NVIC_SetPriority+0x4c>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	0112      	lsls	r2, r2, #4
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc8:	e00a      	b.n	8001ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4908      	ldr	r1, [pc, #32]	; (8001cf0 <__NVIC_SetPriority+0x50>)
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	3b04      	subs	r3, #4
 8001cd8:	0112      	lsls	r2, r2, #4
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	440b      	add	r3, r1
 8001cde:	761a      	strb	r2, [r3, #24]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000e100 	.word	0xe000e100
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b089      	sub	sp, #36	; 0x24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f1c3 0307 	rsb	r3, r3, #7
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	bf28      	it	cs
 8001d12:	2304      	movcs	r3, #4
 8001d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3304      	adds	r3, #4
 8001d1a:	2b06      	cmp	r3, #6
 8001d1c:	d902      	bls.n	8001d24 <NVIC_EncodePriority+0x30>
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3b03      	subs	r3, #3
 8001d22:	e000      	b.n	8001d26 <NVIC_EncodePriority+0x32>
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d28:	f04f 32ff 	mov.w	r2, #4294967295
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43da      	mvns	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	401a      	ands	r2, r3
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	fa01 f303 	lsl.w	r3, r1, r3
 8001d46:	43d9      	mvns	r1, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	4313      	orrs	r3, r2
         );
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3724      	adds	r7, #36	; 0x24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d68:	d301      	bcc.n	8001d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e00f      	b.n	8001d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6e:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <SysTick_Config+0x40>)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d76:	210f      	movs	r1, #15
 8001d78:	f04f 30ff 	mov.w	r0, #4294967295
 8001d7c:	f7ff ff90 	bl	8001ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <SysTick_Config+0x40>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d86:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <SysTick_Config+0x40>)
 8001d88:	2207      	movs	r2, #7
 8001d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	e000e010 	.word	0xe000e010

08001d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff ff2d 	bl	8001c04 <__NVIC_SetPriorityGrouping>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b086      	sub	sp, #24
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	4603      	mov	r3, r0
 8001dba:	60b9      	str	r1, [r7, #8]
 8001dbc:	607a      	str	r2, [r7, #4]
 8001dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc4:	f7ff ff42 	bl	8001c4c <__NVIC_GetPriorityGrouping>
 8001dc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68b9      	ldr	r1, [r7, #8]
 8001dce:	6978      	ldr	r0, [r7, #20]
 8001dd0:	f7ff ff90 	bl	8001cf4 <NVIC_EncodePriority>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dda:	4611      	mov	r1, r2
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff5f 	bl	8001ca0 <__NVIC_SetPriority>
}
 8001de2:	bf00      	nop
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff35 	bl	8001c68 <__NVIC_EnableIRQ>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff ffa2 	bl	8001d58 <SysTick_Config>
 8001e14:	4603      	mov	r3, r0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b08b      	sub	sp, #44	; 0x2c
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e32:	e169      	b.n	8002108 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e34:	2201      	movs	r2, #1
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	69fa      	ldr	r2, [r7, #28]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	f040 8158 	bne.w	8002102 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	4a9a      	ldr	r2, [pc, #616]	; (80020c0 <HAL_GPIO_Init+0x2a0>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d05e      	beq.n	8001f1a <HAL_GPIO_Init+0xfa>
 8001e5c:	4a98      	ldr	r2, [pc, #608]	; (80020c0 <HAL_GPIO_Init+0x2a0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d875      	bhi.n	8001f4e <HAL_GPIO_Init+0x12e>
 8001e62:	4a98      	ldr	r2, [pc, #608]	; (80020c4 <HAL_GPIO_Init+0x2a4>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d058      	beq.n	8001f1a <HAL_GPIO_Init+0xfa>
 8001e68:	4a96      	ldr	r2, [pc, #600]	; (80020c4 <HAL_GPIO_Init+0x2a4>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d86f      	bhi.n	8001f4e <HAL_GPIO_Init+0x12e>
 8001e6e:	4a96      	ldr	r2, [pc, #600]	; (80020c8 <HAL_GPIO_Init+0x2a8>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d052      	beq.n	8001f1a <HAL_GPIO_Init+0xfa>
 8001e74:	4a94      	ldr	r2, [pc, #592]	; (80020c8 <HAL_GPIO_Init+0x2a8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d869      	bhi.n	8001f4e <HAL_GPIO_Init+0x12e>
 8001e7a:	4a94      	ldr	r2, [pc, #592]	; (80020cc <HAL_GPIO_Init+0x2ac>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d04c      	beq.n	8001f1a <HAL_GPIO_Init+0xfa>
 8001e80:	4a92      	ldr	r2, [pc, #584]	; (80020cc <HAL_GPIO_Init+0x2ac>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d863      	bhi.n	8001f4e <HAL_GPIO_Init+0x12e>
 8001e86:	4a92      	ldr	r2, [pc, #584]	; (80020d0 <HAL_GPIO_Init+0x2b0>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d046      	beq.n	8001f1a <HAL_GPIO_Init+0xfa>
 8001e8c:	4a90      	ldr	r2, [pc, #576]	; (80020d0 <HAL_GPIO_Init+0x2b0>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d85d      	bhi.n	8001f4e <HAL_GPIO_Init+0x12e>
 8001e92:	2b12      	cmp	r3, #18
 8001e94:	d82a      	bhi.n	8001eec <HAL_GPIO_Init+0xcc>
 8001e96:	2b12      	cmp	r3, #18
 8001e98:	d859      	bhi.n	8001f4e <HAL_GPIO_Init+0x12e>
 8001e9a:	a201      	add	r2, pc, #4	; (adr r2, 8001ea0 <HAL_GPIO_Init+0x80>)
 8001e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea0:	08001f1b 	.word	0x08001f1b
 8001ea4:	08001ef5 	.word	0x08001ef5
 8001ea8:	08001f07 	.word	0x08001f07
 8001eac:	08001f49 	.word	0x08001f49
 8001eb0:	08001f4f 	.word	0x08001f4f
 8001eb4:	08001f4f 	.word	0x08001f4f
 8001eb8:	08001f4f 	.word	0x08001f4f
 8001ebc:	08001f4f 	.word	0x08001f4f
 8001ec0:	08001f4f 	.word	0x08001f4f
 8001ec4:	08001f4f 	.word	0x08001f4f
 8001ec8:	08001f4f 	.word	0x08001f4f
 8001ecc:	08001f4f 	.word	0x08001f4f
 8001ed0:	08001f4f 	.word	0x08001f4f
 8001ed4:	08001f4f 	.word	0x08001f4f
 8001ed8:	08001f4f 	.word	0x08001f4f
 8001edc:	08001f4f 	.word	0x08001f4f
 8001ee0:	08001f4f 	.word	0x08001f4f
 8001ee4:	08001efd 	.word	0x08001efd
 8001ee8:	08001f11 	.word	0x08001f11
 8001eec:	4a79      	ldr	r2, [pc, #484]	; (80020d4 <HAL_GPIO_Init+0x2b4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d013      	beq.n	8001f1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ef2:	e02c      	b.n	8001f4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	623b      	str	r3, [r7, #32]
          break;
 8001efa:	e029      	b.n	8001f50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	3304      	adds	r3, #4
 8001f02:	623b      	str	r3, [r7, #32]
          break;
 8001f04:	e024      	b.n	8001f50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	3308      	adds	r3, #8
 8001f0c:	623b      	str	r3, [r7, #32]
          break;
 8001f0e:	e01f      	b.n	8001f50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	330c      	adds	r3, #12
 8001f16:	623b      	str	r3, [r7, #32]
          break;
 8001f18:	e01a      	b.n	8001f50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d102      	bne.n	8001f28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f22:	2304      	movs	r3, #4
 8001f24:	623b      	str	r3, [r7, #32]
          break;
 8001f26:	e013      	b.n	8001f50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d105      	bne.n	8001f3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f30:	2308      	movs	r3, #8
 8001f32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69fa      	ldr	r2, [r7, #28]
 8001f38:	611a      	str	r2, [r3, #16]
          break;
 8001f3a:	e009      	b.n	8001f50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f3c:	2308      	movs	r3, #8
 8001f3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69fa      	ldr	r2, [r7, #28]
 8001f44:	615a      	str	r2, [r3, #20]
          break;
 8001f46:	e003      	b.n	8001f50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	623b      	str	r3, [r7, #32]
          break;
 8001f4c:	e000      	b.n	8001f50 <HAL_GPIO_Init+0x130>
          break;
 8001f4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	2bff      	cmp	r3, #255	; 0xff
 8001f54:	d801      	bhi.n	8001f5a <HAL_GPIO_Init+0x13a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	e001      	b.n	8001f5e <HAL_GPIO_Init+0x13e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	2bff      	cmp	r3, #255	; 0xff
 8001f64:	d802      	bhi.n	8001f6c <HAL_GPIO_Init+0x14c>
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	e002      	b.n	8001f72 <HAL_GPIO_Init+0x152>
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	3b08      	subs	r3, #8
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	210f      	movs	r1, #15
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	401a      	ands	r2, r3
 8001f84:	6a39      	ldr	r1, [r7, #32]
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 80b1 	beq.w	8002102 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fa0:	4b4d      	ldr	r3, [pc, #308]	; (80020d8 <HAL_GPIO_Init+0x2b8>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	4a4c      	ldr	r2, [pc, #304]	; (80020d8 <HAL_GPIO_Init+0x2b8>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6193      	str	r3, [r2, #24]
 8001fac:	4b4a      	ldr	r3, [pc, #296]	; (80020d8 <HAL_GPIO_Init+0x2b8>)
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fb8:	4a48      	ldr	r2, [pc, #288]	; (80020dc <HAL_GPIO_Init+0x2bc>)
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	089b      	lsrs	r3, r3, #2
 8001fbe:	3302      	adds	r3, #2
 8001fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	220f      	movs	r2, #15
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a40      	ldr	r2, [pc, #256]	; (80020e0 <HAL_GPIO_Init+0x2c0>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d013      	beq.n	800200c <HAL_GPIO_Init+0x1ec>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a3f      	ldr	r2, [pc, #252]	; (80020e4 <HAL_GPIO_Init+0x2c4>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d00d      	beq.n	8002008 <HAL_GPIO_Init+0x1e8>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a3e      	ldr	r2, [pc, #248]	; (80020e8 <HAL_GPIO_Init+0x2c8>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d007      	beq.n	8002004 <HAL_GPIO_Init+0x1e4>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a3d      	ldr	r2, [pc, #244]	; (80020ec <HAL_GPIO_Init+0x2cc>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d101      	bne.n	8002000 <HAL_GPIO_Init+0x1e0>
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e006      	b.n	800200e <HAL_GPIO_Init+0x1ee>
 8002000:	2304      	movs	r3, #4
 8002002:	e004      	b.n	800200e <HAL_GPIO_Init+0x1ee>
 8002004:	2302      	movs	r3, #2
 8002006:	e002      	b.n	800200e <HAL_GPIO_Init+0x1ee>
 8002008:	2301      	movs	r3, #1
 800200a:	e000      	b.n	800200e <HAL_GPIO_Init+0x1ee>
 800200c:	2300      	movs	r3, #0
 800200e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002010:	f002 0203 	and.w	r2, r2, #3
 8002014:	0092      	lsls	r2, r2, #2
 8002016:	4093      	lsls	r3, r2
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	4313      	orrs	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800201e:	492f      	ldr	r1, [pc, #188]	; (80020dc <HAL_GPIO_Init+0x2bc>)
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	3302      	adds	r3, #2
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d006      	beq.n	8002046 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002038:	4b2d      	ldr	r3, [pc, #180]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	492c      	ldr	r1, [pc, #176]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	4313      	orrs	r3, r2
 8002042:	608b      	str	r3, [r1, #8]
 8002044:	e006      	b.n	8002054 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002046:	4b2a      	ldr	r3, [pc, #168]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	43db      	mvns	r3, r3
 800204e:	4928      	ldr	r1, [pc, #160]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 8002050:	4013      	ands	r3, r2
 8002052:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d006      	beq.n	800206e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002060:	4b23      	ldr	r3, [pc, #140]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	4922      	ldr	r1, [pc, #136]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	60cb      	str	r3, [r1, #12]
 800206c:	e006      	b.n	800207c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800206e:	4b20      	ldr	r3, [pc, #128]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	43db      	mvns	r3, r3
 8002076:	491e      	ldr	r1, [pc, #120]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 8002078:	4013      	ands	r3, r2
 800207a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d006      	beq.n	8002096 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002088:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	4918      	ldr	r1, [pc, #96]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	604b      	str	r3, [r1, #4]
 8002094:	e006      	b.n	80020a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002096:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	43db      	mvns	r3, r3
 800209e:	4914      	ldr	r1, [pc, #80]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d021      	beq.n	80020f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020b0:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	490e      	ldr	r1, [pc, #56]	; (80020f0 <HAL_GPIO_Init+0x2d0>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	600b      	str	r3, [r1, #0]
 80020bc:	e021      	b.n	8002102 <HAL_GPIO_Init+0x2e2>
 80020be:	bf00      	nop
 80020c0:	10320000 	.word	0x10320000
 80020c4:	10310000 	.word	0x10310000
 80020c8:	10220000 	.word	0x10220000
 80020cc:	10210000 	.word	0x10210000
 80020d0:	10120000 	.word	0x10120000
 80020d4:	10110000 	.word	0x10110000
 80020d8:	40021000 	.word	0x40021000
 80020dc:	40010000 	.word	0x40010000
 80020e0:	40010800 	.word	0x40010800
 80020e4:	40010c00 	.word	0x40010c00
 80020e8:	40011000 	.word	0x40011000
 80020ec:	40011400 	.word	0x40011400
 80020f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <HAL_GPIO_Init+0x304>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	4909      	ldr	r1, [pc, #36]	; (8002124 <HAL_GPIO_Init+0x304>)
 80020fe:	4013      	ands	r3, r2
 8002100:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	3301      	adds	r3, #1
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	fa22 f303 	lsr.w	r3, r2, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	f47f ae8e 	bne.w	8001e34 <HAL_GPIO_Init+0x14>
  }
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	372c      	adds	r7, #44	; 0x2c
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr
 8002124:	40010400 	.word	0x40010400

08002128 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e272      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 8087 	beq.w	8002256 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002148:	4b92      	ldr	r3, [pc, #584]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 030c 	and.w	r3, r3, #12
 8002150:	2b04      	cmp	r3, #4
 8002152:	d00c      	beq.n	800216e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002154:	4b8f      	ldr	r3, [pc, #572]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 030c 	and.w	r3, r3, #12
 800215c:	2b08      	cmp	r3, #8
 800215e:	d112      	bne.n	8002186 <HAL_RCC_OscConfig+0x5e>
 8002160:	4b8c      	ldr	r3, [pc, #560]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800216c:	d10b      	bne.n	8002186 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800216e:	4b89      	ldr	r3, [pc, #548]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d06c      	beq.n	8002254 <HAL_RCC_OscConfig+0x12c>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d168      	bne.n	8002254 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e24c      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800218e:	d106      	bne.n	800219e <HAL_RCC_OscConfig+0x76>
 8002190:	4b80      	ldr	r3, [pc, #512]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a7f      	ldr	r2, [pc, #508]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	e02e      	b.n	80021fc <HAL_RCC_OscConfig+0xd4>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10c      	bne.n	80021c0 <HAL_RCC_OscConfig+0x98>
 80021a6:	4b7b      	ldr	r3, [pc, #492]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a7a      	ldr	r2, [pc, #488]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	4b78      	ldr	r3, [pc, #480]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a77      	ldr	r2, [pc, #476]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	e01d      	b.n	80021fc <HAL_RCC_OscConfig+0xd4>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021c8:	d10c      	bne.n	80021e4 <HAL_RCC_OscConfig+0xbc>
 80021ca:	4b72      	ldr	r3, [pc, #456]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a71      	ldr	r2, [pc, #452]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	4b6f      	ldr	r3, [pc, #444]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a6e      	ldr	r2, [pc, #440]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	e00b      	b.n	80021fc <HAL_RCC_OscConfig+0xd4>
 80021e4:	4b6b      	ldr	r3, [pc, #428]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a6a      	ldr	r2, [pc, #424]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	4b68      	ldr	r3, [pc, #416]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a67      	ldr	r2, [pc, #412]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d013      	beq.n	800222c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002204:	f7ff f846 	bl	8001294 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800220c:	f7ff f842 	bl	8001294 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b64      	cmp	r3, #100	; 0x64
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e200      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221e:	4b5d      	ldr	r3, [pc, #372]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f0      	beq.n	800220c <HAL_RCC_OscConfig+0xe4>
 800222a:	e014      	b.n	8002256 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7ff f832 	bl	8001294 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002234:	f7ff f82e 	bl	8001294 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b64      	cmp	r3, #100	; 0x64
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e1ec      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002246:	4b53      	ldr	r3, [pc, #332]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x10c>
 8002252:	e000      	b.n	8002256 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d063      	beq.n	800232a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002262:	4b4c      	ldr	r3, [pc, #304]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00b      	beq.n	8002286 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800226e:	4b49      	ldr	r3, [pc, #292]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 030c 	and.w	r3, r3, #12
 8002276:	2b08      	cmp	r3, #8
 8002278:	d11c      	bne.n	80022b4 <HAL_RCC_OscConfig+0x18c>
 800227a:	4b46      	ldr	r3, [pc, #280]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d116      	bne.n	80022b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002286:	4b43      	ldr	r3, [pc, #268]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d005      	beq.n	800229e <HAL_RCC_OscConfig+0x176>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d001      	beq.n	800229e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e1c0      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229e:	4b3d      	ldr	r3, [pc, #244]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4939      	ldr	r1, [pc, #228]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b2:	e03a      	b.n	800232a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d020      	beq.n	80022fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022bc:	4b36      	ldr	r3, [pc, #216]	; (8002398 <HAL_RCC_OscConfig+0x270>)
 80022be:	2201      	movs	r2, #1
 80022c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c2:	f7fe ffe7 	bl	8001294 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ca:	f7fe ffe3 	bl	8001294 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e1a1      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022dc:	4b2d      	ldr	r3, [pc, #180]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0f0      	beq.n	80022ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e8:	4b2a      	ldr	r3, [pc, #168]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	4927      	ldr	r1, [pc, #156]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	600b      	str	r3, [r1, #0]
 80022fc:	e015      	b.n	800232a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022fe:	4b26      	ldr	r3, [pc, #152]	; (8002398 <HAL_RCC_OscConfig+0x270>)
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7fe ffc6 	bl	8001294 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800230c:	f7fe ffc2 	bl	8001294 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e180      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231e:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d03a      	beq.n	80023ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d019      	beq.n	8002372 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800233e:	4b17      	ldr	r3, [pc, #92]	; (800239c <HAL_RCC_OscConfig+0x274>)
 8002340:	2201      	movs	r2, #1
 8002342:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002344:	f7fe ffa6 	bl	8001294 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800234c:	f7fe ffa2 	bl	8001294 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e160      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800235e:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <HAL_RCC_OscConfig+0x26c>)
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f0      	beq.n	800234c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800236a:	2001      	movs	r0, #1
 800236c:	f000 face 	bl	800290c <RCC_Delay>
 8002370:	e01c      	b.n	80023ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <HAL_RCC_OscConfig+0x274>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002378:	f7fe ff8c 	bl	8001294 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237e:	e00f      	b.n	80023a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002380:	f7fe ff88 	bl	8001294 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d908      	bls.n	80023a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e146      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000
 8002398:	42420000 	.word	0x42420000
 800239c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a0:	4b92      	ldr	r3, [pc, #584]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1e9      	bne.n	8002380 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 80a6 	beq.w	8002506 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ba:	2300      	movs	r3, #0
 80023bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023be:	4b8b      	ldr	r3, [pc, #556]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10d      	bne.n	80023e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ca:	4b88      	ldr	r3, [pc, #544]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	4a87      	ldr	r2, [pc, #540]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d4:	61d3      	str	r3, [r2, #28]
 80023d6:	4b85      	ldr	r3, [pc, #532]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e2:	2301      	movs	r3, #1
 80023e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e6:	4b82      	ldr	r3, [pc, #520]	; (80025f0 <HAL_RCC_OscConfig+0x4c8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d118      	bne.n	8002424 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023f2:	4b7f      	ldr	r3, [pc, #508]	; (80025f0 <HAL_RCC_OscConfig+0x4c8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a7e      	ldr	r2, [pc, #504]	; (80025f0 <HAL_RCC_OscConfig+0x4c8>)
 80023f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023fe:	f7fe ff49 	bl	8001294 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002406:	f7fe ff45 	bl	8001294 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b64      	cmp	r3, #100	; 0x64
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e103      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002418:	4b75      	ldr	r3, [pc, #468]	; (80025f0 <HAL_RCC_OscConfig+0x4c8>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0f0      	beq.n	8002406 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d106      	bne.n	800243a <HAL_RCC_OscConfig+0x312>
 800242c:	4b6f      	ldr	r3, [pc, #444]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	4a6e      	ldr	r2, [pc, #440]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6213      	str	r3, [r2, #32]
 8002438:	e02d      	b.n	8002496 <HAL_RCC_OscConfig+0x36e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0x334>
 8002442:	4b6a      	ldr	r3, [pc, #424]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	4a69      	ldr	r2, [pc, #420]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	6213      	str	r3, [r2, #32]
 800244e:	4b67      	ldr	r3, [pc, #412]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4a66      	ldr	r2, [pc, #408]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002454:	f023 0304 	bic.w	r3, r3, #4
 8002458:	6213      	str	r3, [r2, #32]
 800245a:	e01c      	b.n	8002496 <HAL_RCC_OscConfig+0x36e>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	2b05      	cmp	r3, #5
 8002462:	d10c      	bne.n	800247e <HAL_RCC_OscConfig+0x356>
 8002464:	4b61      	ldr	r3, [pc, #388]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	4a60      	ldr	r2, [pc, #384]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 800246a:	f043 0304 	orr.w	r3, r3, #4
 800246e:	6213      	str	r3, [r2, #32]
 8002470:	4b5e      	ldr	r3, [pc, #376]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	4a5d      	ldr	r2, [pc, #372]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6213      	str	r3, [r2, #32]
 800247c:	e00b      	b.n	8002496 <HAL_RCC_OscConfig+0x36e>
 800247e:	4b5b      	ldr	r3, [pc, #364]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	4a5a      	ldr	r2, [pc, #360]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002484:	f023 0301 	bic.w	r3, r3, #1
 8002488:	6213      	str	r3, [r2, #32]
 800248a:	4b58      	ldr	r3, [pc, #352]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	4a57      	ldr	r2, [pc, #348]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002490:	f023 0304 	bic.w	r3, r3, #4
 8002494:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d015      	beq.n	80024ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249e:	f7fe fef9 	bl	8001294 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a4:	e00a      	b.n	80024bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a6:	f7fe fef5 	bl	8001294 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e0b1      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024bc:	4b4b      	ldr	r3, [pc, #300]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0ee      	beq.n	80024a6 <HAL_RCC_OscConfig+0x37e>
 80024c8:	e014      	b.n	80024f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ca:	f7fe fee3 	bl	8001294 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d0:	e00a      	b.n	80024e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d2:	f7fe fedf 	bl	8001294 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e09b      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e8:	4b40      	ldr	r3, [pc, #256]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1ee      	bne.n	80024d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024f4:	7dfb      	ldrb	r3, [r7, #23]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d105      	bne.n	8002506 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fa:	4b3c      	ldr	r3, [pc, #240]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	4a3b      	ldr	r2, [pc, #236]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002504:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 8087 	beq.w	800261e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002510:	4b36      	ldr	r3, [pc, #216]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 030c 	and.w	r3, r3, #12
 8002518:	2b08      	cmp	r3, #8
 800251a:	d061      	beq.n	80025e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	2b02      	cmp	r3, #2
 8002522:	d146      	bne.n	80025b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002524:	4b33      	ldr	r3, [pc, #204]	; (80025f4 <HAL_RCC_OscConfig+0x4cc>)
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252a:	f7fe feb3 	bl	8001294 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002532:	f7fe feaf 	bl	8001294 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e06d      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002544:	4b29      	ldr	r3, [pc, #164]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1f0      	bne.n	8002532 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002558:	d108      	bne.n	800256c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800255a:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	4921      	ldr	r1, [pc, #132]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002568:	4313      	orrs	r3, r2
 800256a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800256c:	4b1f      	ldr	r3, [pc, #124]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a19      	ldr	r1, [r3, #32]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	430b      	orrs	r3, r1
 800257e:	491b      	ldr	r1, [pc, #108]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002584:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <HAL_RCC_OscConfig+0x4cc>)
 8002586:	2201      	movs	r2, #1
 8002588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258a:	f7fe fe83 	bl	8001294 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002592:	f7fe fe7f 	bl	8001294 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e03d      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025a4:	4b11      	ldr	r3, [pc, #68]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x46a>
 80025b0:	e035      	b.n	800261e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <HAL_RCC_OscConfig+0x4cc>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7fe fe6c 	bl	8001294 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c0:	f7fe fe68 	bl	8001294 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e026      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d2:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x498>
 80025de:	e01e      	b.n	800261e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d107      	bne.n	80025f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e019      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40007000 	.word	0x40007000
 80025f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_RCC_OscConfig+0x500>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	429a      	cmp	r2, r3
 800260a:	d106      	bne.n	800261a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d001      	beq.n	800261e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40021000 	.word	0x40021000

0800262c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0d0      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002640:	4b6a      	ldr	r3, [pc, #424]	; (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d910      	bls.n	8002670 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264e:	4b67      	ldr	r3, [pc, #412]	; (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 0207 	bic.w	r2, r3, #7
 8002656:	4965      	ldr	r1, [pc, #404]	; (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b63      	ldr	r3, [pc, #396]	; (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0b8      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d020      	beq.n	80026be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002688:	4b59      	ldr	r3, [pc, #356]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	4a58      	ldr	r2, [pc, #352]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002692:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026a0:	4b53      	ldr	r3, [pc, #332]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	4a52      	ldr	r2, [pc, #328]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ac:	4b50      	ldr	r3, [pc, #320]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	494d      	ldr	r1, [pc, #308]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d040      	beq.n	800274c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d107      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d2:	4b47      	ldr	r3, [pc, #284]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d115      	bne.n	800270a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e07f      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d107      	bne.n	80026fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ea:	4b41      	ldr	r3, [pc, #260]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d109      	bne.n	800270a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e073      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fa:	4b3d      	ldr	r3, [pc, #244]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e06b      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800270a:	4b39      	ldr	r3, [pc, #228]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f023 0203 	bic.w	r2, r3, #3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4936      	ldr	r1, [pc, #216]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002718:	4313      	orrs	r3, r2
 800271a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800271c:	f7fe fdba 	bl	8001294 <HAL_GetTick>
 8002720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002722:	e00a      	b.n	800273a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002724:	f7fe fdb6 	bl	8001294 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e053      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273a:	4b2d      	ldr	r3, [pc, #180]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 020c 	and.w	r2, r3, #12
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	429a      	cmp	r2, r3
 800274a:	d1eb      	bne.n	8002724 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800274c:	4b27      	ldr	r3, [pc, #156]	; (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d210      	bcs.n	800277c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275a:	4b24      	ldr	r3, [pc, #144]	; (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 0207 	bic.w	r2, r3, #7
 8002762:	4922      	ldr	r1, [pc, #136]	; (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	4313      	orrs	r3, r2
 8002768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276a:	4b20      	ldr	r3, [pc, #128]	; (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d001      	beq.n	800277c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e032      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d008      	beq.n	800279a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002788:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	4916      	ldr	r1, [pc, #88]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d009      	beq.n	80027ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027a6:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	490e      	ldr	r1, [pc, #56]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027ba:	f000 f821 	bl	8002800 <HAL_RCC_GetSysClockFreq>
 80027be:	4602      	mov	r2, r0
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	091b      	lsrs	r3, r3, #4
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	490a      	ldr	r1, [pc, #40]	; (80027f4 <HAL_RCC_ClockConfig+0x1c8>)
 80027cc:	5ccb      	ldrb	r3, [r1, r3]
 80027ce:	fa22 f303 	lsr.w	r3, r2, r3
 80027d2:	4a09      	ldr	r2, [pc, #36]	; (80027f8 <HAL_RCC_ClockConfig+0x1cc>)
 80027d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027d6:	4b09      	ldr	r3, [pc, #36]	; (80027fc <HAL_RCC_ClockConfig+0x1d0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe fd18 	bl	8001210 <HAL_InitTick>

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40022000 	.word	0x40022000
 80027f0:	40021000 	.word	0x40021000
 80027f4:	08007824 	.word	0x08007824
 80027f8:	20000000 	.word	0x20000000
 80027fc:	20000004 	.word	0x20000004

08002800 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	2300      	movs	r3, #0
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	2300      	movs	r3, #0
 8002814:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800281a:	4b1e      	ldr	r3, [pc, #120]	; (8002894 <HAL_RCC_GetSysClockFreq+0x94>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b04      	cmp	r3, #4
 8002828:	d002      	beq.n	8002830 <HAL_RCC_GetSysClockFreq+0x30>
 800282a:	2b08      	cmp	r3, #8
 800282c:	d003      	beq.n	8002836 <HAL_RCC_GetSysClockFreq+0x36>
 800282e:	e027      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002830:	4b19      	ldr	r3, [pc, #100]	; (8002898 <HAL_RCC_GetSysClockFreq+0x98>)
 8002832:	613b      	str	r3, [r7, #16]
      break;
 8002834:	e027      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	0c9b      	lsrs	r3, r3, #18
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	4a17      	ldr	r2, [pc, #92]	; (800289c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002840:	5cd3      	ldrb	r3, [r2, r3]
 8002842:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d010      	beq.n	8002870 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800284e:	4b11      	ldr	r3, [pc, #68]	; (8002894 <HAL_RCC_GetSysClockFreq+0x94>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	0c5b      	lsrs	r3, r3, #17
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	4a11      	ldr	r2, [pc, #68]	; (80028a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800285a:	5cd3      	ldrb	r3, [r2, r3]
 800285c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a0d      	ldr	r2, [pc, #52]	; (8002898 <HAL_RCC_GetSysClockFreq+0x98>)
 8002862:	fb03 f202 	mul.w	r2, r3, r2
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	fbb2 f3f3 	udiv	r3, r2, r3
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	e004      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a0c      	ldr	r2, [pc, #48]	; (80028a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002874:	fb02 f303 	mul.w	r3, r2, r3
 8002878:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	613b      	str	r3, [r7, #16]
      break;
 800287e:	e002      	b.n	8002886 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002880:	4b05      	ldr	r3, [pc, #20]	; (8002898 <HAL_RCC_GetSysClockFreq+0x98>)
 8002882:	613b      	str	r3, [r7, #16]
      break;
 8002884:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002886:	693b      	ldr	r3, [r7, #16]
}
 8002888:	4618      	mov	r0, r3
 800288a:	371c      	adds	r7, #28
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40021000 	.word	0x40021000
 8002898:	007a1200 	.word	0x007a1200
 800289c:	0800783c 	.word	0x0800783c
 80028a0:	0800784c 	.word	0x0800784c
 80028a4:	003d0900 	.word	0x003d0900

080028a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028ac:	4b02      	ldr	r3, [pc, #8]	; (80028b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80028ae:	681b      	ldr	r3, [r3, #0]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	20000000 	.word	0x20000000

080028bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028c0:	f7ff fff2 	bl	80028a8 <HAL_RCC_GetHCLKFreq>
 80028c4:	4602      	mov	r2, r0
 80028c6:	4b05      	ldr	r3, [pc, #20]	; (80028dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	0a1b      	lsrs	r3, r3, #8
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	4903      	ldr	r1, [pc, #12]	; (80028e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028d2:	5ccb      	ldrb	r3, [r1, r3]
 80028d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d8:	4618      	mov	r0, r3
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40021000 	.word	0x40021000
 80028e0:	08007834 	.word	0x08007834

080028e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028e8:	f7ff ffde 	bl	80028a8 <HAL_RCC_GetHCLKFreq>
 80028ec:	4602      	mov	r2, r0
 80028ee:	4b05      	ldr	r3, [pc, #20]	; (8002904 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	0adb      	lsrs	r3, r3, #11
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	4903      	ldr	r1, [pc, #12]	; (8002908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028fa:	5ccb      	ldrb	r3, [r1, r3]
 80028fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002900:	4618      	mov	r0, r3
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40021000 	.word	0x40021000
 8002908:	08007834 	.word	0x08007834

0800290c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002914:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <RCC_Delay+0x34>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <RCC_Delay+0x38>)
 800291a:	fba2 2303 	umull	r2, r3, r2, r3
 800291e:	0a5b      	lsrs	r3, r3, #9
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	fb02 f303 	mul.w	r3, r2, r3
 8002926:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002928:	bf00      	nop
  }
  while (Delay --);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	1e5a      	subs	r2, r3, #1
 800292e:	60fa      	str	r2, [r7, #12]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f9      	bne.n	8002928 <RCC_Delay+0x1c>
}
 8002934:	bf00      	nop
 8002936:	bf00      	nop
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr
 8002940:	20000000 	.word	0x20000000
 8002944:	10624dd3 	.word	0x10624dd3

08002948 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d07d      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002964:	2300      	movs	r3, #0
 8002966:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002968:	4b4f      	ldr	r3, [pc, #316]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10d      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002974:	4b4c      	ldr	r3, [pc, #304]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	4a4b      	ldr	r2, [pc, #300]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800297a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297e:	61d3      	str	r3, [r2, #28]
 8002980:	4b49      	ldr	r3, [pc, #292]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800298c:	2301      	movs	r3, #1
 800298e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002990:	4b46      	ldr	r3, [pc, #280]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002998:	2b00      	cmp	r3, #0
 800299a:	d118      	bne.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800299c:	4b43      	ldr	r3, [pc, #268]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a42      	ldr	r2, [pc, #264]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029a8:	f7fe fc74 	bl	8001294 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ae:	e008      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b0:	f7fe fc70 	bl	8001294 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b64      	cmp	r3, #100	; 0x64
 80029bc:	d901      	bls.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e06d      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c2:	4b3a      	ldr	r3, [pc, #232]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029ce:	4b36      	ldr	r3, [pc, #216]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d02e      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d027      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029ec:	4b2e      	ldr	r3, [pc, #184]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029f6:	4b2e      	ldr	r3, [pc, #184]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029fc:	4b2c      	ldr	r3, [pc, #176]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a02:	4a29      	ldr	r2, [pc, #164]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d014      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a12:	f7fe fc3f 	bl	8001294 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a18:	e00a      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1a:	f7fe fc3b 	bl	8001294 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e036      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a30:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0ee      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a3c:	4b1a      	ldr	r3, [pc, #104]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	4917      	ldr	r1, [pc, #92]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a4e:	7dfb      	ldrb	r3, [r7, #23]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d105      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a54:	4b14      	ldr	r3, [pc, #80]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	4a13      	ldr	r2, [pc, #76]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a6c:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	490b      	ldr	r1, [pc, #44]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d008      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a8a:	4b07      	ldr	r3, [pc, #28]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	4904      	ldr	r1, [pc, #16]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40007000 	.word	0x40007000
 8002ab0:	42420440 	.word	0x42420440

08002ab4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61fb      	str	r3, [r7, #28]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	2300      	movs	r3, #0
 8002ace:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b10      	cmp	r3, #16
 8002ad4:	d00a      	beq.n	8002aec <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b10      	cmp	r3, #16
 8002ada:	f200 808a 	bhi.w	8002bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d045      	beq.n	8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d075      	beq.n	8002bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002aea:	e082      	b.n	8002bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002aec:	4b46      	ldr	r3, [pc, #280]	; (8002c08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002af2:	4b45      	ldr	r3, [pc, #276]	; (8002c08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d07b      	beq.n	8002bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	0c9b      	lsrs	r3, r3, #18
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	4a41      	ldr	r2, [pc, #260]	; (8002c0c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002b08:	5cd3      	ldrb	r3, [r2, r3]
 8002b0a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d015      	beq.n	8002b42 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b16:	4b3c      	ldr	r3, [pc, #240]	; (8002c08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	0c5b      	lsrs	r3, r3, #17
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	4a3b      	ldr	r2, [pc, #236]	; (8002c10 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002b22:	5cd3      	ldrb	r3, [r2, r3]
 8002b24:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00d      	beq.n	8002b4c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002b30:	4a38      	ldr	r2, [pc, #224]	; (8002c14 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	fb02 f303 	mul.w	r3, r2, r3
 8002b3e:	61fb      	str	r3, [r7, #28]
 8002b40:	e004      	b.n	8002b4c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4a34      	ldr	r2, [pc, #208]	; (8002c18 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002b46:	fb02 f303 	mul.w	r3, r2, r3
 8002b4a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002b4c:	4b2e      	ldr	r3, [pc, #184]	; (8002c08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b58:	d102      	bne.n	8002b60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	61bb      	str	r3, [r7, #24]
      break;
 8002b5e:	e04a      	b.n	8002bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4a2d      	ldr	r2, [pc, #180]	; (8002c1c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002b66:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6a:	085b      	lsrs	r3, r3, #1
 8002b6c:	61bb      	str	r3, [r7, #24]
      break;
 8002b6e:	e042      	b.n	8002bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002b70:	4b25      	ldr	r3, [pc, #148]	; (8002c08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b80:	d108      	bne.n	8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002b8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b90:	61bb      	str	r3, [r7, #24]
 8002b92:	e01f      	b.n	8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b9e:	d109      	bne.n	8002bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002ba0:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002bac:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002bb0:	61bb      	str	r3, [r7, #24]
 8002bb2:	e00f      	b.n	8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bbe:	d11c      	bne.n	8002bfa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002bc0:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d016      	beq.n	8002bfa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002bcc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002bd0:	61bb      	str	r3, [r7, #24]
      break;
 8002bd2:	e012      	b.n	8002bfa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002bd4:	e011      	b.n	8002bfa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002bd6:	f7ff fe85 	bl	80028e4 <HAL_RCC_GetPCLK2Freq>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	0b9b      	lsrs	r3, r3, #14
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	3301      	adds	r3, #1
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bee:	61bb      	str	r3, [r7, #24]
      break;
 8002bf0:	e004      	b.n	8002bfc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002bf2:	bf00      	nop
 8002bf4:	e002      	b.n	8002bfc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002bf6:	bf00      	nop
 8002bf8:	e000      	b.n	8002bfc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002bfa:	bf00      	nop
    }
  }
  return (frequency);
 8002bfc:	69bb      	ldr	r3, [r7, #24]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3720      	adds	r7, #32
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	08007850 	.word	0x08007850
 8002c10:	08007860 	.word	0x08007860
 8002c14:	007a1200 	.word	0x007a1200
 8002c18:	003d0900 	.word	0x003d0900
 8002c1c:	aaaaaaab 	.word	0xaaaaaaab

08002c20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e042      	b.n	8002cb8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d106      	bne.n	8002c4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7fe f934 	bl	8000eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2224      	movs	r2, #36	; 0x24
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f91d 	bl	8002ea4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695a      	ldr	r2, [r3, #20]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08a      	sub	sp, #40	; 0x28
 8002cc4:	af02      	add	r7, sp, #8
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b20      	cmp	r3, #32
 8002cde:	d16d      	bne.n	8002dbc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d002      	beq.n	8002cec <HAL_UART_Transmit+0x2c>
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e066      	b.n	8002dbe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2221      	movs	r2, #33	; 0x21
 8002cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cfe:	f7fe fac9 	bl	8001294 <HAL_GetTick>
 8002d02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	88fa      	ldrh	r2, [r7, #6]
 8002d08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	88fa      	ldrh	r2, [r7, #6]
 8002d0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d18:	d108      	bne.n	8002d2c <HAL_UART_Transmit+0x6c>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d104      	bne.n	8002d2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	61bb      	str	r3, [r7, #24]
 8002d2a:	e003      	b.n	8002d34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d34:	e02a      	b.n	8002d8c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2180      	movs	r1, #128	; 0x80
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 f840 	bl	8002dc6 <UART_WaitOnFlagUntilTimeout>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e036      	b.n	8002dbe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10b      	bne.n	8002d6e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	3302      	adds	r3, #2
 8002d6a:	61bb      	str	r3, [r7, #24]
 8002d6c:	e007      	b.n	8002d7e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	781a      	ldrb	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1cf      	bne.n	8002d36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2140      	movs	r1, #64	; 0x40
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 f810 	bl	8002dc6 <UART_WaitOnFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e006      	b.n	8002dbe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	e000      	b.n	8002dbe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002dbc:	2302      	movs	r3, #2
  }
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3720      	adds	r7, #32
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b090      	sub	sp, #64	; 0x40
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	603b      	str	r3, [r7, #0]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dd6:	e050      	b.n	8002e7a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dde:	d04c      	beq.n	8002e7a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d007      	beq.n	8002df6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002de6:	f7fe fa55 	bl	8001294 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d241      	bcs.n	8002e7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	330c      	adds	r3, #12
 8002dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e00:	e853 3f00 	ldrex	r3, [r3]
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	330c      	adds	r3, #12
 8002e14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e16:	637a      	str	r2, [r7, #52]	; 0x34
 8002e18:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e1e:	e841 2300 	strex	r3, r2, [r1]
 8002e22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1e5      	bne.n	8002df6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	3314      	adds	r3, #20
 8002e30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	e853 3f00 	ldrex	r3, [r3]
 8002e38:	613b      	str	r3, [r7, #16]
   return(result);
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f023 0301 	bic.w	r3, r3, #1
 8002e40:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	3314      	adds	r3, #20
 8002e48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e4a:	623a      	str	r2, [r7, #32]
 8002e4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4e:	69f9      	ldr	r1, [r7, #28]
 8002e50:	6a3a      	ldr	r2, [r7, #32]
 8002e52:	e841 2300 	strex	r3, r2, [r1]
 8002e56:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1e5      	bne.n	8002e2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2220      	movs	r2, #32
 8002e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e00f      	b.n	8002e9a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	4013      	ands	r3, r2
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	bf0c      	ite	eq
 8002e8a:	2301      	moveq	r3, #1
 8002e8c:	2300      	movne	r3, #0
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d09f      	beq.n	8002dd8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3740      	adds	r7, #64	; 0x40
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ede:	f023 030c 	bic.w	r3, r3, #12
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6812      	ldr	r2, [r2, #0]
 8002ee6:	68b9      	ldr	r1, [r7, #8]
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699a      	ldr	r2, [r3, #24]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a2c      	ldr	r2, [pc, #176]	; (8002fb8 <UART_SetConfig+0x114>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d103      	bne.n	8002f14 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f0c:	f7ff fcea 	bl	80028e4 <HAL_RCC_GetPCLK2Freq>
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	e002      	b.n	8002f1a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f14:	f7ff fcd2 	bl	80028bc <HAL_RCC_GetPCLK1Freq>
 8002f18:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	009a      	lsls	r2, r3, #2
 8002f24:	441a      	add	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f30:	4a22      	ldr	r2, [pc, #136]	; (8002fbc <UART_SetConfig+0x118>)
 8002f32:	fba2 2303 	umull	r2, r3, r2, r3
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	0119      	lsls	r1, r3, #4
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	009a      	lsls	r2, r3, #2
 8002f44:	441a      	add	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f50:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <UART_SetConfig+0x118>)
 8002f52:	fba3 0302 	umull	r0, r3, r3, r2
 8002f56:	095b      	lsrs	r3, r3, #5
 8002f58:	2064      	movs	r0, #100	; 0x64
 8002f5a:	fb00 f303 	mul.w	r3, r0, r3
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	3332      	adds	r3, #50	; 0x32
 8002f64:	4a15      	ldr	r2, [pc, #84]	; (8002fbc <UART_SetConfig+0x118>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f70:	4419      	add	r1, r3
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	009a      	lsls	r2, r3, #2
 8002f7c:	441a      	add	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <UART_SetConfig+0x118>)
 8002f8a:	fba3 0302 	umull	r0, r3, r3, r2
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	2064      	movs	r0, #100	; 0x64
 8002f92:	fb00 f303 	mul.w	r3, r0, r3
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	3332      	adds	r3, #50	; 0x32
 8002f9c:	4a07      	ldr	r2, [pc, #28]	; (8002fbc <UART_SetConfig+0x118>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	f003 020f 	and.w	r2, r3, #15
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	440a      	add	r2, r1
 8002fae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002fb0:	bf00      	nop
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40013800 	.word	0x40013800
 8002fbc:	51eb851f 	.word	0x51eb851f

08002fc0 <__cvt>:
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fc6:	461f      	mov	r7, r3
 8002fc8:	bfbb      	ittet	lt
 8002fca:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002fce:	461f      	movlt	r7, r3
 8002fd0:	2300      	movge	r3, #0
 8002fd2:	232d      	movlt	r3, #45	; 0x2d
 8002fd4:	b088      	sub	sp, #32
 8002fd6:	4614      	mov	r4, r2
 8002fd8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002fda:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002fdc:	7013      	strb	r3, [r2, #0]
 8002fde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002fe0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002fe4:	f023 0820 	bic.w	r8, r3, #32
 8002fe8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002fec:	d005      	beq.n	8002ffa <__cvt+0x3a>
 8002fee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002ff2:	d100      	bne.n	8002ff6 <__cvt+0x36>
 8002ff4:	3501      	adds	r5, #1
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e000      	b.n	8002ffc <__cvt+0x3c>
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	aa07      	add	r2, sp, #28
 8002ffe:	9204      	str	r2, [sp, #16]
 8003000:	aa06      	add	r2, sp, #24
 8003002:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003006:	e9cd 3500 	strd	r3, r5, [sp]
 800300a:	4622      	mov	r2, r4
 800300c:	463b      	mov	r3, r7
 800300e:	f001 f973 	bl	80042f8 <_dtoa_r>
 8003012:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003016:	4606      	mov	r6, r0
 8003018:	d102      	bne.n	8003020 <__cvt+0x60>
 800301a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800301c:	07db      	lsls	r3, r3, #31
 800301e:	d522      	bpl.n	8003066 <__cvt+0xa6>
 8003020:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003024:	eb06 0905 	add.w	r9, r6, r5
 8003028:	d110      	bne.n	800304c <__cvt+0x8c>
 800302a:	7833      	ldrb	r3, [r6, #0]
 800302c:	2b30      	cmp	r3, #48	; 0x30
 800302e:	d10a      	bne.n	8003046 <__cvt+0x86>
 8003030:	2200      	movs	r2, #0
 8003032:	2300      	movs	r3, #0
 8003034:	4620      	mov	r0, r4
 8003036:	4639      	mov	r1, r7
 8003038:	f7fd fcb6 	bl	80009a8 <__aeabi_dcmpeq>
 800303c:	b918      	cbnz	r0, 8003046 <__cvt+0x86>
 800303e:	f1c5 0501 	rsb	r5, r5, #1
 8003042:	f8ca 5000 	str.w	r5, [sl]
 8003046:	f8da 3000 	ldr.w	r3, [sl]
 800304a:	4499      	add	r9, r3
 800304c:	2200      	movs	r2, #0
 800304e:	2300      	movs	r3, #0
 8003050:	4620      	mov	r0, r4
 8003052:	4639      	mov	r1, r7
 8003054:	f7fd fca8 	bl	80009a8 <__aeabi_dcmpeq>
 8003058:	b108      	cbz	r0, 800305e <__cvt+0x9e>
 800305a:	f8cd 901c 	str.w	r9, [sp, #28]
 800305e:	2230      	movs	r2, #48	; 0x30
 8003060:	9b07      	ldr	r3, [sp, #28]
 8003062:	454b      	cmp	r3, r9
 8003064:	d307      	bcc.n	8003076 <__cvt+0xb6>
 8003066:	4630      	mov	r0, r6
 8003068:	9b07      	ldr	r3, [sp, #28]
 800306a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800306c:	1b9b      	subs	r3, r3, r6
 800306e:	6013      	str	r3, [r2, #0]
 8003070:	b008      	add	sp, #32
 8003072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003076:	1c59      	adds	r1, r3, #1
 8003078:	9107      	str	r1, [sp, #28]
 800307a:	701a      	strb	r2, [r3, #0]
 800307c:	e7f0      	b.n	8003060 <__cvt+0xa0>

0800307e <__exponent>:
 800307e:	4603      	mov	r3, r0
 8003080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003082:	2900      	cmp	r1, #0
 8003084:	f803 2b02 	strb.w	r2, [r3], #2
 8003088:	bfb6      	itet	lt
 800308a:	222d      	movlt	r2, #45	; 0x2d
 800308c:	222b      	movge	r2, #43	; 0x2b
 800308e:	4249      	neglt	r1, r1
 8003090:	2909      	cmp	r1, #9
 8003092:	7042      	strb	r2, [r0, #1]
 8003094:	dd2a      	ble.n	80030ec <__exponent+0x6e>
 8003096:	f10d 0207 	add.w	r2, sp, #7
 800309a:	4617      	mov	r7, r2
 800309c:	260a      	movs	r6, #10
 800309e:	fb91 f5f6 	sdiv	r5, r1, r6
 80030a2:	4694      	mov	ip, r2
 80030a4:	fb06 1415 	mls	r4, r6, r5, r1
 80030a8:	3430      	adds	r4, #48	; 0x30
 80030aa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80030ae:	460c      	mov	r4, r1
 80030b0:	2c63      	cmp	r4, #99	; 0x63
 80030b2:	4629      	mov	r1, r5
 80030b4:	f102 32ff 	add.w	r2, r2, #4294967295
 80030b8:	dcf1      	bgt.n	800309e <__exponent+0x20>
 80030ba:	3130      	adds	r1, #48	; 0x30
 80030bc:	f1ac 0402 	sub.w	r4, ip, #2
 80030c0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80030c4:	4622      	mov	r2, r4
 80030c6:	1c41      	adds	r1, r0, #1
 80030c8:	42ba      	cmp	r2, r7
 80030ca:	d30a      	bcc.n	80030e2 <__exponent+0x64>
 80030cc:	f10d 0209 	add.w	r2, sp, #9
 80030d0:	eba2 020c 	sub.w	r2, r2, ip
 80030d4:	42bc      	cmp	r4, r7
 80030d6:	bf88      	it	hi
 80030d8:	2200      	movhi	r2, #0
 80030da:	4413      	add	r3, r2
 80030dc:	1a18      	subs	r0, r3, r0
 80030de:	b003      	add	sp, #12
 80030e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030e2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80030e6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80030ea:	e7ed      	b.n	80030c8 <__exponent+0x4a>
 80030ec:	2330      	movs	r3, #48	; 0x30
 80030ee:	3130      	adds	r1, #48	; 0x30
 80030f0:	7083      	strb	r3, [r0, #2]
 80030f2:	70c1      	strb	r1, [r0, #3]
 80030f4:	1d03      	adds	r3, r0, #4
 80030f6:	e7f1      	b.n	80030dc <__exponent+0x5e>

080030f8 <_printf_float>:
 80030f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030fc:	b091      	sub	sp, #68	; 0x44
 80030fe:	460c      	mov	r4, r1
 8003100:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003104:	4616      	mov	r6, r2
 8003106:	461f      	mov	r7, r3
 8003108:	4605      	mov	r5, r0
 800310a:	f000 ffe3 	bl	80040d4 <_localeconv_r>
 800310e:	6803      	ldr	r3, [r0, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	9309      	str	r3, [sp, #36]	; 0x24
 8003114:	f7fd f81c 	bl	8000150 <strlen>
 8003118:	2300      	movs	r3, #0
 800311a:	930e      	str	r3, [sp, #56]	; 0x38
 800311c:	f8d8 3000 	ldr.w	r3, [r8]
 8003120:	900a      	str	r0, [sp, #40]	; 0x28
 8003122:	3307      	adds	r3, #7
 8003124:	f023 0307 	bic.w	r3, r3, #7
 8003128:	f103 0208 	add.w	r2, r3, #8
 800312c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003130:	f8d4 b000 	ldr.w	fp, [r4]
 8003134:	f8c8 2000 	str.w	r2, [r8]
 8003138:	e9d3 a800 	ldrd	sl, r8, [r3]
 800313c:	4652      	mov	r2, sl
 800313e:	4643      	mov	r3, r8
 8003140:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003144:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003148:	930b      	str	r3, [sp, #44]	; 0x2c
 800314a:	f04f 32ff 	mov.w	r2, #4294967295
 800314e:	4650      	mov	r0, sl
 8003150:	4b9c      	ldr	r3, [pc, #624]	; (80033c4 <_printf_float+0x2cc>)
 8003152:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003154:	f7fd fc5a 	bl	8000a0c <__aeabi_dcmpun>
 8003158:	bb70      	cbnz	r0, 80031b8 <_printf_float+0xc0>
 800315a:	f04f 32ff 	mov.w	r2, #4294967295
 800315e:	4650      	mov	r0, sl
 8003160:	4b98      	ldr	r3, [pc, #608]	; (80033c4 <_printf_float+0x2cc>)
 8003162:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003164:	f7fd fc34 	bl	80009d0 <__aeabi_dcmple>
 8003168:	bb30      	cbnz	r0, 80031b8 <_printf_float+0xc0>
 800316a:	2200      	movs	r2, #0
 800316c:	2300      	movs	r3, #0
 800316e:	4650      	mov	r0, sl
 8003170:	4641      	mov	r1, r8
 8003172:	f7fd fc23 	bl	80009bc <__aeabi_dcmplt>
 8003176:	b110      	cbz	r0, 800317e <_printf_float+0x86>
 8003178:	232d      	movs	r3, #45	; 0x2d
 800317a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800317e:	4a92      	ldr	r2, [pc, #584]	; (80033c8 <_printf_float+0x2d0>)
 8003180:	4b92      	ldr	r3, [pc, #584]	; (80033cc <_printf_float+0x2d4>)
 8003182:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003186:	bf94      	ite	ls
 8003188:	4690      	movls	r8, r2
 800318a:	4698      	movhi	r8, r3
 800318c:	2303      	movs	r3, #3
 800318e:	f04f 0a00 	mov.w	sl, #0
 8003192:	6123      	str	r3, [r4, #16]
 8003194:	f02b 0304 	bic.w	r3, fp, #4
 8003198:	6023      	str	r3, [r4, #0]
 800319a:	4633      	mov	r3, r6
 800319c:	4621      	mov	r1, r4
 800319e:	4628      	mov	r0, r5
 80031a0:	9700      	str	r7, [sp, #0]
 80031a2:	aa0f      	add	r2, sp, #60	; 0x3c
 80031a4:	f000 f9d6 	bl	8003554 <_printf_common>
 80031a8:	3001      	adds	r0, #1
 80031aa:	f040 8090 	bne.w	80032ce <_printf_float+0x1d6>
 80031ae:	f04f 30ff 	mov.w	r0, #4294967295
 80031b2:	b011      	add	sp, #68	; 0x44
 80031b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031b8:	4652      	mov	r2, sl
 80031ba:	4643      	mov	r3, r8
 80031bc:	4650      	mov	r0, sl
 80031be:	4641      	mov	r1, r8
 80031c0:	f7fd fc24 	bl	8000a0c <__aeabi_dcmpun>
 80031c4:	b148      	cbz	r0, 80031da <_printf_float+0xe2>
 80031c6:	f1b8 0f00 	cmp.w	r8, #0
 80031ca:	bfb8      	it	lt
 80031cc:	232d      	movlt	r3, #45	; 0x2d
 80031ce:	4a80      	ldr	r2, [pc, #512]	; (80033d0 <_printf_float+0x2d8>)
 80031d0:	bfb8      	it	lt
 80031d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80031d6:	4b7f      	ldr	r3, [pc, #508]	; (80033d4 <_printf_float+0x2dc>)
 80031d8:	e7d3      	b.n	8003182 <_printf_float+0x8a>
 80031da:	6863      	ldr	r3, [r4, #4]
 80031dc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	d142      	bne.n	800326a <_printf_float+0x172>
 80031e4:	2306      	movs	r3, #6
 80031e6:	6063      	str	r3, [r4, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	9206      	str	r2, [sp, #24]
 80031ec:	aa0e      	add	r2, sp, #56	; 0x38
 80031ee:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80031f2:	aa0d      	add	r2, sp, #52	; 0x34
 80031f4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80031f8:	9203      	str	r2, [sp, #12]
 80031fa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80031fe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003202:	6023      	str	r3, [r4, #0]
 8003204:	6863      	ldr	r3, [r4, #4]
 8003206:	4652      	mov	r2, sl
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	4628      	mov	r0, r5
 800320c:	4643      	mov	r3, r8
 800320e:	910b      	str	r1, [sp, #44]	; 0x2c
 8003210:	f7ff fed6 	bl	8002fc0 <__cvt>
 8003214:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003216:	4680      	mov	r8, r0
 8003218:	2947      	cmp	r1, #71	; 0x47
 800321a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800321c:	d108      	bne.n	8003230 <_printf_float+0x138>
 800321e:	1cc8      	adds	r0, r1, #3
 8003220:	db02      	blt.n	8003228 <_printf_float+0x130>
 8003222:	6863      	ldr	r3, [r4, #4]
 8003224:	4299      	cmp	r1, r3
 8003226:	dd40      	ble.n	80032aa <_printf_float+0x1b2>
 8003228:	f1a9 0902 	sub.w	r9, r9, #2
 800322c:	fa5f f989 	uxtb.w	r9, r9
 8003230:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003234:	d81f      	bhi.n	8003276 <_printf_float+0x17e>
 8003236:	464a      	mov	r2, r9
 8003238:	3901      	subs	r1, #1
 800323a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800323e:	910d      	str	r1, [sp, #52]	; 0x34
 8003240:	f7ff ff1d 	bl	800307e <__exponent>
 8003244:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003246:	4682      	mov	sl, r0
 8003248:	1813      	adds	r3, r2, r0
 800324a:	2a01      	cmp	r2, #1
 800324c:	6123      	str	r3, [r4, #16]
 800324e:	dc02      	bgt.n	8003256 <_printf_float+0x15e>
 8003250:	6822      	ldr	r2, [r4, #0]
 8003252:	07d2      	lsls	r2, r2, #31
 8003254:	d501      	bpl.n	800325a <_printf_float+0x162>
 8003256:	3301      	adds	r3, #1
 8003258:	6123      	str	r3, [r4, #16]
 800325a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800325e:	2b00      	cmp	r3, #0
 8003260:	d09b      	beq.n	800319a <_printf_float+0xa2>
 8003262:	232d      	movs	r3, #45	; 0x2d
 8003264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003268:	e797      	b.n	800319a <_printf_float+0xa2>
 800326a:	2947      	cmp	r1, #71	; 0x47
 800326c:	d1bc      	bne.n	80031e8 <_printf_float+0xf0>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1ba      	bne.n	80031e8 <_printf_float+0xf0>
 8003272:	2301      	movs	r3, #1
 8003274:	e7b7      	b.n	80031e6 <_printf_float+0xee>
 8003276:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800327a:	d118      	bne.n	80032ae <_printf_float+0x1b6>
 800327c:	2900      	cmp	r1, #0
 800327e:	6863      	ldr	r3, [r4, #4]
 8003280:	dd0b      	ble.n	800329a <_printf_float+0x1a2>
 8003282:	6121      	str	r1, [r4, #16]
 8003284:	b913      	cbnz	r3, 800328c <_printf_float+0x194>
 8003286:	6822      	ldr	r2, [r4, #0]
 8003288:	07d0      	lsls	r0, r2, #31
 800328a:	d502      	bpl.n	8003292 <_printf_float+0x19a>
 800328c:	3301      	adds	r3, #1
 800328e:	440b      	add	r3, r1
 8003290:	6123      	str	r3, [r4, #16]
 8003292:	f04f 0a00 	mov.w	sl, #0
 8003296:	65a1      	str	r1, [r4, #88]	; 0x58
 8003298:	e7df      	b.n	800325a <_printf_float+0x162>
 800329a:	b913      	cbnz	r3, 80032a2 <_printf_float+0x1aa>
 800329c:	6822      	ldr	r2, [r4, #0]
 800329e:	07d2      	lsls	r2, r2, #31
 80032a0:	d501      	bpl.n	80032a6 <_printf_float+0x1ae>
 80032a2:	3302      	adds	r3, #2
 80032a4:	e7f4      	b.n	8003290 <_printf_float+0x198>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e7f2      	b.n	8003290 <_printf_float+0x198>
 80032aa:	f04f 0967 	mov.w	r9, #103	; 0x67
 80032ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032b0:	4299      	cmp	r1, r3
 80032b2:	db05      	blt.n	80032c0 <_printf_float+0x1c8>
 80032b4:	6823      	ldr	r3, [r4, #0]
 80032b6:	6121      	str	r1, [r4, #16]
 80032b8:	07d8      	lsls	r0, r3, #31
 80032ba:	d5ea      	bpl.n	8003292 <_printf_float+0x19a>
 80032bc:	1c4b      	adds	r3, r1, #1
 80032be:	e7e7      	b.n	8003290 <_printf_float+0x198>
 80032c0:	2900      	cmp	r1, #0
 80032c2:	bfcc      	ite	gt
 80032c4:	2201      	movgt	r2, #1
 80032c6:	f1c1 0202 	rsble	r2, r1, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	e7e0      	b.n	8003290 <_printf_float+0x198>
 80032ce:	6823      	ldr	r3, [r4, #0]
 80032d0:	055a      	lsls	r2, r3, #21
 80032d2:	d407      	bmi.n	80032e4 <_printf_float+0x1ec>
 80032d4:	6923      	ldr	r3, [r4, #16]
 80032d6:	4642      	mov	r2, r8
 80032d8:	4631      	mov	r1, r6
 80032da:	4628      	mov	r0, r5
 80032dc:	47b8      	blx	r7
 80032de:	3001      	adds	r0, #1
 80032e0:	d12b      	bne.n	800333a <_printf_float+0x242>
 80032e2:	e764      	b.n	80031ae <_printf_float+0xb6>
 80032e4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80032e8:	f240 80dd 	bls.w	80034a6 <_printf_float+0x3ae>
 80032ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80032f0:	2200      	movs	r2, #0
 80032f2:	2300      	movs	r3, #0
 80032f4:	f7fd fb58 	bl	80009a8 <__aeabi_dcmpeq>
 80032f8:	2800      	cmp	r0, #0
 80032fa:	d033      	beq.n	8003364 <_printf_float+0x26c>
 80032fc:	2301      	movs	r3, #1
 80032fe:	4631      	mov	r1, r6
 8003300:	4628      	mov	r0, r5
 8003302:	4a35      	ldr	r2, [pc, #212]	; (80033d8 <_printf_float+0x2e0>)
 8003304:	47b8      	blx	r7
 8003306:	3001      	adds	r0, #1
 8003308:	f43f af51 	beq.w	80031ae <_printf_float+0xb6>
 800330c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003310:	429a      	cmp	r2, r3
 8003312:	db02      	blt.n	800331a <_printf_float+0x222>
 8003314:	6823      	ldr	r3, [r4, #0]
 8003316:	07d8      	lsls	r0, r3, #31
 8003318:	d50f      	bpl.n	800333a <_printf_float+0x242>
 800331a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800331e:	4631      	mov	r1, r6
 8003320:	4628      	mov	r0, r5
 8003322:	47b8      	blx	r7
 8003324:	3001      	adds	r0, #1
 8003326:	f43f af42 	beq.w	80031ae <_printf_float+0xb6>
 800332a:	f04f 0800 	mov.w	r8, #0
 800332e:	f104 091a 	add.w	r9, r4, #26
 8003332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003334:	3b01      	subs	r3, #1
 8003336:	4543      	cmp	r3, r8
 8003338:	dc09      	bgt.n	800334e <_printf_float+0x256>
 800333a:	6823      	ldr	r3, [r4, #0]
 800333c:	079b      	lsls	r3, r3, #30
 800333e:	f100 8104 	bmi.w	800354a <_printf_float+0x452>
 8003342:	68e0      	ldr	r0, [r4, #12]
 8003344:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003346:	4298      	cmp	r0, r3
 8003348:	bfb8      	it	lt
 800334a:	4618      	movlt	r0, r3
 800334c:	e731      	b.n	80031b2 <_printf_float+0xba>
 800334e:	2301      	movs	r3, #1
 8003350:	464a      	mov	r2, r9
 8003352:	4631      	mov	r1, r6
 8003354:	4628      	mov	r0, r5
 8003356:	47b8      	blx	r7
 8003358:	3001      	adds	r0, #1
 800335a:	f43f af28 	beq.w	80031ae <_printf_float+0xb6>
 800335e:	f108 0801 	add.w	r8, r8, #1
 8003362:	e7e6      	b.n	8003332 <_printf_float+0x23a>
 8003364:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003366:	2b00      	cmp	r3, #0
 8003368:	dc38      	bgt.n	80033dc <_printf_float+0x2e4>
 800336a:	2301      	movs	r3, #1
 800336c:	4631      	mov	r1, r6
 800336e:	4628      	mov	r0, r5
 8003370:	4a19      	ldr	r2, [pc, #100]	; (80033d8 <_printf_float+0x2e0>)
 8003372:	47b8      	blx	r7
 8003374:	3001      	adds	r0, #1
 8003376:	f43f af1a 	beq.w	80031ae <_printf_float+0xb6>
 800337a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800337e:	4313      	orrs	r3, r2
 8003380:	d102      	bne.n	8003388 <_printf_float+0x290>
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	07d9      	lsls	r1, r3, #31
 8003386:	d5d8      	bpl.n	800333a <_printf_float+0x242>
 8003388:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800338c:	4631      	mov	r1, r6
 800338e:	4628      	mov	r0, r5
 8003390:	47b8      	blx	r7
 8003392:	3001      	adds	r0, #1
 8003394:	f43f af0b 	beq.w	80031ae <_printf_float+0xb6>
 8003398:	f04f 0900 	mov.w	r9, #0
 800339c:	f104 0a1a 	add.w	sl, r4, #26
 80033a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033a2:	425b      	negs	r3, r3
 80033a4:	454b      	cmp	r3, r9
 80033a6:	dc01      	bgt.n	80033ac <_printf_float+0x2b4>
 80033a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033aa:	e794      	b.n	80032d6 <_printf_float+0x1de>
 80033ac:	2301      	movs	r3, #1
 80033ae:	4652      	mov	r2, sl
 80033b0:	4631      	mov	r1, r6
 80033b2:	4628      	mov	r0, r5
 80033b4:	47b8      	blx	r7
 80033b6:	3001      	adds	r0, #1
 80033b8:	f43f aef9 	beq.w	80031ae <_printf_float+0xb6>
 80033bc:	f109 0901 	add.w	r9, r9, #1
 80033c0:	e7ee      	b.n	80033a0 <_printf_float+0x2a8>
 80033c2:	bf00      	nop
 80033c4:	7fefffff 	.word	0x7fefffff
 80033c8:	08007862 	.word	0x08007862
 80033cc:	08007866 	.word	0x08007866
 80033d0:	0800786a 	.word	0x0800786a
 80033d4:	0800786e 	.word	0x0800786e
 80033d8:	08007872 	.word	0x08007872
 80033dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033e0:	429a      	cmp	r2, r3
 80033e2:	bfa8      	it	ge
 80033e4:	461a      	movge	r2, r3
 80033e6:	2a00      	cmp	r2, #0
 80033e8:	4691      	mov	r9, r2
 80033ea:	dc37      	bgt.n	800345c <_printf_float+0x364>
 80033ec:	f04f 0b00 	mov.w	fp, #0
 80033f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80033f4:	f104 021a 	add.w	r2, r4, #26
 80033f8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80033fc:	ebaa 0309 	sub.w	r3, sl, r9
 8003400:	455b      	cmp	r3, fp
 8003402:	dc33      	bgt.n	800346c <_printf_float+0x374>
 8003404:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003408:	429a      	cmp	r2, r3
 800340a:	db3b      	blt.n	8003484 <_printf_float+0x38c>
 800340c:	6823      	ldr	r3, [r4, #0]
 800340e:	07da      	lsls	r2, r3, #31
 8003410:	d438      	bmi.n	8003484 <_printf_float+0x38c>
 8003412:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003416:	eba2 0903 	sub.w	r9, r2, r3
 800341a:	eba2 020a 	sub.w	r2, r2, sl
 800341e:	4591      	cmp	r9, r2
 8003420:	bfa8      	it	ge
 8003422:	4691      	movge	r9, r2
 8003424:	f1b9 0f00 	cmp.w	r9, #0
 8003428:	dc34      	bgt.n	8003494 <_printf_float+0x39c>
 800342a:	f04f 0800 	mov.w	r8, #0
 800342e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003432:	f104 0a1a 	add.w	sl, r4, #26
 8003436:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	eba3 0309 	sub.w	r3, r3, r9
 8003440:	4543      	cmp	r3, r8
 8003442:	f77f af7a 	ble.w	800333a <_printf_float+0x242>
 8003446:	2301      	movs	r3, #1
 8003448:	4652      	mov	r2, sl
 800344a:	4631      	mov	r1, r6
 800344c:	4628      	mov	r0, r5
 800344e:	47b8      	blx	r7
 8003450:	3001      	adds	r0, #1
 8003452:	f43f aeac 	beq.w	80031ae <_printf_float+0xb6>
 8003456:	f108 0801 	add.w	r8, r8, #1
 800345a:	e7ec      	b.n	8003436 <_printf_float+0x33e>
 800345c:	4613      	mov	r3, r2
 800345e:	4631      	mov	r1, r6
 8003460:	4642      	mov	r2, r8
 8003462:	4628      	mov	r0, r5
 8003464:	47b8      	blx	r7
 8003466:	3001      	adds	r0, #1
 8003468:	d1c0      	bne.n	80033ec <_printf_float+0x2f4>
 800346a:	e6a0      	b.n	80031ae <_printf_float+0xb6>
 800346c:	2301      	movs	r3, #1
 800346e:	4631      	mov	r1, r6
 8003470:	4628      	mov	r0, r5
 8003472:	920b      	str	r2, [sp, #44]	; 0x2c
 8003474:	47b8      	blx	r7
 8003476:	3001      	adds	r0, #1
 8003478:	f43f ae99 	beq.w	80031ae <_printf_float+0xb6>
 800347c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800347e:	f10b 0b01 	add.w	fp, fp, #1
 8003482:	e7b9      	b.n	80033f8 <_printf_float+0x300>
 8003484:	4631      	mov	r1, r6
 8003486:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800348a:	4628      	mov	r0, r5
 800348c:	47b8      	blx	r7
 800348e:	3001      	adds	r0, #1
 8003490:	d1bf      	bne.n	8003412 <_printf_float+0x31a>
 8003492:	e68c      	b.n	80031ae <_printf_float+0xb6>
 8003494:	464b      	mov	r3, r9
 8003496:	4631      	mov	r1, r6
 8003498:	4628      	mov	r0, r5
 800349a:	eb08 020a 	add.w	r2, r8, sl
 800349e:	47b8      	blx	r7
 80034a0:	3001      	adds	r0, #1
 80034a2:	d1c2      	bne.n	800342a <_printf_float+0x332>
 80034a4:	e683      	b.n	80031ae <_printf_float+0xb6>
 80034a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80034a8:	2a01      	cmp	r2, #1
 80034aa:	dc01      	bgt.n	80034b0 <_printf_float+0x3b8>
 80034ac:	07db      	lsls	r3, r3, #31
 80034ae:	d539      	bpl.n	8003524 <_printf_float+0x42c>
 80034b0:	2301      	movs	r3, #1
 80034b2:	4642      	mov	r2, r8
 80034b4:	4631      	mov	r1, r6
 80034b6:	4628      	mov	r0, r5
 80034b8:	47b8      	blx	r7
 80034ba:	3001      	adds	r0, #1
 80034bc:	f43f ae77 	beq.w	80031ae <_printf_float+0xb6>
 80034c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034c4:	4631      	mov	r1, r6
 80034c6:	4628      	mov	r0, r5
 80034c8:	47b8      	blx	r7
 80034ca:	3001      	adds	r0, #1
 80034cc:	f43f ae6f 	beq.w	80031ae <_printf_float+0xb6>
 80034d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80034d4:	2200      	movs	r2, #0
 80034d6:	2300      	movs	r3, #0
 80034d8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80034dc:	f7fd fa64 	bl	80009a8 <__aeabi_dcmpeq>
 80034e0:	b9d8      	cbnz	r0, 800351a <_printf_float+0x422>
 80034e2:	f109 33ff 	add.w	r3, r9, #4294967295
 80034e6:	f108 0201 	add.w	r2, r8, #1
 80034ea:	4631      	mov	r1, r6
 80034ec:	4628      	mov	r0, r5
 80034ee:	47b8      	blx	r7
 80034f0:	3001      	adds	r0, #1
 80034f2:	d10e      	bne.n	8003512 <_printf_float+0x41a>
 80034f4:	e65b      	b.n	80031ae <_printf_float+0xb6>
 80034f6:	2301      	movs	r3, #1
 80034f8:	464a      	mov	r2, r9
 80034fa:	4631      	mov	r1, r6
 80034fc:	4628      	mov	r0, r5
 80034fe:	47b8      	blx	r7
 8003500:	3001      	adds	r0, #1
 8003502:	f43f ae54 	beq.w	80031ae <_printf_float+0xb6>
 8003506:	f108 0801 	add.w	r8, r8, #1
 800350a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800350c:	3b01      	subs	r3, #1
 800350e:	4543      	cmp	r3, r8
 8003510:	dcf1      	bgt.n	80034f6 <_printf_float+0x3fe>
 8003512:	4653      	mov	r3, sl
 8003514:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003518:	e6de      	b.n	80032d8 <_printf_float+0x1e0>
 800351a:	f04f 0800 	mov.w	r8, #0
 800351e:	f104 091a 	add.w	r9, r4, #26
 8003522:	e7f2      	b.n	800350a <_printf_float+0x412>
 8003524:	2301      	movs	r3, #1
 8003526:	4642      	mov	r2, r8
 8003528:	e7df      	b.n	80034ea <_printf_float+0x3f2>
 800352a:	2301      	movs	r3, #1
 800352c:	464a      	mov	r2, r9
 800352e:	4631      	mov	r1, r6
 8003530:	4628      	mov	r0, r5
 8003532:	47b8      	blx	r7
 8003534:	3001      	adds	r0, #1
 8003536:	f43f ae3a 	beq.w	80031ae <_printf_float+0xb6>
 800353a:	f108 0801 	add.w	r8, r8, #1
 800353e:	68e3      	ldr	r3, [r4, #12]
 8003540:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003542:	1a5b      	subs	r3, r3, r1
 8003544:	4543      	cmp	r3, r8
 8003546:	dcf0      	bgt.n	800352a <_printf_float+0x432>
 8003548:	e6fb      	b.n	8003342 <_printf_float+0x24a>
 800354a:	f04f 0800 	mov.w	r8, #0
 800354e:	f104 0919 	add.w	r9, r4, #25
 8003552:	e7f4      	b.n	800353e <_printf_float+0x446>

08003554 <_printf_common>:
 8003554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003558:	4616      	mov	r6, r2
 800355a:	4699      	mov	r9, r3
 800355c:	688a      	ldr	r2, [r1, #8]
 800355e:	690b      	ldr	r3, [r1, #16]
 8003560:	4607      	mov	r7, r0
 8003562:	4293      	cmp	r3, r2
 8003564:	bfb8      	it	lt
 8003566:	4613      	movlt	r3, r2
 8003568:	6033      	str	r3, [r6, #0]
 800356a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800356e:	460c      	mov	r4, r1
 8003570:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003574:	b10a      	cbz	r2, 800357a <_printf_common+0x26>
 8003576:	3301      	adds	r3, #1
 8003578:	6033      	str	r3, [r6, #0]
 800357a:	6823      	ldr	r3, [r4, #0]
 800357c:	0699      	lsls	r1, r3, #26
 800357e:	bf42      	ittt	mi
 8003580:	6833      	ldrmi	r3, [r6, #0]
 8003582:	3302      	addmi	r3, #2
 8003584:	6033      	strmi	r3, [r6, #0]
 8003586:	6825      	ldr	r5, [r4, #0]
 8003588:	f015 0506 	ands.w	r5, r5, #6
 800358c:	d106      	bne.n	800359c <_printf_common+0x48>
 800358e:	f104 0a19 	add.w	sl, r4, #25
 8003592:	68e3      	ldr	r3, [r4, #12]
 8003594:	6832      	ldr	r2, [r6, #0]
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	42ab      	cmp	r3, r5
 800359a:	dc2b      	bgt.n	80035f4 <_printf_common+0xa0>
 800359c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035a0:	1e13      	subs	r3, r2, #0
 80035a2:	6822      	ldr	r2, [r4, #0]
 80035a4:	bf18      	it	ne
 80035a6:	2301      	movne	r3, #1
 80035a8:	0692      	lsls	r2, r2, #26
 80035aa:	d430      	bmi.n	800360e <_printf_common+0xba>
 80035ac:	4649      	mov	r1, r9
 80035ae:	4638      	mov	r0, r7
 80035b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035b4:	47c0      	blx	r8
 80035b6:	3001      	adds	r0, #1
 80035b8:	d023      	beq.n	8003602 <_printf_common+0xae>
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	6922      	ldr	r2, [r4, #16]
 80035be:	f003 0306 	and.w	r3, r3, #6
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	bf14      	ite	ne
 80035c6:	2500      	movne	r5, #0
 80035c8:	6833      	ldreq	r3, [r6, #0]
 80035ca:	f04f 0600 	mov.w	r6, #0
 80035ce:	bf08      	it	eq
 80035d0:	68e5      	ldreq	r5, [r4, #12]
 80035d2:	f104 041a 	add.w	r4, r4, #26
 80035d6:	bf08      	it	eq
 80035d8:	1aed      	subeq	r5, r5, r3
 80035da:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80035de:	bf08      	it	eq
 80035e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035e4:	4293      	cmp	r3, r2
 80035e6:	bfc4      	itt	gt
 80035e8:	1a9b      	subgt	r3, r3, r2
 80035ea:	18ed      	addgt	r5, r5, r3
 80035ec:	42b5      	cmp	r5, r6
 80035ee:	d11a      	bne.n	8003626 <_printf_common+0xd2>
 80035f0:	2000      	movs	r0, #0
 80035f2:	e008      	b.n	8003606 <_printf_common+0xb2>
 80035f4:	2301      	movs	r3, #1
 80035f6:	4652      	mov	r2, sl
 80035f8:	4649      	mov	r1, r9
 80035fa:	4638      	mov	r0, r7
 80035fc:	47c0      	blx	r8
 80035fe:	3001      	adds	r0, #1
 8003600:	d103      	bne.n	800360a <_printf_common+0xb6>
 8003602:	f04f 30ff 	mov.w	r0, #4294967295
 8003606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800360a:	3501      	adds	r5, #1
 800360c:	e7c1      	b.n	8003592 <_printf_common+0x3e>
 800360e:	2030      	movs	r0, #48	; 0x30
 8003610:	18e1      	adds	r1, r4, r3
 8003612:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800361c:	4422      	add	r2, r4
 800361e:	3302      	adds	r3, #2
 8003620:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003624:	e7c2      	b.n	80035ac <_printf_common+0x58>
 8003626:	2301      	movs	r3, #1
 8003628:	4622      	mov	r2, r4
 800362a:	4649      	mov	r1, r9
 800362c:	4638      	mov	r0, r7
 800362e:	47c0      	blx	r8
 8003630:	3001      	adds	r0, #1
 8003632:	d0e6      	beq.n	8003602 <_printf_common+0xae>
 8003634:	3601      	adds	r6, #1
 8003636:	e7d9      	b.n	80035ec <_printf_common+0x98>

08003638 <_printf_i>:
 8003638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800363c:	7e0f      	ldrb	r7, [r1, #24]
 800363e:	4691      	mov	r9, r2
 8003640:	2f78      	cmp	r7, #120	; 0x78
 8003642:	4680      	mov	r8, r0
 8003644:	460c      	mov	r4, r1
 8003646:	469a      	mov	sl, r3
 8003648:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800364a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800364e:	d807      	bhi.n	8003660 <_printf_i+0x28>
 8003650:	2f62      	cmp	r7, #98	; 0x62
 8003652:	d80a      	bhi.n	800366a <_printf_i+0x32>
 8003654:	2f00      	cmp	r7, #0
 8003656:	f000 80d5 	beq.w	8003804 <_printf_i+0x1cc>
 800365a:	2f58      	cmp	r7, #88	; 0x58
 800365c:	f000 80c1 	beq.w	80037e2 <_printf_i+0x1aa>
 8003660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003664:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003668:	e03a      	b.n	80036e0 <_printf_i+0xa8>
 800366a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800366e:	2b15      	cmp	r3, #21
 8003670:	d8f6      	bhi.n	8003660 <_printf_i+0x28>
 8003672:	a101      	add	r1, pc, #4	; (adr r1, 8003678 <_printf_i+0x40>)
 8003674:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003678:	080036d1 	.word	0x080036d1
 800367c:	080036e5 	.word	0x080036e5
 8003680:	08003661 	.word	0x08003661
 8003684:	08003661 	.word	0x08003661
 8003688:	08003661 	.word	0x08003661
 800368c:	08003661 	.word	0x08003661
 8003690:	080036e5 	.word	0x080036e5
 8003694:	08003661 	.word	0x08003661
 8003698:	08003661 	.word	0x08003661
 800369c:	08003661 	.word	0x08003661
 80036a0:	08003661 	.word	0x08003661
 80036a4:	080037eb 	.word	0x080037eb
 80036a8:	08003711 	.word	0x08003711
 80036ac:	080037a5 	.word	0x080037a5
 80036b0:	08003661 	.word	0x08003661
 80036b4:	08003661 	.word	0x08003661
 80036b8:	0800380d 	.word	0x0800380d
 80036bc:	08003661 	.word	0x08003661
 80036c0:	08003711 	.word	0x08003711
 80036c4:	08003661 	.word	0x08003661
 80036c8:	08003661 	.word	0x08003661
 80036cc:	080037ad 	.word	0x080037ad
 80036d0:	682b      	ldr	r3, [r5, #0]
 80036d2:	1d1a      	adds	r2, r3, #4
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	602a      	str	r2, [r5, #0]
 80036d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0a0      	b.n	8003826 <_printf_i+0x1ee>
 80036e4:	6820      	ldr	r0, [r4, #0]
 80036e6:	682b      	ldr	r3, [r5, #0]
 80036e8:	0607      	lsls	r7, r0, #24
 80036ea:	f103 0104 	add.w	r1, r3, #4
 80036ee:	6029      	str	r1, [r5, #0]
 80036f0:	d501      	bpl.n	80036f6 <_printf_i+0xbe>
 80036f2:	681e      	ldr	r6, [r3, #0]
 80036f4:	e003      	b.n	80036fe <_printf_i+0xc6>
 80036f6:	0646      	lsls	r6, r0, #25
 80036f8:	d5fb      	bpl.n	80036f2 <_printf_i+0xba>
 80036fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80036fe:	2e00      	cmp	r6, #0
 8003700:	da03      	bge.n	800370a <_printf_i+0xd2>
 8003702:	232d      	movs	r3, #45	; 0x2d
 8003704:	4276      	negs	r6, r6
 8003706:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800370a:	230a      	movs	r3, #10
 800370c:	4859      	ldr	r0, [pc, #356]	; (8003874 <_printf_i+0x23c>)
 800370e:	e012      	b.n	8003736 <_printf_i+0xfe>
 8003710:	682b      	ldr	r3, [r5, #0]
 8003712:	6820      	ldr	r0, [r4, #0]
 8003714:	1d19      	adds	r1, r3, #4
 8003716:	6029      	str	r1, [r5, #0]
 8003718:	0605      	lsls	r5, r0, #24
 800371a:	d501      	bpl.n	8003720 <_printf_i+0xe8>
 800371c:	681e      	ldr	r6, [r3, #0]
 800371e:	e002      	b.n	8003726 <_printf_i+0xee>
 8003720:	0641      	lsls	r1, r0, #25
 8003722:	d5fb      	bpl.n	800371c <_printf_i+0xe4>
 8003724:	881e      	ldrh	r6, [r3, #0]
 8003726:	2f6f      	cmp	r7, #111	; 0x6f
 8003728:	bf0c      	ite	eq
 800372a:	2308      	moveq	r3, #8
 800372c:	230a      	movne	r3, #10
 800372e:	4851      	ldr	r0, [pc, #324]	; (8003874 <_printf_i+0x23c>)
 8003730:	2100      	movs	r1, #0
 8003732:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003736:	6865      	ldr	r5, [r4, #4]
 8003738:	2d00      	cmp	r5, #0
 800373a:	bfa8      	it	ge
 800373c:	6821      	ldrge	r1, [r4, #0]
 800373e:	60a5      	str	r5, [r4, #8]
 8003740:	bfa4      	itt	ge
 8003742:	f021 0104 	bicge.w	r1, r1, #4
 8003746:	6021      	strge	r1, [r4, #0]
 8003748:	b90e      	cbnz	r6, 800374e <_printf_i+0x116>
 800374a:	2d00      	cmp	r5, #0
 800374c:	d04b      	beq.n	80037e6 <_printf_i+0x1ae>
 800374e:	4615      	mov	r5, r2
 8003750:	fbb6 f1f3 	udiv	r1, r6, r3
 8003754:	fb03 6711 	mls	r7, r3, r1, r6
 8003758:	5dc7      	ldrb	r7, [r0, r7]
 800375a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800375e:	4637      	mov	r7, r6
 8003760:	42bb      	cmp	r3, r7
 8003762:	460e      	mov	r6, r1
 8003764:	d9f4      	bls.n	8003750 <_printf_i+0x118>
 8003766:	2b08      	cmp	r3, #8
 8003768:	d10b      	bne.n	8003782 <_printf_i+0x14a>
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	07de      	lsls	r6, r3, #31
 800376e:	d508      	bpl.n	8003782 <_printf_i+0x14a>
 8003770:	6923      	ldr	r3, [r4, #16]
 8003772:	6861      	ldr	r1, [r4, #4]
 8003774:	4299      	cmp	r1, r3
 8003776:	bfde      	ittt	le
 8003778:	2330      	movle	r3, #48	; 0x30
 800377a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800377e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003782:	1b52      	subs	r2, r2, r5
 8003784:	6122      	str	r2, [r4, #16]
 8003786:	464b      	mov	r3, r9
 8003788:	4621      	mov	r1, r4
 800378a:	4640      	mov	r0, r8
 800378c:	f8cd a000 	str.w	sl, [sp]
 8003790:	aa03      	add	r2, sp, #12
 8003792:	f7ff fedf 	bl	8003554 <_printf_common>
 8003796:	3001      	adds	r0, #1
 8003798:	d14a      	bne.n	8003830 <_printf_i+0x1f8>
 800379a:	f04f 30ff 	mov.w	r0, #4294967295
 800379e:	b004      	add	sp, #16
 80037a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	f043 0320 	orr.w	r3, r3, #32
 80037aa:	6023      	str	r3, [r4, #0]
 80037ac:	2778      	movs	r7, #120	; 0x78
 80037ae:	4832      	ldr	r0, [pc, #200]	; (8003878 <_printf_i+0x240>)
 80037b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	6829      	ldr	r1, [r5, #0]
 80037b8:	061f      	lsls	r7, r3, #24
 80037ba:	f851 6b04 	ldr.w	r6, [r1], #4
 80037be:	d402      	bmi.n	80037c6 <_printf_i+0x18e>
 80037c0:	065f      	lsls	r7, r3, #25
 80037c2:	bf48      	it	mi
 80037c4:	b2b6      	uxthmi	r6, r6
 80037c6:	07df      	lsls	r7, r3, #31
 80037c8:	bf48      	it	mi
 80037ca:	f043 0320 	orrmi.w	r3, r3, #32
 80037ce:	6029      	str	r1, [r5, #0]
 80037d0:	bf48      	it	mi
 80037d2:	6023      	strmi	r3, [r4, #0]
 80037d4:	b91e      	cbnz	r6, 80037de <_printf_i+0x1a6>
 80037d6:	6823      	ldr	r3, [r4, #0]
 80037d8:	f023 0320 	bic.w	r3, r3, #32
 80037dc:	6023      	str	r3, [r4, #0]
 80037de:	2310      	movs	r3, #16
 80037e0:	e7a6      	b.n	8003730 <_printf_i+0xf8>
 80037e2:	4824      	ldr	r0, [pc, #144]	; (8003874 <_printf_i+0x23c>)
 80037e4:	e7e4      	b.n	80037b0 <_printf_i+0x178>
 80037e6:	4615      	mov	r5, r2
 80037e8:	e7bd      	b.n	8003766 <_printf_i+0x12e>
 80037ea:	682b      	ldr	r3, [r5, #0]
 80037ec:	6826      	ldr	r6, [r4, #0]
 80037ee:	1d18      	adds	r0, r3, #4
 80037f0:	6961      	ldr	r1, [r4, #20]
 80037f2:	6028      	str	r0, [r5, #0]
 80037f4:	0635      	lsls	r5, r6, #24
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	d501      	bpl.n	80037fe <_printf_i+0x1c6>
 80037fa:	6019      	str	r1, [r3, #0]
 80037fc:	e002      	b.n	8003804 <_printf_i+0x1cc>
 80037fe:	0670      	lsls	r0, r6, #25
 8003800:	d5fb      	bpl.n	80037fa <_printf_i+0x1c2>
 8003802:	8019      	strh	r1, [r3, #0]
 8003804:	2300      	movs	r3, #0
 8003806:	4615      	mov	r5, r2
 8003808:	6123      	str	r3, [r4, #16]
 800380a:	e7bc      	b.n	8003786 <_printf_i+0x14e>
 800380c:	682b      	ldr	r3, [r5, #0]
 800380e:	2100      	movs	r1, #0
 8003810:	1d1a      	adds	r2, r3, #4
 8003812:	602a      	str	r2, [r5, #0]
 8003814:	681d      	ldr	r5, [r3, #0]
 8003816:	6862      	ldr	r2, [r4, #4]
 8003818:	4628      	mov	r0, r5
 800381a:	f000 fcd1 	bl	80041c0 <memchr>
 800381e:	b108      	cbz	r0, 8003824 <_printf_i+0x1ec>
 8003820:	1b40      	subs	r0, r0, r5
 8003822:	6060      	str	r0, [r4, #4]
 8003824:	6863      	ldr	r3, [r4, #4]
 8003826:	6123      	str	r3, [r4, #16]
 8003828:	2300      	movs	r3, #0
 800382a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800382e:	e7aa      	b.n	8003786 <_printf_i+0x14e>
 8003830:	462a      	mov	r2, r5
 8003832:	4649      	mov	r1, r9
 8003834:	4640      	mov	r0, r8
 8003836:	6923      	ldr	r3, [r4, #16]
 8003838:	47d0      	blx	sl
 800383a:	3001      	adds	r0, #1
 800383c:	d0ad      	beq.n	800379a <_printf_i+0x162>
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	079b      	lsls	r3, r3, #30
 8003842:	d413      	bmi.n	800386c <_printf_i+0x234>
 8003844:	68e0      	ldr	r0, [r4, #12]
 8003846:	9b03      	ldr	r3, [sp, #12]
 8003848:	4298      	cmp	r0, r3
 800384a:	bfb8      	it	lt
 800384c:	4618      	movlt	r0, r3
 800384e:	e7a6      	b.n	800379e <_printf_i+0x166>
 8003850:	2301      	movs	r3, #1
 8003852:	4632      	mov	r2, r6
 8003854:	4649      	mov	r1, r9
 8003856:	4640      	mov	r0, r8
 8003858:	47d0      	blx	sl
 800385a:	3001      	adds	r0, #1
 800385c:	d09d      	beq.n	800379a <_printf_i+0x162>
 800385e:	3501      	adds	r5, #1
 8003860:	68e3      	ldr	r3, [r4, #12]
 8003862:	9903      	ldr	r1, [sp, #12]
 8003864:	1a5b      	subs	r3, r3, r1
 8003866:	42ab      	cmp	r3, r5
 8003868:	dcf2      	bgt.n	8003850 <_printf_i+0x218>
 800386a:	e7eb      	b.n	8003844 <_printf_i+0x20c>
 800386c:	2500      	movs	r5, #0
 800386e:	f104 0619 	add.w	r6, r4, #25
 8003872:	e7f5      	b.n	8003860 <_printf_i+0x228>
 8003874:	08007874 	.word	0x08007874
 8003878:	08007885 	.word	0x08007885

0800387c <_scanf_float>:
 800387c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003880:	b087      	sub	sp, #28
 8003882:	9303      	str	r3, [sp, #12]
 8003884:	688b      	ldr	r3, [r1, #8]
 8003886:	4617      	mov	r7, r2
 8003888:	1e5a      	subs	r2, r3, #1
 800388a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800388e:	bf85      	ittet	hi
 8003890:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003894:	195b      	addhi	r3, r3, r5
 8003896:	2300      	movls	r3, #0
 8003898:	9302      	strhi	r3, [sp, #8]
 800389a:	bf88      	it	hi
 800389c:	f240 135d 	movwhi	r3, #349	; 0x15d
 80038a0:	468b      	mov	fp, r1
 80038a2:	f04f 0500 	mov.w	r5, #0
 80038a6:	bf8c      	ite	hi
 80038a8:	608b      	strhi	r3, [r1, #8]
 80038aa:	9302      	strls	r3, [sp, #8]
 80038ac:	680b      	ldr	r3, [r1, #0]
 80038ae:	4680      	mov	r8, r0
 80038b0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80038b4:	f84b 3b1c 	str.w	r3, [fp], #28
 80038b8:	460c      	mov	r4, r1
 80038ba:	465e      	mov	r6, fp
 80038bc:	46aa      	mov	sl, r5
 80038be:	46a9      	mov	r9, r5
 80038c0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80038c4:	9501      	str	r5, [sp, #4]
 80038c6:	68a2      	ldr	r2, [r4, #8]
 80038c8:	b152      	cbz	r2, 80038e0 <_scanf_float+0x64>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	2b4e      	cmp	r3, #78	; 0x4e
 80038d0:	d864      	bhi.n	800399c <_scanf_float+0x120>
 80038d2:	2b40      	cmp	r3, #64	; 0x40
 80038d4:	d83c      	bhi.n	8003950 <_scanf_float+0xd4>
 80038d6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80038da:	b2c8      	uxtb	r0, r1
 80038dc:	280e      	cmp	r0, #14
 80038de:	d93a      	bls.n	8003956 <_scanf_float+0xda>
 80038e0:	f1b9 0f00 	cmp.w	r9, #0
 80038e4:	d003      	beq.n	80038ee <_scanf_float+0x72>
 80038e6:	6823      	ldr	r3, [r4, #0]
 80038e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038ec:	6023      	str	r3, [r4, #0]
 80038ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80038f2:	f1ba 0f01 	cmp.w	sl, #1
 80038f6:	f200 8113 	bhi.w	8003b20 <_scanf_float+0x2a4>
 80038fa:	455e      	cmp	r6, fp
 80038fc:	f200 8105 	bhi.w	8003b0a <_scanf_float+0x28e>
 8003900:	2501      	movs	r5, #1
 8003902:	4628      	mov	r0, r5
 8003904:	b007      	add	sp, #28
 8003906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800390a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800390e:	2a0d      	cmp	r2, #13
 8003910:	d8e6      	bhi.n	80038e0 <_scanf_float+0x64>
 8003912:	a101      	add	r1, pc, #4	; (adr r1, 8003918 <_scanf_float+0x9c>)
 8003914:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003918:	08003a57 	.word	0x08003a57
 800391c:	080038e1 	.word	0x080038e1
 8003920:	080038e1 	.word	0x080038e1
 8003924:	080038e1 	.word	0x080038e1
 8003928:	08003ab7 	.word	0x08003ab7
 800392c:	08003a8f 	.word	0x08003a8f
 8003930:	080038e1 	.word	0x080038e1
 8003934:	080038e1 	.word	0x080038e1
 8003938:	08003a65 	.word	0x08003a65
 800393c:	080038e1 	.word	0x080038e1
 8003940:	080038e1 	.word	0x080038e1
 8003944:	080038e1 	.word	0x080038e1
 8003948:	080038e1 	.word	0x080038e1
 800394c:	08003a1d 	.word	0x08003a1d
 8003950:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003954:	e7db      	b.n	800390e <_scanf_float+0x92>
 8003956:	290e      	cmp	r1, #14
 8003958:	d8c2      	bhi.n	80038e0 <_scanf_float+0x64>
 800395a:	a001      	add	r0, pc, #4	; (adr r0, 8003960 <_scanf_float+0xe4>)
 800395c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003960:	08003a0f 	.word	0x08003a0f
 8003964:	080038e1 	.word	0x080038e1
 8003968:	08003a0f 	.word	0x08003a0f
 800396c:	08003aa3 	.word	0x08003aa3
 8003970:	080038e1 	.word	0x080038e1
 8003974:	080039bd 	.word	0x080039bd
 8003978:	080039f9 	.word	0x080039f9
 800397c:	080039f9 	.word	0x080039f9
 8003980:	080039f9 	.word	0x080039f9
 8003984:	080039f9 	.word	0x080039f9
 8003988:	080039f9 	.word	0x080039f9
 800398c:	080039f9 	.word	0x080039f9
 8003990:	080039f9 	.word	0x080039f9
 8003994:	080039f9 	.word	0x080039f9
 8003998:	080039f9 	.word	0x080039f9
 800399c:	2b6e      	cmp	r3, #110	; 0x6e
 800399e:	d809      	bhi.n	80039b4 <_scanf_float+0x138>
 80039a0:	2b60      	cmp	r3, #96	; 0x60
 80039a2:	d8b2      	bhi.n	800390a <_scanf_float+0x8e>
 80039a4:	2b54      	cmp	r3, #84	; 0x54
 80039a6:	d077      	beq.n	8003a98 <_scanf_float+0x21c>
 80039a8:	2b59      	cmp	r3, #89	; 0x59
 80039aa:	d199      	bne.n	80038e0 <_scanf_float+0x64>
 80039ac:	2d07      	cmp	r5, #7
 80039ae:	d197      	bne.n	80038e0 <_scanf_float+0x64>
 80039b0:	2508      	movs	r5, #8
 80039b2:	e029      	b.n	8003a08 <_scanf_float+0x18c>
 80039b4:	2b74      	cmp	r3, #116	; 0x74
 80039b6:	d06f      	beq.n	8003a98 <_scanf_float+0x21c>
 80039b8:	2b79      	cmp	r3, #121	; 0x79
 80039ba:	e7f6      	b.n	80039aa <_scanf_float+0x12e>
 80039bc:	6821      	ldr	r1, [r4, #0]
 80039be:	05c8      	lsls	r0, r1, #23
 80039c0:	d51a      	bpl.n	80039f8 <_scanf_float+0x17c>
 80039c2:	9b02      	ldr	r3, [sp, #8]
 80039c4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80039c8:	6021      	str	r1, [r4, #0]
 80039ca:	f109 0901 	add.w	r9, r9, #1
 80039ce:	b11b      	cbz	r3, 80039d8 <_scanf_float+0x15c>
 80039d0:	3b01      	subs	r3, #1
 80039d2:	3201      	adds	r2, #1
 80039d4:	9302      	str	r3, [sp, #8]
 80039d6:	60a2      	str	r2, [r4, #8]
 80039d8:	68a3      	ldr	r3, [r4, #8]
 80039da:	3b01      	subs	r3, #1
 80039dc:	60a3      	str	r3, [r4, #8]
 80039de:	6923      	ldr	r3, [r4, #16]
 80039e0:	3301      	adds	r3, #1
 80039e2:	6123      	str	r3, [r4, #16]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3b01      	subs	r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	607b      	str	r3, [r7, #4]
 80039ec:	f340 8084 	ble.w	8003af8 <_scanf_float+0x27c>
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	3301      	adds	r3, #1
 80039f4:	603b      	str	r3, [r7, #0]
 80039f6:	e766      	b.n	80038c6 <_scanf_float+0x4a>
 80039f8:	eb1a 0f05 	cmn.w	sl, r5
 80039fc:	f47f af70 	bne.w	80038e0 <_scanf_float+0x64>
 8003a00:	6822      	ldr	r2, [r4, #0]
 8003a02:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003a06:	6022      	str	r2, [r4, #0]
 8003a08:	f806 3b01 	strb.w	r3, [r6], #1
 8003a0c:	e7e4      	b.n	80039d8 <_scanf_float+0x15c>
 8003a0e:	6822      	ldr	r2, [r4, #0]
 8003a10:	0610      	lsls	r0, r2, #24
 8003a12:	f57f af65 	bpl.w	80038e0 <_scanf_float+0x64>
 8003a16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a1a:	e7f4      	b.n	8003a06 <_scanf_float+0x18a>
 8003a1c:	f1ba 0f00 	cmp.w	sl, #0
 8003a20:	d10e      	bne.n	8003a40 <_scanf_float+0x1c4>
 8003a22:	f1b9 0f00 	cmp.w	r9, #0
 8003a26:	d10e      	bne.n	8003a46 <_scanf_float+0x1ca>
 8003a28:	6822      	ldr	r2, [r4, #0]
 8003a2a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003a2e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003a32:	d108      	bne.n	8003a46 <_scanf_float+0x1ca>
 8003a34:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003a38:	f04f 0a01 	mov.w	sl, #1
 8003a3c:	6022      	str	r2, [r4, #0]
 8003a3e:	e7e3      	b.n	8003a08 <_scanf_float+0x18c>
 8003a40:	f1ba 0f02 	cmp.w	sl, #2
 8003a44:	d055      	beq.n	8003af2 <_scanf_float+0x276>
 8003a46:	2d01      	cmp	r5, #1
 8003a48:	d002      	beq.n	8003a50 <_scanf_float+0x1d4>
 8003a4a:	2d04      	cmp	r5, #4
 8003a4c:	f47f af48 	bne.w	80038e0 <_scanf_float+0x64>
 8003a50:	3501      	adds	r5, #1
 8003a52:	b2ed      	uxtb	r5, r5
 8003a54:	e7d8      	b.n	8003a08 <_scanf_float+0x18c>
 8003a56:	f1ba 0f01 	cmp.w	sl, #1
 8003a5a:	f47f af41 	bne.w	80038e0 <_scanf_float+0x64>
 8003a5e:	f04f 0a02 	mov.w	sl, #2
 8003a62:	e7d1      	b.n	8003a08 <_scanf_float+0x18c>
 8003a64:	b97d      	cbnz	r5, 8003a86 <_scanf_float+0x20a>
 8003a66:	f1b9 0f00 	cmp.w	r9, #0
 8003a6a:	f47f af3c 	bne.w	80038e6 <_scanf_float+0x6a>
 8003a6e:	6822      	ldr	r2, [r4, #0]
 8003a70:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003a74:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003a78:	f47f af39 	bne.w	80038ee <_scanf_float+0x72>
 8003a7c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003a80:	2501      	movs	r5, #1
 8003a82:	6022      	str	r2, [r4, #0]
 8003a84:	e7c0      	b.n	8003a08 <_scanf_float+0x18c>
 8003a86:	2d03      	cmp	r5, #3
 8003a88:	d0e2      	beq.n	8003a50 <_scanf_float+0x1d4>
 8003a8a:	2d05      	cmp	r5, #5
 8003a8c:	e7de      	b.n	8003a4c <_scanf_float+0x1d0>
 8003a8e:	2d02      	cmp	r5, #2
 8003a90:	f47f af26 	bne.w	80038e0 <_scanf_float+0x64>
 8003a94:	2503      	movs	r5, #3
 8003a96:	e7b7      	b.n	8003a08 <_scanf_float+0x18c>
 8003a98:	2d06      	cmp	r5, #6
 8003a9a:	f47f af21 	bne.w	80038e0 <_scanf_float+0x64>
 8003a9e:	2507      	movs	r5, #7
 8003aa0:	e7b2      	b.n	8003a08 <_scanf_float+0x18c>
 8003aa2:	6822      	ldr	r2, [r4, #0]
 8003aa4:	0591      	lsls	r1, r2, #22
 8003aa6:	f57f af1b 	bpl.w	80038e0 <_scanf_float+0x64>
 8003aaa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003aae:	6022      	str	r2, [r4, #0]
 8003ab0:	f8cd 9004 	str.w	r9, [sp, #4]
 8003ab4:	e7a8      	b.n	8003a08 <_scanf_float+0x18c>
 8003ab6:	6822      	ldr	r2, [r4, #0]
 8003ab8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003abc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003ac0:	d006      	beq.n	8003ad0 <_scanf_float+0x254>
 8003ac2:	0550      	lsls	r0, r2, #21
 8003ac4:	f57f af0c 	bpl.w	80038e0 <_scanf_float+0x64>
 8003ac8:	f1b9 0f00 	cmp.w	r9, #0
 8003acc:	f43f af0f 	beq.w	80038ee <_scanf_float+0x72>
 8003ad0:	0591      	lsls	r1, r2, #22
 8003ad2:	bf58      	it	pl
 8003ad4:	9901      	ldrpl	r1, [sp, #4]
 8003ad6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003ada:	bf58      	it	pl
 8003adc:	eba9 0101 	subpl.w	r1, r9, r1
 8003ae0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003ae4:	f04f 0900 	mov.w	r9, #0
 8003ae8:	bf58      	it	pl
 8003aea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003aee:	6022      	str	r2, [r4, #0]
 8003af0:	e78a      	b.n	8003a08 <_scanf_float+0x18c>
 8003af2:	f04f 0a03 	mov.w	sl, #3
 8003af6:	e787      	b.n	8003a08 <_scanf_float+0x18c>
 8003af8:	4639      	mov	r1, r7
 8003afa:	4640      	mov	r0, r8
 8003afc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003b00:	4798      	blx	r3
 8003b02:	2800      	cmp	r0, #0
 8003b04:	f43f aedf 	beq.w	80038c6 <_scanf_float+0x4a>
 8003b08:	e6ea      	b.n	80038e0 <_scanf_float+0x64>
 8003b0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003b0e:	463a      	mov	r2, r7
 8003b10:	4640      	mov	r0, r8
 8003b12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003b16:	4798      	blx	r3
 8003b18:	6923      	ldr	r3, [r4, #16]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	6123      	str	r3, [r4, #16]
 8003b1e:	e6ec      	b.n	80038fa <_scanf_float+0x7e>
 8003b20:	1e6b      	subs	r3, r5, #1
 8003b22:	2b06      	cmp	r3, #6
 8003b24:	d825      	bhi.n	8003b72 <_scanf_float+0x2f6>
 8003b26:	2d02      	cmp	r5, #2
 8003b28:	d836      	bhi.n	8003b98 <_scanf_float+0x31c>
 8003b2a:	455e      	cmp	r6, fp
 8003b2c:	f67f aee8 	bls.w	8003900 <_scanf_float+0x84>
 8003b30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003b34:	463a      	mov	r2, r7
 8003b36:	4640      	mov	r0, r8
 8003b38:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003b3c:	4798      	blx	r3
 8003b3e:	6923      	ldr	r3, [r4, #16]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	6123      	str	r3, [r4, #16]
 8003b44:	e7f1      	b.n	8003b2a <_scanf_float+0x2ae>
 8003b46:	9802      	ldr	r0, [sp, #8]
 8003b48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003b4c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003b50:	463a      	mov	r2, r7
 8003b52:	9002      	str	r0, [sp, #8]
 8003b54:	4640      	mov	r0, r8
 8003b56:	4798      	blx	r3
 8003b58:	6923      	ldr	r3, [r4, #16]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	6123      	str	r3, [r4, #16]
 8003b5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003b62:	fa5f fa8a 	uxtb.w	sl, sl
 8003b66:	f1ba 0f02 	cmp.w	sl, #2
 8003b6a:	d1ec      	bne.n	8003b46 <_scanf_float+0x2ca>
 8003b6c:	3d03      	subs	r5, #3
 8003b6e:	b2ed      	uxtb	r5, r5
 8003b70:	1b76      	subs	r6, r6, r5
 8003b72:	6823      	ldr	r3, [r4, #0]
 8003b74:	05da      	lsls	r2, r3, #23
 8003b76:	d52f      	bpl.n	8003bd8 <_scanf_float+0x35c>
 8003b78:	055b      	lsls	r3, r3, #21
 8003b7a:	d510      	bpl.n	8003b9e <_scanf_float+0x322>
 8003b7c:	455e      	cmp	r6, fp
 8003b7e:	f67f aebf 	bls.w	8003900 <_scanf_float+0x84>
 8003b82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003b86:	463a      	mov	r2, r7
 8003b88:	4640      	mov	r0, r8
 8003b8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003b8e:	4798      	blx	r3
 8003b90:	6923      	ldr	r3, [r4, #16]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	6123      	str	r3, [r4, #16]
 8003b96:	e7f1      	b.n	8003b7c <_scanf_float+0x300>
 8003b98:	46aa      	mov	sl, r5
 8003b9a:	9602      	str	r6, [sp, #8]
 8003b9c:	e7df      	b.n	8003b5e <_scanf_float+0x2e2>
 8003b9e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003ba2:	6923      	ldr	r3, [r4, #16]
 8003ba4:	2965      	cmp	r1, #101	; 0x65
 8003ba6:	f103 33ff 	add.w	r3, r3, #4294967295
 8003baa:	f106 35ff 	add.w	r5, r6, #4294967295
 8003bae:	6123      	str	r3, [r4, #16]
 8003bb0:	d00c      	beq.n	8003bcc <_scanf_float+0x350>
 8003bb2:	2945      	cmp	r1, #69	; 0x45
 8003bb4:	d00a      	beq.n	8003bcc <_scanf_float+0x350>
 8003bb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003bba:	463a      	mov	r2, r7
 8003bbc:	4640      	mov	r0, r8
 8003bbe:	4798      	blx	r3
 8003bc0:	6923      	ldr	r3, [r4, #16]
 8003bc2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	1eb5      	subs	r5, r6, #2
 8003bca:	6123      	str	r3, [r4, #16]
 8003bcc:	463a      	mov	r2, r7
 8003bce:	4640      	mov	r0, r8
 8003bd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003bd4:	4798      	blx	r3
 8003bd6:	462e      	mov	r6, r5
 8003bd8:	6825      	ldr	r5, [r4, #0]
 8003bda:	f015 0510 	ands.w	r5, r5, #16
 8003bde:	d155      	bne.n	8003c8c <_scanf_float+0x410>
 8003be0:	7035      	strb	r5, [r6, #0]
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bec:	d11d      	bne.n	8003c2a <_scanf_float+0x3ae>
 8003bee:	9b01      	ldr	r3, [sp, #4]
 8003bf0:	454b      	cmp	r3, r9
 8003bf2:	eba3 0209 	sub.w	r2, r3, r9
 8003bf6:	d125      	bne.n	8003c44 <_scanf_float+0x3c8>
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	4659      	mov	r1, fp
 8003bfc:	4640      	mov	r0, r8
 8003bfe:	f002 fd0f 	bl	8006620 <_strtod_r>
 8003c02:	9b03      	ldr	r3, [sp, #12]
 8003c04:	f8d4 c000 	ldr.w	ip, [r4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f01c 0f02 	tst.w	ip, #2
 8003c0e:	4606      	mov	r6, r0
 8003c10:	460f      	mov	r7, r1
 8003c12:	f103 0204 	add.w	r2, r3, #4
 8003c16:	d020      	beq.n	8003c5a <_scanf_float+0x3de>
 8003c18:	9903      	ldr	r1, [sp, #12]
 8003c1a:	600a      	str	r2, [r1, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	e9c3 6700 	strd	r6, r7, [r3]
 8003c22:	68e3      	ldr	r3, [r4, #12]
 8003c24:	3301      	adds	r3, #1
 8003c26:	60e3      	str	r3, [r4, #12]
 8003c28:	e66b      	b.n	8003902 <_scanf_float+0x86>
 8003c2a:	9b04      	ldr	r3, [sp, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0e3      	beq.n	8003bf8 <_scanf_float+0x37c>
 8003c30:	9905      	ldr	r1, [sp, #20]
 8003c32:	230a      	movs	r3, #10
 8003c34:	462a      	mov	r2, r5
 8003c36:	4640      	mov	r0, r8
 8003c38:	3101      	adds	r1, #1
 8003c3a:	f002 fd75 	bl	8006728 <_strtol_r>
 8003c3e:	9b04      	ldr	r3, [sp, #16]
 8003c40:	9e05      	ldr	r6, [sp, #20]
 8003c42:	1ac2      	subs	r2, r0, r3
 8003c44:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003c48:	429e      	cmp	r6, r3
 8003c4a:	bf28      	it	cs
 8003c4c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003c50:	4630      	mov	r0, r6
 8003c52:	490f      	ldr	r1, [pc, #60]	; (8003c90 <_scanf_float+0x414>)
 8003c54:	f000 f93e 	bl	8003ed4 <siprintf>
 8003c58:	e7ce      	b.n	8003bf8 <_scanf_float+0x37c>
 8003c5a:	f01c 0f04 	tst.w	ip, #4
 8003c5e:	d1db      	bne.n	8003c18 <_scanf_float+0x39c>
 8003c60:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003c64:	f8cc 2000 	str.w	r2, [ip]
 8003c68:	f8d3 8000 	ldr.w	r8, [r3]
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	f7fc fecc 	bl	8000a0c <__aeabi_dcmpun>
 8003c74:	b128      	cbz	r0, 8003c82 <_scanf_float+0x406>
 8003c76:	4807      	ldr	r0, [pc, #28]	; (8003c94 <_scanf_float+0x418>)
 8003c78:	f000 fab0 	bl	80041dc <nanf>
 8003c7c:	f8c8 0000 	str.w	r0, [r8]
 8003c80:	e7cf      	b.n	8003c22 <_scanf_float+0x3a6>
 8003c82:	4630      	mov	r0, r6
 8003c84:	4639      	mov	r1, r7
 8003c86:	f7fc ff1f 	bl	8000ac8 <__aeabi_d2f>
 8003c8a:	e7f7      	b.n	8003c7c <_scanf_float+0x400>
 8003c8c:	2500      	movs	r5, #0
 8003c8e:	e638      	b.n	8003902 <_scanf_float+0x86>
 8003c90:	08007896 	.word	0x08007896
 8003c94:	08007c2d 	.word	0x08007c2d

08003c98 <std>:
 8003c98:	2300      	movs	r3, #0
 8003c9a:	b510      	push	{r4, lr}
 8003c9c:	4604      	mov	r4, r0
 8003c9e:	e9c0 3300 	strd	r3, r3, [r0]
 8003ca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ca6:	6083      	str	r3, [r0, #8]
 8003ca8:	8181      	strh	r1, [r0, #12]
 8003caa:	6643      	str	r3, [r0, #100]	; 0x64
 8003cac:	81c2      	strh	r2, [r0, #14]
 8003cae:	6183      	str	r3, [r0, #24]
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	2208      	movs	r2, #8
 8003cb4:	305c      	adds	r0, #92	; 0x5c
 8003cb6:	f000 fa05 	bl	80040c4 <memset>
 8003cba:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <std+0x38>)
 8003cbc:	6224      	str	r4, [r4, #32]
 8003cbe:	6263      	str	r3, [r4, #36]	; 0x24
 8003cc0:	4b04      	ldr	r3, [pc, #16]	; (8003cd4 <std+0x3c>)
 8003cc2:	62a3      	str	r3, [r4, #40]	; 0x28
 8003cc4:	4b04      	ldr	r3, [pc, #16]	; (8003cd8 <std+0x40>)
 8003cc6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003cc8:	4b04      	ldr	r3, [pc, #16]	; (8003cdc <std+0x44>)
 8003cca:	6323      	str	r3, [r4, #48]	; 0x30
 8003ccc:	bd10      	pop	{r4, pc}
 8003cce:	bf00      	nop
 8003cd0:	08003f15 	.word	0x08003f15
 8003cd4:	08003f37 	.word	0x08003f37
 8003cd8:	08003f6f 	.word	0x08003f6f
 8003cdc:	08003f93 	.word	0x08003f93

08003ce0 <stdio_exit_handler>:
 8003ce0:	4a02      	ldr	r2, [pc, #8]	; (8003cec <stdio_exit_handler+0xc>)
 8003ce2:	4903      	ldr	r1, [pc, #12]	; (8003cf0 <stdio_exit_handler+0x10>)
 8003ce4:	4803      	ldr	r0, [pc, #12]	; (8003cf4 <stdio_exit_handler+0x14>)
 8003ce6:	f000 b869 	b.w	8003dbc <_fwalk_sglue>
 8003cea:	bf00      	nop
 8003cec:	2000000c 	.word	0x2000000c
 8003cf0:	08006d65 	.word	0x08006d65
 8003cf4:	20000018 	.word	0x20000018

08003cf8 <cleanup_stdio>:
 8003cf8:	6841      	ldr	r1, [r0, #4]
 8003cfa:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <cleanup_stdio+0x34>)
 8003cfc:	b510      	push	{r4, lr}
 8003cfe:	4299      	cmp	r1, r3
 8003d00:	4604      	mov	r4, r0
 8003d02:	d001      	beq.n	8003d08 <cleanup_stdio+0x10>
 8003d04:	f003 f82e 	bl	8006d64 <_fflush_r>
 8003d08:	68a1      	ldr	r1, [r4, #8]
 8003d0a:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <cleanup_stdio+0x38>)
 8003d0c:	4299      	cmp	r1, r3
 8003d0e:	d002      	beq.n	8003d16 <cleanup_stdio+0x1e>
 8003d10:	4620      	mov	r0, r4
 8003d12:	f003 f827 	bl	8006d64 <_fflush_r>
 8003d16:	68e1      	ldr	r1, [r4, #12]
 8003d18:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <cleanup_stdio+0x3c>)
 8003d1a:	4299      	cmp	r1, r3
 8003d1c:	d004      	beq.n	8003d28 <cleanup_stdio+0x30>
 8003d1e:	4620      	mov	r0, r4
 8003d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d24:	f003 b81e 	b.w	8006d64 <_fflush_r>
 8003d28:	bd10      	pop	{r4, pc}
 8003d2a:	bf00      	nop
 8003d2c:	20000274 	.word	0x20000274
 8003d30:	200002dc 	.word	0x200002dc
 8003d34:	20000344 	.word	0x20000344

08003d38 <global_stdio_init.part.0>:
 8003d38:	b510      	push	{r4, lr}
 8003d3a:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <global_stdio_init.part.0+0x30>)
 8003d3c:	4c0b      	ldr	r4, [pc, #44]	; (8003d6c <global_stdio_init.part.0+0x34>)
 8003d3e:	4a0c      	ldr	r2, [pc, #48]	; (8003d70 <global_stdio_init.part.0+0x38>)
 8003d40:	4620      	mov	r0, r4
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	2104      	movs	r1, #4
 8003d46:	2200      	movs	r2, #0
 8003d48:	f7ff ffa6 	bl	8003c98 <std>
 8003d4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003d50:	2201      	movs	r2, #1
 8003d52:	2109      	movs	r1, #9
 8003d54:	f7ff ffa0 	bl	8003c98 <std>
 8003d58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d62:	2112      	movs	r1, #18
 8003d64:	f7ff bf98 	b.w	8003c98 <std>
 8003d68:	200003ac 	.word	0x200003ac
 8003d6c:	20000274 	.word	0x20000274
 8003d70:	08003ce1 	.word	0x08003ce1

08003d74 <__sfp_lock_acquire>:
 8003d74:	4801      	ldr	r0, [pc, #4]	; (8003d7c <__sfp_lock_acquire+0x8>)
 8003d76:	f000 ba21 	b.w	80041bc <__retarget_lock_acquire_recursive>
 8003d7a:	bf00      	nop
 8003d7c:	200003b5 	.word	0x200003b5

08003d80 <__sfp_lock_release>:
 8003d80:	4801      	ldr	r0, [pc, #4]	; (8003d88 <__sfp_lock_release+0x8>)
 8003d82:	f000 ba1c 	b.w	80041be <__retarget_lock_release_recursive>
 8003d86:	bf00      	nop
 8003d88:	200003b5 	.word	0x200003b5

08003d8c <__sinit>:
 8003d8c:	b510      	push	{r4, lr}
 8003d8e:	4604      	mov	r4, r0
 8003d90:	f7ff fff0 	bl	8003d74 <__sfp_lock_acquire>
 8003d94:	6a23      	ldr	r3, [r4, #32]
 8003d96:	b11b      	cbz	r3, 8003da0 <__sinit+0x14>
 8003d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d9c:	f7ff bff0 	b.w	8003d80 <__sfp_lock_release>
 8003da0:	4b04      	ldr	r3, [pc, #16]	; (8003db4 <__sinit+0x28>)
 8003da2:	6223      	str	r3, [r4, #32]
 8003da4:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <__sinit+0x2c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1f5      	bne.n	8003d98 <__sinit+0xc>
 8003dac:	f7ff ffc4 	bl	8003d38 <global_stdio_init.part.0>
 8003db0:	e7f2      	b.n	8003d98 <__sinit+0xc>
 8003db2:	bf00      	nop
 8003db4:	08003cf9 	.word	0x08003cf9
 8003db8:	200003ac 	.word	0x200003ac

08003dbc <_fwalk_sglue>:
 8003dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dc0:	4607      	mov	r7, r0
 8003dc2:	4688      	mov	r8, r1
 8003dc4:	4614      	mov	r4, r2
 8003dc6:	2600      	movs	r6, #0
 8003dc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003dcc:	f1b9 0901 	subs.w	r9, r9, #1
 8003dd0:	d505      	bpl.n	8003dde <_fwalk_sglue+0x22>
 8003dd2:	6824      	ldr	r4, [r4, #0]
 8003dd4:	2c00      	cmp	r4, #0
 8003dd6:	d1f7      	bne.n	8003dc8 <_fwalk_sglue+0xc>
 8003dd8:	4630      	mov	r0, r6
 8003dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dde:	89ab      	ldrh	r3, [r5, #12]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d907      	bls.n	8003df4 <_fwalk_sglue+0x38>
 8003de4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003de8:	3301      	adds	r3, #1
 8003dea:	d003      	beq.n	8003df4 <_fwalk_sglue+0x38>
 8003dec:	4629      	mov	r1, r5
 8003dee:	4638      	mov	r0, r7
 8003df0:	47c0      	blx	r8
 8003df2:	4306      	orrs	r6, r0
 8003df4:	3568      	adds	r5, #104	; 0x68
 8003df6:	e7e9      	b.n	8003dcc <_fwalk_sglue+0x10>

08003df8 <iprintf>:
 8003df8:	b40f      	push	{r0, r1, r2, r3}
 8003dfa:	b507      	push	{r0, r1, r2, lr}
 8003dfc:	4906      	ldr	r1, [pc, #24]	; (8003e18 <iprintf+0x20>)
 8003dfe:	ab04      	add	r3, sp, #16
 8003e00:	6808      	ldr	r0, [r1, #0]
 8003e02:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e06:	6881      	ldr	r1, [r0, #8]
 8003e08:	9301      	str	r3, [sp, #4]
 8003e0a:	f002 fe0f 	bl	8006a2c <_vfiprintf_r>
 8003e0e:	b003      	add	sp, #12
 8003e10:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e14:	b004      	add	sp, #16
 8003e16:	4770      	bx	lr
 8003e18:	20000064 	.word	0x20000064

08003e1c <_puts_r>:
 8003e1c:	6a03      	ldr	r3, [r0, #32]
 8003e1e:	b570      	push	{r4, r5, r6, lr}
 8003e20:	4605      	mov	r5, r0
 8003e22:	460e      	mov	r6, r1
 8003e24:	6884      	ldr	r4, [r0, #8]
 8003e26:	b90b      	cbnz	r3, 8003e2c <_puts_r+0x10>
 8003e28:	f7ff ffb0 	bl	8003d8c <__sinit>
 8003e2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e2e:	07db      	lsls	r3, r3, #31
 8003e30:	d405      	bmi.n	8003e3e <_puts_r+0x22>
 8003e32:	89a3      	ldrh	r3, [r4, #12]
 8003e34:	0598      	lsls	r0, r3, #22
 8003e36:	d402      	bmi.n	8003e3e <_puts_r+0x22>
 8003e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e3a:	f000 f9bf 	bl	80041bc <__retarget_lock_acquire_recursive>
 8003e3e:	89a3      	ldrh	r3, [r4, #12]
 8003e40:	0719      	lsls	r1, r3, #28
 8003e42:	d513      	bpl.n	8003e6c <_puts_r+0x50>
 8003e44:	6923      	ldr	r3, [r4, #16]
 8003e46:	b18b      	cbz	r3, 8003e6c <_puts_r+0x50>
 8003e48:	3e01      	subs	r6, #1
 8003e4a:	68a3      	ldr	r3, [r4, #8]
 8003e4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e50:	3b01      	subs	r3, #1
 8003e52:	60a3      	str	r3, [r4, #8]
 8003e54:	b9e9      	cbnz	r1, 8003e92 <_puts_r+0x76>
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	da2e      	bge.n	8003eb8 <_puts_r+0x9c>
 8003e5a:	4622      	mov	r2, r4
 8003e5c:	210a      	movs	r1, #10
 8003e5e:	4628      	mov	r0, r5
 8003e60:	f000 f89b 	bl	8003f9a <__swbuf_r>
 8003e64:	3001      	adds	r0, #1
 8003e66:	d007      	beq.n	8003e78 <_puts_r+0x5c>
 8003e68:	250a      	movs	r5, #10
 8003e6a:	e007      	b.n	8003e7c <_puts_r+0x60>
 8003e6c:	4621      	mov	r1, r4
 8003e6e:	4628      	mov	r0, r5
 8003e70:	f000 f8d0 	bl	8004014 <__swsetup_r>
 8003e74:	2800      	cmp	r0, #0
 8003e76:	d0e7      	beq.n	8003e48 <_puts_r+0x2c>
 8003e78:	f04f 35ff 	mov.w	r5, #4294967295
 8003e7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e7e:	07da      	lsls	r2, r3, #31
 8003e80:	d405      	bmi.n	8003e8e <_puts_r+0x72>
 8003e82:	89a3      	ldrh	r3, [r4, #12]
 8003e84:	059b      	lsls	r3, r3, #22
 8003e86:	d402      	bmi.n	8003e8e <_puts_r+0x72>
 8003e88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e8a:	f000 f998 	bl	80041be <__retarget_lock_release_recursive>
 8003e8e:	4628      	mov	r0, r5
 8003e90:	bd70      	pop	{r4, r5, r6, pc}
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	da04      	bge.n	8003ea0 <_puts_r+0x84>
 8003e96:	69a2      	ldr	r2, [r4, #24]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	dc06      	bgt.n	8003eaa <_puts_r+0x8e>
 8003e9c:	290a      	cmp	r1, #10
 8003e9e:	d004      	beq.n	8003eaa <_puts_r+0x8e>
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	6022      	str	r2, [r4, #0]
 8003ea6:	7019      	strb	r1, [r3, #0]
 8003ea8:	e7cf      	b.n	8003e4a <_puts_r+0x2e>
 8003eaa:	4622      	mov	r2, r4
 8003eac:	4628      	mov	r0, r5
 8003eae:	f000 f874 	bl	8003f9a <__swbuf_r>
 8003eb2:	3001      	adds	r0, #1
 8003eb4:	d1c9      	bne.n	8003e4a <_puts_r+0x2e>
 8003eb6:	e7df      	b.n	8003e78 <_puts_r+0x5c>
 8003eb8:	250a      	movs	r5, #10
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	6022      	str	r2, [r4, #0]
 8003ec0:	701d      	strb	r5, [r3, #0]
 8003ec2:	e7db      	b.n	8003e7c <_puts_r+0x60>

08003ec4 <puts>:
 8003ec4:	4b02      	ldr	r3, [pc, #8]	; (8003ed0 <puts+0xc>)
 8003ec6:	4601      	mov	r1, r0
 8003ec8:	6818      	ldr	r0, [r3, #0]
 8003eca:	f7ff bfa7 	b.w	8003e1c <_puts_r>
 8003ece:	bf00      	nop
 8003ed0:	20000064 	.word	0x20000064

08003ed4 <siprintf>:
 8003ed4:	b40e      	push	{r1, r2, r3}
 8003ed6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003eda:	b500      	push	{lr}
 8003edc:	b09c      	sub	sp, #112	; 0x70
 8003ede:	ab1d      	add	r3, sp, #116	; 0x74
 8003ee0:	9002      	str	r0, [sp, #8]
 8003ee2:	9006      	str	r0, [sp, #24]
 8003ee4:	9107      	str	r1, [sp, #28]
 8003ee6:	9104      	str	r1, [sp, #16]
 8003ee8:	4808      	ldr	r0, [pc, #32]	; (8003f0c <siprintf+0x38>)
 8003eea:	4909      	ldr	r1, [pc, #36]	; (8003f10 <siprintf+0x3c>)
 8003eec:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ef0:	9105      	str	r1, [sp, #20]
 8003ef2:	6800      	ldr	r0, [r0, #0]
 8003ef4:	a902      	add	r1, sp, #8
 8003ef6:	9301      	str	r3, [sp, #4]
 8003ef8:	f002 fc72 	bl	80067e0 <_svfiprintf_r>
 8003efc:	2200      	movs	r2, #0
 8003efe:	9b02      	ldr	r3, [sp, #8]
 8003f00:	701a      	strb	r2, [r3, #0]
 8003f02:	b01c      	add	sp, #112	; 0x70
 8003f04:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f08:	b003      	add	sp, #12
 8003f0a:	4770      	bx	lr
 8003f0c:	20000064 	.word	0x20000064
 8003f10:	ffff0208 	.word	0xffff0208

08003f14 <__sread>:
 8003f14:	b510      	push	{r4, lr}
 8003f16:	460c      	mov	r4, r1
 8003f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f1c:	f000 f900 	bl	8004120 <_read_r>
 8003f20:	2800      	cmp	r0, #0
 8003f22:	bfab      	itete	ge
 8003f24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f26:	89a3      	ldrhlt	r3, [r4, #12]
 8003f28:	181b      	addge	r3, r3, r0
 8003f2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f2e:	bfac      	ite	ge
 8003f30:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f32:	81a3      	strhlt	r3, [r4, #12]
 8003f34:	bd10      	pop	{r4, pc}

08003f36 <__swrite>:
 8003f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f3a:	461f      	mov	r7, r3
 8003f3c:	898b      	ldrh	r3, [r1, #12]
 8003f3e:	4605      	mov	r5, r0
 8003f40:	05db      	lsls	r3, r3, #23
 8003f42:	460c      	mov	r4, r1
 8003f44:	4616      	mov	r6, r2
 8003f46:	d505      	bpl.n	8003f54 <__swrite+0x1e>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f50:	f000 f8d4 	bl	80040fc <_lseek_r>
 8003f54:	89a3      	ldrh	r3, [r4, #12]
 8003f56:	4632      	mov	r2, r6
 8003f58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f5c:	81a3      	strh	r3, [r4, #12]
 8003f5e:	4628      	mov	r0, r5
 8003f60:	463b      	mov	r3, r7
 8003f62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f6a:	f000 b8eb 	b.w	8004144 <_write_r>

08003f6e <__sseek>:
 8003f6e:	b510      	push	{r4, lr}
 8003f70:	460c      	mov	r4, r1
 8003f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f76:	f000 f8c1 	bl	80040fc <_lseek_r>
 8003f7a:	1c43      	adds	r3, r0, #1
 8003f7c:	89a3      	ldrh	r3, [r4, #12]
 8003f7e:	bf15      	itete	ne
 8003f80:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f8a:	81a3      	strheq	r3, [r4, #12]
 8003f8c:	bf18      	it	ne
 8003f8e:	81a3      	strhne	r3, [r4, #12]
 8003f90:	bd10      	pop	{r4, pc}

08003f92 <__sclose>:
 8003f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f96:	f000 b8a1 	b.w	80040dc <_close_r>

08003f9a <__swbuf_r>:
 8003f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9c:	460e      	mov	r6, r1
 8003f9e:	4614      	mov	r4, r2
 8003fa0:	4605      	mov	r5, r0
 8003fa2:	b118      	cbz	r0, 8003fac <__swbuf_r+0x12>
 8003fa4:	6a03      	ldr	r3, [r0, #32]
 8003fa6:	b90b      	cbnz	r3, 8003fac <__swbuf_r+0x12>
 8003fa8:	f7ff fef0 	bl	8003d8c <__sinit>
 8003fac:	69a3      	ldr	r3, [r4, #24]
 8003fae:	60a3      	str	r3, [r4, #8]
 8003fb0:	89a3      	ldrh	r3, [r4, #12]
 8003fb2:	071a      	lsls	r2, r3, #28
 8003fb4:	d525      	bpl.n	8004002 <__swbuf_r+0x68>
 8003fb6:	6923      	ldr	r3, [r4, #16]
 8003fb8:	b31b      	cbz	r3, 8004002 <__swbuf_r+0x68>
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	6922      	ldr	r2, [r4, #16]
 8003fbe:	b2f6      	uxtb	r6, r6
 8003fc0:	1a98      	subs	r0, r3, r2
 8003fc2:	6963      	ldr	r3, [r4, #20]
 8003fc4:	4637      	mov	r7, r6
 8003fc6:	4283      	cmp	r3, r0
 8003fc8:	dc04      	bgt.n	8003fd4 <__swbuf_r+0x3a>
 8003fca:	4621      	mov	r1, r4
 8003fcc:	4628      	mov	r0, r5
 8003fce:	f002 fec9 	bl	8006d64 <_fflush_r>
 8003fd2:	b9e0      	cbnz	r0, 800400e <__swbuf_r+0x74>
 8003fd4:	68a3      	ldr	r3, [r4, #8]
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	60a3      	str	r3, [r4, #8]
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	6022      	str	r2, [r4, #0]
 8003fe0:	701e      	strb	r6, [r3, #0]
 8003fe2:	6962      	ldr	r2, [r4, #20]
 8003fe4:	1c43      	adds	r3, r0, #1
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d004      	beq.n	8003ff4 <__swbuf_r+0x5a>
 8003fea:	89a3      	ldrh	r3, [r4, #12]
 8003fec:	07db      	lsls	r3, r3, #31
 8003fee:	d506      	bpl.n	8003ffe <__swbuf_r+0x64>
 8003ff0:	2e0a      	cmp	r6, #10
 8003ff2:	d104      	bne.n	8003ffe <__swbuf_r+0x64>
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	4628      	mov	r0, r5
 8003ff8:	f002 feb4 	bl	8006d64 <_fflush_r>
 8003ffc:	b938      	cbnz	r0, 800400e <__swbuf_r+0x74>
 8003ffe:	4638      	mov	r0, r7
 8004000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004002:	4621      	mov	r1, r4
 8004004:	4628      	mov	r0, r5
 8004006:	f000 f805 	bl	8004014 <__swsetup_r>
 800400a:	2800      	cmp	r0, #0
 800400c:	d0d5      	beq.n	8003fba <__swbuf_r+0x20>
 800400e:	f04f 37ff 	mov.w	r7, #4294967295
 8004012:	e7f4      	b.n	8003ffe <__swbuf_r+0x64>

08004014 <__swsetup_r>:
 8004014:	b538      	push	{r3, r4, r5, lr}
 8004016:	4b2a      	ldr	r3, [pc, #168]	; (80040c0 <__swsetup_r+0xac>)
 8004018:	4605      	mov	r5, r0
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	460c      	mov	r4, r1
 800401e:	b118      	cbz	r0, 8004028 <__swsetup_r+0x14>
 8004020:	6a03      	ldr	r3, [r0, #32]
 8004022:	b90b      	cbnz	r3, 8004028 <__swsetup_r+0x14>
 8004024:	f7ff feb2 	bl	8003d8c <__sinit>
 8004028:	89a3      	ldrh	r3, [r4, #12]
 800402a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800402e:	0718      	lsls	r0, r3, #28
 8004030:	d422      	bmi.n	8004078 <__swsetup_r+0x64>
 8004032:	06d9      	lsls	r1, r3, #27
 8004034:	d407      	bmi.n	8004046 <__swsetup_r+0x32>
 8004036:	2309      	movs	r3, #9
 8004038:	602b      	str	r3, [r5, #0]
 800403a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800403e:	f04f 30ff 	mov.w	r0, #4294967295
 8004042:	81a3      	strh	r3, [r4, #12]
 8004044:	e034      	b.n	80040b0 <__swsetup_r+0x9c>
 8004046:	0758      	lsls	r0, r3, #29
 8004048:	d512      	bpl.n	8004070 <__swsetup_r+0x5c>
 800404a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800404c:	b141      	cbz	r1, 8004060 <__swsetup_r+0x4c>
 800404e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004052:	4299      	cmp	r1, r3
 8004054:	d002      	beq.n	800405c <__swsetup_r+0x48>
 8004056:	4628      	mov	r0, r5
 8004058:	f000 ff32 	bl	8004ec0 <_free_r>
 800405c:	2300      	movs	r3, #0
 800405e:	6363      	str	r3, [r4, #52]	; 0x34
 8004060:	89a3      	ldrh	r3, [r4, #12]
 8004062:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004066:	81a3      	strh	r3, [r4, #12]
 8004068:	2300      	movs	r3, #0
 800406a:	6063      	str	r3, [r4, #4]
 800406c:	6923      	ldr	r3, [r4, #16]
 800406e:	6023      	str	r3, [r4, #0]
 8004070:	89a3      	ldrh	r3, [r4, #12]
 8004072:	f043 0308 	orr.w	r3, r3, #8
 8004076:	81a3      	strh	r3, [r4, #12]
 8004078:	6923      	ldr	r3, [r4, #16]
 800407a:	b94b      	cbnz	r3, 8004090 <__swsetup_r+0x7c>
 800407c:	89a3      	ldrh	r3, [r4, #12]
 800407e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004086:	d003      	beq.n	8004090 <__swsetup_r+0x7c>
 8004088:	4621      	mov	r1, r4
 800408a:	4628      	mov	r0, r5
 800408c:	f002 feb7 	bl	8006dfe <__smakebuf_r>
 8004090:	89a0      	ldrh	r0, [r4, #12]
 8004092:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004096:	f010 0301 	ands.w	r3, r0, #1
 800409a:	d00a      	beq.n	80040b2 <__swsetup_r+0x9e>
 800409c:	2300      	movs	r3, #0
 800409e:	60a3      	str	r3, [r4, #8]
 80040a0:	6963      	ldr	r3, [r4, #20]
 80040a2:	425b      	negs	r3, r3
 80040a4:	61a3      	str	r3, [r4, #24]
 80040a6:	6923      	ldr	r3, [r4, #16]
 80040a8:	b943      	cbnz	r3, 80040bc <__swsetup_r+0xa8>
 80040aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80040ae:	d1c4      	bne.n	800403a <__swsetup_r+0x26>
 80040b0:	bd38      	pop	{r3, r4, r5, pc}
 80040b2:	0781      	lsls	r1, r0, #30
 80040b4:	bf58      	it	pl
 80040b6:	6963      	ldrpl	r3, [r4, #20]
 80040b8:	60a3      	str	r3, [r4, #8]
 80040ba:	e7f4      	b.n	80040a6 <__swsetup_r+0x92>
 80040bc:	2000      	movs	r0, #0
 80040be:	e7f7      	b.n	80040b0 <__swsetup_r+0x9c>
 80040c0:	20000064 	.word	0x20000064

080040c4 <memset>:
 80040c4:	4603      	mov	r3, r0
 80040c6:	4402      	add	r2, r0
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d100      	bne.n	80040ce <memset+0xa>
 80040cc:	4770      	bx	lr
 80040ce:	f803 1b01 	strb.w	r1, [r3], #1
 80040d2:	e7f9      	b.n	80040c8 <memset+0x4>

080040d4 <_localeconv_r>:
 80040d4:	4800      	ldr	r0, [pc, #0]	; (80040d8 <_localeconv_r+0x4>)
 80040d6:	4770      	bx	lr
 80040d8:	20000158 	.word	0x20000158

080040dc <_close_r>:
 80040dc:	b538      	push	{r3, r4, r5, lr}
 80040de:	2300      	movs	r3, #0
 80040e0:	4d05      	ldr	r5, [pc, #20]	; (80040f8 <_close_r+0x1c>)
 80040e2:	4604      	mov	r4, r0
 80040e4:	4608      	mov	r0, r1
 80040e6:	602b      	str	r3, [r5, #0]
 80040e8:	f7fc ffa0 	bl	800102c <_close>
 80040ec:	1c43      	adds	r3, r0, #1
 80040ee:	d102      	bne.n	80040f6 <_close_r+0x1a>
 80040f0:	682b      	ldr	r3, [r5, #0]
 80040f2:	b103      	cbz	r3, 80040f6 <_close_r+0x1a>
 80040f4:	6023      	str	r3, [r4, #0]
 80040f6:	bd38      	pop	{r3, r4, r5, pc}
 80040f8:	200003b0 	.word	0x200003b0

080040fc <_lseek_r>:
 80040fc:	b538      	push	{r3, r4, r5, lr}
 80040fe:	4604      	mov	r4, r0
 8004100:	4608      	mov	r0, r1
 8004102:	4611      	mov	r1, r2
 8004104:	2200      	movs	r2, #0
 8004106:	4d05      	ldr	r5, [pc, #20]	; (800411c <_lseek_r+0x20>)
 8004108:	602a      	str	r2, [r5, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	f7fc ffb2 	bl	8001074 <_lseek>
 8004110:	1c43      	adds	r3, r0, #1
 8004112:	d102      	bne.n	800411a <_lseek_r+0x1e>
 8004114:	682b      	ldr	r3, [r5, #0]
 8004116:	b103      	cbz	r3, 800411a <_lseek_r+0x1e>
 8004118:	6023      	str	r3, [r4, #0]
 800411a:	bd38      	pop	{r3, r4, r5, pc}
 800411c:	200003b0 	.word	0x200003b0

08004120 <_read_r>:
 8004120:	b538      	push	{r3, r4, r5, lr}
 8004122:	4604      	mov	r4, r0
 8004124:	4608      	mov	r0, r1
 8004126:	4611      	mov	r1, r2
 8004128:	2200      	movs	r2, #0
 800412a:	4d05      	ldr	r5, [pc, #20]	; (8004140 <_read_r+0x20>)
 800412c:	602a      	str	r2, [r5, #0]
 800412e:	461a      	mov	r2, r3
 8004130:	f7fc ff5f 	bl	8000ff2 <_read>
 8004134:	1c43      	adds	r3, r0, #1
 8004136:	d102      	bne.n	800413e <_read_r+0x1e>
 8004138:	682b      	ldr	r3, [r5, #0]
 800413a:	b103      	cbz	r3, 800413e <_read_r+0x1e>
 800413c:	6023      	str	r3, [r4, #0]
 800413e:	bd38      	pop	{r3, r4, r5, pc}
 8004140:	200003b0 	.word	0x200003b0

08004144 <_write_r>:
 8004144:	b538      	push	{r3, r4, r5, lr}
 8004146:	4604      	mov	r4, r0
 8004148:	4608      	mov	r0, r1
 800414a:	4611      	mov	r1, r2
 800414c:	2200      	movs	r2, #0
 800414e:	4d05      	ldr	r5, [pc, #20]	; (8004164 <_write_r+0x20>)
 8004150:	602a      	str	r2, [r5, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	f7fc ffd6 	bl	8001104 <_write>
 8004158:	1c43      	adds	r3, r0, #1
 800415a:	d102      	bne.n	8004162 <_write_r+0x1e>
 800415c:	682b      	ldr	r3, [r5, #0]
 800415e:	b103      	cbz	r3, 8004162 <_write_r+0x1e>
 8004160:	6023      	str	r3, [r4, #0]
 8004162:	bd38      	pop	{r3, r4, r5, pc}
 8004164:	200003b0 	.word	0x200003b0

08004168 <__errno>:
 8004168:	4b01      	ldr	r3, [pc, #4]	; (8004170 <__errno+0x8>)
 800416a:	6818      	ldr	r0, [r3, #0]
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	20000064 	.word	0x20000064

08004174 <__libc_init_array>:
 8004174:	b570      	push	{r4, r5, r6, lr}
 8004176:	2600      	movs	r6, #0
 8004178:	4d0c      	ldr	r5, [pc, #48]	; (80041ac <__libc_init_array+0x38>)
 800417a:	4c0d      	ldr	r4, [pc, #52]	; (80041b0 <__libc_init_array+0x3c>)
 800417c:	1b64      	subs	r4, r4, r5
 800417e:	10a4      	asrs	r4, r4, #2
 8004180:	42a6      	cmp	r6, r4
 8004182:	d109      	bne.n	8004198 <__libc_init_array+0x24>
 8004184:	f003 fb2a 	bl	80077dc <_init>
 8004188:	2600      	movs	r6, #0
 800418a:	4d0a      	ldr	r5, [pc, #40]	; (80041b4 <__libc_init_array+0x40>)
 800418c:	4c0a      	ldr	r4, [pc, #40]	; (80041b8 <__libc_init_array+0x44>)
 800418e:	1b64      	subs	r4, r4, r5
 8004190:	10a4      	asrs	r4, r4, #2
 8004192:	42a6      	cmp	r6, r4
 8004194:	d105      	bne.n	80041a2 <__libc_init_array+0x2e>
 8004196:	bd70      	pop	{r4, r5, r6, pc}
 8004198:	f855 3b04 	ldr.w	r3, [r5], #4
 800419c:	4798      	blx	r3
 800419e:	3601      	adds	r6, #1
 80041a0:	e7ee      	b.n	8004180 <__libc_init_array+0xc>
 80041a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80041a6:	4798      	blx	r3
 80041a8:	3601      	adds	r6, #1
 80041aa:	e7f2      	b.n	8004192 <__libc_init_array+0x1e>
 80041ac:	08007c90 	.word	0x08007c90
 80041b0:	08007c90 	.word	0x08007c90
 80041b4:	08007c90 	.word	0x08007c90
 80041b8:	08007c94 	.word	0x08007c94

080041bc <__retarget_lock_acquire_recursive>:
 80041bc:	4770      	bx	lr

080041be <__retarget_lock_release_recursive>:
 80041be:	4770      	bx	lr

080041c0 <memchr>:
 80041c0:	4603      	mov	r3, r0
 80041c2:	b510      	push	{r4, lr}
 80041c4:	b2c9      	uxtb	r1, r1
 80041c6:	4402      	add	r2, r0
 80041c8:	4293      	cmp	r3, r2
 80041ca:	4618      	mov	r0, r3
 80041cc:	d101      	bne.n	80041d2 <memchr+0x12>
 80041ce:	2000      	movs	r0, #0
 80041d0:	e003      	b.n	80041da <memchr+0x1a>
 80041d2:	7804      	ldrb	r4, [r0, #0]
 80041d4:	3301      	adds	r3, #1
 80041d6:	428c      	cmp	r4, r1
 80041d8:	d1f6      	bne.n	80041c8 <memchr+0x8>
 80041da:	bd10      	pop	{r4, pc}

080041dc <nanf>:
 80041dc:	4800      	ldr	r0, [pc, #0]	; (80041e0 <nanf+0x4>)
 80041de:	4770      	bx	lr
 80041e0:	7fc00000 	.word	0x7fc00000

080041e4 <quorem>:
 80041e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041e8:	6903      	ldr	r3, [r0, #16]
 80041ea:	690c      	ldr	r4, [r1, #16]
 80041ec:	4607      	mov	r7, r0
 80041ee:	42a3      	cmp	r3, r4
 80041f0:	db7f      	blt.n	80042f2 <quorem+0x10e>
 80041f2:	3c01      	subs	r4, #1
 80041f4:	f100 0514 	add.w	r5, r0, #20
 80041f8:	f101 0814 	add.w	r8, r1, #20
 80041fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004200:	9301      	str	r3, [sp, #4]
 8004202:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004206:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800420a:	3301      	adds	r3, #1
 800420c:	429a      	cmp	r2, r3
 800420e:	fbb2 f6f3 	udiv	r6, r2, r3
 8004212:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004216:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800421a:	d331      	bcc.n	8004280 <quorem+0x9c>
 800421c:	f04f 0e00 	mov.w	lr, #0
 8004220:	4640      	mov	r0, r8
 8004222:	46ac      	mov	ip, r5
 8004224:	46f2      	mov	sl, lr
 8004226:	f850 2b04 	ldr.w	r2, [r0], #4
 800422a:	b293      	uxth	r3, r2
 800422c:	fb06 e303 	mla	r3, r6, r3, lr
 8004230:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004234:	0c1a      	lsrs	r2, r3, #16
 8004236:	b29b      	uxth	r3, r3
 8004238:	fb06 220e 	mla	r2, r6, lr, r2
 800423c:	ebaa 0303 	sub.w	r3, sl, r3
 8004240:	f8dc a000 	ldr.w	sl, [ip]
 8004244:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004248:	fa1f fa8a 	uxth.w	sl, sl
 800424c:	4453      	add	r3, sl
 800424e:	f8dc a000 	ldr.w	sl, [ip]
 8004252:	b292      	uxth	r2, r2
 8004254:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004258:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800425c:	b29b      	uxth	r3, r3
 800425e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004262:	4581      	cmp	r9, r0
 8004264:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004268:	f84c 3b04 	str.w	r3, [ip], #4
 800426c:	d2db      	bcs.n	8004226 <quorem+0x42>
 800426e:	f855 300b 	ldr.w	r3, [r5, fp]
 8004272:	b92b      	cbnz	r3, 8004280 <quorem+0x9c>
 8004274:	9b01      	ldr	r3, [sp, #4]
 8004276:	3b04      	subs	r3, #4
 8004278:	429d      	cmp	r5, r3
 800427a:	461a      	mov	r2, r3
 800427c:	d32d      	bcc.n	80042da <quorem+0xf6>
 800427e:	613c      	str	r4, [r7, #16]
 8004280:	4638      	mov	r0, r7
 8004282:	f001 f9dd 	bl	8005640 <__mcmp>
 8004286:	2800      	cmp	r0, #0
 8004288:	db23      	blt.n	80042d2 <quorem+0xee>
 800428a:	4629      	mov	r1, r5
 800428c:	2000      	movs	r0, #0
 800428e:	3601      	adds	r6, #1
 8004290:	f858 2b04 	ldr.w	r2, [r8], #4
 8004294:	f8d1 c000 	ldr.w	ip, [r1]
 8004298:	b293      	uxth	r3, r2
 800429a:	1ac3      	subs	r3, r0, r3
 800429c:	0c12      	lsrs	r2, r2, #16
 800429e:	fa1f f08c 	uxth.w	r0, ip
 80042a2:	4403      	add	r3, r0
 80042a4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80042a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042b2:	45c1      	cmp	r9, r8
 80042b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80042b8:	f841 3b04 	str.w	r3, [r1], #4
 80042bc:	d2e8      	bcs.n	8004290 <quorem+0xac>
 80042be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80042c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80042c6:	b922      	cbnz	r2, 80042d2 <quorem+0xee>
 80042c8:	3b04      	subs	r3, #4
 80042ca:	429d      	cmp	r5, r3
 80042cc:	461a      	mov	r2, r3
 80042ce:	d30a      	bcc.n	80042e6 <quorem+0x102>
 80042d0:	613c      	str	r4, [r7, #16]
 80042d2:	4630      	mov	r0, r6
 80042d4:	b003      	add	sp, #12
 80042d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	3b04      	subs	r3, #4
 80042de:	2a00      	cmp	r2, #0
 80042e0:	d1cd      	bne.n	800427e <quorem+0x9a>
 80042e2:	3c01      	subs	r4, #1
 80042e4:	e7c8      	b.n	8004278 <quorem+0x94>
 80042e6:	6812      	ldr	r2, [r2, #0]
 80042e8:	3b04      	subs	r3, #4
 80042ea:	2a00      	cmp	r2, #0
 80042ec:	d1f0      	bne.n	80042d0 <quorem+0xec>
 80042ee:	3c01      	subs	r4, #1
 80042f0:	e7eb      	b.n	80042ca <quorem+0xe6>
 80042f2:	2000      	movs	r0, #0
 80042f4:	e7ee      	b.n	80042d4 <quorem+0xf0>
	...

080042f8 <_dtoa_r>:
 80042f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042fc:	4616      	mov	r6, r2
 80042fe:	461f      	mov	r7, r3
 8004300:	69c4      	ldr	r4, [r0, #28]
 8004302:	b099      	sub	sp, #100	; 0x64
 8004304:	4605      	mov	r5, r0
 8004306:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800430a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800430e:	b974      	cbnz	r4, 800432e <_dtoa_r+0x36>
 8004310:	2010      	movs	r0, #16
 8004312:	f000 fe1d 	bl	8004f50 <malloc>
 8004316:	4602      	mov	r2, r0
 8004318:	61e8      	str	r0, [r5, #28]
 800431a:	b920      	cbnz	r0, 8004326 <_dtoa_r+0x2e>
 800431c:	21ef      	movs	r1, #239	; 0xef
 800431e:	4bac      	ldr	r3, [pc, #688]	; (80045d0 <_dtoa_r+0x2d8>)
 8004320:	48ac      	ldr	r0, [pc, #688]	; (80045d4 <_dtoa_r+0x2dc>)
 8004322:	f002 fe1b 	bl	8006f5c <__assert_func>
 8004326:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800432a:	6004      	str	r4, [r0, #0]
 800432c:	60c4      	str	r4, [r0, #12]
 800432e:	69eb      	ldr	r3, [r5, #28]
 8004330:	6819      	ldr	r1, [r3, #0]
 8004332:	b151      	cbz	r1, 800434a <_dtoa_r+0x52>
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	2301      	movs	r3, #1
 8004338:	4093      	lsls	r3, r2
 800433a:	604a      	str	r2, [r1, #4]
 800433c:	608b      	str	r3, [r1, #8]
 800433e:	4628      	mov	r0, r5
 8004340:	f000 fefa 	bl	8005138 <_Bfree>
 8004344:	2200      	movs	r2, #0
 8004346:	69eb      	ldr	r3, [r5, #28]
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	1e3b      	subs	r3, r7, #0
 800434c:	bfaf      	iteee	ge
 800434e:	2300      	movge	r3, #0
 8004350:	2201      	movlt	r2, #1
 8004352:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004356:	9305      	strlt	r3, [sp, #20]
 8004358:	bfa8      	it	ge
 800435a:	f8c8 3000 	strge.w	r3, [r8]
 800435e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004362:	4b9d      	ldr	r3, [pc, #628]	; (80045d8 <_dtoa_r+0x2e0>)
 8004364:	bfb8      	it	lt
 8004366:	f8c8 2000 	strlt.w	r2, [r8]
 800436a:	ea33 0309 	bics.w	r3, r3, r9
 800436e:	d119      	bne.n	80043a4 <_dtoa_r+0xac>
 8004370:	f242 730f 	movw	r3, #9999	; 0x270f
 8004374:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004376:	6013      	str	r3, [r2, #0]
 8004378:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800437c:	4333      	orrs	r3, r6
 800437e:	f000 8589 	beq.w	8004e94 <_dtoa_r+0xb9c>
 8004382:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004384:	b953      	cbnz	r3, 800439c <_dtoa_r+0xa4>
 8004386:	4b95      	ldr	r3, [pc, #596]	; (80045dc <_dtoa_r+0x2e4>)
 8004388:	e023      	b.n	80043d2 <_dtoa_r+0xda>
 800438a:	4b95      	ldr	r3, [pc, #596]	; (80045e0 <_dtoa_r+0x2e8>)
 800438c:	9303      	str	r3, [sp, #12]
 800438e:	3308      	adds	r3, #8
 8004390:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004392:	6013      	str	r3, [r2, #0]
 8004394:	9803      	ldr	r0, [sp, #12]
 8004396:	b019      	add	sp, #100	; 0x64
 8004398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800439c:	4b8f      	ldr	r3, [pc, #572]	; (80045dc <_dtoa_r+0x2e4>)
 800439e:	9303      	str	r3, [sp, #12]
 80043a0:	3303      	adds	r3, #3
 80043a2:	e7f5      	b.n	8004390 <_dtoa_r+0x98>
 80043a4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80043a8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80043ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80043b0:	2200      	movs	r2, #0
 80043b2:	2300      	movs	r3, #0
 80043b4:	f7fc faf8 	bl	80009a8 <__aeabi_dcmpeq>
 80043b8:	4680      	mov	r8, r0
 80043ba:	b160      	cbz	r0, 80043d6 <_dtoa_r+0xde>
 80043bc:	2301      	movs	r3, #1
 80043be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 8562 	beq.w	8004e8e <_dtoa_r+0xb96>
 80043ca:	4b86      	ldr	r3, [pc, #536]	; (80045e4 <_dtoa_r+0x2ec>)
 80043cc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80043ce:	6013      	str	r3, [r2, #0]
 80043d0:	3b01      	subs	r3, #1
 80043d2:	9303      	str	r3, [sp, #12]
 80043d4:	e7de      	b.n	8004394 <_dtoa_r+0x9c>
 80043d6:	ab16      	add	r3, sp, #88	; 0x58
 80043d8:	9301      	str	r3, [sp, #4]
 80043da:	ab17      	add	r3, sp, #92	; 0x5c
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	4628      	mov	r0, r5
 80043e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80043e4:	f001 fa3c 	bl	8005860 <__d2b>
 80043e8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80043ec:	4682      	mov	sl, r0
 80043ee:	2c00      	cmp	r4, #0
 80043f0:	d07e      	beq.n	80044f0 <_dtoa_r+0x1f8>
 80043f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80043f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043f8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80043fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004400:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004404:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004408:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800440c:	4619      	mov	r1, r3
 800440e:	2200      	movs	r2, #0
 8004410:	4b75      	ldr	r3, [pc, #468]	; (80045e8 <_dtoa_r+0x2f0>)
 8004412:	f7fb fea9 	bl	8000168 <__aeabi_dsub>
 8004416:	a368      	add	r3, pc, #416	; (adr r3, 80045b8 <_dtoa_r+0x2c0>)
 8004418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441c:	f7fc f85c 	bl	80004d8 <__aeabi_dmul>
 8004420:	a367      	add	r3, pc, #412	; (adr r3, 80045c0 <_dtoa_r+0x2c8>)
 8004422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004426:	f7fb fea1 	bl	800016c <__adddf3>
 800442a:	4606      	mov	r6, r0
 800442c:	4620      	mov	r0, r4
 800442e:	460f      	mov	r7, r1
 8004430:	f7fb ffe8 	bl	8000404 <__aeabi_i2d>
 8004434:	a364      	add	r3, pc, #400	; (adr r3, 80045c8 <_dtoa_r+0x2d0>)
 8004436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443a:	f7fc f84d 	bl	80004d8 <__aeabi_dmul>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4630      	mov	r0, r6
 8004444:	4639      	mov	r1, r7
 8004446:	f7fb fe91 	bl	800016c <__adddf3>
 800444a:	4606      	mov	r6, r0
 800444c:	460f      	mov	r7, r1
 800444e:	f7fc faf3 	bl	8000a38 <__aeabi_d2iz>
 8004452:	2200      	movs	r2, #0
 8004454:	4683      	mov	fp, r0
 8004456:	2300      	movs	r3, #0
 8004458:	4630      	mov	r0, r6
 800445a:	4639      	mov	r1, r7
 800445c:	f7fc faae 	bl	80009bc <__aeabi_dcmplt>
 8004460:	b148      	cbz	r0, 8004476 <_dtoa_r+0x17e>
 8004462:	4658      	mov	r0, fp
 8004464:	f7fb ffce 	bl	8000404 <__aeabi_i2d>
 8004468:	4632      	mov	r2, r6
 800446a:	463b      	mov	r3, r7
 800446c:	f7fc fa9c 	bl	80009a8 <__aeabi_dcmpeq>
 8004470:	b908      	cbnz	r0, 8004476 <_dtoa_r+0x17e>
 8004472:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004476:	f1bb 0f16 	cmp.w	fp, #22
 800447a:	d857      	bhi.n	800452c <_dtoa_r+0x234>
 800447c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004480:	4b5a      	ldr	r3, [pc, #360]	; (80045ec <_dtoa_r+0x2f4>)
 8004482:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448a:	f7fc fa97 	bl	80009bc <__aeabi_dcmplt>
 800448e:	2800      	cmp	r0, #0
 8004490:	d04e      	beq.n	8004530 <_dtoa_r+0x238>
 8004492:	2300      	movs	r3, #0
 8004494:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004498:	930f      	str	r3, [sp, #60]	; 0x3c
 800449a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800449c:	1b1b      	subs	r3, r3, r4
 800449e:	1e5a      	subs	r2, r3, #1
 80044a0:	bf46      	itte	mi
 80044a2:	f1c3 0901 	rsbmi	r9, r3, #1
 80044a6:	2300      	movmi	r3, #0
 80044a8:	f04f 0900 	movpl.w	r9, #0
 80044ac:	9209      	str	r2, [sp, #36]	; 0x24
 80044ae:	bf48      	it	mi
 80044b0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80044b2:	f1bb 0f00 	cmp.w	fp, #0
 80044b6:	db3d      	blt.n	8004534 <_dtoa_r+0x23c>
 80044b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ba:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80044be:	445b      	add	r3, fp
 80044c0:	9309      	str	r3, [sp, #36]	; 0x24
 80044c2:	2300      	movs	r3, #0
 80044c4:	930a      	str	r3, [sp, #40]	; 0x28
 80044c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80044c8:	2b09      	cmp	r3, #9
 80044ca:	d867      	bhi.n	800459c <_dtoa_r+0x2a4>
 80044cc:	2b05      	cmp	r3, #5
 80044ce:	bfc4      	itt	gt
 80044d0:	3b04      	subgt	r3, #4
 80044d2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80044d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80044d6:	bfc8      	it	gt
 80044d8:	2400      	movgt	r4, #0
 80044da:	f1a3 0302 	sub.w	r3, r3, #2
 80044de:	bfd8      	it	le
 80044e0:	2401      	movle	r4, #1
 80044e2:	2b03      	cmp	r3, #3
 80044e4:	f200 8086 	bhi.w	80045f4 <_dtoa_r+0x2fc>
 80044e8:	e8df f003 	tbb	[pc, r3]
 80044ec:	5637392c 	.word	0x5637392c
 80044f0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80044f4:	441c      	add	r4, r3
 80044f6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80044fa:	2b20      	cmp	r3, #32
 80044fc:	bfc1      	itttt	gt
 80044fe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004502:	fa09 f903 	lslgt.w	r9, r9, r3
 8004506:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800450a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800450e:	bfd6      	itet	le
 8004510:	f1c3 0320 	rsble	r3, r3, #32
 8004514:	ea49 0003 	orrgt.w	r0, r9, r3
 8004518:	fa06 f003 	lslle.w	r0, r6, r3
 800451c:	f7fb ff62 	bl	80003e4 <__aeabi_ui2d>
 8004520:	2201      	movs	r2, #1
 8004522:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004526:	3c01      	subs	r4, #1
 8004528:	9213      	str	r2, [sp, #76]	; 0x4c
 800452a:	e76f      	b.n	800440c <_dtoa_r+0x114>
 800452c:	2301      	movs	r3, #1
 800452e:	e7b3      	b.n	8004498 <_dtoa_r+0x1a0>
 8004530:	900f      	str	r0, [sp, #60]	; 0x3c
 8004532:	e7b2      	b.n	800449a <_dtoa_r+0x1a2>
 8004534:	f1cb 0300 	rsb	r3, fp, #0
 8004538:	930a      	str	r3, [sp, #40]	; 0x28
 800453a:	2300      	movs	r3, #0
 800453c:	eba9 090b 	sub.w	r9, r9, fp
 8004540:	930e      	str	r3, [sp, #56]	; 0x38
 8004542:	e7c0      	b.n	80044c6 <_dtoa_r+0x1ce>
 8004544:	2300      	movs	r3, #0
 8004546:	930b      	str	r3, [sp, #44]	; 0x2c
 8004548:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800454a:	2b00      	cmp	r3, #0
 800454c:	dc55      	bgt.n	80045fa <_dtoa_r+0x302>
 800454e:	2301      	movs	r3, #1
 8004550:	461a      	mov	r2, r3
 8004552:	9306      	str	r3, [sp, #24]
 8004554:	9308      	str	r3, [sp, #32]
 8004556:	9223      	str	r2, [sp, #140]	; 0x8c
 8004558:	e00b      	b.n	8004572 <_dtoa_r+0x27a>
 800455a:	2301      	movs	r3, #1
 800455c:	e7f3      	b.n	8004546 <_dtoa_r+0x24e>
 800455e:	2300      	movs	r3, #0
 8004560:	930b      	str	r3, [sp, #44]	; 0x2c
 8004562:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004564:	445b      	add	r3, fp
 8004566:	9306      	str	r3, [sp, #24]
 8004568:	3301      	adds	r3, #1
 800456a:	2b01      	cmp	r3, #1
 800456c:	9308      	str	r3, [sp, #32]
 800456e:	bfb8      	it	lt
 8004570:	2301      	movlt	r3, #1
 8004572:	2100      	movs	r1, #0
 8004574:	2204      	movs	r2, #4
 8004576:	69e8      	ldr	r0, [r5, #28]
 8004578:	f102 0614 	add.w	r6, r2, #20
 800457c:	429e      	cmp	r6, r3
 800457e:	d940      	bls.n	8004602 <_dtoa_r+0x30a>
 8004580:	6041      	str	r1, [r0, #4]
 8004582:	4628      	mov	r0, r5
 8004584:	f000 fd98 	bl	80050b8 <_Balloc>
 8004588:	9003      	str	r0, [sp, #12]
 800458a:	2800      	cmp	r0, #0
 800458c:	d13c      	bne.n	8004608 <_dtoa_r+0x310>
 800458e:	4602      	mov	r2, r0
 8004590:	f240 11af 	movw	r1, #431	; 0x1af
 8004594:	4b16      	ldr	r3, [pc, #88]	; (80045f0 <_dtoa_r+0x2f8>)
 8004596:	e6c3      	b.n	8004320 <_dtoa_r+0x28>
 8004598:	2301      	movs	r3, #1
 800459a:	e7e1      	b.n	8004560 <_dtoa_r+0x268>
 800459c:	2401      	movs	r4, #1
 800459e:	2300      	movs	r3, #0
 80045a0:	940b      	str	r4, [sp, #44]	; 0x2c
 80045a2:	9322      	str	r3, [sp, #136]	; 0x88
 80045a4:	f04f 33ff 	mov.w	r3, #4294967295
 80045a8:	2200      	movs	r2, #0
 80045aa:	9306      	str	r3, [sp, #24]
 80045ac:	9308      	str	r3, [sp, #32]
 80045ae:	2312      	movs	r3, #18
 80045b0:	e7d1      	b.n	8004556 <_dtoa_r+0x25e>
 80045b2:	bf00      	nop
 80045b4:	f3af 8000 	nop.w
 80045b8:	636f4361 	.word	0x636f4361
 80045bc:	3fd287a7 	.word	0x3fd287a7
 80045c0:	8b60c8b3 	.word	0x8b60c8b3
 80045c4:	3fc68a28 	.word	0x3fc68a28
 80045c8:	509f79fb 	.word	0x509f79fb
 80045cc:	3fd34413 	.word	0x3fd34413
 80045d0:	080078a8 	.word	0x080078a8
 80045d4:	080078bf 	.word	0x080078bf
 80045d8:	7ff00000 	.word	0x7ff00000
 80045dc:	080078a4 	.word	0x080078a4
 80045e0:	0800789b 	.word	0x0800789b
 80045e4:	08007873 	.word	0x08007873
 80045e8:	3ff80000 	.word	0x3ff80000
 80045ec:	080079b0 	.word	0x080079b0
 80045f0:	08007917 	.word	0x08007917
 80045f4:	2301      	movs	r3, #1
 80045f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80045f8:	e7d4      	b.n	80045a4 <_dtoa_r+0x2ac>
 80045fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80045fc:	9306      	str	r3, [sp, #24]
 80045fe:	9308      	str	r3, [sp, #32]
 8004600:	e7b7      	b.n	8004572 <_dtoa_r+0x27a>
 8004602:	3101      	adds	r1, #1
 8004604:	0052      	lsls	r2, r2, #1
 8004606:	e7b7      	b.n	8004578 <_dtoa_r+0x280>
 8004608:	69eb      	ldr	r3, [r5, #28]
 800460a:	9a03      	ldr	r2, [sp, #12]
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	9b08      	ldr	r3, [sp, #32]
 8004610:	2b0e      	cmp	r3, #14
 8004612:	f200 80a8 	bhi.w	8004766 <_dtoa_r+0x46e>
 8004616:	2c00      	cmp	r4, #0
 8004618:	f000 80a5 	beq.w	8004766 <_dtoa_r+0x46e>
 800461c:	f1bb 0f00 	cmp.w	fp, #0
 8004620:	dd34      	ble.n	800468c <_dtoa_r+0x394>
 8004622:	4b9a      	ldr	r3, [pc, #616]	; (800488c <_dtoa_r+0x594>)
 8004624:	f00b 020f 	and.w	r2, fp, #15
 8004628:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800462c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004630:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004634:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004638:	ea4f 142b 	mov.w	r4, fp, asr #4
 800463c:	d016      	beq.n	800466c <_dtoa_r+0x374>
 800463e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004642:	4b93      	ldr	r3, [pc, #588]	; (8004890 <_dtoa_r+0x598>)
 8004644:	2703      	movs	r7, #3
 8004646:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800464a:	f7fc f86f 	bl	800072c <__aeabi_ddiv>
 800464e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004652:	f004 040f 	and.w	r4, r4, #15
 8004656:	4e8e      	ldr	r6, [pc, #568]	; (8004890 <_dtoa_r+0x598>)
 8004658:	b954      	cbnz	r4, 8004670 <_dtoa_r+0x378>
 800465a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800465e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004662:	f7fc f863 	bl	800072c <__aeabi_ddiv>
 8004666:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800466a:	e029      	b.n	80046c0 <_dtoa_r+0x3c8>
 800466c:	2702      	movs	r7, #2
 800466e:	e7f2      	b.n	8004656 <_dtoa_r+0x35e>
 8004670:	07e1      	lsls	r1, r4, #31
 8004672:	d508      	bpl.n	8004686 <_dtoa_r+0x38e>
 8004674:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004678:	e9d6 2300 	ldrd	r2, r3, [r6]
 800467c:	f7fb ff2c 	bl	80004d8 <__aeabi_dmul>
 8004680:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004684:	3701      	adds	r7, #1
 8004686:	1064      	asrs	r4, r4, #1
 8004688:	3608      	adds	r6, #8
 800468a:	e7e5      	b.n	8004658 <_dtoa_r+0x360>
 800468c:	f000 80a5 	beq.w	80047da <_dtoa_r+0x4e2>
 8004690:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004694:	f1cb 0400 	rsb	r4, fp, #0
 8004698:	4b7c      	ldr	r3, [pc, #496]	; (800488c <_dtoa_r+0x594>)
 800469a:	f004 020f 	and.w	r2, r4, #15
 800469e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80046a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a6:	f7fb ff17 	bl	80004d8 <__aeabi_dmul>
 80046aa:	2702      	movs	r7, #2
 80046ac:	2300      	movs	r3, #0
 80046ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046b2:	4e77      	ldr	r6, [pc, #476]	; (8004890 <_dtoa_r+0x598>)
 80046b4:	1124      	asrs	r4, r4, #4
 80046b6:	2c00      	cmp	r4, #0
 80046b8:	f040 8084 	bne.w	80047c4 <_dtoa_r+0x4cc>
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1d2      	bne.n	8004666 <_dtoa_r+0x36e>
 80046c0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80046c4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80046c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 8087 	beq.w	80047de <_dtoa_r+0x4e6>
 80046d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80046d4:	2200      	movs	r2, #0
 80046d6:	4b6f      	ldr	r3, [pc, #444]	; (8004894 <_dtoa_r+0x59c>)
 80046d8:	f7fc f970 	bl	80009bc <__aeabi_dcmplt>
 80046dc:	2800      	cmp	r0, #0
 80046de:	d07e      	beq.n	80047de <_dtoa_r+0x4e6>
 80046e0:	9b08      	ldr	r3, [sp, #32]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d07b      	beq.n	80047de <_dtoa_r+0x4e6>
 80046e6:	9b06      	ldr	r3, [sp, #24]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	dd38      	ble.n	800475e <_dtoa_r+0x466>
 80046ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80046f0:	2200      	movs	r2, #0
 80046f2:	4b69      	ldr	r3, [pc, #420]	; (8004898 <_dtoa_r+0x5a0>)
 80046f4:	f7fb fef0 	bl	80004d8 <__aeabi_dmul>
 80046f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046fc:	9c06      	ldr	r4, [sp, #24]
 80046fe:	f10b 38ff 	add.w	r8, fp, #4294967295
 8004702:	3701      	adds	r7, #1
 8004704:	4638      	mov	r0, r7
 8004706:	f7fb fe7d 	bl	8000404 <__aeabi_i2d>
 800470a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800470e:	f7fb fee3 	bl	80004d8 <__aeabi_dmul>
 8004712:	2200      	movs	r2, #0
 8004714:	4b61      	ldr	r3, [pc, #388]	; (800489c <_dtoa_r+0x5a4>)
 8004716:	f7fb fd29 	bl	800016c <__adddf3>
 800471a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800471e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004722:	9611      	str	r6, [sp, #68]	; 0x44
 8004724:	2c00      	cmp	r4, #0
 8004726:	d15d      	bne.n	80047e4 <_dtoa_r+0x4ec>
 8004728:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800472c:	2200      	movs	r2, #0
 800472e:	4b5c      	ldr	r3, [pc, #368]	; (80048a0 <_dtoa_r+0x5a8>)
 8004730:	f7fb fd1a 	bl	8000168 <__aeabi_dsub>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800473c:	4633      	mov	r3, r6
 800473e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004740:	f7fc f95a 	bl	80009f8 <__aeabi_dcmpgt>
 8004744:	2800      	cmp	r0, #0
 8004746:	f040 8295 	bne.w	8004c74 <_dtoa_r+0x97c>
 800474a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800474e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004750:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004754:	f7fc f932 	bl	80009bc <__aeabi_dcmplt>
 8004758:	2800      	cmp	r0, #0
 800475a:	f040 8289 	bne.w	8004c70 <_dtoa_r+0x978>
 800475e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004762:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004766:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004768:	2b00      	cmp	r3, #0
 800476a:	f2c0 8151 	blt.w	8004a10 <_dtoa_r+0x718>
 800476e:	f1bb 0f0e 	cmp.w	fp, #14
 8004772:	f300 814d 	bgt.w	8004a10 <_dtoa_r+0x718>
 8004776:	4b45      	ldr	r3, [pc, #276]	; (800488c <_dtoa_r+0x594>)
 8004778:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800477c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004780:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004784:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004786:	2b00      	cmp	r3, #0
 8004788:	f280 80da 	bge.w	8004940 <_dtoa_r+0x648>
 800478c:	9b08      	ldr	r3, [sp, #32]
 800478e:	2b00      	cmp	r3, #0
 8004790:	f300 80d6 	bgt.w	8004940 <_dtoa_r+0x648>
 8004794:	f040 826b 	bne.w	8004c6e <_dtoa_r+0x976>
 8004798:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800479c:	2200      	movs	r2, #0
 800479e:	4b40      	ldr	r3, [pc, #256]	; (80048a0 <_dtoa_r+0x5a8>)
 80047a0:	f7fb fe9a 	bl	80004d8 <__aeabi_dmul>
 80047a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047a8:	f7fc f91c 	bl	80009e4 <__aeabi_dcmpge>
 80047ac:	9c08      	ldr	r4, [sp, #32]
 80047ae:	4626      	mov	r6, r4
 80047b0:	2800      	cmp	r0, #0
 80047b2:	f040 8241 	bne.w	8004c38 <_dtoa_r+0x940>
 80047b6:	2331      	movs	r3, #49	; 0x31
 80047b8:	9f03      	ldr	r7, [sp, #12]
 80047ba:	f10b 0b01 	add.w	fp, fp, #1
 80047be:	f807 3b01 	strb.w	r3, [r7], #1
 80047c2:	e23d      	b.n	8004c40 <_dtoa_r+0x948>
 80047c4:	07e2      	lsls	r2, r4, #31
 80047c6:	d505      	bpl.n	80047d4 <_dtoa_r+0x4dc>
 80047c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80047cc:	f7fb fe84 	bl	80004d8 <__aeabi_dmul>
 80047d0:	2301      	movs	r3, #1
 80047d2:	3701      	adds	r7, #1
 80047d4:	1064      	asrs	r4, r4, #1
 80047d6:	3608      	adds	r6, #8
 80047d8:	e76d      	b.n	80046b6 <_dtoa_r+0x3be>
 80047da:	2702      	movs	r7, #2
 80047dc:	e770      	b.n	80046c0 <_dtoa_r+0x3c8>
 80047de:	46d8      	mov	r8, fp
 80047e0:	9c08      	ldr	r4, [sp, #32]
 80047e2:	e78f      	b.n	8004704 <_dtoa_r+0x40c>
 80047e4:	9903      	ldr	r1, [sp, #12]
 80047e6:	4b29      	ldr	r3, [pc, #164]	; (800488c <_dtoa_r+0x594>)
 80047e8:	4421      	add	r1, r4
 80047ea:	9112      	str	r1, [sp, #72]	; 0x48
 80047ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047ee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80047f2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80047f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80047fa:	2900      	cmp	r1, #0
 80047fc:	d054      	beq.n	80048a8 <_dtoa_r+0x5b0>
 80047fe:	2000      	movs	r0, #0
 8004800:	4928      	ldr	r1, [pc, #160]	; (80048a4 <_dtoa_r+0x5ac>)
 8004802:	f7fb ff93 	bl	800072c <__aeabi_ddiv>
 8004806:	463b      	mov	r3, r7
 8004808:	4632      	mov	r2, r6
 800480a:	f7fb fcad 	bl	8000168 <__aeabi_dsub>
 800480e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004812:	9f03      	ldr	r7, [sp, #12]
 8004814:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004818:	f7fc f90e 	bl	8000a38 <__aeabi_d2iz>
 800481c:	4604      	mov	r4, r0
 800481e:	f7fb fdf1 	bl	8000404 <__aeabi_i2d>
 8004822:	4602      	mov	r2, r0
 8004824:	460b      	mov	r3, r1
 8004826:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800482a:	f7fb fc9d 	bl	8000168 <__aeabi_dsub>
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	3430      	adds	r4, #48	; 0x30
 8004834:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004838:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800483c:	f807 4b01 	strb.w	r4, [r7], #1
 8004840:	f7fc f8bc 	bl	80009bc <__aeabi_dcmplt>
 8004844:	2800      	cmp	r0, #0
 8004846:	d173      	bne.n	8004930 <_dtoa_r+0x638>
 8004848:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800484c:	2000      	movs	r0, #0
 800484e:	4911      	ldr	r1, [pc, #68]	; (8004894 <_dtoa_r+0x59c>)
 8004850:	f7fb fc8a 	bl	8000168 <__aeabi_dsub>
 8004854:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004858:	f7fc f8b0 	bl	80009bc <__aeabi_dcmplt>
 800485c:	2800      	cmp	r0, #0
 800485e:	f040 80b6 	bne.w	80049ce <_dtoa_r+0x6d6>
 8004862:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004864:	429f      	cmp	r7, r3
 8004866:	f43f af7a 	beq.w	800475e <_dtoa_r+0x466>
 800486a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800486e:	2200      	movs	r2, #0
 8004870:	4b09      	ldr	r3, [pc, #36]	; (8004898 <_dtoa_r+0x5a0>)
 8004872:	f7fb fe31 	bl	80004d8 <__aeabi_dmul>
 8004876:	2200      	movs	r2, #0
 8004878:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800487c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004880:	4b05      	ldr	r3, [pc, #20]	; (8004898 <_dtoa_r+0x5a0>)
 8004882:	f7fb fe29 	bl	80004d8 <__aeabi_dmul>
 8004886:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800488a:	e7c3      	b.n	8004814 <_dtoa_r+0x51c>
 800488c:	080079b0 	.word	0x080079b0
 8004890:	08007988 	.word	0x08007988
 8004894:	3ff00000 	.word	0x3ff00000
 8004898:	40240000 	.word	0x40240000
 800489c:	401c0000 	.word	0x401c0000
 80048a0:	40140000 	.word	0x40140000
 80048a4:	3fe00000 	.word	0x3fe00000
 80048a8:	4630      	mov	r0, r6
 80048aa:	4639      	mov	r1, r7
 80048ac:	f7fb fe14 	bl	80004d8 <__aeabi_dmul>
 80048b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80048b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80048b6:	9c03      	ldr	r4, [sp, #12]
 80048b8:	9314      	str	r3, [sp, #80]	; 0x50
 80048ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048be:	f7fc f8bb 	bl	8000a38 <__aeabi_d2iz>
 80048c2:	9015      	str	r0, [sp, #84]	; 0x54
 80048c4:	f7fb fd9e 	bl	8000404 <__aeabi_i2d>
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048d0:	f7fb fc4a 	bl	8000168 <__aeabi_dsub>
 80048d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80048d6:	4606      	mov	r6, r0
 80048d8:	3330      	adds	r3, #48	; 0x30
 80048da:	f804 3b01 	strb.w	r3, [r4], #1
 80048de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80048e0:	460f      	mov	r7, r1
 80048e2:	429c      	cmp	r4, r3
 80048e4:	f04f 0200 	mov.w	r2, #0
 80048e8:	d124      	bne.n	8004934 <_dtoa_r+0x63c>
 80048ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80048ee:	4baf      	ldr	r3, [pc, #700]	; (8004bac <_dtoa_r+0x8b4>)
 80048f0:	f7fb fc3c 	bl	800016c <__adddf3>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4630      	mov	r0, r6
 80048fa:	4639      	mov	r1, r7
 80048fc:	f7fc f87c 	bl	80009f8 <__aeabi_dcmpgt>
 8004900:	2800      	cmp	r0, #0
 8004902:	d163      	bne.n	80049cc <_dtoa_r+0x6d4>
 8004904:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004908:	2000      	movs	r0, #0
 800490a:	49a8      	ldr	r1, [pc, #672]	; (8004bac <_dtoa_r+0x8b4>)
 800490c:	f7fb fc2c 	bl	8000168 <__aeabi_dsub>
 8004910:	4602      	mov	r2, r0
 8004912:	460b      	mov	r3, r1
 8004914:	4630      	mov	r0, r6
 8004916:	4639      	mov	r1, r7
 8004918:	f7fc f850 	bl	80009bc <__aeabi_dcmplt>
 800491c:	2800      	cmp	r0, #0
 800491e:	f43f af1e 	beq.w	800475e <_dtoa_r+0x466>
 8004922:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004924:	1e7b      	subs	r3, r7, #1
 8004926:	9314      	str	r3, [sp, #80]	; 0x50
 8004928:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800492c:	2b30      	cmp	r3, #48	; 0x30
 800492e:	d0f8      	beq.n	8004922 <_dtoa_r+0x62a>
 8004930:	46c3      	mov	fp, r8
 8004932:	e03b      	b.n	80049ac <_dtoa_r+0x6b4>
 8004934:	4b9e      	ldr	r3, [pc, #632]	; (8004bb0 <_dtoa_r+0x8b8>)
 8004936:	f7fb fdcf 	bl	80004d8 <__aeabi_dmul>
 800493a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800493e:	e7bc      	b.n	80048ba <_dtoa_r+0x5c2>
 8004940:	9f03      	ldr	r7, [sp, #12]
 8004942:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004946:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800494a:	4640      	mov	r0, r8
 800494c:	4649      	mov	r1, r9
 800494e:	f7fb feed 	bl	800072c <__aeabi_ddiv>
 8004952:	f7fc f871 	bl	8000a38 <__aeabi_d2iz>
 8004956:	4604      	mov	r4, r0
 8004958:	f7fb fd54 	bl	8000404 <__aeabi_i2d>
 800495c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004960:	f7fb fdba 	bl	80004d8 <__aeabi_dmul>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4640      	mov	r0, r8
 800496a:	4649      	mov	r1, r9
 800496c:	f7fb fbfc 	bl	8000168 <__aeabi_dsub>
 8004970:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004974:	f807 6b01 	strb.w	r6, [r7], #1
 8004978:	9e03      	ldr	r6, [sp, #12]
 800497a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800497e:	1bbe      	subs	r6, r7, r6
 8004980:	45b4      	cmp	ip, r6
 8004982:	4602      	mov	r2, r0
 8004984:	460b      	mov	r3, r1
 8004986:	d136      	bne.n	80049f6 <_dtoa_r+0x6fe>
 8004988:	f7fb fbf0 	bl	800016c <__adddf3>
 800498c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004990:	4680      	mov	r8, r0
 8004992:	4689      	mov	r9, r1
 8004994:	f7fc f830 	bl	80009f8 <__aeabi_dcmpgt>
 8004998:	bb58      	cbnz	r0, 80049f2 <_dtoa_r+0x6fa>
 800499a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800499e:	4640      	mov	r0, r8
 80049a0:	4649      	mov	r1, r9
 80049a2:	f7fc f801 	bl	80009a8 <__aeabi_dcmpeq>
 80049a6:	b108      	cbz	r0, 80049ac <_dtoa_r+0x6b4>
 80049a8:	07e3      	lsls	r3, r4, #31
 80049aa:	d422      	bmi.n	80049f2 <_dtoa_r+0x6fa>
 80049ac:	4651      	mov	r1, sl
 80049ae:	4628      	mov	r0, r5
 80049b0:	f000 fbc2 	bl	8005138 <_Bfree>
 80049b4:	2300      	movs	r3, #0
 80049b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80049b8:	703b      	strb	r3, [r7, #0]
 80049ba:	f10b 0301 	add.w	r3, fp, #1
 80049be:	6013      	str	r3, [r2, #0]
 80049c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f43f ace6 	beq.w	8004394 <_dtoa_r+0x9c>
 80049c8:	601f      	str	r7, [r3, #0]
 80049ca:	e4e3      	b.n	8004394 <_dtoa_r+0x9c>
 80049cc:	4627      	mov	r7, r4
 80049ce:	463b      	mov	r3, r7
 80049d0:	461f      	mov	r7, r3
 80049d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80049d6:	2a39      	cmp	r2, #57	; 0x39
 80049d8:	d107      	bne.n	80049ea <_dtoa_r+0x6f2>
 80049da:	9a03      	ldr	r2, [sp, #12]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d1f7      	bne.n	80049d0 <_dtoa_r+0x6d8>
 80049e0:	2230      	movs	r2, #48	; 0x30
 80049e2:	9903      	ldr	r1, [sp, #12]
 80049e4:	f108 0801 	add.w	r8, r8, #1
 80049e8:	700a      	strb	r2, [r1, #0]
 80049ea:	781a      	ldrb	r2, [r3, #0]
 80049ec:	3201      	adds	r2, #1
 80049ee:	701a      	strb	r2, [r3, #0]
 80049f0:	e79e      	b.n	8004930 <_dtoa_r+0x638>
 80049f2:	46d8      	mov	r8, fp
 80049f4:	e7eb      	b.n	80049ce <_dtoa_r+0x6d6>
 80049f6:	2200      	movs	r2, #0
 80049f8:	4b6d      	ldr	r3, [pc, #436]	; (8004bb0 <_dtoa_r+0x8b8>)
 80049fa:	f7fb fd6d 	bl	80004d8 <__aeabi_dmul>
 80049fe:	2200      	movs	r2, #0
 8004a00:	2300      	movs	r3, #0
 8004a02:	4680      	mov	r8, r0
 8004a04:	4689      	mov	r9, r1
 8004a06:	f7fb ffcf 	bl	80009a8 <__aeabi_dcmpeq>
 8004a0a:	2800      	cmp	r0, #0
 8004a0c:	d09b      	beq.n	8004946 <_dtoa_r+0x64e>
 8004a0e:	e7cd      	b.n	80049ac <_dtoa_r+0x6b4>
 8004a10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a12:	2a00      	cmp	r2, #0
 8004a14:	f000 80c4 	beq.w	8004ba0 <_dtoa_r+0x8a8>
 8004a18:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004a1a:	2a01      	cmp	r2, #1
 8004a1c:	f300 80a8 	bgt.w	8004b70 <_dtoa_r+0x878>
 8004a20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004a22:	2a00      	cmp	r2, #0
 8004a24:	f000 80a0 	beq.w	8004b68 <_dtoa_r+0x870>
 8004a28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004a2c:	464f      	mov	r7, r9
 8004a2e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004a30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a32:	2101      	movs	r1, #1
 8004a34:	441a      	add	r2, r3
 8004a36:	4628      	mov	r0, r5
 8004a38:	4499      	add	r9, r3
 8004a3a:	9209      	str	r2, [sp, #36]	; 0x24
 8004a3c:	f000 fc7c 	bl	8005338 <__i2b>
 8004a40:	4606      	mov	r6, r0
 8004a42:	b15f      	cbz	r7, 8004a5c <_dtoa_r+0x764>
 8004a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	dd08      	ble.n	8004a5c <_dtoa_r+0x764>
 8004a4a:	42bb      	cmp	r3, r7
 8004a4c:	bfa8      	it	ge
 8004a4e:	463b      	movge	r3, r7
 8004a50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a52:	eba9 0903 	sub.w	r9, r9, r3
 8004a56:	1aff      	subs	r7, r7, r3
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a5e:	b1f3      	cbz	r3, 8004a9e <_dtoa_r+0x7a6>
 8004a60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 80a0 	beq.w	8004ba8 <_dtoa_r+0x8b0>
 8004a68:	2c00      	cmp	r4, #0
 8004a6a:	dd10      	ble.n	8004a8e <_dtoa_r+0x796>
 8004a6c:	4631      	mov	r1, r6
 8004a6e:	4622      	mov	r2, r4
 8004a70:	4628      	mov	r0, r5
 8004a72:	f000 fd1f 	bl	80054b4 <__pow5mult>
 8004a76:	4652      	mov	r2, sl
 8004a78:	4601      	mov	r1, r0
 8004a7a:	4606      	mov	r6, r0
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	f000 fc71 	bl	8005364 <__multiply>
 8004a82:	4680      	mov	r8, r0
 8004a84:	4651      	mov	r1, sl
 8004a86:	4628      	mov	r0, r5
 8004a88:	f000 fb56 	bl	8005138 <_Bfree>
 8004a8c:	46c2      	mov	sl, r8
 8004a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a90:	1b1a      	subs	r2, r3, r4
 8004a92:	d004      	beq.n	8004a9e <_dtoa_r+0x7a6>
 8004a94:	4651      	mov	r1, sl
 8004a96:	4628      	mov	r0, r5
 8004a98:	f000 fd0c 	bl	80054b4 <__pow5mult>
 8004a9c:	4682      	mov	sl, r0
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	f000 fc49 	bl	8005338 <__i2b>
 8004aa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f340 8082 	ble.w	8004bb4 <_dtoa_r+0x8bc>
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	4601      	mov	r1, r0
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	f000 fcfd 	bl	80054b4 <__pow5mult>
 8004aba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004abc:	4604      	mov	r4, r0
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	dd7b      	ble.n	8004bba <_dtoa_r+0x8c2>
 8004ac2:	f04f 0800 	mov.w	r8, #0
 8004ac6:	6923      	ldr	r3, [r4, #16]
 8004ac8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004acc:	6918      	ldr	r0, [r3, #16]
 8004ace:	f000 fbe5 	bl	800529c <__hi0bits>
 8004ad2:	f1c0 0020 	rsb	r0, r0, #32
 8004ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ad8:	4418      	add	r0, r3
 8004ada:	f010 001f 	ands.w	r0, r0, #31
 8004ade:	f000 8092 	beq.w	8004c06 <_dtoa_r+0x90e>
 8004ae2:	f1c0 0320 	rsb	r3, r0, #32
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	f340 8085 	ble.w	8004bf6 <_dtoa_r+0x8fe>
 8004aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aee:	f1c0 001c 	rsb	r0, r0, #28
 8004af2:	4403      	add	r3, r0
 8004af4:	4481      	add	r9, r0
 8004af6:	4407      	add	r7, r0
 8004af8:	9309      	str	r3, [sp, #36]	; 0x24
 8004afa:	f1b9 0f00 	cmp.w	r9, #0
 8004afe:	dd05      	ble.n	8004b0c <_dtoa_r+0x814>
 8004b00:	4651      	mov	r1, sl
 8004b02:	464a      	mov	r2, r9
 8004b04:	4628      	mov	r0, r5
 8004b06:	f000 fd2f 	bl	8005568 <__lshift>
 8004b0a:	4682      	mov	sl, r0
 8004b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	dd05      	ble.n	8004b1e <_dtoa_r+0x826>
 8004b12:	4621      	mov	r1, r4
 8004b14:	461a      	mov	r2, r3
 8004b16:	4628      	mov	r0, r5
 8004b18:	f000 fd26 	bl	8005568 <__lshift>
 8004b1c:	4604      	mov	r4, r0
 8004b1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d072      	beq.n	8004c0a <_dtoa_r+0x912>
 8004b24:	4621      	mov	r1, r4
 8004b26:	4650      	mov	r0, sl
 8004b28:	f000 fd8a 	bl	8005640 <__mcmp>
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	da6c      	bge.n	8004c0a <_dtoa_r+0x912>
 8004b30:	2300      	movs	r3, #0
 8004b32:	4651      	mov	r1, sl
 8004b34:	220a      	movs	r2, #10
 8004b36:	4628      	mov	r0, r5
 8004b38:	f000 fb20 	bl	800517c <__multadd>
 8004b3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b3e:	4682      	mov	sl, r0
 8004b40:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 81ac 	beq.w	8004ea2 <_dtoa_r+0xbaa>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	4631      	mov	r1, r6
 8004b4e:	220a      	movs	r2, #10
 8004b50:	4628      	mov	r0, r5
 8004b52:	f000 fb13 	bl	800517c <__multadd>
 8004b56:	9b06      	ldr	r3, [sp, #24]
 8004b58:	4606      	mov	r6, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f300 8093 	bgt.w	8004c86 <_dtoa_r+0x98e>
 8004b60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	dc59      	bgt.n	8004c1a <_dtoa_r+0x922>
 8004b66:	e08e      	b.n	8004c86 <_dtoa_r+0x98e>
 8004b68:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004b6a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004b6e:	e75d      	b.n	8004a2c <_dtoa_r+0x734>
 8004b70:	9b08      	ldr	r3, [sp, #32]
 8004b72:	1e5c      	subs	r4, r3, #1
 8004b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b76:	42a3      	cmp	r3, r4
 8004b78:	bfbf      	itttt	lt
 8004b7a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004b7c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8004b7e:	1ae3      	sublt	r3, r4, r3
 8004b80:	18d2      	addlt	r2, r2, r3
 8004b82:	bfa8      	it	ge
 8004b84:	1b1c      	subge	r4, r3, r4
 8004b86:	9b08      	ldr	r3, [sp, #32]
 8004b88:	bfbe      	ittt	lt
 8004b8a:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004b8c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8004b8e:	2400      	movlt	r4, #0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	bfb5      	itete	lt
 8004b94:	eba9 0703 	sublt.w	r7, r9, r3
 8004b98:	464f      	movge	r7, r9
 8004b9a:	2300      	movlt	r3, #0
 8004b9c:	9b08      	ldrge	r3, [sp, #32]
 8004b9e:	e747      	b.n	8004a30 <_dtoa_r+0x738>
 8004ba0:	464f      	mov	r7, r9
 8004ba2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004ba4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004ba6:	e74c      	b.n	8004a42 <_dtoa_r+0x74a>
 8004ba8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004baa:	e773      	b.n	8004a94 <_dtoa_r+0x79c>
 8004bac:	3fe00000 	.word	0x3fe00000
 8004bb0:	40240000 	.word	0x40240000
 8004bb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	dc18      	bgt.n	8004bec <_dtoa_r+0x8f4>
 8004bba:	9b04      	ldr	r3, [sp, #16]
 8004bbc:	b9b3      	cbnz	r3, 8004bec <_dtoa_r+0x8f4>
 8004bbe:	9b05      	ldr	r3, [sp, #20]
 8004bc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bc4:	b993      	cbnz	r3, 8004bec <_dtoa_r+0x8f4>
 8004bc6:	9b05      	ldr	r3, [sp, #20]
 8004bc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004bcc:	0d1b      	lsrs	r3, r3, #20
 8004bce:	051b      	lsls	r3, r3, #20
 8004bd0:	b17b      	cbz	r3, 8004bf2 <_dtoa_r+0x8fa>
 8004bd2:	f04f 0801 	mov.w	r8, #1
 8004bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bd8:	f109 0901 	add.w	r9, r9, #1
 8004bdc:	3301      	adds	r3, #1
 8004bde:	9309      	str	r3, [sp, #36]	; 0x24
 8004be0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f47f af6f 	bne.w	8004ac6 <_dtoa_r+0x7ce>
 8004be8:	2001      	movs	r0, #1
 8004bea:	e774      	b.n	8004ad6 <_dtoa_r+0x7de>
 8004bec:	f04f 0800 	mov.w	r8, #0
 8004bf0:	e7f6      	b.n	8004be0 <_dtoa_r+0x8e8>
 8004bf2:	4698      	mov	r8, r3
 8004bf4:	e7f4      	b.n	8004be0 <_dtoa_r+0x8e8>
 8004bf6:	d080      	beq.n	8004afa <_dtoa_r+0x802>
 8004bf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bfa:	331c      	adds	r3, #28
 8004bfc:	441a      	add	r2, r3
 8004bfe:	4499      	add	r9, r3
 8004c00:	441f      	add	r7, r3
 8004c02:	9209      	str	r2, [sp, #36]	; 0x24
 8004c04:	e779      	b.n	8004afa <_dtoa_r+0x802>
 8004c06:	4603      	mov	r3, r0
 8004c08:	e7f6      	b.n	8004bf8 <_dtoa_r+0x900>
 8004c0a:	9b08      	ldr	r3, [sp, #32]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	dc34      	bgt.n	8004c7a <_dtoa_r+0x982>
 8004c10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	dd31      	ble.n	8004c7a <_dtoa_r+0x982>
 8004c16:	9b08      	ldr	r3, [sp, #32]
 8004c18:	9306      	str	r3, [sp, #24]
 8004c1a:	9b06      	ldr	r3, [sp, #24]
 8004c1c:	b963      	cbnz	r3, 8004c38 <_dtoa_r+0x940>
 8004c1e:	4621      	mov	r1, r4
 8004c20:	2205      	movs	r2, #5
 8004c22:	4628      	mov	r0, r5
 8004c24:	f000 faaa 	bl	800517c <__multadd>
 8004c28:	4601      	mov	r1, r0
 8004c2a:	4604      	mov	r4, r0
 8004c2c:	4650      	mov	r0, sl
 8004c2e:	f000 fd07 	bl	8005640 <__mcmp>
 8004c32:	2800      	cmp	r0, #0
 8004c34:	f73f adbf 	bgt.w	80047b6 <_dtoa_r+0x4be>
 8004c38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004c3a:	9f03      	ldr	r7, [sp, #12]
 8004c3c:	ea6f 0b03 	mvn.w	fp, r3
 8004c40:	f04f 0800 	mov.w	r8, #0
 8004c44:	4621      	mov	r1, r4
 8004c46:	4628      	mov	r0, r5
 8004c48:	f000 fa76 	bl	8005138 <_Bfree>
 8004c4c:	2e00      	cmp	r6, #0
 8004c4e:	f43f aead 	beq.w	80049ac <_dtoa_r+0x6b4>
 8004c52:	f1b8 0f00 	cmp.w	r8, #0
 8004c56:	d005      	beq.n	8004c64 <_dtoa_r+0x96c>
 8004c58:	45b0      	cmp	r8, r6
 8004c5a:	d003      	beq.n	8004c64 <_dtoa_r+0x96c>
 8004c5c:	4641      	mov	r1, r8
 8004c5e:	4628      	mov	r0, r5
 8004c60:	f000 fa6a 	bl	8005138 <_Bfree>
 8004c64:	4631      	mov	r1, r6
 8004c66:	4628      	mov	r0, r5
 8004c68:	f000 fa66 	bl	8005138 <_Bfree>
 8004c6c:	e69e      	b.n	80049ac <_dtoa_r+0x6b4>
 8004c6e:	2400      	movs	r4, #0
 8004c70:	4626      	mov	r6, r4
 8004c72:	e7e1      	b.n	8004c38 <_dtoa_r+0x940>
 8004c74:	46c3      	mov	fp, r8
 8004c76:	4626      	mov	r6, r4
 8004c78:	e59d      	b.n	80047b6 <_dtoa_r+0x4be>
 8004c7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 80c8 	beq.w	8004e12 <_dtoa_r+0xb1a>
 8004c82:	9b08      	ldr	r3, [sp, #32]
 8004c84:	9306      	str	r3, [sp, #24]
 8004c86:	2f00      	cmp	r7, #0
 8004c88:	dd05      	ble.n	8004c96 <_dtoa_r+0x99e>
 8004c8a:	4631      	mov	r1, r6
 8004c8c:	463a      	mov	r2, r7
 8004c8e:	4628      	mov	r0, r5
 8004c90:	f000 fc6a 	bl	8005568 <__lshift>
 8004c94:	4606      	mov	r6, r0
 8004c96:	f1b8 0f00 	cmp.w	r8, #0
 8004c9a:	d05b      	beq.n	8004d54 <_dtoa_r+0xa5c>
 8004c9c:	4628      	mov	r0, r5
 8004c9e:	6871      	ldr	r1, [r6, #4]
 8004ca0:	f000 fa0a 	bl	80050b8 <_Balloc>
 8004ca4:	4607      	mov	r7, r0
 8004ca6:	b928      	cbnz	r0, 8004cb4 <_dtoa_r+0x9bc>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004cae:	4b81      	ldr	r3, [pc, #516]	; (8004eb4 <_dtoa_r+0xbbc>)
 8004cb0:	f7ff bb36 	b.w	8004320 <_dtoa_r+0x28>
 8004cb4:	6932      	ldr	r2, [r6, #16]
 8004cb6:	f106 010c 	add.w	r1, r6, #12
 8004cba:	3202      	adds	r2, #2
 8004cbc:	0092      	lsls	r2, r2, #2
 8004cbe:	300c      	adds	r0, #12
 8004cc0:	f002 f938 	bl	8006f34 <memcpy>
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	4639      	mov	r1, r7
 8004cc8:	4628      	mov	r0, r5
 8004cca:	f000 fc4d 	bl	8005568 <__lshift>
 8004cce:	46b0      	mov	r8, r6
 8004cd0:	4606      	mov	r6, r0
 8004cd2:	9b03      	ldr	r3, [sp, #12]
 8004cd4:	9a03      	ldr	r2, [sp, #12]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	9308      	str	r3, [sp, #32]
 8004cda:	9b06      	ldr	r3, [sp, #24]
 8004cdc:	4413      	add	r3, r2
 8004cde:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ce0:	9b04      	ldr	r3, [sp, #16]
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	930a      	str	r3, [sp, #40]	; 0x28
 8004ce8:	9b08      	ldr	r3, [sp, #32]
 8004cea:	4621      	mov	r1, r4
 8004cec:	3b01      	subs	r3, #1
 8004cee:	4650      	mov	r0, sl
 8004cf0:	9304      	str	r3, [sp, #16]
 8004cf2:	f7ff fa77 	bl	80041e4 <quorem>
 8004cf6:	4641      	mov	r1, r8
 8004cf8:	9006      	str	r0, [sp, #24]
 8004cfa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004cfe:	4650      	mov	r0, sl
 8004d00:	f000 fc9e 	bl	8005640 <__mcmp>
 8004d04:	4632      	mov	r2, r6
 8004d06:	9009      	str	r0, [sp, #36]	; 0x24
 8004d08:	4621      	mov	r1, r4
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	f000 fcb4 	bl	8005678 <__mdiff>
 8004d10:	68c2      	ldr	r2, [r0, #12]
 8004d12:	4607      	mov	r7, r0
 8004d14:	bb02      	cbnz	r2, 8004d58 <_dtoa_r+0xa60>
 8004d16:	4601      	mov	r1, r0
 8004d18:	4650      	mov	r0, sl
 8004d1a:	f000 fc91 	bl	8005640 <__mcmp>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	4639      	mov	r1, r7
 8004d22:	4628      	mov	r0, r5
 8004d24:	920c      	str	r2, [sp, #48]	; 0x30
 8004d26:	f000 fa07 	bl	8005138 <_Bfree>
 8004d2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d2e:	9f08      	ldr	r7, [sp, #32]
 8004d30:	ea43 0102 	orr.w	r1, r3, r2
 8004d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d36:	4319      	orrs	r1, r3
 8004d38:	d110      	bne.n	8004d5c <_dtoa_r+0xa64>
 8004d3a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004d3e:	d029      	beq.n	8004d94 <_dtoa_r+0xa9c>
 8004d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	dd02      	ble.n	8004d4c <_dtoa_r+0xa54>
 8004d46:	9b06      	ldr	r3, [sp, #24]
 8004d48:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004d4c:	9b04      	ldr	r3, [sp, #16]
 8004d4e:	f883 9000 	strb.w	r9, [r3]
 8004d52:	e777      	b.n	8004c44 <_dtoa_r+0x94c>
 8004d54:	4630      	mov	r0, r6
 8004d56:	e7ba      	b.n	8004cce <_dtoa_r+0x9d6>
 8004d58:	2201      	movs	r2, #1
 8004d5a:	e7e1      	b.n	8004d20 <_dtoa_r+0xa28>
 8004d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	db04      	blt.n	8004d6c <_dtoa_r+0xa74>
 8004d62:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004d64:	430b      	orrs	r3, r1
 8004d66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004d68:	430b      	orrs	r3, r1
 8004d6a:	d120      	bne.n	8004dae <_dtoa_r+0xab6>
 8004d6c:	2a00      	cmp	r2, #0
 8004d6e:	dded      	ble.n	8004d4c <_dtoa_r+0xa54>
 8004d70:	4651      	mov	r1, sl
 8004d72:	2201      	movs	r2, #1
 8004d74:	4628      	mov	r0, r5
 8004d76:	f000 fbf7 	bl	8005568 <__lshift>
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	4682      	mov	sl, r0
 8004d7e:	f000 fc5f 	bl	8005640 <__mcmp>
 8004d82:	2800      	cmp	r0, #0
 8004d84:	dc03      	bgt.n	8004d8e <_dtoa_r+0xa96>
 8004d86:	d1e1      	bne.n	8004d4c <_dtoa_r+0xa54>
 8004d88:	f019 0f01 	tst.w	r9, #1
 8004d8c:	d0de      	beq.n	8004d4c <_dtoa_r+0xa54>
 8004d8e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004d92:	d1d8      	bne.n	8004d46 <_dtoa_r+0xa4e>
 8004d94:	2339      	movs	r3, #57	; 0x39
 8004d96:	9a04      	ldr	r2, [sp, #16]
 8004d98:	7013      	strb	r3, [r2, #0]
 8004d9a:	463b      	mov	r3, r7
 8004d9c:	461f      	mov	r7, r3
 8004d9e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004da2:	3b01      	subs	r3, #1
 8004da4:	2a39      	cmp	r2, #57	; 0x39
 8004da6:	d06b      	beq.n	8004e80 <_dtoa_r+0xb88>
 8004da8:	3201      	adds	r2, #1
 8004daa:	701a      	strb	r2, [r3, #0]
 8004dac:	e74a      	b.n	8004c44 <_dtoa_r+0x94c>
 8004dae:	2a00      	cmp	r2, #0
 8004db0:	dd07      	ble.n	8004dc2 <_dtoa_r+0xaca>
 8004db2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004db6:	d0ed      	beq.n	8004d94 <_dtoa_r+0xa9c>
 8004db8:	9a04      	ldr	r2, [sp, #16]
 8004dba:	f109 0301 	add.w	r3, r9, #1
 8004dbe:	7013      	strb	r3, [r2, #0]
 8004dc0:	e740      	b.n	8004c44 <_dtoa_r+0x94c>
 8004dc2:	9b08      	ldr	r3, [sp, #32]
 8004dc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004dc6:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d042      	beq.n	8004e54 <_dtoa_r+0xb5c>
 8004dce:	4651      	mov	r1, sl
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	220a      	movs	r2, #10
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	f000 f9d1 	bl	800517c <__multadd>
 8004dda:	45b0      	cmp	r8, r6
 8004ddc:	4682      	mov	sl, r0
 8004dde:	f04f 0300 	mov.w	r3, #0
 8004de2:	f04f 020a 	mov.w	r2, #10
 8004de6:	4641      	mov	r1, r8
 8004de8:	4628      	mov	r0, r5
 8004dea:	d107      	bne.n	8004dfc <_dtoa_r+0xb04>
 8004dec:	f000 f9c6 	bl	800517c <__multadd>
 8004df0:	4680      	mov	r8, r0
 8004df2:	4606      	mov	r6, r0
 8004df4:	9b08      	ldr	r3, [sp, #32]
 8004df6:	3301      	adds	r3, #1
 8004df8:	9308      	str	r3, [sp, #32]
 8004dfa:	e775      	b.n	8004ce8 <_dtoa_r+0x9f0>
 8004dfc:	f000 f9be 	bl	800517c <__multadd>
 8004e00:	4631      	mov	r1, r6
 8004e02:	4680      	mov	r8, r0
 8004e04:	2300      	movs	r3, #0
 8004e06:	220a      	movs	r2, #10
 8004e08:	4628      	mov	r0, r5
 8004e0a:	f000 f9b7 	bl	800517c <__multadd>
 8004e0e:	4606      	mov	r6, r0
 8004e10:	e7f0      	b.n	8004df4 <_dtoa_r+0xafc>
 8004e12:	9b08      	ldr	r3, [sp, #32]
 8004e14:	9306      	str	r3, [sp, #24]
 8004e16:	9f03      	ldr	r7, [sp, #12]
 8004e18:	4621      	mov	r1, r4
 8004e1a:	4650      	mov	r0, sl
 8004e1c:	f7ff f9e2 	bl	80041e4 <quorem>
 8004e20:	9b03      	ldr	r3, [sp, #12]
 8004e22:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004e26:	f807 9b01 	strb.w	r9, [r7], #1
 8004e2a:	1afa      	subs	r2, r7, r3
 8004e2c:	9b06      	ldr	r3, [sp, #24]
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	dd07      	ble.n	8004e42 <_dtoa_r+0xb4a>
 8004e32:	4651      	mov	r1, sl
 8004e34:	2300      	movs	r3, #0
 8004e36:	220a      	movs	r2, #10
 8004e38:	4628      	mov	r0, r5
 8004e3a:	f000 f99f 	bl	800517c <__multadd>
 8004e3e:	4682      	mov	sl, r0
 8004e40:	e7ea      	b.n	8004e18 <_dtoa_r+0xb20>
 8004e42:	9b06      	ldr	r3, [sp, #24]
 8004e44:	f04f 0800 	mov.w	r8, #0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	bfcc      	ite	gt
 8004e4c:	461f      	movgt	r7, r3
 8004e4e:	2701      	movle	r7, #1
 8004e50:	9b03      	ldr	r3, [sp, #12]
 8004e52:	441f      	add	r7, r3
 8004e54:	4651      	mov	r1, sl
 8004e56:	2201      	movs	r2, #1
 8004e58:	4628      	mov	r0, r5
 8004e5a:	f000 fb85 	bl	8005568 <__lshift>
 8004e5e:	4621      	mov	r1, r4
 8004e60:	4682      	mov	sl, r0
 8004e62:	f000 fbed 	bl	8005640 <__mcmp>
 8004e66:	2800      	cmp	r0, #0
 8004e68:	dc97      	bgt.n	8004d9a <_dtoa_r+0xaa2>
 8004e6a:	d102      	bne.n	8004e72 <_dtoa_r+0xb7a>
 8004e6c:	f019 0f01 	tst.w	r9, #1
 8004e70:	d193      	bne.n	8004d9a <_dtoa_r+0xaa2>
 8004e72:	463b      	mov	r3, r7
 8004e74:	461f      	mov	r7, r3
 8004e76:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e7a:	2a30      	cmp	r2, #48	; 0x30
 8004e7c:	d0fa      	beq.n	8004e74 <_dtoa_r+0xb7c>
 8004e7e:	e6e1      	b.n	8004c44 <_dtoa_r+0x94c>
 8004e80:	9a03      	ldr	r2, [sp, #12]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d18a      	bne.n	8004d9c <_dtoa_r+0xaa4>
 8004e86:	2331      	movs	r3, #49	; 0x31
 8004e88:	f10b 0b01 	add.w	fp, fp, #1
 8004e8c:	e797      	b.n	8004dbe <_dtoa_r+0xac6>
 8004e8e:	4b0a      	ldr	r3, [pc, #40]	; (8004eb8 <_dtoa_r+0xbc0>)
 8004e90:	f7ff ba9f 	b.w	80043d2 <_dtoa_r+0xda>
 8004e94:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f47f aa77 	bne.w	800438a <_dtoa_r+0x92>
 8004e9c:	4b07      	ldr	r3, [pc, #28]	; (8004ebc <_dtoa_r+0xbc4>)
 8004e9e:	f7ff ba98 	b.w	80043d2 <_dtoa_r+0xda>
 8004ea2:	9b06      	ldr	r3, [sp, #24]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	dcb6      	bgt.n	8004e16 <_dtoa_r+0xb1e>
 8004ea8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	f73f aeb5 	bgt.w	8004c1a <_dtoa_r+0x922>
 8004eb0:	e7b1      	b.n	8004e16 <_dtoa_r+0xb1e>
 8004eb2:	bf00      	nop
 8004eb4:	08007917 	.word	0x08007917
 8004eb8:	08007872 	.word	0x08007872
 8004ebc:	0800789b 	.word	0x0800789b

08004ec0 <_free_r>:
 8004ec0:	b538      	push	{r3, r4, r5, lr}
 8004ec2:	4605      	mov	r5, r0
 8004ec4:	2900      	cmp	r1, #0
 8004ec6:	d040      	beq.n	8004f4a <_free_r+0x8a>
 8004ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ecc:	1f0c      	subs	r4, r1, #4
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	bfb8      	it	lt
 8004ed2:	18e4      	addlt	r4, r4, r3
 8004ed4:	f000 f8e4 	bl	80050a0 <__malloc_lock>
 8004ed8:	4a1c      	ldr	r2, [pc, #112]	; (8004f4c <_free_r+0x8c>)
 8004eda:	6813      	ldr	r3, [r2, #0]
 8004edc:	b933      	cbnz	r3, 8004eec <_free_r+0x2c>
 8004ede:	6063      	str	r3, [r4, #4]
 8004ee0:	6014      	str	r4, [r2, #0]
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ee8:	f000 b8e0 	b.w	80050ac <__malloc_unlock>
 8004eec:	42a3      	cmp	r3, r4
 8004eee:	d908      	bls.n	8004f02 <_free_r+0x42>
 8004ef0:	6820      	ldr	r0, [r4, #0]
 8004ef2:	1821      	adds	r1, r4, r0
 8004ef4:	428b      	cmp	r3, r1
 8004ef6:	bf01      	itttt	eq
 8004ef8:	6819      	ldreq	r1, [r3, #0]
 8004efa:	685b      	ldreq	r3, [r3, #4]
 8004efc:	1809      	addeq	r1, r1, r0
 8004efe:	6021      	streq	r1, [r4, #0]
 8004f00:	e7ed      	b.n	8004ede <_free_r+0x1e>
 8004f02:	461a      	mov	r2, r3
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	b10b      	cbz	r3, 8004f0c <_free_r+0x4c>
 8004f08:	42a3      	cmp	r3, r4
 8004f0a:	d9fa      	bls.n	8004f02 <_free_r+0x42>
 8004f0c:	6811      	ldr	r1, [r2, #0]
 8004f0e:	1850      	adds	r0, r2, r1
 8004f10:	42a0      	cmp	r0, r4
 8004f12:	d10b      	bne.n	8004f2c <_free_r+0x6c>
 8004f14:	6820      	ldr	r0, [r4, #0]
 8004f16:	4401      	add	r1, r0
 8004f18:	1850      	adds	r0, r2, r1
 8004f1a:	4283      	cmp	r3, r0
 8004f1c:	6011      	str	r1, [r2, #0]
 8004f1e:	d1e0      	bne.n	8004ee2 <_free_r+0x22>
 8004f20:	6818      	ldr	r0, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	4408      	add	r0, r1
 8004f26:	6010      	str	r0, [r2, #0]
 8004f28:	6053      	str	r3, [r2, #4]
 8004f2a:	e7da      	b.n	8004ee2 <_free_r+0x22>
 8004f2c:	d902      	bls.n	8004f34 <_free_r+0x74>
 8004f2e:	230c      	movs	r3, #12
 8004f30:	602b      	str	r3, [r5, #0]
 8004f32:	e7d6      	b.n	8004ee2 <_free_r+0x22>
 8004f34:	6820      	ldr	r0, [r4, #0]
 8004f36:	1821      	adds	r1, r4, r0
 8004f38:	428b      	cmp	r3, r1
 8004f3a:	bf01      	itttt	eq
 8004f3c:	6819      	ldreq	r1, [r3, #0]
 8004f3e:	685b      	ldreq	r3, [r3, #4]
 8004f40:	1809      	addeq	r1, r1, r0
 8004f42:	6021      	streq	r1, [r4, #0]
 8004f44:	6063      	str	r3, [r4, #4]
 8004f46:	6054      	str	r4, [r2, #4]
 8004f48:	e7cb      	b.n	8004ee2 <_free_r+0x22>
 8004f4a:	bd38      	pop	{r3, r4, r5, pc}
 8004f4c:	200003b8 	.word	0x200003b8

08004f50 <malloc>:
 8004f50:	4b02      	ldr	r3, [pc, #8]	; (8004f5c <malloc+0xc>)
 8004f52:	4601      	mov	r1, r0
 8004f54:	6818      	ldr	r0, [r3, #0]
 8004f56:	f000 b823 	b.w	8004fa0 <_malloc_r>
 8004f5a:	bf00      	nop
 8004f5c:	20000064 	.word	0x20000064

08004f60 <sbrk_aligned>:
 8004f60:	b570      	push	{r4, r5, r6, lr}
 8004f62:	4e0e      	ldr	r6, [pc, #56]	; (8004f9c <sbrk_aligned+0x3c>)
 8004f64:	460c      	mov	r4, r1
 8004f66:	6831      	ldr	r1, [r6, #0]
 8004f68:	4605      	mov	r5, r0
 8004f6a:	b911      	cbnz	r1, 8004f72 <sbrk_aligned+0x12>
 8004f6c:	f001 ffd2 	bl	8006f14 <_sbrk_r>
 8004f70:	6030      	str	r0, [r6, #0]
 8004f72:	4621      	mov	r1, r4
 8004f74:	4628      	mov	r0, r5
 8004f76:	f001 ffcd 	bl	8006f14 <_sbrk_r>
 8004f7a:	1c43      	adds	r3, r0, #1
 8004f7c:	d00a      	beq.n	8004f94 <sbrk_aligned+0x34>
 8004f7e:	1cc4      	adds	r4, r0, #3
 8004f80:	f024 0403 	bic.w	r4, r4, #3
 8004f84:	42a0      	cmp	r0, r4
 8004f86:	d007      	beq.n	8004f98 <sbrk_aligned+0x38>
 8004f88:	1a21      	subs	r1, r4, r0
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	f001 ffc2 	bl	8006f14 <_sbrk_r>
 8004f90:	3001      	adds	r0, #1
 8004f92:	d101      	bne.n	8004f98 <sbrk_aligned+0x38>
 8004f94:	f04f 34ff 	mov.w	r4, #4294967295
 8004f98:	4620      	mov	r0, r4
 8004f9a:	bd70      	pop	{r4, r5, r6, pc}
 8004f9c:	200003bc 	.word	0x200003bc

08004fa0 <_malloc_r>:
 8004fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fa4:	1ccd      	adds	r5, r1, #3
 8004fa6:	f025 0503 	bic.w	r5, r5, #3
 8004faa:	3508      	adds	r5, #8
 8004fac:	2d0c      	cmp	r5, #12
 8004fae:	bf38      	it	cc
 8004fb0:	250c      	movcc	r5, #12
 8004fb2:	2d00      	cmp	r5, #0
 8004fb4:	4607      	mov	r7, r0
 8004fb6:	db01      	blt.n	8004fbc <_malloc_r+0x1c>
 8004fb8:	42a9      	cmp	r1, r5
 8004fba:	d905      	bls.n	8004fc8 <_malloc_r+0x28>
 8004fbc:	230c      	movs	r3, #12
 8004fbe:	2600      	movs	r6, #0
 8004fc0:	603b      	str	r3, [r7, #0]
 8004fc2:	4630      	mov	r0, r6
 8004fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fc8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800509c <_malloc_r+0xfc>
 8004fcc:	f000 f868 	bl	80050a0 <__malloc_lock>
 8004fd0:	f8d8 3000 	ldr.w	r3, [r8]
 8004fd4:	461c      	mov	r4, r3
 8004fd6:	bb5c      	cbnz	r4, 8005030 <_malloc_r+0x90>
 8004fd8:	4629      	mov	r1, r5
 8004fda:	4638      	mov	r0, r7
 8004fdc:	f7ff ffc0 	bl	8004f60 <sbrk_aligned>
 8004fe0:	1c43      	adds	r3, r0, #1
 8004fe2:	4604      	mov	r4, r0
 8004fe4:	d155      	bne.n	8005092 <_malloc_r+0xf2>
 8004fe6:	f8d8 4000 	ldr.w	r4, [r8]
 8004fea:	4626      	mov	r6, r4
 8004fec:	2e00      	cmp	r6, #0
 8004fee:	d145      	bne.n	800507c <_malloc_r+0xdc>
 8004ff0:	2c00      	cmp	r4, #0
 8004ff2:	d048      	beq.n	8005086 <_malloc_r+0xe6>
 8004ff4:	6823      	ldr	r3, [r4, #0]
 8004ff6:	4631      	mov	r1, r6
 8004ff8:	4638      	mov	r0, r7
 8004ffa:	eb04 0903 	add.w	r9, r4, r3
 8004ffe:	f001 ff89 	bl	8006f14 <_sbrk_r>
 8005002:	4581      	cmp	r9, r0
 8005004:	d13f      	bne.n	8005086 <_malloc_r+0xe6>
 8005006:	6821      	ldr	r1, [r4, #0]
 8005008:	4638      	mov	r0, r7
 800500a:	1a6d      	subs	r5, r5, r1
 800500c:	4629      	mov	r1, r5
 800500e:	f7ff ffa7 	bl	8004f60 <sbrk_aligned>
 8005012:	3001      	adds	r0, #1
 8005014:	d037      	beq.n	8005086 <_malloc_r+0xe6>
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	442b      	add	r3, r5
 800501a:	6023      	str	r3, [r4, #0]
 800501c:	f8d8 3000 	ldr.w	r3, [r8]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d038      	beq.n	8005096 <_malloc_r+0xf6>
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	42a2      	cmp	r2, r4
 8005028:	d12b      	bne.n	8005082 <_malloc_r+0xe2>
 800502a:	2200      	movs	r2, #0
 800502c:	605a      	str	r2, [r3, #4]
 800502e:	e00f      	b.n	8005050 <_malloc_r+0xb0>
 8005030:	6822      	ldr	r2, [r4, #0]
 8005032:	1b52      	subs	r2, r2, r5
 8005034:	d41f      	bmi.n	8005076 <_malloc_r+0xd6>
 8005036:	2a0b      	cmp	r2, #11
 8005038:	d917      	bls.n	800506a <_malloc_r+0xca>
 800503a:	1961      	adds	r1, r4, r5
 800503c:	42a3      	cmp	r3, r4
 800503e:	6025      	str	r5, [r4, #0]
 8005040:	bf18      	it	ne
 8005042:	6059      	strne	r1, [r3, #4]
 8005044:	6863      	ldr	r3, [r4, #4]
 8005046:	bf08      	it	eq
 8005048:	f8c8 1000 	streq.w	r1, [r8]
 800504c:	5162      	str	r2, [r4, r5]
 800504e:	604b      	str	r3, [r1, #4]
 8005050:	4638      	mov	r0, r7
 8005052:	f104 060b 	add.w	r6, r4, #11
 8005056:	f000 f829 	bl	80050ac <__malloc_unlock>
 800505a:	f026 0607 	bic.w	r6, r6, #7
 800505e:	1d23      	adds	r3, r4, #4
 8005060:	1af2      	subs	r2, r6, r3
 8005062:	d0ae      	beq.n	8004fc2 <_malloc_r+0x22>
 8005064:	1b9b      	subs	r3, r3, r6
 8005066:	50a3      	str	r3, [r4, r2]
 8005068:	e7ab      	b.n	8004fc2 <_malloc_r+0x22>
 800506a:	42a3      	cmp	r3, r4
 800506c:	6862      	ldr	r2, [r4, #4]
 800506e:	d1dd      	bne.n	800502c <_malloc_r+0x8c>
 8005070:	f8c8 2000 	str.w	r2, [r8]
 8005074:	e7ec      	b.n	8005050 <_malloc_r+0xb0>
 8005076:	4623      	mov	r3, r4
 8005078:	6864      	ldr	r4, [r4, #4]
 800507a:	e7ac      	b.n	8004fd6 <_malloc_r+0x36>
 800507c:	4634      	mov	r4, r6
 800507e:	6876      	ldr	r6, [r6, #4]
 8005080:	e7b4      	b.n	8004fec <_malloc_r+0x4c>
 8005082:	4613      	mov	r3, r2
 8005084:	e7cc      	b.n	8005020 <_malloc_r+0x80>
 8005086:	230c      	movs	r3, #12
 8005088:	4638      	mov	r0, r7
 800508a:	603b      	str	r3, [r7, #0]
 800508c:	f000 f80e 	bl	80050ac <__malloc_unlock>
 8005090:	e797      	b.n	8004fc2 <_malloc_r+0x22>
 8005092:	6025      	str	r5, [r4, #0]
 8005094:	e7dc      	b.n	8005050 <_malloc_r+0xb0>
 8005096:	605b      	str	r3, [r3, #4]
 8005098:	deff      	udf	#255	; 0xff
 800509a:	bf00      	nop
 800509c:	200003b8 	.word	0x200003b8

080050a0 <__malloc_lock>:
 80050a0:	4801      	ldr	r0, [pc, #4]	; (80050a8 <__malloc_lock+0x8>)
 80050a2:	f7ff b88b 	b.w	80041bc <__retarget_lock_acquire_recursive>
 80050a6:	bf00      	nop
 80050a8:	200003b4 	.word	0x200003b4

080050ac <__malloc_unlock>:
 80050ac:	4801      	ldr	r0, [pc, #4]	; (80050b4 <__malloc_unlock+0x8>)
 80050ae:	f7ff b886 	b.w	80041be <__retarget_lock_release_recursive>
 80050b2:	bf00      	nop
 80050b4:	200003b4 	.word	0x200003b4

080050b8 <_Balloc>:
 80050b8:	b570      	push	{r4, r5, r6, lr}
 80050ba:	69c6      	ldr	r6, [r0, #28]
 80050bc:	4604      	mov	r4, r0
 80050be:	460d      	mov	r5, r1
 80050c0:	b976      	cbnz	r6, 80050e0 <_Balloc+0x28>
 80050c2:	2010      	movs	r0, #16
 80050c4:	f7ff ff44 	bl	8004f50 <malloc>
 80050c8:	4602      	mov	r2, r0
 80050ca:	61e0      	str	r0, [r4, #28]
 80050cc:	b920      	cbnz	r0, 80050d8 <_Balloc+0x20>
 80050ce:	216b      	movs	r1, #107	; 0x6b
 80050d0:	4b17      	ldr	r3, [pc, #92]	; (8005130 <_Balloc+0x78>)
 80050d2:	4818      	ldr	r0, [pc, #96]	; (8005134 <_Balloc+0x7c>)
 80050d4:	f001 ff42 	bl	8006f5c <__assert_func>
 80050d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80050dc:	6006      	str	r6, [r0, #0]
 80050de:	60c6      	str	r6, [r0, #12]
 80050e0:	69e6      	ldr	r6, [r4, #28]
 80050e2:	68f3      	ldr	r3, [r6, #12]
 80050e4:	b183      	cbz	r3, 8005108 <_Balloc+0x50>
 80050e6:	69e3      	ldr	r3, [r4, #28]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80050ee:	b9b8      	cbnz	r0, 8005120 <_Balloc+0x68>
 80050f0:	2101      	movs	r1, #1
 80050f2:	fa01 f605 	lsl.w	r6, r1, r5
 80050f6:	1d72      	adds	r2, r6, #5
 80050f8:	4620      	mov	r0, r4
 80050fa:	0092      	lsls	r2, r2, #2
 80050fc:	f001 ff4c 	bl	8006f98 <_calloc_r>
 8005100:	b160      	cbz	r0, 800511c <_Balloc+0x64>
 8005102:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005106:	e00e      	b.n	8005126 <_Balloc+0x6e>
 8005108:	2221      	movs	r2, #33	; 0x21
 800510a:	2104      	movs	r1, #4
 800510c:	4620      	mov	r0, r4
 800510e:	f001 ff43 	bl	8006f98 <_calloc_r>
 8005112:	69e3      	ldr	r3, [r4, #28]
 8005114:	60f0      	str	r0, [r6, #12]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1e4      	bne.n	80050e6 <_Balloc+0x2e>
 800511c:	2000      	movs	r0, #0
 800511e:	bd70      	pop	{r4, r5, r6, pc}
 8005120:	6802      	ldr	r2, [r0, #0]
 8005122:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005126:	2300      	movs	r3, #0
 8005128:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800512c:	e7f7      	b.n	800511e <_Balloc+0x66>
 800512e:	bf00      	nop
 8005130:	080078a8 	.word	0x080078a8
 8005134:	08007928 	.word	0x08007928

08005138 <_Bfree>:
 8005138:	b570      	push	{r4, r5, r6, lr}
 800513a:	69c6      	ldr	r6, [r0, #28]
 800513c:	4605      	mov	r5, r0
 800513e:	460c      	mov	r4, r1
 8005140:	b976      	cbnz	r6, 8005160 <_Bfree+0x28>
 8005142:	2010      	movs	r0, #16
 8005144:	f7ff ff04 	bl	8004f50 <malloc>
 8005148:	4602      	mov	r2, r0
 800514a:	61e8      	str	r0, [r5, #28]
 800514c:	b920      	cbnz	r0, 8005158 <_Bfree+0x20>
 800514e:	218f      	movs	r1, #143	; 0x8f
 8005150:	4b08      	ldr	r3, [pc, #32]	; (8005174 <_Bfree+0x3c>)
 8005152:	4809      	ldr	r0, [pc, #36]	; (8005178 <_Bfree+0x40>)
 8005154:	f001 ff02 	bl	8006f5c <__assert_func>
 8005158:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800515c:	6006      	str	r6, [r0, #0]
 800515e:	60c6      	str	r6, [r0, #12]
 8005160:	b13c      	cbz	r4, 8005172 <_Bfree+0x3a>
 8005162:	69eb      	ldr	r3, [r5, #28]
 8005164:	6862      	ldr	r2, [r4, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800516c:	6021      	str	r1, [r4, #0]
 800516e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005172:	bd70      	pop	{r4, r5, r6, pc}
 8005174:	080078a8 	.word	0x080078a8
 8005178:	08007928 	.word	0x08007928

0800517c <__multadd>:
 800517c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005180:	4607      	mov	r7, r0
 8005182:	460c      	mov	r4, r1
 8005184:	461e      	mov	r6, r3
 8005186:	2000      	movs	r0, #0
 8005188:	690d      	ldr	r5, [r1, #16]
 800518a:	f101 0c14 	add.w	ip, r1, #20
 800518e:	f8dc 3000 	ldr.w	r3, [ip]
 8005192:	3001      	adds	r0, #1
 8005194:	b299      	uxth	r1, r3
 8005196:	fb02 6101 	mla	r1, r2, r1, r6
 800519a:	0c1e      	lsrs	r6, r3, #16
 800519c:	0c0b      	lsrs	r3, r1, #16
 800519e:	fb02 3306 	mla	r3, r2, r6, r3
 80051a2:	b289      	uxth	r1, r1
 80051a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80051a8:	4285      	cmp	r5, r0
 80051aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80051ae:	f84c 1b04 	str.w	r1, [ip], #4
 80051b2:	dcec      	bgt.n	800518e <__multadd+0x12>
 80051b4:	b30e      	cbz	r6, 80051fa <__multadd+0x7e>
 80051b6:	68a3      	ldr	r3, [r4, #8]
 80051b8:	42ab      	cmp	r3, r5
 80051ba:	dc19      	bgt.n	80051f0 <__multadd+0x74>
 80051bc:	6861      	ldr	r1, [r4, #4]
 80051be:	4638      	mov	r0, r7
 80051c0:	3101      	adds	r1, #1
 80051c2:	f7ff ff79 	bl	80050b8 <_Balloc>
 80051c6:	4680      	mov	r8, r0
 80051c8:	b928      	cbnz	r0, 80051d6 <__multadd+0x5a>
 80051ca:	4602      	mov	r2, r0
 80051cc:	21ba      	movs	r1, #186	; 0xba
 80051ce:	4b0c      	ldr	r3, [pc, #48]	; (8005200 <__multadd+0x84>)
 80051d0:	480c      	ldr	r0, [pc, #48]	; (8005204 <__multadd+0x88>)
 80051d2:	f001 fec3 	bl	8006f5c <__assert_func>
 80051d6:	6922      	ldr	r2, [r4, #16]
 80051d8:	f104 010c 	add.w	r1, r4, #12
 80051dc:	3202      	adds	r2, #2
 80051de:	0092      	lsls	r2, r2, #2
 80051e0:	300c      	adds	r0, #12
 80051e2:	f001 fea7 	bl	8006f34 <memcpy>
 80051e6:	4621      	mov	r1, r4
 80051e8:	4638      	mov	r0, r7
 80051ea:	f7ff ffa5 	bl	8005138 <_Bfree>
 80051ee:	4644      	mov	r4, r8
 80051f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80051f4:	3501      	adds	r5, #1
 80051f6:	615e      	str	r6, [r3, #20]
 80051f8:	6125      	str	r5, [r4, #16]
 80051fa:	4620      	mov	r0, r4
 80051fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005200:	08007917 	.word	0x08007917
 8005204:	08007928 	.word	0x08007928

08005208 <__s2b>:
 8005208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800520c:	4615      	mov	r5, r2
 800520e:	2209      	movs	r2, #9
 8005210:	461f      	mov	r7, r3
 8005212:	3308      	adds	r3, #8
 8005214:	460c      	mov	r4, r1
 8005216:	fb93 f3f2 	sdiv	r3, r3, r2
 800521a:	4606      	mov	r6, r0
 800521c:	2201      	movs	r2, #1
 800521e:	2100      	movs	r1, #0
 8005220:	429a      	cmp	r2, r3
 8005222:	db09      	blt.n	8005238 <__s2b+0x30>
 8005224:	4630      	mov	r0, r6
 8005226:	f7ff ff47 	bl	80050b8 <_Balloc>
 800522a:	b940      	cbnz	r0, 800523e <__s2b+0x36>
 800522c:	4602      	mov	r2, r0
 800522e:	21d3      	movs	r1, #211	; 0xd3
 8005230:	4b18      	ldr	r3, [pc, #96]	; (8005294 <__s2b+0x8c>)
 8005232:	4819      	ldr	r0, [pc, #100]	; (8005298 <__s2b+0x90>)
 8005234:	f001 fe92 	bl	8006f5c <__assert_func>
 8005238:	0052      	lsls	r2, r2, #1
 800523a:	3101      	adds	r1, #1
 800523c:	e7f0      	b.n	8005220 <__s2b+0x18>
 800523e:	9b08      	ldr	r3, [sp, #32]
 8005240:	2d09      	cmp	r5, #9
 8005242:	6143      	str	r3, [r0, #20]
 8005244:	f04f 0301 	mov.w	r3, #1
 8005248:	6103      	str	r3, [r0, #16]
 800524a:	dd16      	ble.n	800527a <__s2b+0x72>
 800524c:	f104 0909 	add.w	r9, r4, #9
 8005250:	46c8      	mov	r8, r9
 8005252:	442c      	add	r4, r5
 8005254:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005258:	4601      	mov	r1, r0
 800525a:	220a      	movs	r2, #10
 800525c:	4630      	mov	r0, r6
 800525e:	3b30      	subs	r3, #48	; 0x30
 8005260:	f7ff ff8c 	bl	800517c <__multadd>
 8005264:	45a0      	cmp	r8, r4
 8005266:	d1f5      	bne.n	8005254 <__s2b+0x4c>
 8005268:	f1a5 0408 	sub.w	r4, r5, #8
 800526c:	444c      	add	r4, r9
 800526e:	1b2d      	subs	r5, r5, r4
 8005270:	1963      	adds	r3, r4, r5
 8005272:	42bb      	cmp	r3, r7
 8005274:	db04      	blt.n	8005280 <__s2b+0x78>
 8005276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800527a:	2509      	movs	r5, #9
 800527c:	340a      	adds	r4, #10
 800527e:	e7f6      	b.n	800526e <__s2b+0x66>
 8005280:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005284:	4601      	mov	r1, r0
 8005286:	220a      	movs	r2, #10
 8005288:	4630      	mov	r0, r6
 800528a:	3b30      	subs	r3, #48	; 0x30
 800528c:	f7ff ff76 	bl	800517c <__multadd>
 8005290:	e7ee      	b.n	8005270 <__s2b+0x68>
 8005292:	bf00      	nop
 8005294:	08007917 	.word	0x08007917
 8005298:	08007928 	.word	0x08007928

0800529c <__hi0bits>:
 800529c:	0c02      	lsrs	r2, r0, #16
 800529e:	0412      	lsls	r2, r2, #16
 80052a0:	4603      	mov	r3, r0
 80052a2:	b9ca      	cbnz	r2, 80052d8 <__hi0bits+0x3c>
 80052a4:	0403      	lsls	r3, r0, #16
 80052a6:	2010      	movs	r0, #16
 80052a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80052ac:	bf04      	itt	eq
 80052ae:	021b      	lsleq	r3, r3, #8
 80052b0:	3008      	addeq	r0, #8
 80052b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80052b6:	bf04      	itt	eq
 80052b8:	011b      	lsleq	r3, r3, #4
 80052ba:	3004      	addeq	r0, #4
 80052bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80052c0:	bf04      	itt	eq
 80052c2:	009b      	lsleq	r3, r3, #2
 80052c4:	3002      	addeq	r0, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	db05      	blt.n	80052d6 <__hi0bits+0x3a>
 80052ca:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80052ce:	f100 0001 	add.w	r0, r0, #1
 80052d2:	bf08      	it	eq
 80052d4:	2020      	moveq	r0, #32
 80052d6:	4770      	bx	lr
 80052d8:	2000      	movs	r0, #0
 80052da:	e7e5      	b.n	80052a8 <__hi0bits+0xc>

080052dc <__lo0bits>:
 80052dc:	6803      	ldr	r3, [r0, #0]
 80052de:	4602      	mov	r2, r0
 80052e0:	f013 0007 	ands.w	r0, r3, #7
 80052e4:	d00b      	beq.n	80052fe <__lo0bits+0x22>
 80052e6:	07d9      	lsls	r1, r3, #31
 80052e8:	d421      	bmi.n	800532e <__lo0bits+0x52>
 80052ea:	0798      	lsls	r0, r3, #30
 80052ec:	bf49      	itett	mi
 80052ee:	085b      	lsrmi	r3, r3, #1
 80052f0:	089b      	lsrpl	r3, r3, #2
 80052f2:	2001      	movmi	r0, #1
 80052f4:	6013      	strmi	r3, [r2, #0]
 80052f6:	bf5c      	itt	pl
 80052f8:	2002      	movpl	r0, #2
 80052fa:	6013      	strpl	r3, [r2, #0]
 80052fc:	4770      	bx	lr
 80052fe:	b299      	uxth	r1, r3
 8005300:	b909      	cbnz	r1, 8005306 <__lo0bits+0x2a>
 8005302:	2010      	movs	r0, #16
 8005304:	0c1b      	lsrs	r3, r3, #16
 8005306:	b2d9      	uxtb	r1, r3
 8005308:	b909      	cbnz	r1, 800530e <__lo0bits+0x32>
 800530a:	3008      	adds	r0, #8
 800530c:	0a1b      	lsrs	r3, r3, #8
 800530e:	0719      	lsls	r1, r3, #28
 8005310:	bf04      	itt	eq
 8005312:	091b      	lsreq	r3, r3, #4
 8005314:	3004      	addeq	r0, #4
 8005316:	0799      	lsls	r1, r3, #30
 8005318:	bf04      	itt	eq
 800531a:	089b      	lsreq	r3, r3, #2
 800531c:	3002      	addeq	r0, #2
 800531e:	07d9      	lsls	r1, r3, #31
 8005320:	d403      	bmi.n	800532a <__lo0bits+0x4e>
 8005322:	085b      	lsrs	r3, r3, #1
 8005324:	f100 0001 	add.w	r0, r0, #1
 8005328:	d003      	beq.n	8005332 <__lo0bits+0x56>
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	4770      	bx	lr
 800532e:	2000      	movs	r0, #0
 8005330:	4770      	bx	lr
 8005332:	2020      	movs	r0, #32
 8005334:	4770      	bx	lr
	...

08005338 <__i2b>:
 8005338:	b510      	push	{r4, lr}
 800533a:	460c      	mov	r4, r1
 800533c:	2101      	movs	r1, #1
 800533e:	f7ff febb 	bl	80050b8 <_Balloc>
 8005342:	4602      	mov	r2, r0
 8005344:	b928      	cbnz	r0, 8005352 <__i2b+0x1a>
 8005346:	f240 1145 	movw	r1, #325	; 0x145
 800534a:	4b04      	ldr	r3, [pc, #16]	; (800535c <__i2b+0x24>)
 800534c:	4804      	ldr	r0, [pc, #16]	; (8005360 <__i2b+0x28>)
 800534e:	f001 fe05 	bl	8006f5c <__assert_func>
 8005352:	2301      	movs	r3, #1
 8005354:	6144      	str	r4, [r0, #20]
 8005356:	6103      	str	r3, [r0, #16]
 8005358:	bd10      	pop	{r4, pc}
 800535a:	bf00      	nop
 800535c:	08007917 	.word	0x08007917
 8005360:	08007928 	.word	0x08007928

08005364 <__multiply>:
 8005364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005368:	4691      	mov	r9, r2
 800536a:	690a      	ldr	r2, [r1, #16]
 800536c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005370:	460c      	mov	r4, r1
 8005372:	429a      	cmp	r2, r3
 8005374:	bfbe      	ittt	lt
 8005376:	460b      	movlt	r3, r1
 8005378:	464c      	movlt	r4, r9
 800537a:	4699      	movlt	r9, r3
 800537c:	6927      	ldr	r7, [r4, #16]
 800537e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005382:	68a3      	ldr	r3, [r4, #8]
 8005384:	6861      	ldr	r1, [r4, #4]
 8005386:	eb07 060a 	add.w	r6, r7, sl
 800538a:	42b3      	cmp	r3, r6
 800538c:	b085      	sub	sp, #20
 800538e:	bfb8      	it	lt
 8005390:	3101      	addlt	r1, #1
 8005392:	f7ff fe91 	bl	80050b8 <_Balloc>
 8005396:	b930      	cbnz	r0, 80053a6 <__multiply+0x42>
 8005398:	4602      	mov	r2, r0
 800539a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800539e:	4b43      	ldr	r3, [pc, #268]	; (80054ac <__multiply+0x148>)
 80053a0:	4843      	ldr	r0, [pc, #268]	; (80054b0 <__multiply+0x14c>)
 80053a2:	f001 fddb 	bl	8006f5c <__assert_func>
 80053a6:	f100 0514 	add.w	r5, r0, #20
 80053aa:	462b      	mov	r3, r5
 80053ac:	2200      	movs	r2, #0
 80053ae:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80053b2:	4543      	cmp	r3, r8
 80053b4:	d321      	bcc.n	80053fa <__multiply+0x96>
 80053b6:	f104 0314 	add.w	r3, r4, #20
 80053ba:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80053be:	f109 0314 	add.w	r3, r9, #20
 80053c2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80053c6:	9202      	str	r2, [sp, #8]
 80053c8:	1b3a      	subs	r2, r7, r4
 80053ca:	3a15      	subs	r2, #21
 80053cc:	f022 0203 	bic.w	r2, r2, #3
 80053d0:	3204      	adds	r2, #4
 80053d2:	f104 0115 	add.w	r1, r4, #21
 80053d6:	428f      	cmp	r7, r1
 80053d8:	bf38      	it	cc
 80053da:	2204      	movcc	r2, #4
 80053dc:	9201      	str	r2, [sp, #4]
 80053de:	9a02      	ldr	r2, [sp, #8]
 80053e0:	9303      	str	r3, [sp, #12]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d80c      	bhi.n	8005400 <__multiply+0x9c>
 80053e6:	2e00      	cmp	r6, #0
 80053e8:	dd03      	ble.n	80053f2 <__multiply+0x8e>
 80053ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d05a      	beq.n	80054a8 <__multiply+0x144>
 80053f2:	6106      	str	r6, [r0, #16]
 80053f4:	b005      	add	sp, #20
 80053f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053fa:	f843 2b04 	str.w	r2, [r3], #4
 80053fe:	e7d8      	b.n	80053b2 <__multiply+0x4e>
 8005400:	f8b3 a000 	ldrh.w	sl, [r3]
 8005404:	f1ba 0f00 	cmp.w	sl, #0
 8005408:	d023      	beq.n	8005452 <__multiply+0xee>
 800540a:	46a9      	mov	r9, r5
 800540c:	f04f 0c00 	mov.w	ip, #0
 8005410:	f104 0e14 	add.w	lr, r4, #20
 8005414:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005418:	f8d9 1000 	ldr.w	r1, [r9]
 800541c:	fa1f fb82 	uxth.w	fp, r2
 8005420:	b289      	uxth	r1, r1
 8005422:	fb0a 110b 	mla	r1, sl, fp, r1
 8005426:	4461      	add	r1, ip
 8005428:	f8d9 c000 	ldr.w	ip, [r9]
 800542c:	0c12      	lsrs	r2, r2, #16
 800542e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005432:	fb0a c202 	mla	r2, sl, r2, ip
 8005436:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800543a:	b289      	uxth	r1, r1
 800543c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005440:	4577      	cmp	r7, lr
 8005442:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005446:	f849 1b04 	str.w	r1, [r9], #4
 800544a:	d8e3      	bhi.n	8005414 <__multiply+0xb0>
 800544c:	9a01      	ldr	r2, [sp, #4]
 800544e:	f845 c002 	str.w	ip, [r5, r2]
 8005452:	9a03      	ldr	r2, [sp, #12]
 8005454:	3304      	adds	r3, #4
 8005456:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800545a:	f1b9 0f00 	cmp.w	r9, #0
 800545e:	d021      	beq.n	80054a4 <__multiply+0x140>
 8005460:	46ae      	mov	lr, r5
 8005462:	f04f 0a00 	mov.w	sl, #0
 8005466:	6829      	ldr	r1, [r5, #0]
 8005468:	f104 0c14 	add.w	ip, r4, #20
 800546c:	f8bc b000 	ldrh.w	fp, [ip]
 8005470:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005474:	b289      	uxth	r1, r1
 8005476:	fb09 220b 	mla	r2, r9, fp, r2
 800547a:	4452      	add	r2, sl
 800547c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005480:	f84e 1b04 	str.w	r1, [lr], #4
 8005484:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005488:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800548c:	f8be 1000 	ldrh.w	r1, [lr]
 8005490:	4567      	cmp	r7, ip
 8005492:	fb09 110a 	mla	r1, r9, sl, r1
 8005496:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800549a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800549e:	d8e5      	bhi.n	800546c <__multiply+0x108>
 80054a0:	9a01      	ldr	r2, [sp, #4]
 80054a2:	50a9      	str	r1, [r5, r2]
 80054a4:	3504      	adds	r5, #4
 80054a6:	e79a      	b.n	80053de <__multiply+0x7a>
 80054a8:	3e01      	subs	r6, #1
 80054aa:	e79c      	b.n	80053e6 <__multiply+0x82>
 80054ac:	08007917 	.word	0x08007917
 80054b0:	08007928 	.word	0x08007928

080054b4 <__pow5mult>:
 80054b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054b8:	4615      	mov	r5, r2
 80054ba:	f012 0203 	ands.w	r2, r2, #3
 80054be:	4606      	mov	r6, r0
 80054c0:	460f      	mov	r7, r1
 80054c2:	d007      	beq.n	80054d4 <__pow5mult+0x20>
 80054c4:	4c25      	ldr	r4, [pc, #148]	; (800555c <__pow5mult+0xa8>)
 80054c6:	3a01      	subs	r2, #1
 80054c8:	2300      	movs	r3, #0
 80054ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80054ce:	f7ff fe55 	bl	800517c <__multadd>
 80054d2:	4607      	mov	r7, r0
 80054d4:	10ad      	asrs	r5, r5, #2
 80054d6:	d03d      	beq.n	8005554 <__pow5mult+0xa0>
 80054d8:	69f4      	ldr	r4, [r6, #28]
 80054da:	b97c      	cbnz	r4, 80054fc <__pow5mult+0x48>
 80054dc:	2010      	movs	r0, #16
 80054de:	f7ff fd37 	bl	8004f50 <malloc>
 80054e2:	4602      	mov	r2, r0
 80054e4:	61f0      	str	r0, [r6, #28]
 80054e6:	b928      	cbnz	r0, 80054f4 <__pow5mult+0x40>
 80054e8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80054ec:	4b1c      	ldr	r3, [pc, #112]	; (8005560 <__pow5mult+0xac>)
 80054ee:	481d      	ldr	r0, [pc, #116]	; (8005564 <__pow5mult+0xb0>)
 80054f0:	f001 fd34 	bl	8006f5c <__assert_func>
 80054f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80054f8:	6004      	str	r4, [r0, #0]
 80054fa:	60c4      	str	r4, [r0, #12]
 80054fc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005500:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005504:	b94c      	cbnz	r4, 800551a <__pow5mult+0x66>
 8005506:	f240 2171 	movw	r1, #625	; 0x271
 800550a:	4630      	mov	r0, r6
 800550c:	f7ff ff14 	bl	8005338 <__i2b>
 8005510:	2300      	movs	r3, #0
 8005512:	4604      	mov	r4, r0
 8005514:	f8c8 0008 	str.w	r0, [r8, #8]
 8005518:	6003      	str	r3, [r0, #0]
 800551a:	f04f 0900 	mov.w	r9, #0
 800551e:	07eb      	lsls	r3, r5, #31
 8005520:	d50a      	bpl.n	8005538 <__pow5mult+0x84>
 8005522:	4639      	mov	r1, r7
 8005524:	4622      	mov	r2, r4
 8005526:	4630      	mov	r0, r6
 8005528:	f7ff ff1c 	bl	8005364 <__multiply>
 800552c:	4680      	mov	r8, r0
 800552e:	4639      	mov	r1, r7
 8005530:	4630      	mov	r0, r6
 8005532:	f7ff fe01 	bl	8005138 <_Bfree>
 8005536:	4647      	mov	r7, r8
 8005538:	106d      	asrs	r5, r5, #1
 800553a:	d00b      	beq.n	8005554 <__pow5mult+0xa0>
 800553c:	6820      	ldr	r0, [r4, #0]
 800553e:	b938      	cbnz	r0, 8005550 <__pow5mult+0x9c>
 8005540:	4622      	mov	r2, r4
 8005542:	4621      	mov	r1, r4
 8005544:	4630      	mov	r0, r6
 8005546:	f7ff ff0d 	bl	8005364 <__multiply>
 800554a:	6020      	str	r0, [r4, #0]
 800554c:	f8c0 9000 	str.w	r9, [r0]
 8005550:	4604      	mov	r4, r0
 8005552:	e7e4      	b.n	800551e <__pow5mult+0x6a>
 8005554:	4638      	mov	r0, r7
 8005556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800555a:	bf00      	nop
 800555c:	08007a78 	.word	0x08007a78
 8005560:	080078a8 	.word	0x080078a8
 8005564:	08007928 	.word	0x08007928

08005568 <__lshift>:
 8005568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800556c:	460c      	mov	r4, r1
 800556e:	4607      	mov	r7, r0
 8005570:	4691      	mov	r9, r2
 8005572:	6923      	ldr	r3, [r4, #16]
 8005574:	6849      	ldr	r1, [r1, #4]
 8005576:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800557a:	68a3      	ldr	r3, [r4, #8]
 800557c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005580:	f108 0601 	add.w	r6, r8, #1
 8005584:	42b3      	cmp	r3, r6
 8005586:	db0b      	blt.n	80055a0 <__lshift+0x38>
 8005588:	4638      	mov	r0, r7
 800558a:	f7ff fd95 	bl	80050b8 <_Balloc>
 800558e:	4605      	mov	r5, r0
 8005590:	b948      	cbnz	r0, 80055a6 <__lshift+0x3e>
 8005592:	4602      	mov	r2, r0
 8005594:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005598:	4b27      	ldr	r3, [pc, #156]	; (8005638 <__lshift+0xd0>)
 800559a:	4828      	ldr	r0, [pc, #160]	; (800563c <__lshift+0xd4>)
 800559c:	f001 fcde 	bl	8006f5c <__assert_func>
 80055a0:	3101      	adds	r1, #1
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	e7ee      	b.n	8005584 <__lshift+0x1c>
 80055a6:	2300      	movs	r3, #0
 80055a8:	f100 0114 	add.w	r1, r0, #20
 80055ac:	f100 0210 	add.w	r2, r0, #16
 80055b0:	4618      	mov	r0, r3
 80055b2:	4553      	cmp	r3, sl
 80055b4:	db33      	blt.n	800561e <__lshift+0xb6>
 80055b6:	6920      	ldr	r0, [r4, #16]
 80055b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80055bc:	f104 0314 	add.w	r3, r4, #20
 80055c0:	f019 091f 	ands.w	r9, r9, #31
 80055c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80055c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80055cc:	d02b      	beq.n	8005626 <__lshift+0xbe>
 80055ce:	468a      	mov	sl, r1
 80055d0:	2200      	movs	r2, #0
 80055d2:	f1c9 0e20 	rsb	lr, r9, #32
 80055d6:	6818      	ldr	r0, [r3, #0]
 80055d8:	fa00 f009 	lsl.w	r0, r0, r9
 80055dc:	4310      	orrs	r0, r2
 80055de:	f84a 0b04 	str.w	r0, [sl], #4
 80055e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80055e6:	459c      	cmp	ip, r3
 80055e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80055ec:	d8f3      	bhi.n	80055d6 <__lshift+0x6e>
 80055ee:	ebac 0304 	sub.w	r3, ip, r4
 80055f2:	3b15      	subs	r3, #21
 80055f4:	f023 0303 	bic.w	r3, r3, #3
 80055f8:	3304      	adds	r3, #4
 80055fa:	f104 0015 	add.w	r0, r4, #21
 80055fe:	4584      	cmp	ip, r0
 8005600:	bf38      	it	cc
 8005602:	2304      	movcc	r3, #4
 8005604:	50ca      	str	r2, [r1, r3]
 8005606:	b10a      	cbz	r2, 800560c <__lshift+0xa4>
 8005608:	f108 0602 	add.w	r6, r8, #2
 800560c:	3e01      	subs	r6, #1
 800560e:	4638      	mov	r0, r7
 8005610:	4621      	mov	r1, r4
 8005612:	612e      	str	r6, [r5, #16]
 8005614:	f7ff fd90 	bl	8005138 <_Bfree>
 8005618:	4628      	mov	r0, r5
 800561a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800561e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005622:	3301      	adds	r3, #1
 8005624:	e7c5      	b.n	80055b2 <__lshift+0x4a>
 8005626:	3904      	subs	r1, #4
 8005628:	f853 2b04 	ldr.w	r2, [r3], #4
 800562c:	459c      	cmp	ip, r3
 800562e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005632:	d8f9      	bhi.n	8005628 <__lshift+0xc0>
 8005634:	e7ea      	b.n	800560c <__lshift+0xa4>
 8005636:	bf00      	nop
 8005638:	08007917 	.word	0x08007917
 800563c:	08007928 	.word	0x08007928

08005640 <__mcmp>:
 8005640:	4603      	mov	r3, r0
 8005642:	690a      	ldr	r2, [r1, #16]
 8005644:	6900      	ldr	r0, [r0, #16]
 8005646:	b530      	push	{r4, r5, lr}
 8005648:	1a80      	subs	r0, r0, r2
 800564a:	d10d      	bne.n	8005668 <__mcmp+0x28>
 800564c:	3314      	adds	r3, #20
 800564e:	3114      	adds	r1, #20
 8005650:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005654:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005658:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800565c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005660:	4295      	cmp	r5, r2
 8005662:	d002      	beq.n	800566a <__mcmp+0x2a>
 8005664:	d304      	bcc.n	8005670 <__mcmp+0x30>
 8005666:	2001      	movs	r0, #1
 8005668:	bd30      	pop	{r4, r5, pc}
 800566a:	42a3      	cmp	r3, r4
 800566c:	d3f4      	bcc.n	8005658 <__mcmp+0x18>
 800566e:	e7fb      	b.n	8005668 <__mcmp+0x28>
 8005670:	f04f 30ff 	mov.w	r0, #4294967295
 8005674:	e7f8      	b.n	8005668 <__mcmp+0x28>
	...

08005678 <__mdiff>:
 8005678:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800567c:	460d      	mov	r5, r1
 800567e:	4607      	mov	r7, r0
 8005680:	4611      	mov	r1, r2
 8005682:	4628      	mov	r0, r5
 8005684:	4614      	mov	r4, r2
 8005686:	f7ff ffdb 	bl	8005640 <__mcmp>
 800568a:	1e06      	subs	r6, r0, #0
 800568c:	d111      	bne.n	80056b2 <__mdiff+0x3a>
 800568e:	4631      	mov	r1, r6
 8005690:	4638      	mov	r0, r7
 8005692:	f7ff fd11 	bl	80050b8 <_Balloc>
 8005696:	4602      	mov	r2, r0
 8005698:	b928      	cbnz	r0, 80056a6 <__mdiff+0x2e>
 800569a:	f240 2137 	movw	r1, #567	; 0x237
 800569e:	4b3a      	ldr	r3, [pc, #232]	; (8005788 <__mdiff+0x110>)
 80056a0:	483a      	ldr	r0, [pc, #232]	; (800578c <__mdiff+0x114>)
 80056a2:	f001 fc5b 	bl	8006f5c <__assert_func>
 80056a6:	2301      	movs	r3, #1
 80056a8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80056ac:	4610      	mov	r0, r2
 80056ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056b2:	bfa4      	itt	ge
 80056b4:	4623      	movge	r3, r4
 80056b6:	462c      	movge	r4, r5
 80056b8:	4638      	mov	r0, r7
 80056ba:	6861      	ldr	r1, [r4, #4]
 80056bc:	bfa6      	itte	ge
 80056be:	461d      	movge	r5, r3
 80056c0:	2600      	movge	r6, #0
 80056c2:	2601      	movlt	r6, #1
 80056c4:	f7ff fcf8 	bl	80050b8 <_Balloc>
 80056c8:	4602      	mov	r2, r0
 80056ca:	b918      	cbnz	r0, 80056d4 <__mdiff+0x5c>
 80056cc:	f240 2145 	movw	r1, #581	; 0x245
 80056d0:	4b2d      	ldr	r3, [pc, #180]	; (8005788 <__mdiff+0x110>)
 80056d2:	e7e5      	b.n	80056a0 <__mdiff+0x28>
 80056d4:	f102 0814 	add.w	r8, r2, #20
 80056d8:	46c2      	mov	sl, r8
 80056da:	f04f 0c00 	mov.w	ip, #0
 80056de:	6927      	ldr	r7, [r4, #16]
 80056e0:	60c6      	str	r6, [r0, #12]
 80056e2:	692e      	ldr	r6, [r5, #16]
 80056e4:	f104 0014 	add.w	r0, r4, #20
 80056e8:	f105 0914 	add.w	r9, r5, #20
 80056ec:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80056f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80056f4:	3410      	adds	r4, #16
 80056f6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80056fa:	f859 3b04 	ldr.w	r3, [r9], #4
 80056fe:	fa1f f18b 	uxth.w	r1, fp
 8005702:	4461      	add	r1, ip
 8005704:	fa1f fc83 	uxth.w	ip, r3
 8005708:	0c1b      	lsrs	r3, r3, #16
 800570a:	eba1 010c 	sub.w	r1, r1, ip
 800570e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005712:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005716:	b289      	uxth	r1, r1
 8005718:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800571c:	454e      	cmp	r6, r9
 800571e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005722:	f84a 1b04 	str.w	r1, [sl], #4
 8005726:	d8e6      	bhi.n	80056f6 <__mdiff+0x7e>
 8005728:	1b73      	subs	r3, r6, r5
 800572a:	3b15      	subs	r3, #21
 800572c:	f023 0303 	bic.w	r3, r3, #3
 8005730:	3515      	adds	r5, #21
 8005732:	3304      	adds	r3, #4
 8005734:	42ae      	cmp	r6, r5
 8005736:	bf38      	it	cc
 8005738:	2304      	movcc	r3, #4
 800573a:	4418      	add	r0, r3
 800573c:	4443      	add	r3, r8
 800573e:	461e      	mov	r6, r3
 8005740:	4605      	mov	r5, r0
 8005742:	4575      	cmp	r5, lr
 8005744:	d30e      	bcc.n	8005764 <__mdiff+0xec>
 8005746:	f10e 0103 	add.w	r1, lr, #3
 800574a:	1a09      	subs	r1, r1, r0
 800574c:	f021 0103 	bic.w	r1, r1, #3
 8005750:	3803      	subs	r0, #3
 8005752:	4586      	cmp	lr, r0
 8005754:	bf38      	it	cc
 8005756:	2100      	movcc	r1, #0
 8005758:	440b      	add	r3, r1
 800575a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800575e:	b189      	cbz	r1, 8005784 <__mdiff+0x10c>
 8005760:	6117      	str	r7, [r2, #16]
 8005762:	e7a3      	b.n	80056ac <__mdiff+0x34>
 8005764:	f855 8b04 	ldr.w	r8, [r5], #4
 8005768:	fa1f f188 	uxth.w	r1, r8
 800576c:	4461      	add	r1, ip
 800576e:	140c      	asrs	r4, r1, #16
 8005770:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005774:	b289      	uxth	r1, r1
 8005776:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800577a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800577e:	f846 1b04 	str.w	r1, [r6], #4
 8005782:	e7de      	b.n	8005742 <__mdiff+0xca>
 8005784:	3f01      	subs	r7, #1
 8005786:	e7e8      	b.n	800575a <__mdiff+0xe2>
 8005788:	08007917 	.word	0x08007917
 800578c:	08007928 	.word	0x08007928

08005790 <__ulp>:
 8005790:	4b0e      	ldr	r3, [pc, #56]	; (80057cc <__ulp+0x3c>)
 8005792:	400b      	ands	r3, r1
 8005794:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8005798:	2b00      	cmp	r3, #0
 800579a:	dc08      	bgt.n	80057ae <__ulp+0x1e>
 800579c:	425b      	negs	r3, r3
 800579e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80057a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80057a6:	da04      	bge.n	80057b2 <__ulp+0x22>
 80057a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80057ac:	4113      	asrs	r3, r2
 80057ae:	2200      	movs	r2, #0
 80057b0:	e008      	b.n	80057c4 <__ulp+0x34>
 80057b2:	f1a2 0314 	sub.w	r3, r2, #20
 80057b6:	2b1e      	cmp	r3, #30
 80057b8:	bfd6      	itet	le
 80057ba:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80057be:	2201      	movgt	r2, #1
 80057c0:	40da      	lsrle	r2, r3
 80057c2:	2300      	movs	r3, #0
 80057c4:	4619      	mov	r1, r3
 80057c6:	4610      	mov	r0, r2
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	7ff00000 	.word	0x7ff00000

080057d0 <__b2d>:
 80057d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d2:	6905      	ldr	r5, [r0, #16]
 80057d4:	f100 0714 	add.w	r7, r0, #20
 80057d8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80057dc:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80057e0:	1f2e      	subs	r6, r5, #4
 80057e2:	4620      	mov	r0, r4
 80057e4:	f7ff fd5a 	bl	800529c <__hi0bits>
 80057e8:	f1c0 0220 	rsb	r2, r0, #32
 80057ec:	280a      	cmp	r0, #10
 80057ee:	4603      	mov	r3, r0
 80057f0:	f8df c068 	ldr.w	ip, [pc, #104]	; 800585c <__b2d+0x8c>
 80057f4:	600a      	str	r2, [r1, #0]
 80057f6:	dc12      	bgt.n	800581e <__b2d+0x4e>
 80057f8:	f1c0 0e0b 	rsb	lr, r0, #11
 80057fc:	fa24 f20e 	lsr.w	r2, r4, lr
 8005800:	42b7      	cmp	r7, r6
 8005802:	ea42 010c 	orr.w	r1, r2, ip
 8005806:	bf2c      	ite	cs
 8005808:	2200      	movcs	r2, #0
 800580a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800580e:	3315      	adds	r3, #21
 8005810:	fa04 f303 	lsl.w	r3, r4, r3
 8005814:	fa22 f20e 	lsr.w	r2, r2, lr
 8005818:	431a      	orrs	r2, r3
 800581a:	4610      	mov	r0, r2
 800581c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800581e:	42b7      	cmp	r7, r6
 8005820:	bf2e      	itee	cs
 8005822:	2200      	movcs	r2, #0
 8005824:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8005828:	f1a5 0608 	subcc.w	r6, r5, #8
 800582c:	3b0b      	subs	r3, #11
 800582e:	d012      	beq.n	8005856 <__b2d+0x86>
 8005830:	f1c3 0520 	rsb	r5, r3, #32
 8005834:	fa22 f105 	lsr.w	r1, r2, r5
 8005838:	409c      	lsls	r4, r3
 800583a:	430c      	orrs	r4, r1
 800583c:	42be      	cmp	r6, r7
 800583e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8005842:	bf94      	ite	ls
 8005844:	2400      	movls	r4, #0
 8005846:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800584a:	409a      	lsls	r2, r3
 800584c:	40ec      	lsrs	r4, r5
 800584e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005852:	4322      	orrs	r2, r4
 8005854:	e7e1      	b.n	800581a <__b2d+0x4a>
 8005856:	ea44 010c 	orr.w	r1, r4, ip
 800585a:	e7de      	b.n	800581a <__b2d+0x4a>
 800585c:	3ff00000 	.word	0x3ff00000

08005860 <__d2b>:
 8005860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005862:	2101      	movs	r1, #1
 8005864:	4617      	mov	r7, r2
 8005866:	461c      	mov	r4, r3
 8005868:	9e08      	ldr	r6, [sp, #32]
 800586a:	f7ff fc25 	bl	80050b8 <_Balloc>
 800586e:	4605      	mov	r5, r0
 8005870:	b930      	cbnz	r0, 8005880 <__d2b+0x20>
 8005872:	4602      	mov	r2, r0
 8005874:	f240 310f 	movw	r1, #783	; 0x30f
 8005878:	4b22      	ldr	r3, [pc, #136]	; (8005904 <__d2b+0xa4>)
 800587a:	4823      	ldr	r0, [pc, #140]	; (8005908 <__d2b+0xa8>)
 800587c:	f001 fb6e 	bl	8006f5c <__assert_func>
 8005880:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005884:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005888:	bb24      	cbnz	r4, 80058d4 <__d2b+0x74>
 800588a:	2f00      	cmp	r7, #0
 800588c:	9301      	str	r3, [sp, #4]
 800588e:	d026      	beq.n	80058de <__d2b+0x7e>
 8005890:	4668      	mov	r0, sp
 8005892:	9700      	str	r7, [sp, #0]
 8005894:	f7ff fd22 	bl	80052dc <__lo0bits>
 8005898:	e9dd 1200 	ldrd	r1, r2, [sp]
 800589c:	b1e8      	cbz	r0, 80058da <__d2b+0x7a>
 800589e:	f1c0 0320 	rsb	r3, r0, #32
 80058a2:	fa02 f303 	lsl.w	r3, r2, r3
 80058a6:	430b      	orrs	r3, r1
 80058a8:	40c2      	lsrs	r2, r0
 80058aa:	616b      	str	r3, [r5, #20]
 80058ac:	9201      	str	r2, [sp, #4]
 80058ae:	9b01      	ldr	r3, [sp, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	bf14      	ite	ne
 80058b4:	2102      	movne	r1, #2
 80058b6:	2101      	moveq	r1, #1
 80058b8:	61ab      	str	r3, [r5, #24]
 80058ba:	6129      	str	r1, [r5, #16]
 80058bc:	b1bc      	cbz	r4, 80058ee <__d2b+0x8e>
 80058be:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80058c2:	4404      	add	r4, r0
 80058c4:	6034      	str	r4, [r6, #0]
 80058c6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80058ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058cc:	6018      	str	r0, [r3, #0]
 80058ce:	4628      	mov	r0, r5
 80058d0:	b003      	add	sp, #12
 80058d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058d8:	e7d7      	b.n	800588a <__d2b+0x2a>
 80058da:	6169      	str	r1, [r5, #20]
 80058dc:	e7e7      	b.n	80058ae <__d2b+0x4e>
 80058de:	a801      	add	r0, sp, #4
 80058e0:	f7ff fcfc 	bl	80052dc <__lo0bits>
 80058e4:	9b01      	ldr	r3, [sp, #4]
 80058e6:	2101      	movs	r1, #1
 80058e8:	616b      	str	r3, [r5, #20]
 80058ea:	3020      	adds	r0, #32
 80058ec:	e7e5      	b.n	80058ba <__d2b+0x5a>
 80058ee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80058f2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80058f6:	6030      	str	r0, [r6, #0]
 80058f8:	6918      	ldr	r0, [r3, #16]
 80058fa:	f7ff fccf 	bl	800529c <__hi0bits>
 80058fe:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005902:	e7e2      	b.n	80058ca <__d2b+0x6a>
 8005904:	08007917 	.word	0x08007917
 8005908:	08007928 	.word	0x08007928

0800590c <__ratio>:
 800590c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005910:	4688      	mov	r8, r1
 8005912:	4669      	mov	r1, sp
 8005914:	4681      	mov	r9, r0
 8005916:	f7ff ff5b 	bl	80057d0 <__b2d>
 800591a:	460f      	mov	r7, r1
 800591c:	4604      	mov	r4, r0
 800591e:	460d      	mov	r5, r1
 8005920:	4640      	mov	r0, r8
 8005922:	a901      	add	r1, sp, #4
 8005924:	f7ff ff54 	bl	80057d0 <__b2d>
 8005928:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800592c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8005930:	468b      	mov	fp, r1
 8005932:	eba3 0c02 	sub.w	ip, r3, r2
 8005936:	e9dd 3200 	ldrd	r3, r2, [sp]
 800593a:	1a9b      	subs	r3, r3, r2
 800593c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8005940:	2b00      	cmp	r3, #0
 8005942:	bfd5      	itete	le
 8005944:	460a      	movle	r2, r1
 8005946:	462a      	movgt	r2, r5
 8005948:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800594c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8005950:	bfd8      	it	le
 8005952:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8005956:	465b      	mov	r3, fp
 8005958:	4602      	mov	r2, r0
 800595a:	4639      	mov	r1, r7
 800595c:	4620      	mov	r0, r4
 800595e:	f7fa fee5 	bl	800072c <__aeabi_ddiv>
 8005962:	b003      	add	sp, #12
 8005964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005968 <__copybits>:
 8005968:	3901      	subs	r1, #1
 800596a:	b570      	push	{r4, r5, r6, lr}
 800596c:	1149      	asrs	r1, r1, #5
 800596e:	6914      	ldr	r4, [r2, #16]
 8005970:	3101      	adds	r1, #1
 8005972:	f102 0314 	add.w	r3, r2, #20
 8005976:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800597a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800597e:	1f05      	subs	r5, r0, #4
 8005980:	42a3      	cmp	r3, r4
 8005982:	d30c      	bcc.n	800599e <__copybits+0x36>
 8005984:	1aa3      	subs	r3, r4, r2
 8005986:	3b11      	subs	r3, #17
 8005988:	f023 0303 	bic.w	r3, r3, #3
 800598c:	3211      	adds	r2, #17
 800598e:	42a2      	cmp	r2, r4
 8005990:	bf88      	it	hi
 8005992:	2300      	movhi	r3, #0
 8005994:	4418      	add	r0, r3
 8005996:	2300      	movs	r3, #0
 8005998:	4288      	cmp	r0, r1
 800599a:	d305      	bcc.n	80059a8 <__copybits+0x40>
 800599c:	bd70      	pop	{r4, r5, r6, pc}
 800599e:	f853 6b04 	ldr.w	r6, [r3], #4
 80059a2:	f845 6f04 	str.w	r6, [r5, #4]!
 80059a6:	e7eb      	b.n	8005980 <__copybits+0x18>
 80059a8:	f840 3b04 	str.w	r3, [r0], #4
 80059ac:	e7f4      	b.n	8005998 <__copybits+0x30>

080059ae <__any_on>:
 80059ae:	f100 0214 	add.w	r2, r0, #20
 80059b2:	6900      	ldr	r0, [r0, #16]
 80059b4:	114b      	asrs	r3, r1, #5
 80059b6:	4298      	cmp	r0, r3
 80059b8:	b510      	push	{r4, lr}
 80059ba:	db11      	blt.n	80059e0 <__any_on+0x32>
 80059bc:	dd0a      	ble.n	80059d4 <__any_on+0x26>
 80059be:	f011 011f 	ands.w	r1, r1, #31
 80059c2:	d007      	beq.n	80059d4 <__any_on+0x26>
 80059c4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80059c8:	fa24 f001 	lsr.w	r0, r4, r1
 80059cc:	fa00 f101 	lsl.w	r1, r0, r1
 80059d0:	428c      	cmp	r4, r1
 80059d2:	d10b      	bne.n	80059ec <__any_on+0x3e>
 80059d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80059d8:	4293      	cmp	r3, r2
 80059da:	d803      	bhi.n	80059e4 <__any_on+0x36>
 80059dc:	2000      	movs	r0, #0
 80059de:	bd10      	pop	{r4, pc}
 80059e0:	4603      	mov	r3, r0
 80059e2:	e7f7      	b.n	80059d4 <__any_on+0x26>
 80059e4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80059e8:	2900      	cmp	r1, #0
 80059ea:	d0f5      	beq.n	80059d8 <__any_on+0x2a>
 80059ec:	2001      	movs	r0, #1
 80059ee:	e7f6      	b.n	80059de <__any_on+0x30>

080059f0 <sulp>:
 80059f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059f4:	460f      	mov	r7, r1
 80059f6:	4690      	mov	r8, r2
 80059f8:	f7ff feca 	bl	8005790 <__ulp>
 80059fc:	4604      	mov	r4, r0
 80059fe:	460d      	mov	r5, r1
 8005a00:	f1b8 0f00 	cmp.w	r8, #0
 8005a04:	d011      	beq.n	8005a2a <sulp+0x3a>
 8005a06:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005a0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	dd0b      	ble.n	8005a2a <sulp+0x3a>
 8005a12:	2400      	movs	r4, #0
 8005a14:	051b      	lsls	r3, r3, #20
 8005a16:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005a1a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005a1e:	4622      	mov	r2, r4
 8005a20:	462b      	mov	r3, r5
 8005a22:	f7fa fd59 	bl	80004d8 <__aeabi_dmul>
 8005a26:	4604      	mov	r4, r0
 8005a28:	460d      	mov	r5, r1
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	4629      	mov	r1, r5
 8005a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a32:	0000      	movs	r0, r0
 8005a34:	0000      	movs	r0, r0
	...

08005a38 <_strtod_l>:
 8005a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a3c:	b09f      	sub	sp, #124	; 0x7c
 8005a3e:	9217      	str	r2, [sp, #92]	; 0x5c
 8005a40:	2200      	movs	r2, #0
 8005a42:	4604      	mov	r4, r0
 8005a44:	921a      	str	r2, [sp, #104]	; 0x68
 8005a46:	460d      	mov	r5, r1
 8005a48:	f04f 0800 	mov.w	r8, #0
 8005a4c:	f04f 0900 	mov.w	r9, #0
 8005a50:	460a      	mov	r2, r1
 8005a52:	9219      	str	r2, [sp, #100]	; 0x64
 8005a54:	7811      	ldrb	r1, [r2, #0]
 8005a56:	292b      	cmp	r1, #43	; 0x2b
 8005a58:	d04a      	beq.n	8005af0 <_strtod_l+0xb8>
 8005a5a:	d838      	bhi.n	8005ace <_strtod_l+0x96>
 8005a5c:	290d      	cmp	r1, #13
 8005a5e:	d832      	bhi.n	8005ac6 <_strtod_l+0x8e>
 8005a60:	2908      	cmp	r1, #8
 8005a62:	d832      	bhi.n	8005aca <_strtod_l+0x92>
 8005a64:	2900      	cmp	r1, #0
 8005a66:	d03b      	beq.n	8005ae0 <_strtod_l+0xa8>
 8005a68:	2200      	movs	r2, #0
 8005a6a:	920e      	str	r2, [sp, #56]	; 0x38
 8005a6c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005a6e:	7832      	ldrb	r2, [r6, #0]
 8005a70:	2a30      	cmp	r2, #48	; 0x30
 8005a72:	f040 80b2 	bne.w	8005bda <_strtod_l+0x1a2>
 8005a76:	7872      	ldrb	r2, [r6, #1]
 8005a78:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005a7c:	2a58      	cmp	r2, #88	; 0x58
 8005a7e:	d16e      	bne.n	8005b5e <_strtod_l+0x126>
 8005a80:	9302      	str	r3, [sp, #8]
 8005a82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a84:	4620      	mov	r0, r4
 8005a86:	9301      	str	r3, [sp, #4]
 8005a88:	ab1a      	add	r3, sp, #104	; 0x68
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	4a8c      	ldr	r2, [pc, #560]	; (8005cc0 <_strtod_l+0x288>)
 8005a8e:	ab1b      	add	r3, sp, #108	; 0x6c
 8005a90:	a919      	add	r1, sp, #100	; 0x64
 8005a92:	f001 fafd 	bl	8007090 <__gethex>
 8005a96:	f010 070f 	ands.w	r7, r0, #15
 8005a9a:	4605      	mov	r5, r0
 8005a9c:	d005      	beq.n	8005aaa <_strtod_l+0x72>
 8005a9e:	2f06      	cmp	r7, #6
 8005aa0:	d128      	bne.n	8005af4 <_strtod_l+0xbc>
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	3601      	adds	r6, #1
 8005aa6:	9619      	str	r6, [sp, #100]	; 0x64
 8005aa8:	930e      	str	r3, [sp, #56]	; 0x38
 8005aaa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f040 85a0 	bne.w	80065f2 <_strtod_l+0xbba>
 8005ab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ab4:	b1cb      	cbz	r3, 8005aea <_strtod_l+0xb2>
 8005ab6:	4642      	mov	r2, r8
 8005ab8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005abc:	4610      	mov	r0, r2
 8005abe:	4619      	mov	r1, r3
 8005ac0:	b01f      	add	sp, #124	; 0x7c
 8005ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac6:	2920      	cmp	r1, #32
 8005ac8:	d1ce      	bne.n	8005a68 <_strtod_l+0x30>
 8005aca:	3201      	adds	r2, #1
 8005acc:	e7c1      	b.n	8005a52 <_strtod_l+0x1a>
 8005ace:	292d      	cmp	r1, #45	; 0x2d
 8005ad0:	d1ca      	bne.n	8005a68 <_strtod_l+0x30>
 8005ad2:	2101      	movs	r1, #1
 8005ad4:	910e      	str	r1, [sp, #56]	; 0x38
 8005ad6:	1c51      	adds	r1, r2, #1
 8005ad8:	9119      	str	r1, [sp, #100]	; 0x64
 8005ada:	7852      	ldrb	r2, [r2, #1]
 8005adc:	2a00      	cmp	r2, #0
 8005ade:	d1c5      	bne.n	8005a6c <_strtod_l+0x34>
 8005ae0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ae2:	9519      	str	r5, [sp, #100]	; 0x64
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f040 8582 	bne.w	80065ee <_strtod_l+0xbb6>
 8005aea:	4642      	mov	r2, r8
 8005aec:	464b      	mov	r3, r9
 8005aee:	e7e5      	b.n	8005abc <_strtod_l+0x84>
 8005af0:	2100      	movs	r1, #0
 8005af2:	e7ef      	b.n	8005ad4 <_strtod_l+0x9c>
 8005af4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005af6:	b13a      	cbz	r2, 8005b08 <_strtod_l+0xd0>
 8005af8:	2135      	movs	r1, #53	; 0x35
 8005afa:	a81c      	add	r0, sp, #112	; 0x70
 8005afc:	f7ff ff34 	bl	8005968 <__copybits>
 8005b00:	4620      	mov	r0, r4
 8005b02:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005b04:	f7ff fb18 	bl	8005138 <_Bfree>
 8005b08:	3f01      	subs	r7, #1
 8005b0a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005b0c:	2f04      	cmp	r7, #4
 8005b0e:	d806      	bhi.n	8005b1e <_strtod_l+0xe6>
 8005b10:	e8df f007 	tbb	[pc, r7]
 8005b14:	201d0314 	.word	0x201d0314
 8005b18:	14          	.byte	0x14
 8005b19:	00          	.byte	0x00
 8005b1a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005b1e:	05e9      	lsls	r1, r5, #23
 8005b20:	bf48      	it	mi
 8005b22:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8005b26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005b2a:	0d1b      	lsrs	r3, r3, #20
 8005b2c:	051b      	lsls	r3, r3, #20
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1bb      	bne.n	8005aaa <_strtod_l+0x72>
 8005b32:	f7fe fb19 	bl	8004168 <__errno>
 8005b36:	2322      	movs	r3, #34	; 0x22
 8005b38:	6003      	str	r3, [r0, #0]
 8005b3a:	e7b6      	b.n	8005aaa <_strtod_l+0x72>
 8005b3c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005b40:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005b44:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005b48:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005b4c:	e7e7      	b.n	8005b1e <_strtod_l+0xe6>
 8005b4e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8005cc4 <_strtod_l+0x28c>
 8005b52:	e7e4      	b.n	8005b1e <_strtod_l+0xe6>
 8005b54:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005b58:	f04f 38ff 	mov.w	r8, #4294967295
 8005b5c:	e7df      	b.n	8005b1e <_strtod_l+0xe6>
 8005b5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b60:	1c5a      	adds	r2, r3, #1
 8005b62:	9219      	str	r2, [sp, #100]	; 0x64
 8005b64:	785b      	ldrb	r3, [r3, #1]
 8005b66:	2b30      	cmp	r3, #48	; 0x30
 8005b68:	d0f9      	beq.n	8005b5e <_strtod_l+0x126>
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d09d      	beq.n	8005aaa <_strtod_l+0x72>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	f04f 0a00 	mov.w	sl, #0
 8005b74:	220a      	movs	r2, #10
 8005b76:	46d3      	mov	fp, sl
 8005b78:	9305      	str	r3, [sp, #20]
 8005b7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b7c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8005b80:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b82:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005b84:	7806      	ldrb	r6, [r0, #0]
 8005b86:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005b8a:	b2d9      	uxtb	r1, r3
 8005b8c:	2909      	cmp	r1, #9
 8005b8e:	d926      	bls.n	8005bde <_strtod_l+0x1a6>
 8005b90:	2201      	movs	r2, #1
 8005b92:	494d      	ldr	r1, [pc, #308]	; (8005cc8 <_strtod_l+0x290>)
 8005b94:	f001 f989 	bl	8006eaa <strncmp>
 8005b98:	2800      	cmp	r0, #0
 8005b9a:	d030      	beq.n	8005bfe <_strtod_l+0x1c6>
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	4632      	mov	r2, r6
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	465e      	mov	r6, fp
 8005ba4:	9008      	str	r0, [sp, #32]
 8005ba6:	2a65      	cmp	r2, #101	; 0x65
 8005ba8:	d001      	beq.n	8005bae <_strtod_l+0x176>
 8005baa:	2a45      	cmp	r2, #69	; 0x45
 8005bac:	d113      	bne.n	8005bd6 <_strtod_l+0x19e>
 8005bae:	b91e      	cbnz	r6, 8005bb8 <_strtod_l+0x180>
 8005bb0:	9a05      	ldr	r2, [sp, #20]
 8005bb2:	4302      	orrs	r2, r0
 8005bb4:	d094      	beq.n	8005ae0 <_strtod_l+0xa8>
 8005bb6:	2600      	movs	r6, #0
 8005bb8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005bba:	1c6a      	adds	r2, r5, #1
 8005bbc:	9219      	str	r2, [sp, #100]	; 0x64
 8005bbe:	786a      	ldrb	r2, [r5, #1]
 8005bc0:	2a2b      	cmp	r2, #43	; 0x2b
 8005bc2:	d074      	beq.n	8005cae <_strtod_l+0x276>
 8005bc4:	2a2d      	cmp	r2, #45	; 0x2d
 8005bc6:	d078      	beq.n	8005cba <_strtod_l+0x282>
 8005bc8:	f04f 0c00 	mov.w	ip, #0
 8005bcc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005bd0:	2909      	cmp	r1, #9
 8005bd2:	d97f      	bls.n	8005cd4 <_strtod_l+0x29c>
 8005bd4:	9519      	str	r5, [sp, #100]	; 0x64
 8005bd6:	2700      	movs	r7, #0
 8005bd8:	e09e      	b.n	8005d18 <_strtod_l+0x2e0>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	e7c8      	b.n	8005b70 <_strtod_l+0x138>
 8005bde:	f1bb 0f08 	cmp.w	fp, #8
 8005be2:	bfd8      	it	le
 8005be4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8005be6:	f100 0001 	add.w	r0, r0, #1
 8005bea:	bfd6      	itet	le
 8005bec:	fb02 3301 	mlale	r3, r2, r1, r3
 8005bf0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8005bf4:	930a      	strle	r3, [sp, #40]	; 0x28
 8005bf6:	f10b 0b01 	add.w	fp, fp, #1
 8005bfa:	9019      	str	r0, [sp, #100]	; 0x64
 8005bfc:	e7c1      	b.n	8005b82 <_strtod_l+0x14a>
 8005bfe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c00:	1c5a      	adds	r2, r3, #1
 8005c02:	9219      	str	r2, [sp, #100]	; 0x64
 8005c04:	785a      	ldrb	r2, [r3, #1]
 8005c06:	f1bb 0f00 	cmp.w	fp, #0
 8005c0a:	d037      	beq.n	8005c7c <_strtod_l+0x244>
 8005c0c:	465e      	mov	r6, fp
 8005c0e:	9008      	str	r0, [sp, #32]
 8005c10:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005c14:	2b09      	cmp	r3, #9
 8005c16:	d912      	bls.n	8005c3e <_strtod_l+0x206>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e7c4      	b.n	8005ba6 <_strtod_l+0x16e>
 8005c1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c1e:	3001      	adds	r0, #1
 8005c20:	1c5a      	adds	r2, r3, #1
 8005c22:	9219      	str	r2, [sp, #100]	; 0x64
 8005c24:	785a      	ldrb	r2, [r3, #1]
 8005c26:	2a30      	cmp	r2, #48	; 0x30
 8005c28:	d0f8      	beq.n	8005c1c <_strtod_l+0x1e4>
 8005c2a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005c2e:	2b08      	cmp	r3, #8
 8005c30:	f200 84e4 	bhi.w	80065fc <_strtod_l+0xbc4>
 8005c34:	9008      	str	r0, [sp, #32]
 8005c36:	2000      	movs	r0, #0
 8005c38:	4606      	mov	r6, r0
 8005c3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c3e:	3a30      	subs	r2, #48	; 0x30
 8005c40:	f100 0301 	add.w	r3, r0, #1
 8005c44:	d014      	beq.n	8005c70 <_strtod_l+0x238>
 8005c46:	9908      	ldr	r1, [sp, #32]
 8005c48:	eb00 0c06 	add.w	ip, r0, r6
 8005c4c:	4419      	add	r1, r3
 8005c4e:	9108      	str	r1, [sp, #32]
 8005c50:	4633      	mov	r3, r6
 8005c52:	210a      	movs	r1, #10
 8005c54:	4563      	cmp	r3, ip
 8005c56:	d113      	bne.n	8005c80 <_strtod_l+0x248>
 8005c58:	1833      	adds	r3, r6, r0
 8005c5a:	2b08      	cmp	r3, #8
 8005c5c:	f106 0601 	add.w	r6, r6, #1
 8005c60:	4406      	add	r6, r0
 8005c62:	dc1a      	bgt.n	8005c9a <_strtod_l+0x262>
 8005c64:	230a      	movs	r3, #10
 8005c66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c68:	fb03 2301 	mla	r3, r3, r1, r2
 8005c6c:	930a      	str	r3, [sp, #40]	; 0x28
 8005c6e:	2300      	movs	r3, #0
 8005c70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005c72:	4618      	mov	r0, r3
 8005c74:	1c51      	adds	r1, r2, #1
 8005c76:	9119      	str	r1, [sp, #100]	; 0x64
 8005c78:	7852      	ldrb	r2, [r2, #1]
 8005c7a:	e7c9      	b.n	8005c10 <_strtod_l+0x1d8>
 8005c7c:	4658      	mov	r0, fp
 8005c7e:	e7d2      	b.n	8005c26 <_strtod_l+0x1ee>
 8005c80:	2b08      	cmp	r3, #8
 8005c82:	f103 0301 	add.w	r3, r3, #1
 8005c86:	dc03      	bgt.n	8005c90 <_strtod_l+0x258>
 8005c88:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005c8a:	434f      	muls	r7, r1
 8005c8c:	970a      	str	r7, [sp, #40]	; 0x28
 8005c8e:	e7e1      	b.n	8005c54 <_strtod_l+0x21c>
 8005c90:	2b10      	cmp	r3, #16
 8005c92:	bfd8      	it	le
 8005c94:	fb01 fa0a 	mulle.w	sl, r1, sl
 8005c98:	e7dc      	b.n	8005c54 <_strtod_l+0x21c>
 8005c9a:	2e10      	cmp	r6, #16
 8005c9c:	bfdc      	itt	le
 8005c9e:	230a      	movle	r3, #10
 8005ca0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8005ca4:	e7e3      	b.n	8005c6e <_strtod_l+0x236>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	9308      	str	r3, [sp, #32]
 8005caa:	2301      	movs	r3, #1
 8005cac:	e780      	b.n	8005bb0 <_strtod_l+0x178>
 8005cae:	f04f 0c00 	mov.w	ip, #0
 8005cb2:	1caa      	adds	r2, r5, #2
 8005cb4:	9219      	str	r2, [sp, #100]	; 0x64
 8005cb6:	78aa      	ldrb	r2, [r5, #2]
 8005cb8:	e788      	b.n	8005bcc <_strtod_l+0x194>
 8005cba:	f04f 0c01 	mov.w	ip, #1
 8005cbe:	e7f8      	b.n	8005cb2 <_strtod_l+0x27a>
 8005cc0:	08007a88 	.word	0x08007a88
 8005cc4:	7ff00000 	.word	0x7ff00000
 8005cc8:	08007a84 	.word	0x08007a84
 8005ccc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005cce:	1c51      	adds	r1, r2, #1
 8005cd0:	9119      	str	r1, [sp, #100]	; 0x64
 8005cd2:	7852      	ldrb	r2, [r2, #1]
 8005cd4:	2a30      	cmp	r2, #48	; 0x30
 8005cd6:	d0f9      	beq.n	8005ccc <_strtod_l+0x294>
 8005cd8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005cdc:	2908      	cmp	r1, #8
 8005cde:	f63f af7a 	bhi.w	8005bd6 <_strtod_l+0x19e>
 8005ce2:	3a30      	subs	r2, #48	; 0x30
 8005ce4:	9209      	str	r2, [sp, #36]	; 0x24
 8005ce6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005ce8:	920c      	str	r2, [sp, #48]	; 0x30
 8005cea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005cec:	1c57      	adds	r7, r2, #1
 8005cee:	9719      	str	r7, [sp, #100]	; 0x64
 8005cf0:	7852      	ldrb	r2, [r2, #1]
 8005cf2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005cf6:	f1be 0f09 	cmp.w	lr, #9
 8005cfa:	d938      	bls.n	8005d6e <_strtod_l+0x336>
 8005cfc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005cfe:	1a7f      	subs	r7, r7, r1
 8005d00:	2f08      	cmp	r7, #8
 8005d02:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005d06:	dc03      	bgt.n	8005d10 <_strtod_l+0x2d8>
 8005d08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d0a:	428f      	cmp	r7, r1
 8005d0c:	bfa8      	it	ge
 8005d0e:	460f      	movge	r7, r1
 8005d10:	f1bc 0f00 	cmp.w	ip, #0
 8005d14:	d000      	beq.n	8005d18 <_strtod_l+0x2e0>
 8005d16:	427f      	negs	r7, r7
 8005d18:	2e00      	cmp	r6, #0
 8005d1a:	d14f      	bne.n	8005dbc <_strtod_l+0x384>
 8005d1c:	9905      	ldr	r1, [sp, #20]
 8005d1e:	4301      	orrs	r1, r0
 8005d20:	f47f aec3 	bne.w	8005aaa <_strtod_l+0x72>
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f47f aedb 	bne.w	8005ae0 <_strtod_l+0xa8>
 8005d2a:	2a69      	cmp	r2, #105	; 0x69
 8005d2c:	d029      	beq.n	8005d82 <_strtod_l+0x34a>
 8005d2e:	dc26      	bgt.n	8005d7e <_strtod_l+0x346>
 8005d30:	2a49      	cmp	r2, #73	; 0x49
 8005d32:	d026      	beq.n	8005d82 <_strtod_l+0x34a>
 8005d34:	2a4e      	cmp	r2, #78	; 0x4e
 8005d36:	f47f aed3 	bne.w	8005ae0 <_strtod_l+0xa8>
 8005d3a:	499a      	ldr	r1, [pc, #616]	; (8005fa4 <_strtod_l+0x56c>)
 8005d3c:	a819      	add	r0, sp, #100	; 0x64
 8005d3e:	f001 fbe9 	bl	8007514 <__match>
 8005d42:	2800      	cmp	r0, #0
 8005d44:	f43f aecc 	beq.w	8005ae0 <_strtod_l+0xa8>
 8005d48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	2b28      	cmp	r3, #40	; 0x28
 8005d4e:	d12f      	bne.n	8005db0 <_strtod_l+0x378>
 8005d50:	4995      	ldr	r1, [pc, #596]	; (8005fa8 <_strtod_l+0x570>)
 8005d52:	aa1c      	add	r2, sp, #112	; 0x70
 8005d54:	a819      	add	r0, sp, #100	; 0x64
 8005d56:	f001 fbf1 	bl	800753c <__hexnan>
 8005d5a:	2805      	cmp	r0, #5
 8005d5c:	d128      	bne.n	8005db0 <_strtod_l+0x378>
 8005d5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005d60:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005d64:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005d68:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005d6c:	e69d      	b.n	8005aaa <_strtod_l+0x72>
 8005d6e:	210a      	movs	r1, #10
 8005d70:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005d72:	fb01 2107 	mla	r1, r1, r7, r2
 8005d76:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8005d7a:	9209      	str	r2, [sp, #36]	; 0x24
 8005d7c:	e7b5      	b.n	8005cea <_strtod_l+0x2b2>
 8005d7e:	2a6e      	cmp	r2, #110	; 0x6e
 8005d80:	e7d9      	b.n	8005d36 <_strtod_l+0x2fe>
 8005d82:	498a      	ldr	r1, [pc, #552]	; (8005fac <_strtod_l+0x574>)
 8005d84:	a819      	add	r0, sp, #100	; 0x64
 8005d86:	f001 fbc5 	bl	8007514 <__match>
 8005d8a:	2800      	cmp	r0, #0
 8005d8c:	f43f aea8 	beq.w	8005ae0 <_strtod_l+0xa8>
 8005d90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d92:	4987      	ldr	r1, [pc, #540]	; (8005fb0 <_strtod_l+0x578>)
 8005d94:	3b01      	subs	r3, #1
 8005d96:	a819      	add	r0, sp, #100	; 0x64
 8005d98:	9319      	str	r3, [sp, #100]	; 0x64
 8005d9a:	f001 fbbb 	bl	8007514 <__match>
 8005d9e:	b910      	cbnz	r0, 8005da6 <_strtod_l+0x36e>
 8005da0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005da2:	3301      	adds	r3, #1
 8005da4:	9319      	str	r3, [sp, #100]	; 0x64
 8005da6:	f04f 0800 	mov.w	r8, #0
 8005daa:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8005fb4 <_strtod_l+0x57c>
 8005dae:	e67c      	b.n	8005aaa <_strtod_l+0x72>
 8005db0:	4881      	ldr	r0, [pc, #516]	; (8005fb8 <_strtod_l+0x580>)
 8005db2:	f001 f8cd 	bl	8006f50 <nan>
 8005db6:	4680      	mov	r8, r0
 8005db8:	4689      	mov	r9, r1
 8005dba:	e676      	b.n	8005aaa <_strtod_l+0x72>
 8005dbc:	9b08      	ldr	r3, [sp, #32]
 8005dbe:	f1bb 0f00 	cmp.w	fp, #0
 8005dc2:	bf08      	it	eq
 8005dc4:	46b3      	moveq	fp, r6
 8005dc6:	1afb      	subs	r3, r7, r3
 8005dc8:	2e10      	cmp	r6, #16
 8005dca:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005dcc:	4635      	mov	r5, r6
 8005dce:	9309      	str	r3, [sp, #36]	; 0x24
 8005dd0:	bfa8      	it	ge
 8005dd2:	2510      	movge	r5, #16
 8005dd4:	f7fa fb06 	bl	80003e4 <__aeabi_ui2d>
 8005dd8:	2e09      	cmp	r6, #9
 8005dda:	4680      	mov	r8, r0
 8005ddc:	4689      	mov	r9, r1
 8005dde:	dd13      	ble.n	8005e08 <_strtod_l+0x3d0>
 8005de0:	4b76      	ldr	r3, [pc, #472]	; (8005fbc <_strtod_l+0x584>)
 8005de2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005de6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005dea:	f7fa fb75 	bl	80004d8 <__aeabi_dmul>
 8005dee:	4680      	mov	r8, r0
 8005df0:	4650      	mov	r0, sl
 8005df2:	4689      	mov	r9, r1
 8005df4:	f7fa faf6 	bl	80003e4 <__aeabi_ui2d>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4640      	mov	r0, r8
 8005dfe:	4649      	mov	r1, r9
 8005e00:	f7fa f9b4 	bl	800016c <__adddf3>
 8005e04:	4680      	mov	r8, r0
 8005e06:	4689      	mov	r9, r1
 8005e08:	2e0f      	cmp	r6, #15
 8005e0a:	dc36      	bgt.n	8005e7a <_strtod_l+0x442>
 8005e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f43f ae4b 	beq.w	8005aaa <_strtod_l+0x72>
 8005e14:	dd22      	ble.n	8005e5c <_strtod_l+0x424>
 8005e16:	2b16      	cmp	r3, #22
 8005e18:	dc09      	bgt.n	8005e2e <_strtod_l+0x3f6>
 8005e1a:	4968      	ldr	r1, [pc, #416]	; (8005fbc <_strtod_l+0x584>)
 8005e1c:	4642      	mov	r2, r8
 8005e1e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e22:	464b      	mov	r3, r9
 8005e24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e28:	f7fa fb56 	bl	80004d8 <__aeabi_dmul>
 8005e2c:	e7c3      	b.n	8005db6 <_strtod_l+0x37e>
 8005e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e30:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8005e34:	4293      	cmp	r3, r2
 8005e36:	db20      	blt.n	8005e7a <_strtod_l+0x442>
 8005e38:	4c60      	ldr	r4, [pc, #384]	; (8005fbc <_strtod_l+0x584>)
 8005e3a:	f1c6 060f 	rsb	r6, r6, #15
 8005e3e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8005e42:	4642      	mov	r2, r8
 8005e44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e48:	464b      	mov	r3, r9
 8005e4a:	f7fa fb45 	bl	80004d8 <__aeabi_dmul>
 8005e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e50:	1b9e      	subs	r6, r3, r6
 8005e52:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8005e56:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005e5a:	e7e5      	b.n	8005e28 <_strtod_l+0x3f0>
 8005e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e5e:	3316      	adds	r3, #22
 8005e60:	db0b      	blt.n	8005e7a <_strtod_l+0x442>
 8005e62:	9b08      	ldr	r3, [sp, #32]
 8005e64:	4640      	mov	r0, r8
 8005e66:	1bdf      	subs	r7, r3, r7
 8005e68:	4b54      	ldr	r3, [pc, #336]	; (8005fbc <_strtod_l+0x584>)
 8005e6a:	4649      	mov	r1, r9
 8005e6c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005e70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e74:	f7fa fc5a 	bl	800072c <__aeabi_ddiv>
 8005e78:	e79d      	b.n	8005db6 <_strtod_l+0x37e>
 8005e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e7c:	1b75      	subs	r5, r6, r5
 8005e7e:	441d      	add	r5, r3
 8005e80:	2d00      	cmp	r5, #0
 8005e82:	dd70      	ble.n	8005f66 <_strtod_l+0x52e>
 8005e84:	f015 030f 	ands.w	r3, r5, #15
 8005e88:	d00a      	beq.n	8005ea0 <_strtod_l+0x468>
 8005e8a:	494c      	ldr	r1, [pc, #304]	; (8005fbc <_strtod_l+0x584>)
 8005e8c:	4642      	mov	r2, r8
 8005e8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e96:	464b      	mov	r3, r9
 8005e98:	f7fa fb1e 	bl	80004d8 <__aeabi_dmul>
 8005e9c:	4680      	mov	r8, r0
 8005e9e:	4689      	mov	r9, r1
 8005ea0:	f035 050f 	bics.w	r5, r5, #15
 8005ea4:	d04d      	beq.n	8005f42 <_strtod_l+0x50a>
 8005ea6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8005eaa:	dd22      	ble.n	8005ef2 <_strtod_l+0x4ba>
 8005eac:	2600      	movs	r6, #0
 8005eae:	46b3      	mov	fp, r6
 8005eb0:	960b      	str	r6, [sp, #44]	; 0x2c
 8005eb2:	9608      	str	r6, [sp, #32]
 8005eb4:	2322      	movs	r3, #34	; 0x22
 8005eb6:	f04f 0800 	mov.w	r8, #0
 8005eba:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8005fb4 <_strtod_l+0x57c>
 8005ebe:	6023      	str	r3, [r4, #0]
 8005ec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f43f adf1 	beq.w	8005aaa <_strtod_l+0x72>
 8005ec8:	4620      	mov	r0, r4
 8005eca:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005ecc:	f7ff f934 	bl	8005138 <_Bfree>
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	9908      	ldr	r1, [sp, #32]
 8005ed4:	f7ff f930 	bl	8005138 <_Bfree>
 8005ed8:	4659      	mov	r1, fp
 8005eda:	4620      	mov	r0, r4
 8005edc:	f7ff f92c 	bl	8005138 <_Bfree>
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ee4:	f7ff f928 	bl	8005138 <_Bfree>
 8005ee8:	4631      	mov	r1, r6
 8005eea:	4620      	mov	r0, r4
 8005eec:	f7ff f924 	bl	8005138 <_Bfree>
 8005ef0:	e5db      	b.n	8005aaa <_strtod_l+0x72>
 8005ef2:	4b33      	ldr	r3, [pc, #204]	; (8005fc0 <_strtod_l+0x588>)
 8005ef4:	4640      	mov	r0, r8
 8005ef6:	9305      	str	r3, [sp, #20]
 8005ef8:	2300      	movs	r3, #0
 8005efa:	4649      	mov	r1, r9
 8005efc:	469a      	mov	sl, r3
 8005efe:	112d      	asrs	r5, r5, #4
 8005f00:	2d01      	cmp	r5, #1
 8005f02:	dc21      	bgt.n	8005f48 <_strtod_l+0x510>
 8005f04:	b10b      	cbz	r3, 8005f0a <_strtod_l+0x4d2>
 8005f06:	4680      	mov	r8, r0
 8005f08:	4689      	mov	r9, r1
 8005f0a:	492d      	ldr	r1, [pc, #180]	; (8005fc0 <_strtod_l+0x588>)
 8005f0c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005f10:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005f14:	4642      	mov	r2, r8
 8005f16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f1a:	464b      	mov	r3, r9
 8005f1c:	f7fa fadc 	bl	80004d8 <__aeabi_dmul>
 8005f20:	4b24      	ldr	r3, [pc, #144]	; (8005fb4 <_strtod_l+0x57c>)
 8005f22:	460a      	mov	r2, r1
 8005f24:	400b      	ands	r3, r1
 8005f26:	4927      	ldr	r1, [pc, #156]	; (8005fc4 <_strtod_l+0x58c>)
 8005f28:	4680      	mov	r8, r0
 8005f2a:	428b      	cmp	r3, r1
 8005f2c:	d8be      	bhi.n	8005eac <_strtod_l+0x474>
 8005f2e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005f32:	428b      	cmp	r3, r1
 8005f34:	bf86      	itte	hi
 8005f36:	f04f 38ff 	movhi.w	r8, #4294967295
 8005f3a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8005fc8 <_strtod_l+0x590>
 8005f3e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005f42:	2300      	movs	r3, #0
 8005f44:	9305      	str	r3, [sp, #20]
 8005f46:	e07b      	b.n	8006040 <_strtod_l+0x608>
 8005f48:	07ea      	lsls	r2, r5, #31
 8005f4a:	d505      	bpl.n	8005f58 <_strtod_l+0x520>
 8005f4c:	9b05      	ldr	r3, [sp, #20]
 8005f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f52:	f7fa fac1 	bl	80004d8 <__aeabi_dmul>
 8005f56:	2301      	movs	r3, #1
 8005f58:	9a05      	ldr	r2, [sp, #20]
 8005f5a:	f10a 0a01 	add.w	sl, sl, #1
 8005f5e:	3208      	adds	r2, #8
 8005f60:	106d      	asrs	r5, r5, #1
 8005f62:	9205      	str	r2, [sp, #20]
 8005f64:	e7cc      	b.n	8005f00 <_strtod_l+0x4c8>
 8005f66:	d0ec      	beq.n	8005f42 <_strtod_l+0x50a>
 8005f68:	426d      	negs	r5, r5
 8005f6a:	f015 020f 	ands.w	r2, r5, #15
 8005f6e:	d00a      	beq.n	8005f86 <_strtod_l+0x54e>
 8005f70:	4b12      	ldr	r3, [pc, #72]	; (8005fbc <_strtod_l+0x584>)
 8005f72:	4640      	mov	r0, r8
 8005f74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f78:	4649      	mov	r1, r9
 8005f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7e:	f7fa fbd5 	bl	800072c <__aeabi_ddiv>
 8005f82:	4680      	mov	r8, r0
 8005f84:	4689      	mov	r9, r1
 8005f86:	112d      	asrs	r5, r5, #4
 8005f88:	d0db      	beq.n	8005f42 <_strtod_l+0x50a>
 8005f8a:	2d1f      	cmp	r5, #31
 8005f8c:	dd1e      	ble.n	8005fcc <_strtod_l+0x594>
 8005f8e:	2600      	movs	r6, #0
 8005f90:	46b3      	mov	fp, r6
 8005f92:	960b      	str	r6, [sp, #44]	; 0x2c
 8005f94:	9608      	str	r6, [sp, #32]
 8005f96:	2322      	movs	r3, #34	; 0x22
 8005f98:	f04f 0800 	mov.w	r8, #0
 8005f9c:	f04f 0900 	mov.w	r9, #0
 8005fa0:	6023      	str	r3, [r4, #0]
 8005fa2:	e78d      	b.n	8005ec0 <_strtod_l+0x488>
 8005fa4:	0800786f 	.word	0x0800786f
 8005fa8:	08007a9c 	.word	0x08007a9c
 8005fac:	08007867 	.word	0x08007867
 8005fb0:	0800789e 	.word	0x0800789e
 8005fb4:	7ff00000 	.word	0x7ff00000
 8005fb8:	08007c2d 	.word	0x08007c2d
 8005fbc:	080079b0 	.word	0x080079b0
 8005fc0:	08007988 	.word	0x08007988
 8005fc4:	7ca00000 	.word	0x7ca00000
 8005fc8:	7fefffff 	.word	0x7fefffff
 8005fcc:	f015 0310 	ands.w	r3, r5, #16
 8005fd0:	bf18      	it	ne
 8005fd2:	236a      	movne	r3, #106	; 0x6a
 8005fd4:	4640      	mov	r0, r8
 8005fd6:	9305      	str	r3, [sp, #20]
 8005fd8:	4649      	mov	r1, r9
 8005fda:	2300      	movs	r3, #0
 8005fdc:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 80062a8 <_strtod_l+0x870>
 8005fe0:	07ea      	lsls	r2, r5, #31
 8005fe2:	d504      	bpl.n	8005fee <_strtod_l+0x5b6>
 8005fe4:	e9da 2300 	ldrd	r2, r3, [sl]
 8005fe8:	f7fa fa76 	bl	80004d8 <__aeabi_dmul>
 8005fec:	2301      	movs	r3, #1
 8005fee:	106d      	asrs	r5, r5, #1
 8005ff0:	f10a 0a08 	add.w	sl, sl, #8
 8005ff4:	d1f4      	bne.n	8005fe0 <_strtod_l+0x5a8>
 8005ff6:	b10b      	cbz	r3, 8005ffc <_strtod_l+0x5c4>
 8005ff8:	4680      	mov	r8, r0
 8005ffa:	4689      	mov	r9, r1
 8005ffc:	9b05      	ldr	r3, [sp, #20]
 8005ffe:	b1bb      	cbz	r3, 8006030 <_strtod_l+0x5f8>
 8006000:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006004:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006008:	2b00      	cmp	r3, #0
 800600a:	4649      	mov	r1, r9
 800600c:	dd10      	ble.n	8006030 <_strtod_l+0x5f8>
 800600e:	2b1f      	cmp	r3, #31
 8006010:	f340 8128 	ble.w	8006264 <_strtod_l+0x82c>
 8006014:	2b34      	cmp	r3, #52	; 0x34
 8006016:	bfd8      	it	le
 8006018:	f04f 33ff 	movle.w	r3, #4294967295
 800601c:	f04f 0800 	mov.w	r8, #0
 8006020:	bfcf      	iteee	gt
 8006022:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006026:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800602a:	4093      	lslle	r3, r2
 800602c:	ea03 0901 	andle.w	r9, r3, r1
 8006030:	2200      	movs	r2, #0
 8006032:	2300      	movs	r3, #0
 8006034:	4640      	mov	r0, r8
 8006036:	4649      	mov	r1, r9
 8006038:	f7fa fcb6 	bl	80009a8 <__aeabi_dcmpeq>
 800603c:	2800      	cmp	r0, #0
 800603e:	d1a6      	bne.n	8005f8e <_strtod_l+0x556>
 8006040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006042:	465a      	mov	r2, fp
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	4620      	mov	r0, r4
 8006048:	4633      	mov	r3, r6
 800604a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800604c:	f7ff f8dc 	bl	8005208 <__s2b>
 8006050:	900b      	str	r0, [sp, #44]	; 0x2c
 8006052:	2800      	cmp	r0, #0
 8006054:	f43f af2a 	beq.w	8005eac <_strtod_l+0x474>
 8006058:	2600      	movs	r6, #0
 800605a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800605c:	9b08      	ldr	r3, [sp, #32]
 800605e:	2a00      	cmp	r2, #0
 8006060:	eba3 0307 	sub.w	r3, r3, r7
 8006064:	bfa8      	it	ge
 8006066:	2300      	movge	r3, #0
 8006068:	46b3      	mov	fp, r6
 800606a:	9312      	str	r3, [sp, #72]	; 0x48
 800606c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006070:	9316      	str	r3, [sp, #88]	; 0x58
 8006072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006074:	4620      	mov	r0, r4
 8006076:	6859      	ldr	r1, [r3, #4]
 8006078:	f7ff f81e 	bl	80050b8 <_Balloc>
 800607c:	9008      	str	r0, [sp, #32]
 800607e:	2800      	cmp	r0, #0
 8006080:	f43f af18 	beq.w	8005eb4 <_strtod_l+0x47c>
 8006084:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006086:	300c      	adds	r0, #12
 8006088:	691a      	ldr	r2, [r3, #16]
 800608a:	f103 010c 	add.w	r1, r3, #12
 800608e:	3202      	adds	r2, #2
 8006090:	0092      	lsls	r2, r2, #2
 8006092:	f000 ff4f 	bl	8006f34 <memcpy>
 8006096:	ab1c      	add	r3, sp, #112	; 0x70
 8006098:	9301      	str	r3, [sp, #4]
 800609a:	ab1b      	add	r3, sp, #108	; 0x6c
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	4642      	mov	r2, r8
 80060a0:	464b      	mov	r3, r9
 80060a2:	4620      	mov	r0, r4
 80060a4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80060a8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80060ac:	f7ff fbd8 	bl	8005860 <__d2b>
 80060b0:	901a      	str	r0, [sp, #104]	; 0x68
 80060b2:	2800      	cmp	r0, #0
 80060b4:	f43f aefe 	beq.w	8005eb4 <_strtod_l+0x47c>
 80060b8:	2101      	movs	r1, #1
 80060ba:	4620      	mov	r0, r4
 80060bc:	f7ff f93c 	bl	8005338 <__i2b>
 80060c0:	4683      	mov	fp, r0
 80060c2:	2800      	cmp	r0, #0
 80060c4:	f43f aef6 	beq.w	8005eb4 <_strtod_l+0x47c>
 80060c8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80060ca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80060cc:	2f00      	cmp	r7, #0
 80060ce:	bfab      	itete	ge
 80060d0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80060d2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80060d4:	eb07 0a03 	addge.w	sl, r7, r3
 80060d8:	1bdd      	sublt	r5, r3, r7
 80060da:	9b05      	ldr	r3, [sp, #20]
 80060dc:	bfa8      	it	ge
 80060de:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80060e0:	eba7 0703 	sub.w	r7, r7, r3
 80060e4:	4417      	add	r7, r2
 80060e6:	4b71      	ldr	r3, [pc, #452]	; (80062ac <_strtod_l+0x874>)
 80060e8:	f107 37ff 	add.w	r7, r7, #4294967295
 80060ec:	bfb8      	it	lt
 80060ee:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 80060f2:	429f      	cmp	r7, r3
 80060f4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80060f8:	f280 80c7 	bge.w	800628a <_strtod_l+0x852>
 80060fc:	1bdb      	subs	r3, r3, r7
 80060fe:	2b1f      	cmp	r3, #31
 8006100:	f04f 0101 	mov.w	r1, #1
 8006104:	eba2 0203 	sub.w	r2, r2, r3
 8006108:	f300 80b3 	bgt.w	8006272 <_strtod_l+0x83a>
 800610c:	fa01 f303 	lsl.w	r3, r1, r3
 8006110:	9313      	str	r3, [sp, #76]	; 0x4c
 8006112:	2300      	movs	r3, #0
 8006114:	9310      	str	r3, [sp, #64]	; 0x40
 8006116:	eb0a 0702 	add.w	r7, sl, r2
 800611a:	9b05      	ldr	r3, [sp, #20]
 800611c:	45ba      	cmp	sl, r7
 800611e:	4415      	add	r5, r2
 8006120:	441d      	add	r5, r3
 8006122:	4653      	mov	r3, sl
 8006124:	bfa8      	it	ge
 8006126:	463b      	movge	r3, r7
 8006128:	42ab      	cmp	r3, r5
 800612a:	bfa8      	it	ge
 800612c:	462b      	movge	r3, r5
 800612e:	2b00      	cmp	r3, #0
 8006130:	bfc2      	ittt	gt
 8006132:	1aff      	subgt	r7, r7, r3
 8006134:	1aed      	subgt	r5, r5, r3
 8006136:	ebaa 0a03 	subgt.w	sl, sl, r3
 800613a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800613c:	2b00      	cmp	r3, #0
 800613e:	dd17      	ble.n	8006170 <_strtod_l+0x738>
 8006140:	4659      	mov	r1, fp
 8006142:	461a      	mov	r2, r3
 8006144:	4620      	mov	r0, r4
 8006146:	f7ff f9b5 	bl	80054b4 <__pow5mult>
 800614a:	4683      	mov	fp, r0
 800614c:	2800      	cmp	r0, #0
 800614e:	f43f aeb1 	beq.w	8005eb4 <_strtod_l+0x47c>
 8006152:	4601      	mov	r1, r0
 8006154:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006156:	4620      	mov	r0, r4
 8006158:	f7ff f904 	bl	8005364 <__multiply>
 800615c:	900a      	str	r0, [sp, #40]	; 0x28
 800615e:	2800      	cmp	r0, #0
 8006160:	f43f aea8 	beq.w	8005eb4 <_strtod_l+0x47c>
 8006164:	4620      	mov	r0, r4
 8006166:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006168:	f7fe ffe6 	bl	8005138 <_Bfree>
 800616c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800616e:	931a      	str	r3, [sp, #104]	; 0x68
 8006170:	2f00      	cmp	r7, #0
 8006172:	f300 808f 	bgt.w	8006294 <_strtod_l+0x85c>
 8006176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006178:	2b00      	cmp	r3, #0
 800617a:	dd08      	ble.n	800618e <_strtod_l+0x756>
 800617c:	4620      	mov	r0, r4
 800617e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006180:	9908      	ldr	r1, [sp, #32]
 8006182:	f7ff f997 	bl	80054b4 <__pow5mult>
 8006186:	9008      	str	r0, [sp, #32]
 8006188:	2800      	cmp	r0, #0
 800618a:	f43f ae93 	beq.w	8005eb4 <_strtod_l+0x47c>
 800618e:	2d00      	cmp	r5, #0
 8006190:	dd08      	ble.n	80061a4 <_strtod_l+0x76c>
 8006192:	462a      	mov	r2, r5
 8006194:	4620      	mov	r0, r4
 8006196:	9908      	ldr	r1, [sp, #32]
 8006198:	f7ff f9e6 	bl	8005568 <__lshift>
 800619c:	9008      	str	r0, [sp, #32]
 800619e:	2800      	cmp	r0, #0
 80061a0:	f43f ae88 	beq.w	8005eb4 <_strtod_l+0x47c>
 80061a4:	f1ba 0f00 	cmp.w	sl, #0
 80061a8:	dd08      	ble.n	80061bc <_strtod_l+0x784>
 80061aa:	4659      	mov	r1, fp
 80061ac:	4652      	mov	r2, sl
 80061ae:	4620      	mov	r0, r4
 80061b0:	f7ff f9da 	bl	8005568 <__lshift>
 80061b4:	4683      	mov	fp, r0
 80061b6:	2800      	cmp	r0, #0
 80061b8:	f43f ae7c 	beq.w	8005eb4 <_strtod_l+0x47c>
 80061bc:	4620      	mov	r0, r4
 80061be:	9a08      	ldr	r2, [sp, #32]
 80061c0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80061c2:	f7ff fa59 	bl	8005678 <__mdiff>
 80061c6:	4606      	mov	r6, r0
 80061c8:	2800      	cmp	r0, #0
 80061ca:	f43f ae73 	beq.w	8005eb4 <_strtod_l+0x47c>
 80061ce:	2500      	movs	r5, #0
 80061d0:	68c3      	ldr	r3, [r0, #12]
 80061d2:	4659      	mov	r1, fp
 80061d4:	60c5      	str	r5, [r0, #12]
 80061d6:	930a      	str	r3, [sp, #40]	; 0x28
 80061d8:	f7ff fa32 	bl	8005640 <__mcmp>
 80061dc:	42a8      	cmp	r0, r5
 80061de:	da6b      	bge.n	80062b8 <_strtod_l+0x880>
 80061e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061e2:	ea53 0308 	orrs.w	r3, r3, r8
 80061e6:	f040 808f 	bne.w	8006308 <_strtod_l+0x8d0>
 80061ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f040 808a 	bne.w	8006308 <_strtod_l+0x8d0>
 80061f4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80061f8:	0d1b      	lsrs	r3, r3, #20
 80061fa:	051b      	lsls	r3, r3, #20
 80061fc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006200:	f240 8082 	bls.w	8006308 <_strtod_l+0x8d0>
 8006204:	6973      	ldr	r3, [r6, #20]
 8006206:	b913      	cbnz	r3, 800620e <_strtod_l+0x7d6>
 8006208:	6933      	ldr	r3, [r6, #16]
 800620a:	2b01      	cmp	r3, #1
 800620c:	dd7c      	ble.n	8006308 <_strtod_l+0x8d0>
 800620e:	4631      	mov	r1, r6
 8006210:	2201      	movs	r2, #1
 8006212:	4620      	mov	r0, r4
 8006214:	f7ff f9a8 	bl	8005568 <__lshift>
 8006218:	4659      	mov	r1, fp
 800621a:	4606      	mov	r6, r0
 800621c:	f7ff fa10 	bl	8005640 <__mcmp>
 8006220:	2800      	cmp	r0, #0
 8006222:	dd71      	ble.n	8006308 <_strtod_l+0x8d0>
 8006224:	9905      	ldr	r1, [sp, #20]
 8006226:	464b      	mov	r3, r9
 8006228:	4a21      	ldr	r2, [pc, #132]	; (80062b0 <_strtod_l+0x878>)
 800622a:	2900      	cmp	r1, #0
 800622c:	f000 808d 	beq.w	800634a <_strtod_l+0x912>
 8006230:	ea02 0109 	and.w	r1, r2, r9
 8006234:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006238:	f300 8087 	bgt.w	800634a <_strtod_l+0x912>
 800623c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006240:	f77f aea9 	ble.w	8005f96 <_strtod_l+0x55e>
 8006244:	4640      	mov	r0, r8
 8006246:	4649      	mov	r1, r9
 8006248:	4b1a      	ldr	r3, [pc, #104]	; (80062b4 <_strtod_l+0x87c>)
 800624a:	2200      	movs	r2, #0
 800624c:	f7fa f944 	bl	80004d8 <__aeabi_dmul>
 8006250:	4b17      	ldr	r3, [pc, #92]	; (80062b0 <_strtod_l+0x878>)
 8006252:	4680      	mov	r8, r0
 8006254:	400b      	ands	r3, r1
 8006256:	4689      	mov	r9, r1
 8006258:	2b00      	cmp	r3, #0
 800625a:	f47f ae35 	bne.w	8005ec8 <_strtod_l+0x490>
 800625e:	2322      	movs	r3, #34	; 0x22
 8006260:	6023      	str	r3, [r4, #0]
 8006262:	e631      	b.n	8005ec8 <_strtod_l+0x490>
 8006264:	f04f 32ff 	mov.w	r2, #4294967295
 8006268:	fa02 f303 	lsl.w	r3, r2, r3
 800626c:	ea03 0808 	and.w	r8, r3, r8
 8006270:	e6de      	b.n	8006030 <_strtod_l+0x5f8>
 8006272:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8006276:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800627a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800627e:	37e2      	adds	r7, #226	; 0xe2
 8006280:	fa01 f307 	lsl.w	r3, r1, r7
 8006284:	9310      	str	r3, [sp, #64]	; 0x40
 8006286:	9113      	str	r1, [sp, #76]	; 0x4c
 8006288:	e745      	b.n	8006116 <_strtod_l+0x6de>
 800628a:	2300      	movs	r3, #0
 800628c:	9310      	str	r3, [sp, #64]	; 0x40
 800628e:	2301      	movs	r3, #1
 8006290:	9313      	str	r3, [sp, #76]	; 0x4c
 8006292:	e740      	b.n	8006116 <_strtod_l+0x6de>
 8006294:	463a      	mov	r2, r7
 8006296:	4620      	mov	r0, r4
 8006298:	991a      	ldr	r1, [sp, #104]	; 0x68
 800629a:	f7ff f965 	bl	8005568 <__lshift>
 800629e:	901a      	str	r0, [sp, #104]	; 0x68
 80062a0:	2800      	cmp	r0, #0
 80062a2:	f47f af68 	bne.w	8006176 <_strtod_l+0x73e>
 80062a6:	e605      	b.n	8005eb4 <_strtod_l+0x47c>
 80062a8:	08007ab0 	.word	0x08007ab0
 80062ac:	fffffc02 	.word	0xfffffc02
 80062b0:	7ff00000 	.word	0x7ff00000
 80062b4:	39500000 	.word	0x39500000
 80062b8:	46ca      	mov	sl, r9
 80062ba:	d165      	bne.n	8006388 <_strtod_l+0x950>
 80062bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80062c2:	b352      	cbz	r2, 800631a <_strtod_l+0x8e2>
 80062c4:	4a9e      	ldr	r2, [pc, #632]	; (8006540 <_strtod_l+0xb08>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d12a      	bne.n	8006320 <_strtod_l+0x8e8>
 80062ca:	9b05      	ldr	r3, [sp, #20]
 80062cc:	4641      	mov	r1, r8
 80062ce:	b1fb      	cbz	r3, 8006310 <_strtod_l+0x8d8>
 80062d0:	4b9c      	ldr	r3, [pc, #624]	; (8006544 <_strtod_l+0xb0c>)
 80062d2:	f04f 32ff 	mov.w	r2, #4294967295
 80062d6:	ea09 0303 	and.w	r3, r9, r3
 80062da:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80062de:	d81a      	bhi.n	8006316 <_strtod_l+0x8de>
 80062e0:	0d1b      	lsrs	r3, r3, #20
 80062e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80062e6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ea:	4299      	cmp	r1, r3
 80062ec:	d118      	bne.n	8006320 <_strtod_l+0x8e8>
 80062ee:	4b96      	ldr	r3, [pc, #600]	; (8006548 <_strtod_l+0xb10>)
 80062f0:	459a      	cmp	sl, r3
 80062f2:	d102      	bne.n	80062fa <_strtod_l+0x8c2>
 80062f4:	3101      	adds	r1, #1
 80062f6:	f43f addd 	beq.w	8005eb4 <_strtod_l+0x47c>
 80062fa:	f04f 0800 	mov.w	r8, #0
 80062fe:	4b91      	ldr	r3, [pc, #580]	; (8006544 <_strtod_l+0xb0c>)
 8006300:	ea0a 0303 	and.w	r3, sl, r3
 8006304:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8006308:	9b05      	ldr	r3, [sp, #20]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d19a      	bne.n	8006244 <_strtod_l+0x80c>
 800630e:	e5db      	b.n	8005ec8 <_strtod_l+0x490>
 8006310:	f04f 33ff 	mov.w	r3, #4294967295
 8006314:	e7e9      	b.n	80062ea <_strtod_l+0x8b2>
 8006316:	4613      	mov	r3, r2
 8006318:	e7e7      	b.n	80062ea <_strtod_l+0x8b2>
 800631a:	ea53 0308 	orrs.w	r3, r3, r8
 800631e:	d081      	beq.n	8006224 <_strtod_l+0x7ec>
 8006320:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006322:	b1e3      	cbz	r3, 800635e <_strtod_l+0x926>
 8006324:	ea13 0f0a 	tst.w	r3, sl
 8006328:	d0ee      	beq.n	8006308 <_strtod_l+0x8d0>
 800632a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800632c:	4640      	mov	r0, r8
 800632e:	4649      	mov	r1, r9
 8006330:	9a05      	ldr	r2, [sp, #20]
 8006332:	b1c3      	cbz	r3, 8006366 <_strtod_l+0x92e>
 8006334:	f7ff fb5c 	bl	80059f0 <sulp>
 8006338:	4602      	mov	r2, r0
 800633a:	460b      	mov	r3, r1
 800633c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800633e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006340:	f7f9 ff14 	bl	800016c <__adddf3>
 8006344:	4680      	mov	r8, r0
 8006346:	4689      	mov	r9, r1
 8006348:	e7de      	b.n	8006308 <_strtod_l+0x8d0>
 800634a:	4013      	ands	r3, r2
 800634c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006350:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006354:	f04f 38ff 	mov.w	r8, #4294967295
 8006358:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800635c:	e7d4      	b.n	8006308 <_strtod_l+0x8d0>
 800635e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006360:	ea13 0f08 	tst.w	r3, r8
 8006364:	e7e0      	b.n	8006328 <_strtod_l+0x8f0>
 8006366:	f7ff fb43 	bl	80059f0 <sulp>
 800636a:	4602      	mov	r2, r0
 800636c:	460b      	mov	r3, r1
 800636e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006370:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006372:	f7f9 fef9 	bl	8000168 <__aeabi_dsub>
 8006376:	2200      	movs	r2, #0
 8006378:	2300      	movs	r3, #0
 800637a:	4680      	mov	r8, r0
 800637c:	4689      	mov	r9, r1
 800637e:	f7fa fb13 	bl	80009a8 <__aeabi_dcmpeq>
 8006382:	2800      	cmp	r0, #0
 8006384:	d0c0      	beq.n	8006308 <_strtod_l+0x8d0>
 8006386:	e606      	b.n	8005f96 <_strtod_l+0x55e>
 8006388:	4659      	mov	r1, fp
 800638a:	4630      	mov	r0, r6
 800638c:	f7ff fabe 	bl	800590c <__ratio>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006398:	2200      	movs	r2, #0
 800639a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800639e:	f7fa fb17 	bl	80009d0 <__aeabi_dcmple>
 80063a2:	2800      	cmp	r0, #0
 80063a4:	d06f      	beq.n	8006486 <_strtod_l+0xa4e>
 80063a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d17c      	bne.n	80064a6 <_strtod_l+0xa6e>
 80063ac:	f1b8 0f00 	cmp.w	r8, #0
 80063b0:	d159      	bne.n	8006466 <_strtod_l+0xa2e>
 80063b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d17b      	bne.n	80064b2 <_strtod_l+0xa7a>
 80063ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063be:	2200      	movs	r2, #0
 80063c0:	4b62      	ldr	r3, [pc, #392]	; (800654c <_strtod_l+0xb14>)
 80063c2:	f7fa fafb 	bl	80009bc <__aeabi_dcmplt>
 80063c6:	2800      	cmp	r0, #0
 80063c8:	d15a      	bne.n	8006480 <_strtod_l+0xa48>
 80063ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063ce:	2200      	movs	r2, #0
 80063d0:	4b5f      	ldr	r3, [pc, #380]	; (8006550 <_strtod_l+0xb18>)
 80063d2:	f7fa f881 	bl	80004d8 <__aeabi_dmul>
 80063d6:	4605      	mov	r5, r0
 80063d8:	460f      	mov	r7, r1
 80063da:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80063de:	9506      	str	r5, [sp, #24]
 80063e0:	9307      	str	r3, [sp, #28]
 80063e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063e6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80063ea:	4b56      	ldr	r3, [pc, #344]	; (8006544 <_strtod_l+0xb0c>)
 80063ec:	4a55      	ldr	r2, [pc, #340]	; (8006544 <_strtod_l+0xb0c>)
 80063ee:	ea0a 0303 	and.w	r3, sl, r3
 80063f2:	9313      	str	r3, [sp, #76]	; 0x4c
 80063f4:	4b57      	ldr	r3, [pc, #348]	; (8006554 <_strtod_l+0xb1c>)
 80063f6:	ea0a 0202 	and.w	r2, sl, r2
 80063fa:	429a      	cmp	r2, r3
 80063fc:	f040 80b0 	bne.w	8006560 <_strtod_l+0xb28>
 8006400:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8006404:	4640      	mov	r0, r8
 8006406:	4649      	mov	r1, r9
 8006408:	f7ff f9c2 	bl	8005790 <__ulp>
 800640c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006410:	f7fa f862 	bl	80004d8 <__aeabi_dmul>
 8006414:	4642      	mov	r2, r8
 8006416:	464b      	mov	r3, r9
 8006418:	f7f9 fea8 	bl	800016c <__adddf3>
 800641c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8006544 <_strtod_l+0xb0c>
 8006420:	4a4d      	ldr	r2, [pc, #308]	; (8006558 <_strtod_l+0xb20>)
 8006422:	ea01 0a0a 	and.w	sl, r1, sl
 8006426:	4592      	cmp	sl, r2
 8006428:	4680      	mov	r8, r0
 800642a:	d948      	bls.n	80064be <_strtod_l+0xa86>
 800642c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800642e:	4b46      	ldr	r3, [pc, #280]	; (8006548 <_strtod_l+0xb10>)
 8006430:	429a      	cmp	r2, r3
 8006432:	d103      	bne.n	800643c <_strtod_l+0xa04>
 8006434:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006436:	3301      	adds	r3, #1
 8006438:	f43f ad3c 	beq.w	8005eb4 <_strtod_l+0x47c>
 800643c:	f04f 38ff 	mov.w	r8, #4294967295
 8006440:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8006548 <_strtod_l+0xb10>
 8006444:	4620      	mov	r0, r4
 8006446:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006448:	f7fe fe76 	bl	8005138 <_Bfree>
 800644c:	4620      	mov	r0, r4
 800644e:	9908      	ldr	r1, [sp, #32]
 8006450:	f7fe fe72 	bl	8005138 <_Bfree>
 8006454:	4659      	mov	r1, fp
 8006456:	4620      	mov	r0, r4
 8006458:	f7fe fe6e 	bl	8005138 <_Bfree>
 800645c:	4631      	mov	r1, r6
 800645e:	4620      	mov	r0, r4
 8006460:	f7fe fe6a 	bl	8005138 <_Bfree>
 8006464:	e605      	b.n	8006072 <_strtod_l+0x63a>
 8006466:	f1b8 0f01 	cmp.w	r8, #1
 800646a:	d103      	bne.n	8006474 <_strtod_l+0xa3c>
 800646c:	f1b9 0f00 	cmp.w	r9, #0
 8006470:	f43f ad91 	beq.w	8005f96 <_strtod_l+0x55e>
 8006474:	2200      	movs	r2, #0
 8006476:	4b39      	ldr	r3, [pc, #228]	; (800655c <_strtod_l+0xb24>)
 8006478:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800647a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800647e:	e016      	b.n	80064ae <_strtod_l+0xa76>
 8006480:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006482:	4f33      	ldr	r7, [pc, #204]	; (8006550 <_strtod_l+0xb18>)
 8006484:	e7a9      	b.n	80063da <_strtod_l+0x9a2>
 8006486:	4b32      	ldr	r3, [pc, #200]	; (8006550 <_strtod_l+0xb18>)
 8006488:	2200      	movs	r2, #0
 800648a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800648e:	f7fa f823 	bl	80004d8 <__aeabi_dmul>
 8006492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006494:	4605      	mov	r5, r0
 8006496:	460f      	mov	r7, r1
 8006498:	2b00      	cmp	r3, #0
 800649a:	d09e      	beq.n	80063da <_strtod_l+0x9a2>
 800649c:	4602      	mov	r2, r0
 800649e:	460b      	mov	r3, r1
 80064a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80064a4:	e79d      	b.n	80063e2 <_strtod_l+0x9aa>
 80064a6:	2200      	movs	r2, #0
 80064a8:	4b28      	ldr	r3, [pc, #160]	; (800654c <_strtod_l+0xb14>)
 80064aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80064ae:	4f27      	ldr	r7, [pc, #156]	; (800654c <_strtod_l+0xb14>)
 80064b0:	e797      	b.n	80063e2 <_strtod_l+0x9aa>
 80064b2:	2200      	movs	r2, #0
 80064b4:	4b29      	ldr	r3, [pc, #164]	; (800655c <_strtod_l+0xb24>)
 80064b6:	4645      	mov	r5, r8
 80064b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80064bc:	e7f7      	b.n	80064ae <_strtod_l+0xa76>
 80064be:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80064c2:	9b05      	ldr	r3, [sp, #20]
 80064c4:	46ca      	mov	sl, r9
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1bc      	bne.n	8006444 <_strtod_l+0xa0c>
 80064ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80064ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80064d0:	0d1b      	lsrs	r3, r3, #20
 80064d2:	051b      	lsls	r3, r3, #20
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d1b5      	bne.n	8006444 <_strtod_l+0xa0c>
 80064d8:	4628      	mov	r0, r5
 80064da:	4639      	mov	r1, r7
 80064dc:	f7fa fb44 	bl	8000b68 <__aeabi_d2lz>
 80064e0:	f7f9 ffcc 	bl	800047c <__aeabi_l2d>
 80064e4:	4602      	mov	r2, r0
 80064e6:	460b      	mov	r3, r1
 80064e8:	4628      	mov	r0, r5
 80064ea:	4639      	mov	r1, r7
 80064ec:	f7f9 fe3c 	bl	8000168 <__aeabi_dsub>
 80064f0:	460b      	mov	r3, r1
 80064f2:	4602      	mov	r2, r0
 80064f4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80064f8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80064fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064fe:	ea4a 0a08 	orr.w	sl, sl, r8
 8006502:	ea5a 0a03 	orrs.w	sl, sl, r3
 8006506:	d06c      	beq.n	80065e2 <_strtod_l+0xbaa>
 8006508:	a309      	add	r3, pc, #36	; (adr r3, 8006530 <_strtod_l+0xaf8>)
 800650a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650e:	f7fa fa55 	bl	80009bc <__aeabi_dcmplt>
 8006512:	2800      	cmp	r0, #0
 8006514:	f47f acd8 	bne.w	8005ec8 <_strtod_l+0x490>
 8006518:	a307      	add	r3, pc, #28	; (adr r3, 8006538 <_strtod_l+0xb00>)
 800651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006522:	f7fa fa69 	bl	80009f8 <__aeabi_dcmpgt>
 8006526:	2800      	cmp	r0, #0
 8006528:	d08c      	beq.n	8006444 <_strtod_l+0xa0c>
 800652a:	e4cd      	b.n	8005ec8 <_strtod_l+0x490>
 800652c:	f3af 8000 	nop.w
 8006530:	94a03595 	.word	0x94a03595
 8006534:	3fdfffff 	.word	0x3fdfffff
 8006538:	35afe535 	.word	0x35afe535
 800653c:	3fe00000 	.word	0x3fe00000
 8006540:	000fffff 	.word	0x000fffff
 8006544:	7ff00000 	.word	0x7ff00000
 8006548:	7fefffff 	.word	0x7fefffff
 800654c:	3ff00000 	.word	0x3ff00000
 8006550:	3fe00000 	.word	0x3fe00000
 8006554:	7fe00000 	.word	0x7fe00000
 8006558:	7c9fffff 	.word	0x7c9fffff
 800655c:	bff00000 	.word	0xbff00000
 8006560:	9b05      	ldr	r3, [sp, #20]
 8006562:	b333      	cbz	r3, 80065b2 <_strtod_l+0xb7a>
 8006564:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006566:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800656a:	d822      	bhi.n	80065b2 <_strtod_l+0xb7a>
 800656c:	a328      	add	r3, pc, #160	; (adr r3, 8006610 <_strtod_l+0xbd8>)
 800656e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006572:	4628      	mov	r0, r5
 8006574:	4639      	mov	r1, r7
 8006576:	f7fa fa2b 	bl	80009d0 <__aeabi_dcmple>
 800657a:	b1a0      	cbz	r0, 80065a6 <_strtod_l+0xb6e>
 800657c:	4639      	mov	r1, r7
 800657e:	4628      	mov	r0, r5
 8006580:	f7fa fa82 	bl	8000a88 <__aeabi_d2uiz>
 8006584:	2801      	cmp	r0, #1
 8006586:	bf38      	it	cc
 8006588:	2001      	movcc	r0, #1
 800658a:	f7f9 ff2b 	bl	80003e4 <__aeabi_ui2d>
 800658e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006590:	4605      	mov	r5, r0
 8006592:	460f      	mov	r7, r1
 8006594:	bb03      	cbnz	r3, 80065d8 <_strtod_l+0xba0>
 8006596:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800659a:	9014      	str	r0, [sp, #80]	; 0x50
 800659c:	9315      	str	r3, [sp, #84]	; 0x54
 800659e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80065a2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80065a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80065aa:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80065ae:	1a9b      	subs	r3, r3, r2
 80065b0:	9311      	str	r3, [sp, #68]	; 0x44
 80065b2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80065b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80065b6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80065ba:	f7ff f8e9 	bl	8005790 <__ulp>
 80065be:	4602      	mov	r2, r0
 80065c0:	460b      	mov	r3, r1
 80065c2:	4640      	mov	r0, r8
 80065c4:	4649      	mov	r1, r9
 80065c6:	f7f9 ff87 	bl	80004d8 <__aeabi_dmul>
 80065ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065ce:	f7f9 fdcd 	bl	800016c <__adddf3>
 80065d2:	4680      	mov	r8, r0
 80065d4:	4689      	mov	r9, r1
 80065d6:	e774      	b.n	80064c2 <_strtod_l+0xa8a>
 80065d8:	4602      	mov	r2, r0
 80065da:	460b      	mov	r3, r1
 80065dc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80065e0:	e7dd      	b.n	800659e <_strtod_l+0xb66>
 80065e2:	a30d      	add	r3, pc, #52	; (adr r3, 8006618 <_strtod_l+0xbe0>)
 80065e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e8:	f7fa f9e8 	bl	80009bc <__aeabi_dcmplt>
 80065ec:	e79b      	b.n	8006526 <_strtod_l+0xaee>
 80065ee:	2300      	movs	r3, #0
 80065f0:	930e      	str	r3, [sp, #56]	; 0x38
 80065f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80065f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80065f6:	6013      	str	r3, [r2, #0]
 80065f8:	f7ff ba5b 	b.w	8005ab2 <_strtod_l+0x7a>
 80065fc:	2a65      	cmp	r2, #101	; 0x65
 80065fe:	f43f ab52 	beq.w	8005ca6 <_strtod_l+0x26e>
 8006602:	2a45      	cmp	r2, #69	; 0x45
 8006604:	f43f ab4f 	beq.w	8005ca6 <_strtod_l+0x26e>
 8006608:	2301      	movs	r3, #1
 800660a:	f7ff bb87 	b.w	8005d1c <_strtod_l+0x2e4>
 800660e:	bf00      	nop
 8006610:	ffc00000 	.word	0xffc00000
 8006614:	41dfffff 	.word	0x41dfffff
 8006618:	94a03595 	.word	0x94a03595
 800661c:	3fcfffff 	.word	0x3fcfffff

08006620 <_strtod_r>:
 8006620:	4b01      	ldr	r3, [pc, #4]	; (8006628 <_strtod_r+0x8>)
 8006622:	f7ff ba09 	b.w	8005a38 <_strtod_l>
 8006626:	bf00      	nop
 8006628:	20000068 	.word	0x20000068

0800662c <_strtol_l.constprop.0>:
 800662c:	2b01      	cmp	r3, #1
 800662e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006632:	4686      	mov	lr, r0
 8006634:	4690      	mov	r8, r2
 8006636:	d001      	beq.n	800663c <_strtol_l.constprop.0+0x10>
 8006638:	2b24      	cmp	r3, #36	; 0x24
 800663a:	d906      	bls.n	800664a <_strtol_l.constprop.0+0x1e>
 800663c:	f7fd fd94 	bl	8004168 <__errno>
 8006640:	2316      	movs	r3, #22
 8006642:	6003      	str	r3, [r0, #0]
 8006644:	2000      	movs	r0, #0
 8006646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800664a:	460d      	mov	r5, r1
 800664c:	4835      	ldr	r0, [pc, #212]	; (8006724 <_strtol_l.constprop.0+0xf8>)
 800664e:	462a      	mov	r2, r5
 8006650:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006654:	5d06      	ldrb	r6, [r0, r4]
 8006656:	f016 0608 	ands.w	r6, r6, #8
 800665a:	d1f8      	bne.n	800664e <_strtol_l.constprop.0+0x22>
 800665c:	2c2d      	cmp	r4, #45	; 0x2d
 800665e:	d12e      	bne.n	80066be <_strtol_l.constprop.0+0x92>
 8006660:	2601      	movs	r6, #1
 8006662:	782c      	ldrb	r4, [r5, #0]
 8006664:	1c95      	adds	r5, r2, #2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d057      	beq.n	800671a <_strtol_l.constprop.0+0xee>
 800666a:	2b10      	cmp	r3, #16
 800666c:	d109      	bne.n	8006682 <_strtol_l.constprop.0+0x56>
 800666e:	2c30      	cmp	r4, #48	; 0x30
 8006670:	d107      	bne.n	8006682 <_strtol_l.constprop.0+0x56>
 8006672:	782a      	ldrb	r2, [r5, #0]
 8006674:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006678:	2a58      	cmp	r2, #88	; 0x58
 800667a:	d149      	bne.n	8006710 <_strtol_l.constprop.0+0xe4>
 800667c:	2310      	movs	r3, #16
 800667e:	786c      	ldrb	r4, [r5, #1]
 8006680:	3502      	adds	r5, #2
 8006682:	2200      	movs	r2, #0
 8006684:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8006688:	f10c 3cff 	add.w	ip, ip, #4294967295
 800668c:	fbbc f9f3 	udiv	r9, ip, r3
 8006690:	4610      	mov	r0, r2
 8006692:	fb03 ca19 	mls	sl, r3, r9, ip
 8006696:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800669a:	2f09      	cmp	r7, #9
 800669c:	d814      	bhi.n	80066c8 <_strtol_l.constprop.0+0x9c>
 800669e:	463c      	mov	r4, r7
 80066a0:	42a3      	cmp	r3, r4
 80066a2:	dd20      	ble.n	80066e6 <_strtol_l.constprop.0+0xba>
 80066a4:	1c57      	adds	r7, r2, #1
 80066a6:	d007      	beq.n	80066b8 <_strtol_l.constprop.0+0x8c>
 80066a8:	4581      	cmp	r9, r0
 80066aa:	d319      	bcc.n	80066e0 <_strtol_l.constprop.0+0xb4>
 80066ac:	d101      	bne.n	80066b2 <_strtol_l.constprop.0+0x86>
 80066ae:	45a2      	cmp	sl, r4
 80066b0:	db16      	blt.n	80066e0 <_strtol_l.constprop.0+0xb4>
 80066b2:	2201      	movs	r2, #1
 80066b4:	fb00 4003 	mla	r0, r0, r3, r4
 80066b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066bc:	e7eb      	b.n	8006696 <_strtol_l.constprop.0+0x6a>
 80066be:	2c2b      	cmp	r4, #43	; 0x2b
 80066c0:	bf04      	itt	eq
 80066c2:	782c      	ldrbeq	r4, [r5, #0]
 80066c4:	1c95      	addeq	r5, r2, #2
 80066c6:	e7ce      	b.n	8006666 <_strtol_l.constprop.0+0x3a>
 80066c8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80066cc:	2f19      	cmp	r7, #25
 80066ce:	d801      	bhi.n	80066d4 <_strtol_l.constprop.0+0xa8>
 80066d0:	3c37      	subs	r4, #55	; 0x37
 80066d2:	e7e5      	b.n	80066a0 <_strtol_l.constprop.0+0x74>
 80066d4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80066d8:	2f19      	cmp	r7, #25
 80066da:	d804      	bhi.n	80066e6 <_strtol_l.constprop.0+0xba>
 80066dc:	3c57      	subs	r4, #87	; 0x57
 80066de:	e7df      	b.n	80066a0 <_strtol_l.constprop.0+0x74>
 80066e0:	f04f 32ff 	mov.w	r2, #4294967295
 80066e4:	e7e8      	b.n	80066b8 <_strtol_l.constprop.0+0x8c>
 80066e6:	1c53      	adds	r3, r2, #1
 80066e8:	d108      	bne.n	80066fc <_strtol_l.constprop.0+0xd0>
 80066ea:	2322      	movs	r3, #34	; 0x22
 80066ec:	4660      	mov	r0, ip
 80066ee:	f8ce 3000 	str.w	r3, [lr]
 80066f2:	f1b8 0f00 	cmp.w	r8, #0
 80066f6:	d0a6      	beq.n	8006646 <_strtol_l.constprop.0+0x1a>
 80066f8:	1e69      	subs	r1, r5, #1
 80066fa:	e006      	b.n	800670a <_strtol_l.constprop.0+0xde>
 80066fc:	b106      	cbz	r6, 8006700 <_strtol_l.constprop.0+0xd4>
 80066fe:	4240      	negs	r0, r0
 8006700:	f1b8 0f00 	cmp.w	r8, #0
 8006704:	d09f      	beq.n	8006646 <_strtol_l.constprop.0+0x1a>
 8006706:	2a00      	cmp	r2, #0
 8006708:	d1f6      	bne.n	80066f8 <_strtol_l.constprop.0+0xcc>
 800670a:	f8c8 1000 	str.w	r1, [r8]
 800670e:	e79a      	b.n	8006646 <_strtol_l.constprop.0+0x1a>
 8006710:	2430      	movs	r4, #48	; 0x30
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1b5      	bne.n	8006682 <_strtol_l.constprop.0+0x56>
 8006716:	2308      	movs	r3, #8
 8006718:	e7b3      	b.n	8006682 <_strtol_l.constprop.0+0x56>
 800671a:	2c30      	cmp	r4, #48	; 0x30
 800671c:	d0a9      	beq.n	8006672 <_strtol_l.constprop.0+0x46>
 800671e:	230a      	movs	r3, #10
 8006720:	e7af      	b.n	8006682 <_strtol_l.constprop.0+0x56>
 8006722:	bf00      	nop
 8006724:	08007ad9 	.word	0x08007ad9

08006728 <_strtol_r>:
 8006728:	f7ff bf80 	b.w	800662c <_strtol_l.constprop.0>

0800672c <__ssputs_r>:
 800672c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006730:	461f      	mov	r7, r3
 8006732:	688e      	ldr	r6, [r1, #8]
 8006734:	4682      	mov	sl, r0
 8006736:	42be      	cmp	r6, r7
 8006738:	460c      	mov	r4, r1
 800673a:	4690      	mov	r8, r2
 800673c:	680b      	ldr	r3, [r1, #0]
 800673e:	d82c      	bhi.n	800679a <__ssputs_r+0x6e>
 8006740:	898a      	ldrh	r2, [r1, #12]
 8006742:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006746:	d026      	beq.n	8006796 <__ssputs_r+0x6a>
 8006748:	6965      	ldr	r5, [r4, #20]
 800674a:	6909      	ldr	r1, [r1, #16]
 800674c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006750:	eba3 0901 	sub.w	r9, r3, r1
 8006754:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006758:	1c7b      	adds	r3, r7, #1
 800675a:	444b      	add	r3, r9
 800675c:	106d      	asrs	r5, r5, #1
 800675e:	429d      	cmp	r5, r3
 8006760:	bf38      	it	cc
 8006762:	461d      	movcc	r5, r3
 8006764:	0553      	lsls	r3, r2, #21
 8006766:	d527      	bpl.n	80067b8 <__ssputs_r+0x8c>
 8006768:	4629      	mov	r1, r5
 800676a:	f7fe fc19 	bl	8004fa0 <_malloc_r>
 800676e:	4606      	mov	r6, r0
 8006770:	b360      	cbz	r0, 80067cc <__ssputs_r+0xa0>
 8006772:	464a      	mov	r2, r9
 8006774:	6921      	ldr	r1, [r4, #16]
 8006776:	f000 fbdd 	bl	8006f34 <memcpy>
 800677a:	89a3      	ldrh	r3, [r4, #12]
 800677c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006784:	81a3      	strh	r3, [r4, #12]
 8006786:	6126      	str	r6, [r4, #16]
 8006788:	444e      	add	r6, r9
 800678a:	6026      	str	r6, [r4, #0]
 800678c:	463e      	mov	r6, r7
 800678e:	6165      	str	r5, [r4, #20]
 8006790:	eba5 0509 	sub.w	r5, r5, r9
 8006794:	60a5      	str	r5, [r4, #8]
 8006796:	42be      	cmp	r6, r7
 8006798:	d900      	bls.n	800679c <__ssputs_r+0x70>
 800679a:	463e      	mov	r6, r7
 800679c:	4632      	mov	r2, r6
 800679e:	4641      	mov	r1, r8
 80067a0:	6820      	ldr	r0, [r4, #0]
 80067a2:	f000 fb68 	bl	8006e76 <memmove>
 80067a6:	2000      	movs	r0, #0
 80067a8:	68a3      	ldr	r3, [r4, #8]
 80067aa:	1b9b      	subs	r3, r3, r6
 80067ac:	60a3      	str	r3, [r4, #8]
 80067ae:	6823      	ldr	r3, [r4, #0]
 80067b0:	4433      	add	r3, r6
 80067b2:	6023      	str	r3, [r4, #0]
 80067b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067b8:	462a      	mov	r2, r5
 80067ba:	f000 ff6c 	bl	8007696 <_realloc_r>
 80067be:	4606      	mov	r6, r0
 80067c0:	2800      	cmp	r0, #0
 80067c2:	d1e0      	bne.n	8006786 <__ssputs_r+0x5a>
 80067c4:	4650      	mov	r0, sl
 80067c6:	6921      	ldr	r1, [r4, #16]
 80067c8:	f7fe fb7a 	bl	8004ec0 <_free_r>
 80067cc:	230c      	movs	r3, #12
 80067ce:	f8ca 3000 	str.w	r3, [sl]
 80067d2:	89a3      	ldrh	r3, [r4, #12]
 80067d4:	f04f 30ff 	mov.w	r0, #4294967295
 80067d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067dc:	81a3      	strh	r3, [r4, #12]
 80067de:	e7e9      	b.n	80067b4 <__ssputs_r+0x88>

080067e0 <_svfiprintf_r>:
 80067e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e4:	4698      	mov	r8, r3
 80067e6:	898b      	ldrh	r3, [r1, #12]
 80067e8:	4607      	mov	r7, r0
 80067ea:	061b      	lsls	r3, r3, #24
 80067ec:	460d      	mov	r5, r1
 80067ee:	4614      	mov	r4, r2
 80067f0:	b09d      	sub	sp, #116	; 0x74
 80067f2:	d50e      	bpl.n	8006812 <_svfiprintf_r+0x32>
 80067f4:	690b      	ldr	r3, [r1, #16]
 80067f6:	b963      	cbnz	r3, 8006812 <_svfiprintf_r+0x32>
 80067f8:	2140      	movs	r1, #64	; 0x40
 80067fa:	f7fe fbd1 	bl	8004fa0 <_malloc_r>
 80067fe:	6028      	str	r0, [r5, #0]
 8006800:	6128      	str	r0, [r5, #16]
 8006802:	b920      	cbnz	r0, 800680e <_svfiprintf_r+0x2e>
 8006804:	230c      	movs	r3, #12
 8006806:	603b      	str	r3, [r7, #0]
 8006808:	f04f 30ff 	mov.w	r0, #4294967295
 800680c:	e0d0      	b.n	80069b0 <_svfiprintf_r+0x1d0>
 800680e:	2340      	movs	r3, #64	; 0x40
 8006810:	616b      	str	r3, [r5, #20]
 8006812:	2300      	movs	r3, #0
 8006814:	9309      	str	r3, [sp, #36]	; 0x24
 8006816:	2320      	movs	r3, #32
 8006818:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800681c:	2330      	movs	r3, #48	; 0x30
 800681e:	f04f 0901 	mov.w	r9, #1
 8006822:	f8cd 800c 	str.w	r8, [sp, #12]
 8006826:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80069c8 <_svfiprintf_r+0x1e8>
 800682a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800682e:	4623      	mov	r3, r4
 8006830:	469a      	mov	sl, r3
 8006832:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006836:	b10a      	cbz	r2, 800683c <_svfiprintf_r+0x5c>
 8006838:	2a25      	cmp	r2, #37	; 0x25
 800683a:	d1f9      	bne.n	8006830 <_svfiprintf_r+0x50>
 800683c:	ebba 0b04 	subs.w	fp, sl, r4
 8006840:	d00b      	beq.n	800685a <_svfiprintf_r+0x7a>
 8006842:	465b      	mov	r3, fp
 8006844:	4622      	mov	r2, r4
 8006846:	4629      	mov	r1, r5
 8006848:	4638      	mov	r0, r7
 800684a:	f7ff ff6f 	bl	800672c <__ssputs_r>
 800684e:	3001      	adds	r0, #1
 8006850:	f000 80a9 	beq.w	80069a6 <_svfiprintf_r+0x1c6>
 8006854:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006856:	445a      	add	r2, fp
 8006858:	9209      	str	r2, [sp, #36]	; 0x24
 800685a:	f89a 3000 	ldrb.w	r3, [sl]
 800685e:	2b00      	cmp	r3, #0
 8006860:	f000 80a1 	beq.w	80069a6 <_svfiprintf_r+0x1c6>
 8006864:	2300      	movs	r3, #0
 8006866:	f04f 32ff 	mov.w	r2, #4294967295
 800686a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800686e:	f10a 0a01 	add.w	sl, sl, #1
 8006872:	9304      	str	r3, [sp, #16]
 8006874:	9307      	str	r3, [sp, #28]
 8006876:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800687a:	931a      	str	r3, [sp, #104]	; 0x68
 800687c:	4654      	mov	r4, sl
 800687e:	2205      	movs	r2, #5
 8006880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006884:	4850      	ldr	r0, [pc, #320]	; (80069c8 <_svfiprintf_r+0x1e8>)
 8006886:	f7fd fc9b 	bl	80041c0 <memchr>
 800688a:	9a04      	ldr	r2, [sp, #16]
 800688c:	b9d8      	cbnz	r0, 80068c6 <_svfiprintf_r+0xe6>
 800688e:	06d0      	lsls	r0, r2, #27
 8006890:	bf44      	itt	mi
 8006892:	2320      	movmi	r3, #32
 8006894:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006898:	0711      	lsls	r1, r2, #28
 800689a:	bf44      	itt	mi
 800689c:	232b      	movmi	r3, #43	; 0x2b
 800689e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068a2:	f89a 3000 	ldrb.w	r3, [sl]
 80068a6:	2b2a      	cmp	r3, #42	; 0x2a
 80068a8:	d015      	beq.n	80068d6 <_svfiprintf_r+0xf6>
 80068aa:	4654      	mov	r4, sl
 80068ac:	2000      	movs	r0, #0
 80068ae:	f04f 0c0a 	mov.w	ip, #10
 80068b2:	9a07      	ldr	r2, [sp, #28]
 80068b4:	4621      	mov	r1, r4
 80068b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068ba:	3b30      	subs	r3, #48	; 0x30
 80068bc:	2b09      	cmp	r3, #9
 80068be:	d94d      	bls.n	800695c <_svfiprintf_r+0x17c>
 80068c0:	b1b0      	cbz	r0, 80068f0 <_svfiprintf_r+0x110>
 80068c2:	9207      	str	r2, [sp, #28]
 80068c4:	e014      	b.n	80068f0 <_svfiprintf_r+0x110>
 80068c6:	eba0 0308 	sub.w	r3, r0, r8
 80068ca:	fa09 f303 	lsl.w	r3, r9, r3
 80068ce:	4313      	orrs	r3, r2
 80068d0:	46a2      	mov	sl, r4
 80068d2:	9304      	str	r3, [sp, #16]
 80068d4:	e7d2      	b.n	800687c <_svfiprintf_r+0x9c>
 80068d6:	9b03      	ldr	r3, [sp, #12]
 80068d8:	1d19      	adds	r1, r3, #4
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	9103      	str	r1, [sp, #12]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	bfbb      	ittet	lt
 80068e2:	425b      	neglt	r3, r3
 80068e4:	f042 0202 	orrlt.w	r2, r2, #2
 80068e8:	9307      	strge	r3, [sp, #28]
 80068ea:	9307      	strlt	r3, [sp, #28]
 80068ec:	bfb8      	it	lt
 80068ee:	9204      	strlt	r2, [sp, #16]
 80068f0:	7823      	ldrb	r3, [r4, #0]
 80068f2:	2b2e      	cmp	r3, #46	; 0x2e
 80068f4:	d10c      	bne.n	8006910 <_svfiprintf_r+0x130>
 80068f6:	7863      	ldrb	r3, [r4, #1]
 80068f8:	2b2a      	cmp	r3, #42	; 0x2a
 80068fa:	d134      	bne.n	8006966 <_svfiprintf_r+0x186>
 80068fc:	9b03      	ldr	r3, [sp, #12]
 80068fe:	3402      	adds	r4, #2
 8006900:	1d1a      	adds	r2, r3, #4
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	9203      	str	r2, [sp, #12]
 8006906:	2b00      	cmp	r3, #0
 8006908:	bfb8      	it	lt
 800690a:	f04f 33ff 	movlt.w	r3, #4294967295
 800690e:	9305      	str	r3, [sp, #20]
 8006910:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80069cc <_svfiprintf_r+0x1ec>
 8006914:	2203      	movs	r2, #3
 8006916:	4650      	mov	r0, sl
 8006918:	7821      	ldrb	r1, [r4, #0]
 800691a:	f7fd fc51 	bl	80041c0 <memchr>
 800691e:	b138      	cbz	r0, 8006930 <_svfiprintf_r+0x150>
 8006920:	2240      	movs	r2, #64	; 0x40
 8006922:	9b04      	ldr	r3, [sp, #16]
 8006924:	eba0 000a 	sub.w	r0, r0, sl
 8006928:	4082      	lsls	r2, r0
 800692a:	4313      	orrs	r3, r2
 800692c:	3401      	adds	r4, #1
 800692e:	9304      	str	r3, [sp, #16]
 8006930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006934:	2206      	movs	r2, #6
 8006936:	4826      	ldr	r0, [pc, #152]	; (80069d0 <_svfiprintf_r+0x1f0>)
 8006938:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800693c:	f7fd fc40 	bl	80041c0 <memchr>
 8006940:	2800      	cmp	r0, #0
 8006942:	d038      	beq.n	80069b6 <_svfiprintf_r+0x1d6>
 8006944:	4b23      	ldr	r3, [pc, #140]	; (80069d4 <_svfiprintf_r+0x1f4>)
 8006946:	bb1b      	cbnz	r3, 8006990 <_svfiprintf_r+0x1b0>
 8006948:	9b03      	ldr	r3, [sp, #12]
 800694a:	3307      	adds	r3, #7
 800694c:	f023 0307 	bic.w	r3, r3, #7
 8006950:	3308      	adds	r3, #8
 8006952:	9303      	str	r3, [sp, #12]
 8006954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006956:	4433      	add	r3, r6
 8006958:	9309      	str	r3, [sp, #36]	; 0x24
 800695a:	e768      	b.n	800682e <_svfiprintf_r+0x4e>
 800695c:	460c      	mov	r4, r1
 800695e:	2001      	movs	r0, #1
 8006960:	fb0c 3202 	mla	r2, ip, r2, r3
 8006964:	e7a6      	b.n	80068b4 <_svfiprintf_r+0xd4>
 8006966:	2300      	movs	r3, #0
 8006968:	f04f 0c0a 	mov.w	ip, #10
 800696c:	4619      	mov	r1, r3
 800696e:	3401      	adds	r4, #1
 8006970:	9305      	str	r3, [sp, #20]
 8006972:	4620      	mov	r0, r4
 8006974:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006978:	3a30      	subs	r2, #48	; 0x30
 800697a:	2a09      	cmp	r2, #9
 800697c:	d903      	bls.n	8006986 <_svfiprintf_r+0x1a6>
 800697e:	2b00      	cmp	r3, #0
 8006980:	d0c6      	beq.n	8006910 <_svfiprintf_r+0x130>
 8006982:	9105      	str	r1, [sp, #20]
 8006984:	e7c4      	b.n	8006910 <_svfiprintf_r+0x130>
 8006986:	4604      	mov	r4, r0
 8006988:	2301      	movs	r3, #1
 800698a:	fb0c 2101 	mla	r1, ip, r1, r2
 800698e:	e7f0      	b.n	8006972 <_svfiprintf_r+0x192>
 8006990:	ab03      	add	r3, sp, #12
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	462a      	mov	r2, r5
 8006996:	4638      	mov	r0, r7
 8006998:	4b0f      	ldr	r3, [pc, #60]	; (80069d8 <_svfiprintf_r+0x1f8>)
 800699a:	a904      	add	r1, sp, #16
 800699c:	f7fc fbac 	bl	80030f8 <_printf_float>
 80069a0:	1c42      	adds	r2, r0, #1
 80069a2:	4606      	mov	r6, r0
 80069a4:	d1d6      	bne.n	8006954 <_svfiprintf_r+0x174>
 80069a6:	89ab      	ldrh	r3, [r5, #12]
 80069a8:	065b      	lsls	r3, r3, #25
 80069aa:	f53f af2d 	bmi.w	8006808 <_svfiprintf_r+0x28>
 80069ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069b0:	b01d      	add	sp, #116	; 0x74
 80069b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b6:	ab03      	add	r3, sp, #12
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	462a      	mov	r2, r5
 80069bc:	4638      	mov	r0, r7
 80069be:	4b06      	ldr	r3, [pc, #24]	; (80069d8 <_svfiprintf_r+0x1f8>)
 80069c0:	a904      	add	r1, sp, #16
 80069c2:	f7fc fe39 	bl	8003638 <_printf_i>
 80069c6:	e7eb      	b.n	80069a0 <_svfiprintf_r+0x1c0>
 80069c8:	08007bd9 	.word	0x08007bd9
 80069cc:	08007bdf 	.word	0x08007bdf
 80069d0:	08007be3 	.word	0x08007be3
 80069d4:	080030f9 	.word	0x080030f9
 80069d8:	0800672d 	.word	0x0800672d

080069dc <__sfputc_r>:
 80069dc:	6893      	ldr	r3, [r2, #8]
 80069de:	b410      	push	{r4}
 80069e0:	3b01      	subs	r3, #1
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	6093      	str	r3, [r2, #8]
 80069e6:	da07      	bge.n	80069f8 <__sfputc_r+0x1c>
 80069e8:	6994      	ldr	r4, [r2, #24]
 80069ea:	42a3      	cmp	r3, r4
 80069ec:	db01      	blt.n	80069f2 <__sfputc_r+0x16>
 80069ee:	290a      	cmp	r1, #10
 80069f0:	d102      	bne.n	80069f8 <__sfputc_r+0x1c>
 80069f2:	bc10      	pop	{r4}
 80069f4:	f7fd bad1 	b.w	8003f9a <__swbuf_r>
 80069f8:	6813      	ldr	r3, [r2, #0]
 80069fa:	1c58      	adds	r0, r3, #1
 80069fc:	6010      	str	r0, [r2, #0]
 80069fe:	7019      	strb	r1, [r3, #0]
 8006a00:	4608      	mov	r0, r1
 8006a02:	bc10      	pop	{r4}
 8006a04:	4770      	bx	lr

08006a06 <__sfputs_r>:
 8006a06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a08:	4606      	mov	r6, r0
 8006a0a:	460f      	mov	r7, r1
 8006a0c:	4614      	mov	r4, r2
 8006a0e:	18d5      	adds	r5, r2, r3
 8006a10:	42ac      	cmp	r4, r5
 8006a12:	d101      	bne.n	8006a18 <__sfputs_r+0x12>
 8006a14:	2000      	movs	r0, #0
 8006a16:	e007      	b.n	8006a28 <__sfputs_r+0x22>
 8006a18:	463a      	mov	r2, r7
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a20:	f7ff ffdc 	bl	80069dc <__sfputc_r>
 8006a24:	1c43      	adds	r3, r0, #1
 8006a26:	d1f3      	bne.n	8006a10 <__sfputs_r+0xa>
 8006a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a2c <_vfiprintf_r>:
 8006a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a30:	460d      	mov	r5, r1
 8006a32:	4614      	mov	r4, r2
 8006a34:	4698      	mov	r8, r3
 8006a36:	4606      	mov	r6, r0
 8006a38:	b09d      	sub	sp, #116	; 0x74
 8006a3a:	b118      	cbz	r0, 8006a44 <_vfiprintf_r+0x18>
 8006a3c:	6a03      	ldr	r3, [r0, #32]
 8006a3e:	b90b      	cbnz	r3, 8006a44 <_vfiprintf_r+0x18>
 8006a40:	f7fd f9a4 	bl	8003d8c <__sinit>
 8006a44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a46:	07d9      	lsls	r1, r3, #31
 8006a48:	d405      	bmi.n	8006a56 <_vfiprintf_r+0x2a>
 8006a4a:	89ab      	ldrh	r3, [r5, #12]
 8006a4c:	059a      	lsls	r2, r3, #22
 8006a4e:	d402      	bmi.n	8006a56 <_vfiprintf_r+0x2a>
 8006a50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a52:	f7fd fbb3 	bl	80041bc <__retarget_lock_acquire_recursive>
 8006a56:	89ab      	ldrh	r3, [r5, #12]
 8006a58:	071b      	lsls	r3, r3, #28
 8006a5a:	d501      	bpl.n	8006a60 <_vfiprintf_r+0x34>
 8006a5c:	692b      	ldr	r3, [r5, #16]
 8006a5e:	b99b      	cbnz	r3, 8006a88 <_vfiprintf_r+0x5c>
 8006a60:	4629      	mov	r1, r5
 8006a62:	4630      	mov	r0, r6
 8006a64:	f7fd fad6 	bl	8004014 <__swsetup_r>
 8006a68:	b170      	cbz	r0, 8006a88 <_vfiprintf_r+0x5c>
 8006a6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a6c:	07dc      	lsls	r4, r3, #31
 8006a6e:	d504      	bpl.n	8006a7a <_vfiprintf_r+0x4e>
 8006a70:	f04f 30ff 	mov.w	r0, #4294967295
 8006a74:	b01d      	add	sp, #116	; 0x74
 8006a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a7a:	89ab      	ldrh	r3, [r5, #12]
 8006a7c:	0598      	lsls	r0, r3, #22
 8006a7e:	d4f7      	bmi.n	8006a70 <_vfiprintf_r+0x44>
 8006a80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a82:	f7fd fb9c 	bl	80041be <__retarget_lock_release_recursive>
 8006a86:	e7f3      	b.n	8006a70 <_vfiprintf_r+0x44>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a8c:	2320      	movs	r3, #32
 8006a8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a92:	2330      	movs	r3, #48	; 0x30
 8006a94:	f04f 0901 	mov.w	r9, #1
 8006a98:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006c4c <_vfiprintf_r+0x220>
 8006aa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006aa4:	4623      	mov	r3, r4
 8006aa6:	469a      	mov	sl, r3
 8006aa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006aac:	b10a      	cbz	r2, 8006ab2 <_vfiprintf_r+0x86>
 8006aae:	2a25      	cmp	r2, #37	; 0x25
 8006ab0:	d1f9      	bne.n	8006aa6 <_vfiprintf_r+0x7a>
 8006ab2:	ebba 0b04 	subs.w	fp, sl, r4
 8006ab6:	d00b      	beq.n	8006ad0 <_vfiprintf_r+0xa4>
 8006ab8:	465b      	mov	r3, fp
 8006aba:	4622      	mov	r2, r4
 8006abc:	4629      	mov	r1, r5
 8006abe:	4630      	mov	r0, r6
 8006ac0:	f7ff ffa1 	bl	8006a06 <__sfputs_r>
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	f000 80a9 	beq.w	8006c1c <_vfiprintf_r+0x1f0>
 8006aca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006acc:	445a      	add	r2, fp
 8006ace:	9209      	str	r2, [sp, #36]	; 0x24
 8006ad0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f000 80a1 	beq.w	8006c1c <_vfiprintf_r+0x1f0>
 8006ada:	2300      	movs	r3, #0
 8006adc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ae4:	f10a 0a01 	add.w	sl, sl, #1
 8006ae8:	9304      	str	r3, [sp, #16]
 8006aea:	9307      	str	r3, [sp, #28]
 8006aec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006af0:	931a      	str	r3, [sp, #104]	; 0x68
 8006af2:	4654      	mov	r4, sl
 8006af4:	2205      	movs	r2, #5
 8006af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006afa:	4854      	ldr	r0, [pc, #336]	; (8006c4c <_vfiprintf_r+0x220>)
 8006afc:	f7fd fb60 	bl	80041c0 <memchr>
 8006b00:	9a04      	ldr	r2, [sp, #16]
 8006b02:	b9d8      	cbnz	r0, 8006b3c <_vfiprintf_r+0x110>
 8006b04:	06d1      	lsls	r1, r2, #27
 8006b06:	bf44      	itt	mi
 8006b08:	2320      	movmi	r3, #32
 8006b0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b0e:	0713      	lsls	r3, r2, #28
 8006b10:	bf44      	itt	mi
 8006b12:	232b      	movmi	r3, #43	; 0x2b
 8006b14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b18:	f89a 3000 	ldrb.w	r3, [sl]
 8006b1c:	2b2a      	cmp	r3, #42	; 0x2a
 8006b1e:	d015      	beq.n	8006b4c <_vfiprintf_r+0x120>
 8006b20:	4654      	mov	r4, sl
 8006b22:	2000      	movs	r0, #0
 8006b24:	f04f 0c0a 	mov.w	ip, #10
 8006b28:	9a07      	ldr	r2, [sp, #28]
 8006b2a:	4621      	mov	r1, r4
 8006b2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b30:	3b30      	subs	r3, #48	; 0x30
 8006b32:	2b09      	cmp	r3, #9
 8006b34:	d94d      	bls.n	8006bd2 <_vfiprintf_r+0x1a6>
 8006b36:	b1b0      	cbz	r0, 8006b66 <_vfiprintf_r+0x13a>
 8006b38:	9207      	str	r2, [sp, #28]
 8006b3a:	e014      	b.n	8006b66 <_vfiprintf_r+0x13a>
 8006b3c:	eba0 0308 	sub.w	r3, r0, r8
 8006b40:	fa09 f303 	lsl.w	r3, r9, r3
 8006b44:	4313      	orrs	r3, r2
 8006b46:	46a2      	mov	sl, r4
 8006b48:	9304      	str	r3, [sp, #16]
 8006b4a:	e7d2      	b.n	8006af2 <_vfiprintf_r+0xc6>
 8006b4c:	9b03      	ldr	r3, [sp, #12]
 8006b4e:	1d19      	adds	r1, r3, #4
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	9103      	str	r1, [sp, #12]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	bfbb      	ittet	lt
 8006b58:	425b      	neglt	r3, r3
 8006b5a:	f042 0202 	orrlt.w	r2, r2, #2
 8006b5e:	9307      	strge	r3, [sp, #28]
 8006b60:	9307      	strlt	r3, [sp, #28]
 8006b62:	bfb8      	it	lt
 8006b64:	9204      	strlt	r2, [sp, #16]
 8006b66:	7823      	ldrb	r3, [r4, #0]
 8006b68:	2b2e      	cmp	r3, #46	; 0x2e
 8006b6a:	d10c      	bne.n	8006b86 <_vfiprintf_r+0x15a>
 8006b6c:	7863      	ldrb	r3, [r4, #1]
 8006b6e:	2b2a      	cmp	r3, #42	; 0x2a
 8006b70:	d134      	bne.n	8006bdc <_vfiprintf_r+0x1b0>
 8006b72:	9b03      	ldr	r3, [sp, #12]
 8006b74:	3402      	adds	r4, #2
 8006b76:	1d1a      	adds	r2, r3, #4
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	9203      	str	r2, [sp, #12]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	bfb8      	it	lt
 8006b80:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b84:	9305      	str	r3, [sp, #20]
 8006b86:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006c50 <_vfiprintf_r+0x224>
 8006b8a:	2203      	movs	r2, #3
 8006b8c:	4650      	mov	r0, sl
 8006b8e:	7821      	ldrb	r1, [r4, #0]
 8006b90:	f7fd fb16 	bl	80041c0 <memchr>
 8006b94:	b138      	cbz	r0, 8006ba6 <_vfiprintf_r+0x17a>
 8006b96:	2240      	movs	r2, #64	; 0x40
 8006b98:	9b04      	ldr	r3, [sp, #16]
 8006b9a:	eba0 000a 	sub.w	r0, r0, sl
 8006b9e:	4082      	lsls	r2, r0
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	3401      	adds	r4, #1
 8006ba4:	9304      	str	r3, [sp, #16]
 8006ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006baa:	2206      	movs	r2, #6
 8006bac:	4829      	ldr	r0, [pc, #164]	; (8006c54 <_vfiprintf_r+0x228>)
 8006bae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bb2:	f7fd fb05 	bl	80041c0 <memchr>
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	d03f      	beq.n	8006c3a <_vfiprintf_r+0x20e>
 8006bba:	4b27      	ldr	r3, [pc, #156]	; (8006c58 <_vfiprintf_r+0x22c>)
 8006bbc:	bb1b      	cbnz	r3, 8006c06 <_vfiprintf_r+0x1da>
 8006bbe:	9b03      	ldr	r3, [sp, #12]
 8006bc0:	3307      	adds	r3, #7
 8006bc2:	f023 0307 	bic.w	r3, r3, #7
 8006bc6:	3308      	adds	r3, #8
 8006bc8:	9303      	str	r3, [sp, #12]
 8006bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bcc:	443b      	add	r3, r7
 8006bce:	9309      	str	r3, [sp, #36]	; 0x24
 8006bd0:	e768      	b.n	8006aa4 <_vfiprintf_r+0x78>
 8006bd2:	460c      	mov	r4, r1
 8006bd4:	2001      	movs	r0, #1
 8006bd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bda:	e7a6      	b.n	8006b2a <_vfiprintf_r+0xfe>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	f04f 0c0a 	mov.w	ip, #10
 8006be2:	4619      	mov	r1, r3
 8006be4:	3401      	adds	r4, #1
 8006be6:	9305      	str	r3, [sp, #20]
 8006be8:	4620      	mov	r0, r4
 8006bea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bee:	3a30      	subs	r2, #48	; 0x30
 8006bf0:	2a09      	cmp	r2, #9
 8006bf2:	d903      	bls.n	8006bfc <_vfiprintf_r+0x1d0>
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d0c6      	beq.n	8006b86 <_vfiprintf_r+0x15a>
 8006bf8:	9105      	str	r1, [sp, #20]
 8006bfa:	e7c4      	b.n	8006b86 <_vfiprintf_r+0x15a>
 8006bfc:	4604      	mov	r4, r0
 8006bfe:	2301      	movs	r3, #1
 8006c00:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c04:	e7f0      	b.n	8006be8 <_vfiprintf_r+0x1bc>
 8006c06:	ab03      	add	r3, sp, #12
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	462a      	mov	r2, r5
 8006c0c:	4630      	mov	r0, r6
 8006c0e:	4b13      	ldr	r3, [pc, #76]	; (8006c5c <_vfiprintf_r+0x230>)
 8006c10:	a904      	add	r1, sp, #16
 8006c12:	f7fc fa71 	bl	80030f8 <_printf_float>
 8006c16:	4607      	mov	r7, r0
 8006c18:	1c78      	adds	r0, r7, #1
 8006c1a:	d1d6      	bne.n	8006bca <_vfiprintf_r+0x19e>
 8006c1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c1e:	07d9      	lsls	r1, r3, #31
 8006c20:	d405      	bmi.n	8006c2e <_vfiprintf_r+0x202>
 8006c22:	89ab      	ldrh	r3, [r5, #12]
 8006c24:	059a      	lsls	r2, r3, #22
 8006c26:	d402      	bmi.n	8006c2e <_vfiprintf_r+0x202>
 8006c28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c2a:	f7fd fac8 	bl	80041be <__retarget_lock_release_recursive>
 8006c2e:	89ab      	ldrh	r3, [r5, #12]
 8006c30:	065b      	lsls	r3, r3, #25
 8006c32:	f53f af1d 	bmi.w	8006a70 <_vfiprintf_r+0x44>
 8006c36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c38:	e71c      	b.n	8006a74 <_vfiprintf_r+0x48>
 8006c3a:	ab03      	add	r3, sp, #12
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	462a      	mov	r2, r5
 8006c40:	4630      	mov	r0, r6
 8006c42:	4b06      	ldr	r3, [pc, #24]	; (8006c5c <_vfiprintf_r+0x230>)
 8006c44:	a904      	add	r1, sp, #16
 8006c46:	f7fc fcf7 	bl	8003638 <_printf_i>
 8006c4a:	e7e4      	b.n	8006c16 <_vfiprintf_r+0x1ea>
 8006c4c:	08007bd9 	.word	0x08007bd9
 8006c50:	08007bdf 	.word	0x08007bdf
 8006c54:	08007be3 	.word	0x08007be3
 8006c58:	080030f9 	.word	0x080030f9
 8006c5c:	08006a07 	.word	0x08006a07

08006c60 <__sflush_r>:
 8006c60:	898a      	ldrh	r2, [r1, #12]
 8006c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c64:	4605      	mov	r5, r0
 8006c66:	0710      	lsls	r0, r2, #28
 8006c68:	460c      	mov	r4, r1
 8006c6a:	d457      	bmi.n	8006d1c <__sflush_r+0xbc>
 8006c6c:	684b      	ldr	r3, [r1, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	dc04      	bgt.n	8006c7c <__sflush_r+0x1c>
 8006c72:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	dc01      	bgt.n	8006c7c <__sflush_r+0x1c>
 8006c78:	2000      	movs	r0, #0
 8006c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c7e:	2e00      	cmp	r6, #0
 8006c80:	d0fa      	beq.n	8006c78 <__sflush_r+0x18>
 8006c82:	2300      	movs	r3, #0
 8006c84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c88:	682f      	ldr	r7, [r5, #0]
 8006c8a:	6a21      	ldr	r1, [r4, #32]
 8006c8c:	602b      	str	r3, [r5, #0]
 8006c8e:	d032      	beq.n	8006cf6 <__sflush_r+0x96>
 8006c90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c92:	89a3      	ldrh	r3, [r4, #12]
 8006c94:	075a      	lsls	r2, r3, #29
 8006c96:	d505      	bpl.n	8006ca4 <__sflush_r+0x44>
 8006c98:	6863      	ldr	r3, [r4, #4]
 8006c9a:	1ac0      	subs	r0, r0, r3
 8006c9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c9e:	b10b      	cbz	r3, 8006ca4 <__sflush_r+0x44>
 8006ca0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ca2:	1ac0      	subs	r0, r0, r3
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006caa:	4628      	mov	r0, r5
 8006cac:	6a21      	ldr	r1, [r4, #32]
 8006cae:	47b0      	blx	r6
 8006cb0:	1c43      	adds	r3, r0, #1
 8006cb2:	89a3      	ldrh	r3, [r4, #12]
 8006cb4:	d106      	bne.n	8006cc4 <__sflush_r+0x64>
 8006cb6:	6829      	ldr	r1, [r5, #0]
 8006cb8:	291d      	cmp	r1, #29
 8006cba:	d82b      	bhi.n	8006d14 <__sflush_r+0xb4>
 8006cbc:	4a28      	ldr	r2, [pc, #160]	; (8006d60 <__sflush_r+0x100>)
 8006cbe:	410a      	asrs	r2, r1
 8006cc0:	07d6      	lsls	r6, r2, #31
 8006cc2:	d427      	bmi.n	8006d14 <__sflush_r+0xb4>
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	6062      	str	r2, [r4, #4]
 8006cc8:	6922      	ldr	r2, [r4, #16]
 8006cca:	04d9      	lsls	r1, r3, #19
 8006ccc:	6022      	str	r2, [r4, #0]
 8006cce:	d504      	bpl.n	8006cda <__sflush_r+0x7a>
 8006cd0:	1c42      	adds	r2, r0, #1
 8006cd2:	d101      	bne.n	8006cd8 <__sflush_r+0x78>
 8006cd4:	682b      	ldr	r3, [r5, #0]
 8006cd6:	b903      	cbnz	r3, 8006cda <__sflush_r+0x7a>
 8006cd8:	6560      	str	r0, [r4, #84]	; 0x54
 8006cda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cdc:	602f      	str	r7, [r5, #0]
 8006cde:	2900      	cmp	r1, #0
 8006ce0:	d0ca      	beq.n	8006c78 <__sflush_r+0x18>
 8006ce2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ce6:	4299      	cmp	r1, r3
 8006ce8:	d002      	beq.n	8006cf0 <__sflush_r+0x90>
 8006cea:	4628      	mov	r0, r5
 8006cec:	f7fe f8e8 	bl	8004ec0 <_free_r>
 8006cf0:	2000      	movs	r0, #0
 8006cf2:	6360      	str	r0, [r4, #52]	; 0x34
 8006cf4:	e7c1      	b.n	8006c7a <__sflush_r+0x1a>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	47b0      	blx	r6
 8006cfc:	1c41      	adds	r1, r0, #1
 8006cfe:	d1c8      	bne.n	8006c92 <__sflush_r+0x32>
 8006d00:	682b      	ldr	r3, [r5, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d0c5      	beq.n	8006c92 <__sflush_r+0x32>
 8006d06:	2b1d      	cmp	r3, #29
 8006d08:	d001      	beq.n	8006d0e <__sflush_r+0xae>
 8006d0a:	2b16      	cmp	r3, #22
 8006d0c:	d101      	bne.n	8006d12 <__sflush_r+0xb2>
 8006d0e:	602f      	str	r7, [r5, #0]
 8006d10:	e7b2      	b.n	8006c78 <__sflush_r+0x18>
 8006d12:	89a3      	ldrh	r3, [r4, #12]
 8006d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d18:	81a3      	strh	r3, [r4, #12]
 8006d1a:	e7ae      	b.n	8006c7a <__sflush_r+0x1a>
 8006d1c:	690f      	ldr	r7, [r1, #16]
 8006d1e:	2f00      	cmp	r7, #0
 8006d20:	d0aa      	beq.n	8006c78 <__sflush_r+0x18>
 8006d22:	0793      	lsls	r3, r2, #30
 8006d24:	bf18      	it	ne
 8006d26:	2300      	movne	r3, #0
 8006d28:	680e      	ldr	r6, [r1, #0]
 8006d2a:	bf08      	it	eq
 8006d2c:	694b      	ldreq	r3, [r1, #20]
 8006d2e:	1bf6      	subs	r6, r6, r7
 8006d30:	600f      	str	r7, [r1, #0]
 8006d32:	608b      	str	r3, [r1, #8]
 8006d34:	2e00      	cmp	r6, #0
 8006d36:	dd9f      	ble.n	8006c78 <__sflush_r+0x18>
 8006d38:	4633      	mov	r3, r6
 8006d3a:	463a      	mov	r2, r7
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	6a21      	ldr	r1, [r4, #32]
 8006d40:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006d44:	47e0      	blx	ip
 8006d46:	2800      	cmp	r0, #0
 8006d48:	dc06      	bgt.n	8006d58 <__sflush_r+0xf8>
 8006d4a:	89a3      	ldrh	r3, [r4, #12]
 8006d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d54:	81a3      	strh	r3, [r4, #12]
 8006d56:	e790      	b.n	8006c7a <__sflush_r+0x1a>
 8006d58:	4407      	add	r7, r0
 8006d5a:	1a36      	subs	r6, r6, r0
 8006d5c:	e7ea      	b.n	8006d34 <__sflush_r+0xd4>
 8006d5e:	bf00      	nop
 8006d60:	dfbffffe 	.word	0xdfbffffe

08006d64 <_fflush_r>:
 8006d64:	b538      	push	{r3, r4, r5, lr}
 8006d66:	690b      	ldr	r3, [r1, #16]
 8006d68:	4605      	mov	r5, r0
 8006d6a:	460c      	mov	r4, r1
 8006d6c:	b913      	cbnz	r3, 8006d74 <_fflush_r+0x10>
 8006d6e:	2500      	movs	r5, #0
 8006d70:	4628      	mov	r0, r5
 8006d72:	bd38      	pop	{r3, r4, r5, pc}
 8006d74:	b118      	cbz	r0, 8006d7e <_fflush_r+0x1a>
 8006d76:	6a03      	ldr	r3, [r0, #32]
 8006d78:	b90b      	cbnz	r3, 8006d7e <_fflush_r+0x1a>
 8006d7a:	f7fd f807 	bl	8003d8c <__sinit>
 8006d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d0f3      	beq.n	8006d6e <_fflush_r+0xa>
 8006d86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d88:	07d0      	lsls	r0, r2, #31
 8006d8a:	d404      	bmi.n	8006d96 <_fflush_r+0x32>
 8006d8c:	0599      	lsls	r1, r3, #22
 8006d8e:	d402      	bmi.n	8006d96 <_fflush_r+0x32>
 8006d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d92:	f7fd fa13 	bl	80041bc <__retarget_lock_acquire_recursive>
 8006d96:	4628      	mov	r0, r5
 8006d98:	4621      	mov	r1, r4
 8006d9a:	f7ff ff61 	bl	8006c60 <__sflush_r>
 8006d9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006da0:	4605      	mov	r5, r0
 8006da2:	07da      	lsls	r2, r3, #31
 8006da4:	d4e4      	bmi.n	8006d70 <_fflush_r+0xc>
 8006da6:	89a3      	ldrh	r3, [r4, #12]
 8006da8:	059b      	lsls	r3, r3, #22
 8006daa:	d4e1      	bmi.n	8006d70 <_fflush_r+0xc>
 8006dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dae:	f7fd fa06 	bl	80041be <__retarget_lock_release_recursive>
 8006db2:	e7dd      	b.n	8006d70 <_fflush_r+0xc>

08006db4 <__swhatbuf_r>:
 8006db4:	b570      	push	{r4, r5, r6, lr}
 8006db6:	460c      	mov	r4, r1
 8006db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dbc:	4615      	mov	r5, r2
 8006dbe:	2900      	cmp	r1, #0
 8006dc0:	461e      	mov	r6, r3
 8006dc2:	b096      	sub	sp, #88	; 0x58
 8006dc4:	da0c      	bge.n	8006de0 <__swhatbuf_r+0x2c>
 8006dc6:	89a3      	ldrh	r3, [r4, #12]
 8006dc8:	2100      	movs	r1, #0
 8006dca:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006dce:	bf0c      	ite	eq
 8006dd0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006dd4:	2340      	movne	r3, #64	; 0x40
 8006dd6:	2000      	movs	r0, #0
 8006dd8:	6031      	str	r1, [r6, #0]
 8006dda:	602b      	str	r3, [r5, #0]
 8006ddc:	b016      	add	sp, #88	; 0x58
 8006dde:	bd70      	pop	{r4, r5, r6, pc}
 8006de0:	466a      	mov	r2, sp
 8006de2:	f000 f875 	bl	8006ed0 <_fstat_r>
 8006de6:	2800      	cmp	r0, #0
 8006de8:	dbed      	blt.n	8006dc6 <__swhatbuf_r+0x12>
 8006dea:	9901      	ldr	r1, [sp, #4]
 8006dec:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006df0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006df4:	4259      	negs	r1, r3
 8006df6:	4159      	adcs	r1, r3
 8006df8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dfc:	e7eb      	b.n	8006dd6 <__swhatbuf_r+0x22>

08006dfe <__smakebuf_r>:
 8006dfe:	898b      	ldrh	r3, [r1, #12]
 8006e00:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e02:	079d      	lsls	r5, r3, #30
 8006e04:	4606      	mov	r6, r0
 8006e06:	460c      	mov	r4, r1
 8006e08:	d507      	bpl.n	8006e1a <__smakebuf_r+0x1c>
 8006e0a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e0e:	6023      	str	r3, [r4, #0]
 8006e10:	6123      	str	r3, [r4, #16]
 8006e12:	2301      	movs	r3, #1
 8006e14:	6163      	str	r3, [r4, #20]
 8006e16:	b002      	add	sp, #8
 8006e18:	bd70      	pop	{r4, r5, r6, pc}
 8006e1a:	466a      	mov	r2, sp
 8006e1c:	ab01      	add	r3, sp, #4
 8006e1e:	f7ff ffc9 	bl	8006db4 <__swhatbuf_r>
 8006e22:	9900      	ldr	r1, [sp, #0]
 8006e24:	4605      	mov	r5, r0
 8006e26:	4630      	mov	r0, r6
 8006e28:	f7fe f8ba 	bl	8004fa0 <_malloc_r>
 8006e2c:	b948      	cbnz	r0, 8006e42 <__smakebuf_r+0x44>
 8006e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e32:	059a      	lsls	r2, r3, #22
 8006e34:	d4ef      	bmi.n	8006e16 <__smakebuf_r+0x18>
 8006e36:	f023 0303 	bic.w	r3, r3, #3
 8006e3a:	f043 0302 	orr.w	r3, r3, #2
 8006e3e:	81a3      	strh	r3, [r4, #12]
 8006e40:	e7e3      	b.n	8006e0a <__smakebuf_r+0xc>
 8006e42:	89a3      	ldrh	r3, [r4, #12]
 8006e44:	6020      	str	r0, [r4, #0]
 8006e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e4a:	81a3      	strh	r3, [r4, #12]
 8006e4c:	9b00      	ldr	r3, [sp, #0]
 8006e4e:	6120      	str	r0, [r4, #16]
 8006e50:	6163      	str	r3, [r4, #20]
 8006e52:	9b01      	ldr	r3, [sp, #4]
 8006e54:	b15b      	cbz	r3, 8006e6e <__smakebuf_r+0x70>
 8006e56:	4630      	mov	r0, r6
 8006e58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e5c:	f000 f84a 	bl	8006ef4 <_isatty_r>
 8006e60:	b128      	cbz	r0, 8006e6e <__smakebuf_r+0x70>
 8006e62:	89a3      	ldrh	r3, [r4, #12]
 8006e64:	f023 0303 	bic.w	r3, r3, #3
 8006e68:	f043 0301 	orr.w	r3, r3, #1
 8006e6c:	81a3      	strh	r3, [r4, #12]
 8006e6e:	89a3      	ldrh	r3, [r4, #12]
 8006e70:	431d      	orrs	r5, r3
 8006e72:	81a5      	strh	r5, [r4, #12]
 8006e74:	e7cf      	b.n	8006e16 <__smakebuf_r+0x18>

08006e76 <memmove>:
 8006e76:	4288      	cmp	r0, r1
 8006e78:	b510      	push	{r4, lr}
 8006e7a:	eb01 0402 	add.w	r4, r1, r2
 8006e7e:	d902      	bls.n	8006e86 <memmove+0x10>
 8006e80:	4284      	cmp	r4, r0
 8006e82:	4623      	mov	r3, r4
 8006e84:	d807      	bhi.n	8006e96 <memmove+0x20>
 8006e86:	1e43      	subs	r3, r0, #1
 8006e88:	42a1      	cmp	r1, r4
 8006e8a:	d008      	beq.n	8006e9e <memmove+0x28>
 8006e8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e90:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e94:	e7f8      	b.n	8006e88 <memmove+0x12>
 8006e96:	4601      	mov	r1, r0
 8006e98:	4402      	add	r2, r0
 8006e9a:	428a      	cmp	r2, r1
 8006e9c:	d100      	bne.n	8006ea0 <memmove+0x2a>
 8006e9e:	bd10      	pop	{r4, pc}
 8006ea0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ea4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ea8:	e7f7      	b.n	8006e9a <memmove+0x24>

08006eaa <strncmp>:
 8006eaa:	b510      	push	{r4, lr}
 8006eac:	b16a      	cbz	r2, 8006eca <strncmp+0x20>
 8006eae:	3901      	subs	r1, #1
 8006eb0:	1884      	adds	r4, r0, r2
 8006eb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006eb6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d103      	bne.n	8006ec6 <strncmp+0x1c>
 8006ebe:	42a0      	cmp	r0, r4
 8006ec0:	d001      	beq.n	8006ec6 <strncmp+0x1c>
 8006ec2:	2a00      	cmp	r2, #0
 8006ec4:	d1f5      	bne.n	8006eb2 <strncmp+0x8>
 8006ec6:	1ad0      	subs	r0, r2, r3
 8006ec8:	bd10      	pop	{r4, pc}
 8006eca:	4610      	mov	r0, r2
 8006ecc:	e7fc      	b.n	8006ec8 <strncmp+0x1e>
	...

08006ed0 <_fstat_r>:
 8006ed0:	b538      	push	{r3, r4, r5, lr}
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	4d06      	ldr	r5, [pc, #24]	; (8006ef0 <_fstat_r+0x20>)
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	4608      	mov	r0, r1
 8006eda:	4611      	mov	r1, r2
 8006edc:	602b      	str	r3, [r5, #0]
 8006ede:	f7fa f8b0 	bl	8001042 <_fstat>
 8006ee2:	1c43      	adds	r3, r0, #1
 8006ee4:	d102      	bne.n	8006eec <_fstat_r+0x1c>
 8006ee6:	682b      	ldr	r3, [r5, #0]
 8006ee8:	b103      	cbz	r3, 8006eec <_fstat_r+0x1c>
 8006eea:	6023      	str	r3, [r4, #0]
 8006eec:	bd38      	pop	{r3, r4, r5, pc}
 8006eee:	bf00      	nop
 8006ef0:	200003b0 	.word	0x200003b0

08006ef4 <_isatty_r>:
 8006ef4:	b538      	push	{r3, r4, r5, lr}
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	4d05      	ldr	r5, [pc, #20]	; (8006f10 <_isatty_r+0x1c>)
 8006efa:	4604      	mov	r4, r0
 8006efc:	4608      	mov	r0, r1
 8006efe:	602b      	str	r3, [r5, #0]
 8006f00:	f7fa f8ae 	bl	8001060 <_isatty>
 8006f04:	1c43      	adds	r3, r0, #1
 8006f06:	d102      	bne.n	8006f0e <_isatty_r+0x1a>
 8006f08:	682b      	ldr	r3, [r5, #0]
 8006f0a:	b103      	cbz	r3, 8006f0e <_isatty_r+0x1a>
 8006f0c:	6023      	str	r3, [r4, #0]
 8006f0e:	bd38      	pop	{r3, r4, r5, pc}
 8006f10:	200003b0 	.word	0x200003b0

08006f14 <_sbrk_r>:
 8006f14:	b538      	push	{r3, r4, r5, lr}
 8006f16:	2300      	movs	r3, #0
 8006f18:	4d05      	ldr	r5, [pc, #20]	; (8006f30 <_sbrk_r+0x1c>)
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	4608      	mov	r0, r1
 8006f1e:	602b      	str	r3, [r5, #0]
 8006f20:	f7fa f8b4 	bl	800108c <_sbrk>
 8006f24:	1c43      	adds	r3, r0, #1
 8006f26:	d102      	bne.n	8006f2e <_sbrk_r+0x1a>
 8006f28:	682b      	ldr	r3, [r5, #0]
 8006f2a:	b103      	cbz	r3, 8006f2e <_sbrk_r+0x1a>
 8006f2c:	6023      	str	r3, [r4, #0]
 8006f2e:	bd38      	pop	{r3, r4, r5, pc}
 8006f30:	200003b0 	.word	0x200003b0

08006f34 <memcpy>:
 8006f34:	440a      	add	r2, r1
 8006f36:	4291      	cmp	r1, r2
 8006f38:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f3c:	d100      	bne.n	8006f40 <memcpy+0xc>
 8006f3e:	4770      	bx	lr
 8006f40:	b510      	push	{r4, lr}
 8006f42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f46:	4291      	cmp	r1, r2
 8006f48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f4c:	d1f9      	bne.n	8006f42 <memcpy+0xe>
 8006f4e:	bd10      	pop	{r4, pc}

08006f50 <nan>:
 8006f50:	2000      	movs	r0, #0
 8006f52:	4901      	ldr	r1, [pc, #4]	; (8006f58 <nan+0x8>)
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	7ff80000 	.word	0x7ff80000

08006f5c <__assert_func>:
 8006f5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f5e:	4614      	mov	r4, r2
 8006f60:	461a      	mov	r2, r3
 8006f62:	4b09      	ldr	r3, [pc, #36]	; (8006f88 <__assert_func+0x2c>)
 8006f64:	4605      	mov	r5, r0
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68d8      	ldr	r0, [r3, #12]
 8006f6a:	b14c      	cbz	r4, 8006f80 <__assert_func+0x24>
 8006f6c:	4b07      	ldr	r3, [pc, #28]	; (8006f8c <__assert_func+0x30>)
 8006f6e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f72:	9100      	str	r1, [sp, #0]
 8006f74:	462b      	mov	r3, r5
 8006f76:	4906      	ldr	r1, [pc, #24]	; (8006f90 <__assert_func+0x34>)
 8006f78:	f000 fbca 	bl	8007710 <fiprintf>
 8006f7c:	f000 fbda 	bl	8007734 <abort>
 8006f80:	4b04      	ldr	r3, [pc, #16]	; (8006f94 <__assert_func+0x38>)
 8006f82:	461c      	mov	r4, r3
 8006f84:	e7f3      	b.n	8006f6e <__assert_func+0x12>
 8006f86:	bf00      	nop
 8006f88:	20000064 	.word	0x20000064
 8006f8c:	08007bf2 	.word	0x08007bf2
 8006f90:	08007bff 	.word	0x08007bff
 8006f94:	08007c2d 	.word	0x08007c2d

08006f98 <_calloc_r>:
 8006f98:	b570      	push	{r4, r5, r6, lr}
 8006f9a:	fba1 5402 	umull	r5, r4, r1, r2
 8006f9e:	b934      	cbnz	r4, 8006fae <_calloc_r+0x16>
 8006fa0:	4629      	mov	r1, r5
 8006fa2:	f7fd fffd 	bl	8004fa0 <_malloc_r>
 8006fa6:	4606      	mov	r6, r0
 8006fa8:	b928      	cbnz	r0, 8006fb6 <_calloc_r+0x1e>
 8006faa:	4630      	mov	r0, r6
 8006fac:	bd70      	pop	{r4, r5, r6, pc}
 8006fae:	220c      	movs	r2, #12
 8006fb0:	2600      	movs	r6, #0
 8006fb2:	6002      	str	r2, [r0, #0]
 8006fb4:	e7f9      	b.n	8006faa <_calloc_r+0x12>
 8006fb6:	462a      	mov	r2, r5
 8006fb8:	4621      	mov	r1, r4
 8006fba:	f7fd f883 	bl	80040c4 <memset>
 8006fbe:	e7f4      	b.n	8006faa <_calloc_r+0x12>

08006fc0 <rshift>:
 8006fc0:	6903      	ldr	r3, [r0, #16]
 8006fc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006fc6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006fca:	f100 0414 	add.w	r4, r0, #20
 8006fce:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006fd2:	dd46      	ble.n	8007062 <rshift+0xa2>
 8006fd4:	f011 011f 	ands.w	r1, r1, #31
 8006fd8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006fdc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006fe0:	d10c      	bne.n	8006ffc <rshift+0x3c>
 8006fe2:	4629      	mov	r1, r5
 8006fe4:	f100 0710 	add.w	r7, r0, #16
 8006fe8:	42b1      	cmp	r1, r6
 8006fea:	d335      	bcc.n	8007058 <rshift+0x98>
 8006fec:	1a9b      	subs	r3, r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	1eea      	subs	r2, r5, #3
 8006ff2:	4296      	cmp	r6, r2
 8006ff4:	bf38      	it	cc
 8006ff6:	2300      	movcc	r3, #0
 8006ff8:	4423      	add	r3, r4
 8006ffa:	e015      	b.n	8007028 <rshift+0x68>
 8006ffc:	46a1      	mov	r9, r4
 8006ffe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007002:	f1c1 0820 	rsb	r8, r1, #32
 8007006:	40cf      	lsrs	r7, r1
 8007008:	f105 0e04 	add.w	lr, r5, #4
 800700c:	4576      	cmp	r6, lr
 800700e:	46f4      	mov	ip, lr
 8007010:	d816      	bhi.n	8007040 <rshift+0x80>
 8007012:	1a9a      	subs	r2, r3, r2
 8007014:	0092      	lsls	r2, r2, #2
 8007016:	3a04      	subs	r2, #4
 8007018:	3501      	adds	r5, #1
 800701a:	42ae      	cmp	r6, r5
 800701c:	bf38      	it	cc
 800701e:	2200      	movcc	r2, #0
 8007020:	18a3      	adds	r3, r4, r2
 8007022:	50a7      	str	r7, [r4, r2]
 8007024:	b107      	cbz	r7, 8007028 <rshift+0x68>
 8007026:	3304      	adds	r3, #4
 8007028:	42a3      	cmp	r3, r4
 800702a:	eba3 0204 	sub.w	r2, r3, r4
 800702e:	bf08      	it	eq
 8007030:	2300      	moveq	r3, #0
 8007032:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007036:	6102      	str	r2, [r0, #16]
 8007038:	bf08      	it	eq
 800703a:	6143      	streq	r3, [r0, #20]
 800703c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007040:	f8dc c000 	ldr.w	ip, [ip]
 8007044:	fa0c fc08 	lsl.w	ip, ip, r8
 8007048:	ea4c 0707 	orr.w	r7, ip, r7
 800704c:	f849 7b04 	str.w	r7, [r9], #4
 8007050:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007054:	40cf      	lsrs	r7, r1
 8007056:	e7d9      	b.n	800700c <rshift+0x4c>
 8007058:	f851 cb04 	ldr.w	ip, [r1], #4
 800705c:	f847 cf04 	str.w	ip, [r7, #4]!
 8007060:	e7c2      	b.n	8006fe8 <rshift+0x28>
 8007062:	4623      	mov	r3, r4
 8007064:	e7e0      	b.n	8007028 <rshift+0x68>

08007066 <__hexdig_fun>:
 8007066:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800706a:	2b09      	cmp	r3, #9
 800706c:	d802      	bhi.n	8007074 <__hexdig_fun+0xe>
 800706e:	3820      	subs	r0, #32
 8007070:	b2c0      	uxtb	r0, r0
 8007072:	4770      	bx	lr
 8007074:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007078:	2b05      	cmp	r3, #5
 800707a:	d801      	bhi.n	8007080 <__hexdig_fun+0x1a>
 800707c:	3847      	subs	r0, #71	; 0x47
 800707e:	e7f7      	b.n	8007070 <__hexdig_fun+0xa>
 8007080:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007084:	2b05      	cmp	r3, #5
 8007086:	d801      	bhi.n	800708c <__hexdig_fun+0x26>
 8007088:	3827      	subs	r0, #39	; 0x27
 800708a:	e7f1      	b.n	8007070 <__hexdig_fun+0xa>
 800708c:	2000      	movs	r0, #0
 800708e:	4770      	bx	lr

08007090 <__gethex>:
 8007090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007094:	4681      	mov	r9, r0
 8007096:	468a      	mov	sl, r1
 8007098:	4617      	mov	r7, r2
 800709a:	680a      	ldr	r2, [r1, #0]
 800709c:	b085      	sub	sp, #20
 800709e:	f102 0b02 	add.w	fp, r2, #2
 80070a2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80070a6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80070aa:	9302      	str	r3, [sp, #8]
 80070ac:	32fe      	adds	r2, #254	; 0xfe
 80070ae:	eb02 030b 	add.w	r3, r2, fp
 80070b2:	46d8      	mov	r8, fp
 80070b4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80070b8:	9301      	str	r3, [sp, #4]
 80070ba:	2830      	cmp	r0, #48	; 0x30
 80070bc:	d0f7      	beq.n	80070ae <__gethex+0x1e>
 80070be:	f7ff ffd2 	bl	8007066 <__hexdig_fun>
 80070c2:	4604      	mov	r4, r0
 80070c4:	2800      	cmp	r0, #0
 80070c6:	d138      	bne.n	800713a <__gethex+0xaa>
 80070c8:	2201      	movs	r2, #1
 80070ca:	4640      	mov	r0, r8
 80070cc:	49a7      	ldr	r1, [pc, #668]	; (800736c <__gethex+0x2dc>)
 80070ce:	f7ff feec 	bl	8006eaa <strncmp>
 80070d2:	4606      	mov	r6, r0
 80070d4:	2800      	cmp	r0, #0
 80070d6:	d169      	bne.n	80071ac <__gethex+0x11c>
 80070d8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80070dc:	465d      	mov	r5, fp
 80070de:	f7ff ffc2 	bl	8007066 <__hexdig_fun>
 80070e2:	2800      	cmp	r0, #0
 80070e4:	d064      	beq.n	80071b0 <__gethex+0x120>
 80070e6:	465a      	mov	r2, fp
 80070e8:	7810      	ldrb	r0, [r2, #0]
 80070ea:	4690      	mov	r8, r2
 80070ec:	2830      	cmp	r0, #48	; 0x30
 80070ee:	f102 0201 	add.w	r2, r2, #1
 80070f2:	d0f9      	beq.n	80070e8 <__gethex+0x58>
 80070f4:	f7ff ffb7 	bl	8007066 <__hexdig_fun>
 80070f8:	2301      	movs	r3, #1
 80070fa:	fab0 f480 	clz	r4, r0
 80070fe:	465e      	mov	r6, fp
 8007100:	0964      	lsrs	r4, r4, #5
 8007102:	9301      	str	r3, [sp, #4]
 8007104:	4642      	mov	r2, r8
 8007106:	4615      	mov	r5, r2
 8007108:	7828      	ldrb	r0, [r5, #0]
 800710a:	3201      	adds	r2, #1
 800710c:	f7ff ffab 	bl	8007066 <__hexdig_fun>
 8007110:	2800      	cmp	r0, #0
 8007112:	d1f8      	bne.n	8007106 <__gethex+0x76>
 8007114:	2201      	movs	r2, #1
 8007116:	4628      	mov	r0, r5
 8007118:	4994      	ldr	r1, [pc, #592]	; (800736c <__gethex+0x2dc>)
 800711a:	f7ff fec6 	bl	8006eaa <strncmp>
 800711e:	b978      	cbnz	r0, 8007140 <__gethex+0xb0>
 8007120:	b946      	cbnz	r6, 8007134 <__gethex+0xa4>
 8007122:	1c6e      	adds	r6, r5, #1
 8007124:	4632      	mov	r2, r6
 8007126:	4615      	mov	r5, r2
 8007128:	7828      	ldrb	r0, [r5, #0]
 800712a:	3201      	adds	r2, #1
 800712c:	f7ff ff9b 	bl	8007066 <__hexdig_fun>
 8007130:	2800      	cmp	r0, #0
 8007132:	d1f8      	bne.n	8007126 <__gethex+0x96>
 8007134:	1b73      	subs	r3, r6, r5
 8007136:	009e      	lsls	r6, r3, #2
 8007138:	e004      	b.n	8007144 <__gethex+0xb4>
 800713a:	2400      	movs	r4, #0
 800713c:	4626      	mov	r6, r4
 800713e:	e7e1      	b.n	8007104 <__gethex+0x74>
 8007140:	2e00      	cmp	r6, #0
 8007142:	d1f7      	bne.n	8007134 <__gethex+0xa4>
 8007144:	782b      	ldrb	r3, [r5, #0]
 8007146:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800714a:	2b50      	cmp	r3, #80	; 0x50
 800714c:	d13d      	bne.n	80071ca <__gethex+0x13a>
 800714e:	786b      	ldrb	r3, [r5, #1]
 8007150:	2b2b      	cmp	r3, #43	; 0x2b
 8007152:	d02f      	beq.n	80071b4 <__gethex+0x124>
 8007154:	2b2d      	cmp	r3, #45	; 0x2d
 8007156:	d031      	beq.n	80071bc <__gethex+0x12c>
 8007158:	f04f 0b00 	mov.w	fp, #0
 800715c:	1c69      	adds	r1, r5, #1
 800715e:	7808      	ldrb	r0, [r1, #0]
 8007160:	f7ff ff81 	bl	8007066 <__hexdig_fun>
 8007164:	1e42      	subs	r2, r0, #1
 8007166:	b2d2      	uxtb	r2, r2
 8007168:	2a18      	cmp	r2, #24
 800716a:	d82e      	bhi.n	80071ca <__gethex+0x13a>
 800716c:	f1a0 0210 	sub.w	r2, r0, #16
 8007170:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007174:	f7ff ff77 	bl	8007066 <__hexdig_fun>
 8007178:	f100 3cff 	add.w	ip, r0, #4294967295
 800717c:	fa5f fc8c 	uxtb.w	ip, ip
 8007180:	f1bc 0f18 	cmp.w	ip, #24
 8007184:	d91d      	bls.n	80071c2 <__gethex+0x132>
 8007186:	f1bb 0f00 	cmp.w	fp, #0
 800718a:	d000      	beq.n	800718e <__gethex+0xfe>
 800718c:	4252      	negs	r2, r2
 800718e:	4416      	add	r6, r2
 8007190:	f8ca 1000 	str.w	r1, [sl]
 8007194:	b1dc      	cbz	r4, 80071ce <__gethex+0x13e>
 8007196:	9b01      	ldr	r3, [sp, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	bf14      	ite	ne
 800719c:	f04f 0800 	movne.w	r8, #0
 80071a0:	f04f 0806 	moveq.w	r8, #6
 80071a4:	4640      	mov	r0, r8
 80071a6:	b005      	add	sp, #20
 80071a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ac:	4645      	mov	r5, r8
 80071ae:	4626      	mov	r6, r4
 80071b0:	2401      	movs	r4, #1
 80071b2:	e7c7      	b.n	8007144 <__gethex+0xb4>
 80071b4:	f04f 0b00 	mov.w	fp, #0
 80071b8:	1ca9      	adds	r1, r5, #2
 80071ba:	e7d0      	b.n	800715e <__gethex+0xce>
 80071bc:	f04f 0b01 	mov.w	fp, #1
 80071c0:	e7fa      	b.n	80071b8 <__gethex+0x128>
 80071c2:	230a      	movs	r3, #10
 80071c4:	fb03 0002 	mla	r0, r3, r2, r0
 80071c8:	e7d0      	b.n	800716c <__gethex+0xdc>
 80071ca:	4629      	mov	r1, r5
 80071cc:	e7e0      	b.n	8007190 <__gethex+0x100>
 80071ce:	4621      	mov	r1, r4
 80071d0:	eba5 0308 	sub.w	r3, r5, r8
 80071d4:	3b01      	subs	r3, #1
 80071d6:	2b07      	cmp	r3, #7
 80071d8:	dc0a      	bgt.n	80071f0 <__gethex+0x160>
 80071da:	4648      	mov	r0, r9
 80071dc:	f7fd ff6c 	bl	80050b8 <_Balloc>
 80071e0:	4604      	mov	r4, r0
 80071e2:	b940      	cbnz	r0, 80071f6 <__gethex+0x166>
 80071e4:	4602      	mov	r2, r0
 80071e6:	21e4      	movs	r1, #228	; 0xe4
 80071e8:	4b61      	ldr	r3, [pc, #388]	; (8007370 <__gethex+0x2e0>)
 80071ea:	4862      	ldr	r0, [pc, #392]	; (8007374 <__gethex+0x2e4>)
 80071ec:	f7ff feb6 	bl	8006f5c <__assert_func>
 80071f0:	3101      	adds	r1, #1
 80071f2:	105b      	asrs	r3, r3, #1
 80071f4:	e7ef      	b.n	80071d6 <__gethex+0x146>
 80071f6:	2300      	movs	r3, #0
 80071f8:	469b      	mov	fp, r3
 80071fa:	f100 0a14 	add.w	sl, r0, #20
 80071fe:	f8cd a004 	str.w	sl, [sp, #4]
 8007202:	45a8      	cmp	r8, r5
 8007204:	d344      	bcc.n	8007290 <__gethex+0x200>
 8007206:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800720a:	4658      	mov	r0, fp
 800720c:	f848 bb04 	str.w	fp, [r8], #4
 8007210:	eba8 080a 	sub.w	r8, r8, sl
 8007214:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8007218:	6122      	str	r2, [r4, #16]
 800721a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800721e:	f7fe f83d 	bl	800529c <__hi0bits>
 8007222:	683d      	ldr	r5, [r7, #0]
 8007224:	eba8 0800 	sub.w	r8, r8, r0
 8007228:	45a8      	cmp	r8, r5
 800722a:	dd59      	ble.n	80072e0 <__gethex+0x250>
 800722c:	eba8 0805 	sub.w	r8, r8, r5
 8007230:	4641      	mov	r1, r8
 8007232:	4620      	mov	r0, r4
 8007234:	f7fe fbbb 	bl	80059ae <__any_on>
 8007238:	4683      	mov	fp, r0
 800723a:	b1b8      	cbz	r0, 800726c <__gethex+0x1dc>
 800723c:	f04f 0b01 	mov.w	fp, #1
 8007240:	f108 33ff 	add.w	r3, r8, #4294967295
 8007244:	1159      	asrs	r1, r3, #5
 8007246:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800724a:	f003 021f 	and.w	r2, r3, #31
 800724e:	fa0b f202 	lsl.w	r2, fp, r2
 8007252:	420a      	tst	r2, r1
 8007254:	d00a      	beq.n	800726c <__gethex+0x1dc>
 8007256:	455b      	cmp	r3, fp
 8007258:	dd06      	ble.n	8007268 <__gethex+0x1d8>
 800725a:	4620      	mov	r0, r4
 800725c:	f1a8 0102 	sub.w	r1, r8, #2
 8007260:	f7fe fba5 	bl	80059ae <__any_on>
 8007264:	2800      	cmp	r0, #0
 8007266:	d138      	bne.n	80072da <__gethex+0x24a>
 8007268:	f04f 0b02 	mov.w	fp, #2
 800726c:	4641      	mov	r1, r8
 800726e:	4620      	mov	r0, r4
 8007270:	f7ff fea6 	bl	8006fc0 <rshift>
 8007274:	4446      	add	r6, r8
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	42b3      	cmp	r3, r6
 800727a:	da41      	bge.n	8007300 <__gethex+0x270>
 800727c:	4621      	mov	r1, r4
 800727e:	4648      	mov	r0, r9
 8007280:	f7fd ff5a 	bl	8005138 <_Bfree>
 8007284:	2300      	movs	r3, #0
 8007286:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007288:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800728c:	6013      	str	r3, [r2, #0]
 800728e:	e789      	b.n	80071a4 <__gethex+0x114>
 8007290:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8007294:	2a2e      	cmp	r2, #46	; 0x2e
 8007296:	d014      	beq.n	80072c2 <__gethex+0x232>
 8007298:	2b20      	cmp	r3, #32
 800729a:	d106      	bne.n	80072aa <__gethex+0x21a>
 800729c:	9b01      	ldr	r3, [sp, #4]
 800729e:	f843 bb04 	str.w	fp, [r3], #4
 80072a2:	f04f 0b00 	mov.w	fp, #0
 80072a6:	9301      	str	r3, [sp, #4]
 80072a8:	465b      	mov	r3, fp
 80072aa:	7828      	ldrb	r0, [r5, #0]
 80072ac:	9303      	str	r3, [sp, #12]
 80072ae:	f7ff feda 	bl	8007066 <__hexdig_fun>
 80072b2:	9b03      	ldr	r3, [sp, #12]
 80072b4:	f000 000f 	and.w	r0, r0, #15
 80072b8:	4098      	lsls	r0, r3
 80072ba:	ea4b 0b00 	orr.w	fp, fp, r0
 80072be:	3304      	adds	r3, #4
 80072c0:	e79f      	b.n	8007202 <__gethex+0x172>
 80072c2:	45a8      	cmp	r8, r5
 80072c4:	d8e8      	bhi.n	8007298 <__gethex+0x208>
 80072c6:	2201      	movs	r2, #1
 80072c8:	4628      	mov	r0, r5
 80072ca:	4928      	ldr	r1, [pc, #160]	; (800736c <__gethex+0x2dc>)
 80072cc:	9303      	str	r3, [sp, #12]
 80072ce:	f7ff fdec 	bl	8006eaa <strncmp>
 80072d2:	9b03      	ldr	r3, [sp, #12]
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d1df      	bne.n	8007298 <__gethex+0x208>
 80072d8:	e793      	b.n	8007202 <__gethex+0x172>
 80072da:	f04f 0b03 	mov.w	fp, #3
 80072de:	e7c5      	b.n	800726c <__gethex+0x1dc>
 80072e0:	da0b      	bge.n	80072fa <__gethex+0x26a>
 80072e2:	eba5 0808 	sub.w	r8, r5, r8
 80072e6:	4621      	mov	r1, r4
 80072e8:	4642      	mov	r2, r8
 80072ea:	4648      	mov	r0, r9
 80072ec:	f7fe f93c 	bl	8005568 <__lshift>
 80072f0:	4604      	mov	r4, r0
 80072f2:	eba6 0608 	sub.w	r6, r6, r8
 80072f6:	f100 0a14 	add.w	sl, r0, #20
 80072fa:	f04f 0b00 	mov.w	fp, #0
 80072fe:	e7ba      	b.n	8007276 <__gethex+0x1e6>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	42b3      	cmp	r3, r6
 8007304:	dd74      	ble.n	80073f0 <__gethex+0x360>
 8007306:	1b9e      	subs	r6, r3, r6
 8007308:	42b5      	cmp	r5, r6
 800730a:	dc35      	bgt.n	8007378 <__gethex+0x2e8>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2b02      	cmp	r3, #2
 8007310:	d023      	beq.n	800735a <__gethex+0x2ca>
 8007312:	2b03      	cmp	r3, #3
 8007314:	d025      	beq.n	8007362 <__gethex+0x2d2>
 8007316:	2b01      	cmp	r3, #1
 8007318:	d115      	bne.n	8007346 <__gethex+0x2b6>
 800731a:	42b5      	cmp	r5, r6
 800731c:	d113      	bne.n	8007346 <__gethex+0x2b6>
 800731e:	2d01      	cmp	r5, #1
 8007320:	d10b      	bne.n	800733a <__gethex+0x2aa>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	9a02      	ldr	r2, [sp, #8]
 8007326:	f04f 0862 	mov.w	r8, #98	; 0x62
 800732a:	6013      	str	r3, [r2, #0]
 800732c:	2301      	movs	r3, #1
 800732e:	6123      	str	r3, [r4, #16]
 8007330:	f8ca 3000 	str.w	r3, [sl]
 8007334:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007336:	601c      	str	r4, [r3, #0]
 8007338:	e734      	b.n	80071a4 <__gethex+0x114>
 800733a:	4620      	mov	r0, r4
 800733c:	1e69      	subs	r1, r5, #1
 800733e:	f7fe fb36 	bl	80059ae <__any_on>
 8007342:	2800      	cmp	r0, #0
 8007344:	d1ed      	bne.n	8007322 <__gethex+0x292>
 8007346:	4621      	mov	r1, r4
 8007348:	4648      	mov	r0, r9
 800734a:	f7fd fef5 	bl	8005138 <_Bfree>
 800734e:	2300      	movs	r3, #0
 8007350:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007352:	f04f 0850 	mov.w	r8, #80	; 0x50
 8007356:	6013      	str	r3, [r2, #0]
 8007358:	e724      	b.n	80071a4 <__gethex+0x114>
 800735a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1f2      	bne.n	8007346 <__gethex+0x2b6>
 8007360:	e7df      	b.n	8007322 <__gethex+0x292>
 8007362:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1dc      	bne.n	8007322 <__gethex+0x292>
 8007368:	e7ed      	b.n	8007346 <__gethex+0x2b6>
 800736a:	bf00      	nop
 800736c:	08007a84 	.word	0x08007a84
 8007370:	08007917 	.word	0x08007917
 8007374:	08007c2e 	.word	0x08007c2e
 8007378:	f106 38ff 	add.w	r8, r6, #4294967295
 800737c:	f1bb 0f00 	cmp.w	fp, #0
 8007380:	d133      	bne.n	80073ea <__gethex+0x35a>
 8007382:	f1b8 0f00 	cmp.w	r8, #0
 8007386:	d004      	beq.n	8007392 <__gethex+0x302>
 8007388:	4641      	mov	r1, r8
 800738a:	4620      	mov	r0, r4
 800738c:	f7fe fb0f 	bl	80059ae <__any_on>
 8007390:	4683      	mov	fp, r0
 8007392:	2301      	movs	r3, #1
 8007394:	ea4f 1268 	mov.w	r2, r8, asr #5
 8007398:	f008 081f 	and.w	r8, r8, #31
 800739c:	fa03 f308 	lsl.w	r3, r3, r8
 80073a0:	f04f 0802 	mov.w	r8, #2
 80073a4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80073a8:	4631      	mov	r1, r6
 80073aa:	4213      	tst	r3, r2
 80073ac:	4620      	mov	r0, r4
 80073ae:	bf18      	it	ne
 80073b0:	f04b 0b02 	orrne.w	fp, fp, #2
 80073b4:	1bad      	subs	r5, r5, r6
 80073b6:	f7ff fe03 	bl	8006fc0 <rshift>
 80073ba:	687e      	ldr	r6, [r7, #4]
 80073bc:	f1bb 0f00 	cmp.w	fp, #0
 80073c0:	d04a      	beq.n	8007458 <__gethex+0x3c8>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d016      	beq.n	80073f6 <__gethex+0x366>
 80073c8:	2b03      	cmp	r3, #3
 80073ca:	d018      	beq.n	80073fe <__gethex+0x36e>
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d109      	bne.n	80073e4 <__gethex+0x354>
 80073d0:	f01b 0f02 	tst.w	fp, #2
 80073d4:	d006      	beq.n	80073e4 <__gethex+0x354>
 80073d6:	f8da 3000 	ldr.w	r3, [sl]
 80073da:	ea4b 0b03 	orr.w	fp, fp, r3
 80073de:	f01b 0f01 	tst.w	fp, #1
 80073e2:	d10f      	bne.n	8007404 <__gethex+0x374>
 80073e4:	f048 0810 	orr.w	r8, r8, #16
 80073e8:	e036      	b.n	8007458 <__gethex+0x3c8>
 80073ea:	f04f 0b01 	mov.w	fp, #1
 80073ee:	e7d0      	b.n	8007392 <__gethex+0x302>
 80073f0:	f04f 0801 	mov.w	r8, #1
 80073f4:	e7e2      	b.n	80073bc <__gethex+0x32c>
 80073f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073f8:	f1c3 0301 	rsb	r3, r3, #1
 80073fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80073fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007400:	2b00      	cmp	r3, #0
 8007402:	d0ef      	beq.n	80073e4 <__gethex+0x354>
 8007404:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007408:	f104 0214 	add.w	r2, r4, #20
 800740c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007410:	9301      	str	r3, [sp, #4]
 8007412:	2300      	movs	r3, #0
 8007414:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007418:	4694      	mov	ip, r2
 800741a:	f852 1b04 	ldr.w	r1, [r2], #4
 800741e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007422:	d01e      	beq.n	8007462 <__gethex+0x3d2>
 8007424:	3101      	adds	r1, #1
 8007426:	f8cc 1000 	str.w	r1, [ip]
 800742a:	f1b8 0f02 	cmp.w	r8, #2
 800742e:	f104 0214 	add.w	r2, r4, #20
 8007432:	d13d      	bne.n	80074b0 <__gethex+0x420>
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	3b01      	subs	r3, #1
 8007438:	42ab      	cmp	r3, r5
 800743a:	d10b      	bne.n	8007454 <__gethex+0x3c4>
 800743c:	2301      	movs	r3, #1
 800743e:	1169      	asrs	r1, r5, #5
 8007440:	f005 051f 	and.w	r5, r5, #31
 8007444:	fa03 f505 	lsl.w	r5, r3, r5
 8007448:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800744c:	421d      	tst	r5, r3
 800744e:	bf18      	it	ne
 8007450:	f04f 0801 	movne.w	r8, #1
 8007454:	f048 0820 	orr.w	r8, r8, #32
 8007458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800745a:	601c      	str	r4, [r3, #0]
 800745c:	9b02      	ldr	r3, [sp, #8]
 800745e:	601e      	str	r6, [r3, #0]
 8007460:	e6a0      	b.n	80071a4 <__gethex+0x114>
 8007462:	4290      	cmp	r0, r2
 8007464:	f842 3c04 	str.w	r3, [r2, #-4]
 8007468:	d8d6      	bhi.n	8007418 <__gethex+0x388>
 800746a:	68a2      	ldr	r2, [r4, #8]
 800746c:	4593      	cmp	fp, r2
 800746e:	db17      	blt.n	80074a0 <__gethex+0x410>
 8007470:	6861      	ldr	r1, [r4, #4]
 8007472:	4648      	mov	r0, r9
 8007474:	3101      	adds	r1, #1
 8007476:	f7fd fe1f 	bl	80050b8 <_Balloc>
 800747a:	4682      	mov	sl, r0
 800747c:	b918      	cbnz	r0, 8007486 <__gethex+0x3f6>
 800747e:	4602      	mov	r2, r0
 8007480:	2184      	movs	r1, #132	; 0x84
 8007482:	4b1a      	ldr	r3, [pc, #104]	; (80074ec <__gethex+0x45c>)
 8007484:	e6b1      	b.n	80071ea <__gethex+0x15a>
 8007486:	6922      	ldr	r2, [r4, #16]
 8007488:	f104 010c 	add.w	r1, r4, #12
 800748c:	3202      	adds	r2, #2
 800748e:	0092      	lsls	r2, r2, #2
 8007490:	300c      	adds	r0, #12
 8007492:	f7ff fd4f 	bl	8006f34 <memcpy>
 8007496:	4621      	mov	r1, r4
 8007498:	4648      	mov	r0, r9
 800749a:	f7fd fe4d 	bl	8005138 <_Bfree>
 800749e:	4654      	mov	r4, sl
 80074a0:	6922      	ldr	r2, [r4, #16]
 80074a2:	1c51      	adds	r1, r2, #1
 80074a4:	6121      	str	r1, [r4, #16]
 80074a6:	2101      	movs	r1, #1
 80074a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80074ac:	6151      	str	r1, [r2, #20]
 80074ae:	e7bc      	b.n	800742a <__gethex+0x39a>
 80074b0:	6921      	ldr	r1, [r4, #16]
 80074b2:	4559      	cmp	r1, fp
 80074b4:	dd0b      	ble.n	80074ce <__gethex+0x43e>
 80074b6:	2101      	movs	r1, #1
 80074b8:	4620      	mov	r0, r4
 80074ba:	f7ff fd81 	bl	8006fc0 <rshift>
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	3601      	adds	r6, #1
 80074c2:	42b3      	cmp	r3, r6
 80074c4:	f6ff aeda 	blt.w	800727c <__gethex+0x1ec>
 80074c8:	f04f 0801 	mov.w	r8, #1
 80074cc:	e7c2      	b.n	8007454 <__gethex+0x3c4>
 80074ce:	f015 051f 	ands.w	r5, r5, #31
 80074d2:	d0f9      	beq.n	80074c8 <__gethex+0x438>
 80074d4:	9b01      	ldr	r3, [sp, #4]
 80074d6:	f1c5 0520 	rsb	r5, r5, #32
 80074da:	441a      	add	r2, r3
 80074dc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80074e0:	f7fd fedc 	bl	800529c <__hi0bits>
 80074e4:	42a8      	cmp	r0, r5
 80074e6:	dbe6      	blt.n	80074b6 <__gethex+0x426>
 80074e8:	e7ee      	b.n	80074c8 <__gethex+0x438>
 80074ea:	bf00      	nop
 80074ec:	08007917 	.word	0x08007917

080074f0 <L_shift>:
 80074f0:	f1c2 0208 	rsb	r2, r2, #8
 80074f4:	0092      	lsls	r2, r2, #2
 80074f6:	b570      	push	{r4, r5, r6, lr}
 80074f8:	f1c2 0620 	rsb	r6, r2, #32
 80074fc:	6843      	ldr	r3, [r0, #4]
 80074fe:	6804      	ldr	r4, [r0, #0]
 8007500:	fa03 f506 	lsl.w	r5, r3, r6
 8007504:	432c      	orrs	r4, r5
 8007506:	40d3      	lsrs	r3, r2
 8007508:	6004      	str	r4, [r0, #0]
 800750a:	f840 3f04 	str.w	r3, [r0, #4]!
 800750e:	4288      	cmp	r0, r1
 8007510:	d3f4      	bcc.n	80074fc <L_shift+0xc>
 8007512:	bd70      	pop	{r4, r5, r6, pc}

08007514 <__match>:
 8007514:	b530      	push	{r4, r5, lr}
 8007516:	6803      	ldr	r3, [r0, #0]
 8007518:	3301      	adds	r3, #1
 800751a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800751e:	b914      	cbnz	r4, 8007526 <__match+0x12>
 8007520:	6003      	str	r3, [r0, #0]
 8007522:	2001      	movs	r0, #1
 8007524:	bd30      	pop	{r4, r5, pc}
 8007526:	f813 2b01 	ldrb.w	r2, [r3], #1
 800752a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800752e:	2d19      	cmp	r5, #25
 8007530:	bf98      	it	ls
 8007532:	3220      	addls	r2, #32
 8007534:	42a2      	cmp	r2, r4
 8007536:	d0f0      	beq.n	800751a <__match+0x6>
 8007538:	2000      	movs	r0, #0
 800753a:	e7f3      	b.n	8007524 <__match+0x10>

0800753c <__hexnan>:
 800753c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007540:	2500      	movs	r5, #0
 8007542:	680b      	ldr	r3, [r1, #0]
 8007544:	4682      	mov	sl, r0
 8007546:	115e      	asrs	r6, r3, #5
 8007548:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800754c:	f013 031f 	ands.w	r3, r3, #31
 8007550:	bf18      	it	ne
 8007552:	3604      	addne	r6, #4
 8007554:	1f37      	subs	r7, r6, #4
 8007556:	4690      	mov	r8, r2
 8007558:	46b9      	mov	r9, r7
 800755a:	463c      	mov	r4, r7
 800755c:	46ab      	mov	fp, r5
 800755e:	b087      	sub	sp, #28
 8007560:	6801      	ldr	r1, [r0, #0]
 8007562:	9301      	str	r3, [sp, #4]
 8007564:	f846 5c04 	str.w	r5, [r6, #-4]
 8007568:	9502      	str	r5, [sp, #8]
 800756a:	784a      	ldrb	r2, [r1, #1]
 800756c:	1c4b      	adds	r3, r1, #1
 800756e:	9303      	str	r3, [sp, #12]
 8007570:	b342      	cbz	r2, 80075c4 <__hexnan+0x88>
 8007572:	4610      	mov	r0, r2
 8007574:	9105      	str	r1, [sp, #20]
 8007576:	9204      	str	r2, [sp, #16]
 8007578:	f7ff fd75 	bl	8007066 <__hexdig_fun>
 800757c:	2800      	cmp	r0, #0
 800757e:	d14f      	bne.n	8007620 <__hexnan+0xe4>
 8007580:	9a04      	ldr	r2, [sp, #16]
 8007582:	9905      	ldr	r1, [sp, #20]
 8007584:	2a20      	cmp	r2, #32
 8007586:	d818      	bhi.n	80075ba <__hexnan+0x7e>
 8007588:	9b02      	ldr	r3, [sp, #8]
 800758a:	459b      	cmp	fp, r3
 800758c:	dd13      	ble.n	80075b6 <__hexnan+0x7a>
 800758e:	454c      	cmp	r4, r9
 8007590:	d206      	bcs.n	80075a0 <__hexnan+0x64>
 8007592:	2d07      	cmp	r5, #7
 8007594:	dc04      	bgt.n	80075a0 <__hexnan+0x64>
 8007596:	462a      	mov	r2, r5
 8007598:	4649      	mov	r1, r9
 800759a:	4620      	mov	r0, r4
 800759c:	f7ff ffa8 	bl	80074f0 <L_shift>
 80075a0:	4544      	cmp	r4, r8
 80075a2:	d950      	bls.n	8007646 <__hexnan+0x10a>
 80075a4:	2300      	movs	r3, #0
 80075a6:	f1a4 0904 	sub.w	r9, r4, #4
 80075aa:	f844 3c04 	str.w	r3, [r4, #-4]
 80075ae:	461d      	mov	r5, r3
 80075b0:	464c      	mov	r4, r9
 80075b2:	f8cd b008 	str.w	fp, [sp, #8]
 80075b6:	9903      	ldr	r1, [sp, #12]
 80075b8:	e7d7      	b.n	800756a <__hexnan+0x2e>
 80075ba:	2a29      	cmp	r2, #41	; 0x29
 80075bc:	d155      	bne.n	800766a <__hexnan+0x12e>
 80075be:	3102      	adds	r1, #2
 80075c0:	f8ca 1000 	str.w	r1, [sl]
 80075c4:	f1bb 0f00 	cmp.w	fp, #0
 80075c8:	d04f      	beq.n	800766a <__hexnan+0x12e>
 80075ca:	454c      	cmp	r4, r9
 80075cc:	d206      	bcs.n	80075dc <__hexnan+0xa0>
 80075ce:	2d07      	cmp	r5, #7
 80075d0:	dc04      	bgt.n	80075dc <__hexnan+0xa0>
 80075d2:	462a      	mov	r2, r5
 80075d4:	4649      	mov	r1, r9
 80075d6:	4620      	mov	r0, r4
 80075d8:	f7ff ff8a 	bl	80074f0 <L_shift>
 80075dc:	4544      	cmp	r4, r8
 80075de:	d934      	bls.n	800764a <__hexnan+0x10e>
 80075e0:	4623      	mov	r3, r4
 80075e2:	f1a8 0204 	sub.w	r2, r8, #4
 80075e6:	f853 1b04 	ldr.w	r1, [r3], #4
 80075ea:	429f      	cmp	r7, r3
 80075ec:	f842 1f04 	str.w	r1, [r2, #4]!
 80075f0:	d2f9      	bcs.n	80075e6 <__hexnan+0xaa>
 80075f2:	1b3b      	subs	r3, r7, r4
 80075f4:	f023 0303 	bic.w	r3, r3, #3
 80075f8:	3304      	adds	r3, #4
 80075fa:	3e03      	subs	r6, #3
 80075fc:	3401      	adds	r4, #1
 80075fe:	42a6      	cmp	r6, r4
 8007600:	bf38      	it	cc
 8007602:	2304      	movcc	r3, #4
 8007604:	2200      	movs	r2, #0
 8007606:	4443      	add	r3, r8
 8007608:	f843 2b04 	str.w	r2, [r3], #4
 800760c:	429f      	cmp	r7, r3
 800760e:	d2fb      	bcs.n	8007608 <__hexnan+0xcc>
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	b91b      	cbnz	r3, 800761c <__hexnan+0xe0>
 8007614:	4547      	cmp	r7, r8
 8007616:	d126      	bne.n	8007666 <__hexnan+0x12a>
 8007618:	2301      	movs	r3, #1
 800761a:	603b      	str	r3, [r7, #0]
 800761c:	2005      	movs	r0, #5
 800761e:	e025      	b.n	800766c <__hexnan+0x130>
 8007620:	3501      	adds	r5, #1
 8007622:	2d08      	cmp	r5, #8
 8007624:	f10b 0b01 	add.w	fp, fp, #1
 8007628:	dd06      	ble.n	8007638 <__hexnan+0xfc>
 800762a:	4544      	cmp	r4, r8
 800762c:	d9c3      	bls.n	80075b6 <__hexnan+0x7a>
 800762e:	2300      	movs	r3, #0
 8007630:	2501      	movs	r5, #1
 8007632:	f844 3c04 	str.w	r3, [r4, #-4]
 8007636:	3c04      	subs	r4, #4
 8007638:	6822      	ldr	r2, [r4, #0]
 800763a:	f000 000f 	and.w	r0, r0, #15
 800763e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007642:	6020      	str	r0, [r4, #0]
 8007644:	e7b7      	b.n	80075b6 <__hexnan+0x7a>
 8007646:	2508      	movs	r5, #8
 8007648:	e7b5      	b.n	80075b6 <__hexnan+0x7a>
 800764a:	9b01      	ldr	r3, [sp, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d0df      	beq.n	8007610 <__hexnan+0xd4>
 8007650:	f04f 32ff 	mov.w	r2, #4294967295
 8007654:	f1c3 0320 	rsb	r3, r3, #32
 8007658:	40da      	lsrs	r2, r3
 800765a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800765e:	4013      	ands	r3, r2
 8007660:	f846 3c04 	str.w	r3, [r6, #-4]
 8007664:	e7d4      	b.n	8007610 <__hexnan+0xd4>
 8007666:	3f04      	subs	r7, #4
 8007668:	e7d2      	b.n	8007610 <__hexnan+0xd4>
 800766a:	2004      	movs	r0, #4
 800766c:	b007      	add	sp, #28
 800766e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007672 <__ascii_mbtowc>:
 8007672:	b082      	sub	sp, #8
 8007674:	b901      	cbnz	r1, 8007678 <__ascii_mbtowc+0x6>
 8007676:	a901      	add	r1, sp, #4
 8007678:	b142      	cbz	r2, 800768c <__ascii_mbtowc+0x1a>
 800767a:	b14b      	cbz	r3, 8007690 <__ascii_mbtowc+0x1e>
 800767c:	7813      	ldrb	r3, [r2, #0]
 800767e:	600b      	str	r3, [r1, #0]
 8007680:	7812      	ldrb	r2, [r2, #0]
 8007682:	1e10      	subs	r0, r2, #0
 8007684:	bf18      	it	ne
 8007686:	2001      	movne	r0, #1
 8007688:	b002      	add	sp, #8
 800768a:	4770      	bx	lr
 800768c:	4610      	mov	r0, r2
 800768e:	e7fb      	b.n	8007688 <__ascii_mbtowc+0x16>
 8007690:	f06f 0001 	mvn.w	r0, #1
 8007694:	e7f8      	b.n	8007688 <__ascii_mbtowc+0x16>

08007696 <_realloc_r>:
 8007696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800769a:	4680      	mov	r8, r0
 800769c:	4614      	mov	r4, r2
 800769e:	460e      	mov	r6, r1
 80076a0:	b921      	cbnz	r1, 80076ac <_realloc_r+0x16>
 80076a2:	4611      	mov	r1, r2
 80076a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076a8:	f7fd bc7a 	b.w	8004fa0 <_malloc_r>
 80076ac:	b92a      	cbnz	r2, 80076ba <_realloc_r+0x24>
 80076ae:	f7fd fc07 	bl	8004ec0 <_free_r>
 80076b2:	4625      	mov	r5, r4
 80076b4:	4628      	mov	r0, r5
 80076b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076ba:	f000 f842 	bl	8007742 <_malloc_usable_size_r>
 80076be:	4284      	cmp	r4, r0
 80076c0:	4607      	mov	r7, r0
 80076c2:	d802      	bhi.n	80076ca <_realloc_r+0x34>
 80076c4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80076c8:	d812      	bhi.n	80076f0 <_realloc_r+0x5a>
 80076ca:	4621      	mov	r1, r4
 80076cc:	4640      	mov	r0, r8
 80076ce:	f7fd fc67 	bl	8004fa0 <_malloc_r>
 80076d2:	4605      	mov	r5, r0
 80076d4:	2800      	cmp	r0, #0
 80076d6:	d0ed      	beq.n	80076b4 <_realloc_r+0x1e>
 80076d8:	42bc      	cmp	r4, r7
 80076da:	4622      	mov	r2, r4
 80076dc:	4631      	mov	r1, r6
 80076de:	bf28      	it	cs
 80076e0:	463a      	movcs	r2, r7
 80076e2:	f7ff fc27 	bl	8006f34 <memcpy>
 80076e6:	4631      	mov	r1, r6
 80076e8:	4640      	mov	r0, r8
 80076ea:	f7fd fbe9 	bl	8004ec0 <_free_r>
 80076ee:	e7e1      	b.n	80076b4 <_realloc_r+0x1e>
 80076f0:	4635      	mov	r5, r6
 80076f2:	e7df      	b.n	80076b4 <_realloc_r+0x1e>

080076f4 <__ascii_wctomb>:
 80076f4:	4603      	mov	r3, r0
 80076f6:	4608      	mov	r0, r1
 80076f8:	b141      	cbz	r1, 800770c <__ascii_wctomb+0x18>
 80076fa:	2aff      	cmp	r2, #255	; 0xff
 80076fc:	d904      	bls.n	8007708 <__ascii_wctomb+0x14>
 80076fe:	228a      	movs	r2, #138	; 0x8a
 8007700:	f04f 30ff 	mov.w	r0, #4294967295
 8007704:	601a      	str	r2, [r3, #0]
 8007706:	4770      	bx	lr
 8007708:	2001      	movs	r0, #1
 800770a:	700a      	strb	r2, [r1, #0]
 800770c:	4770      	bx	lr
	...

08007710 <fiprintf>:
 8007710:	b40e      	push	{r1, r2, r3}
 8007712:	b503      	push	{r0, r1, lr}
 8007714:	4601      	mov	r1, r0
 8007716:	ab03      	add	r3, sp, #12
 8007718:	4805      	ldr	r0, [pc, #20]	; (8007730 <fiprintf+0x20>)
 800771a:	f853 2b04 	ldr.w	r2, [r3], #4
 800771e:	6800      	ldr	r0, [r0, #0]
 8007720:	9301      	str	r3, [sp, #4]
 8007722:	f7ff f983 	bl	8006a2c <_vfiprintf_r>
 8007726:	b002      	add	sp, #8
 8007728:	f85d eb04 	ldr.w	lr, [sp], #4
 800772c:	b003      	add	sp, #12
 800772e:	4770      	bx	lr
 8007730:	20000064 	.word	0x20000064

08007734 <abort>:
 8007734:	2006      	movs	r0, #6
 8007736:	b508      	push	{r3, lr}
 8007738:	f000 f834 	bl	80077a4 <raise>
 800773c:	2001      	movs	r0, #1
 800773e:	f7f9 fc4e 	bl	8000fde <_exit>

08007742 <_malloc_usable_size_r>:
 8007742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007746:	1f18      	subs	r0, r3, #4
 8007748:	2b00      	cmp	r3, #0
 800774a:	bfbc      	itt	lt
 800774c:	580b      	ldrlt	r3, [r1, r0]
 800774e:	18c0      	addlt	r0, r0, r3
 8007750:	4770      	bx	lr

08007752 <_raise_r>:
 8007752:	291f      	cmp	r1, #31
 8007754:	b538      	push	{r3, r4, r5, lr}
 8007756:	4604      	mov	r4, r0
 8007758:	460d      	mov	r5, r1
 800775a:	d904      	bls.n	8007766 <_raise_r+0x14>
 800775c:	2316      	movs	r3, #22
 800775e:	6003      	str	r3, [r0, #0]
 8007760:	f04f 30ff 	mov.w	r0, #4294967295
 8007764:	bd38      	pop	{r3, r4, r5, pc}
 8007766:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007768:	b112      	cbz	r2, 8007770 <_raise_r+0x1e>
 800776a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800776e:	b94b      	cbnz	r3, 8007784 <_raise_r+0x32>
 8007770:	4620      	mov	r0, r4
 8007772:	f000 f831 	bl	80077d8 <_getpid_r>
 8007776:	462a      	mov	r2, r5
 8007778:	4601      	mov	r1, r0
 800777a:	4620      	mov	r0, r4
 800777c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007780:	f000 b818 	b.w	80077b4 <_kill_r>
 8007784:	2b01      	cmp	r3, #1
 8007786:	d00a      	beq.n	800779e <_raise_r+0x4c>
 8007788:	1c59      	adds	r1, r3, #1
 800778a:	d103      	bne.n	8007794 <_raise_r+0x42>
 800778c:	2316      	movs	r3, #22
 800778e:	6003      	str	r3, [r0, #0]
 8007790:	2001      	movs	r0, #1
 8007792:	e7e7      	b.n	8007764 <_raise_r+0x12>
 8007794:	2400      	movs	r4, #0
 8007796:	4628      	mov	r0, r5
 8007798:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800779c:	4798      	blx	r3
 800779e:	2000      	movs	r0, #0
 80077a0:	e7e0      	b.n	8007764 <_raise_r+0x12>
	...

080077a4 <raise>:
 80077a4:	4b02      	ldr	r3, [pc, #8]	; (80077b0 <raise+0xc>)
 80077a6:	4601      	mov	r1, r0
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	f7ff bfd2 	b.w	8007752 <_raise_r>
 80077ae:	bf00      	nop
 80077b0:	20000064 	.word	0x20000064

080077b4 <_kill_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	2300      	movs	r3, #0
 80077b8:	4d06      	ldr	r5, [pc, #24]	; (80077d4 <_kill_r+0x20>)
 80077ba:	4604      	mov	r4, r0
 80077bc:	4608      	mov	r0, r1
 80077be:	4611      	mov	r1, r2
 80077c0:	602b      	str	r3, [r5, #0]
 80077c2:	f7f9 fbfc 	bl	8000fbe <_kill>
 80077c6:	1c43      	adds	r3, r0, #1
 80077c8:	d102      	bne.n	80077d0 <_kill_r+0x1c>
 80077ca:	682b      	ldr	r3, [r5, #0]
 80077cc:	b103      	cbz	r3, 80077d0 <_kill_r+0x1c>
 80077ce:	6023      	str	r3, [r4, #0]
 80077d0:	bd38      	pop	{r3, r4, r5, pc}
 80077d2:	bf00      	nop
 80077d4:	200003b0 	.word	0x200003b0

080077d8 <_getpid_r>:
 80077d8:	f7f9 bbea 	b.w	8000fb0 <_getpid>

080077dc <_init>:
 80077dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077de:	bf00      	nop
 80077e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077e2:	bc08      	pop	{r3}
 80077e4:	469e      	mov	lr, r3
 80077e6:	4770      	bx	lr

080077e8 <_fini>:
 80077e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ea:	bf00      	nop
 80077ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ee:	bc08      	pop	{r3}
 80077f0:	469e      	mov	lr, r3
 80077f2:	4770      	bx	lr
