
Nucleo_Board_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003ed0  08003ed0  00013ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f58  08003f58  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003f58  08003f58  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f58  08003f58  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f58  08003f58  00013f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f5c  08003f5c  00013f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003f60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000001f8  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000260  20000260  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a0ed  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a31  00000000  00000000  0002a1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000798  00000000  00000000  0002bc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005c2  00000000  00000000  0002c398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002092f  00000000  00000000  0002c95a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b14c  00000000  00000000  0004d289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c1c1f  00000000  00000000  000583d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000024cc  00000000  00000000  00119ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0011c4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003eb8 	.word	0x08003eb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003eb8 	.word	0x08003eb8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <_write>:
/**
  * @brief  The application entry point.
  * @retval int
  */

int _write(int fd, char *data, int len) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) data, len, HAL_MAX_DELAY);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	b29a      	uxth	r2, r3
 8000290:	f04f 33ff 	mov.w	r3, #4294967295
 8000294:	68b9      	ldr	r1, [r7, #8]
 8000296:	4804      	ldr	r0, [pc, #16]	; (80002a8 <_write+0x28>)
 8000298:	f002 fa10 	bl	80026bc <HAL_UART_Transmit>
	return len;
 800029c:	687b      	ldr	r3, [r7, #4]
}
 800029e:	4618      	mov	r0, r3
 80002a0:	3710      	adds	r7, #16
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000084 	.word	0x20000084

080002ac <main>:

int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b0:	f000 fa6e 	bl	8000790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b4:	f000 f80a 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b8:	f000 f898 	bl	80003ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002bc:	f000 f864 	bl	8000388 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		printf("serial comm is working\n\r");
 80002c0:	4801      	ldr	r0, [pc, #4]	; (80002c8 <main+0x1c>)
 80002c2:	f002 ff85 	bl	80031d0 <iprintf>
 80002c6:	e7fb      	b.n	80002c0 <main+0x14>
 80002c8:	08003ed0 	.word	0x08003ed0

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b0a6      	sub	sp, #152	; 0x98
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002d6:	2228      	movs	r2, #40	; 0x28
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f002 ffcd 	bl	800327a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
 80002ec:	60da      	str	r2, [r3, #12]
 80002ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2258      	movs	r2, #88	; 0x58
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f002 ffbf 	bl	800327a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002fc:	2302      	movs	r3, #2
 80002fe:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000300:	2301      	movs	r3, #1
 8000302:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000304:	2310      	movs	r3, #16
 8000306:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800030a:	2302      	movs	r3, #2
 800030c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000310:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000314:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000318:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800031c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000326:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800032a:	4618      	mov	r0, r3
 800032c:	f000 fd1e 	bl	8000d6c <HAL_RCC_OscConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000336:	f000 f8bf 	bl	80004b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033a:	230f      	movs	r3, #15
 800033c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800033e:	2302      	movs	r3, #2
 8000340:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800034a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034c:	2300      	movs	r3, #0
 800034e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000350:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000354:	2102      	movs	r1, #2
 8000356:	4618      	mov	r0, r3
 8000358:	f001 fd5c 	bl	8001e14 <HAL_RCC_ClockConfig>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000362:	f000 f8a9 	bl	80004b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000366:	2302      	movs	r3, #2
 8000368:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800036a:	2300      	movs	r3, #0
 800036c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	4618      	mov	r0, r3
 8000372:	f001 ff85 	bl	8002280 <HAL_RCCEx_PeriphCLKConfig>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800037c:	f000 f89c 	bl	80004b8 <Error_Handler>
  }
}
 8000380:	bf00      	nop
 8000382:	3798      	adds	r7, #152	; 0x98
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800038c:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <MX_USART2_UART_Init+0x5c>)
 800038e:	4a16      	ldr	r2, [pc, #88]	; (80003e8 <MX_USART2_UART_Init+0x60>)
 8000390:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000392:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <MX_USART2_UART_Init+0x5c>)
 8000394:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000398:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800039a:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <MX_USART2_UART_Init+0x5c>)
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003a0:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <MX_USART2_UART_Init+0x5c>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003a6:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <MX_USART2_UART_Init+0x5c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003ac:	4b0d      	ldr	r3, [pc, #52]	; (80003e4 <MX_USART2_UART_Init+0x5c>)
 80003ae:	220c      	movs	r2, #12
 80003b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003b2:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <MX_USART2_UART_Init+0x5c>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b8:	4b0a      	ldr	r3, [pc, #40]	; (80003e4 <MX_USART2_UART_Init+0x5c>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003be:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <MX_USART2_UART_Init+0x5c>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003c4:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <MX_USART2_UART_Init+0x5c>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80003ca:	2300      	movs	r3, #0
 80003cc:	2200      	movs	r2, #0
 80003ce:	2100      	movs	r1, #0
 80003d0:	4804      	ldr	r0, [pc, #16]	; (80003e4 <MX_USART2_UART_Init+0x5c>)
 80003d2:	f002 fde6 	bl	8002fa2 <HAL_RS485Ex_Init>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80003dc:	f000 f86c 	bl	80004b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003e0:	bf00      	nop
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000084 	.word	0x20000084
 80003e8:	40004400 	.word	0x40004400

080003ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b08a      	sub	sp, #40	; 0x28
 80003f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f2:	f107 0314 	add.w	r3, r7, #20
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]
 8000400:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000402:	4b2b      	ldr	r3, [pc, #172]	; (80004b0 <MX_GPIO_Init+0xc4>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a2a      	ldr	r2, [pc, #168]	; (80004b0 <MX_GPIO_Init+0xc4>)
 8000408:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800040c:	6153      	str	r3, [r2, #20]
 800040e:	4b28      	ldr	r3, [pc, #160]	; (80004b0 <MX_GPIO_Init+0xc4>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000416:	613b      	str	r3, [r7, #16]
 8000418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800041a:	4b25      	ldr	r3, [pc, #148]	; (80004b0 <MX_GPIO_Init+0xc4>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a24      	ldr	r2, [pc, #144]	; (80004b0 <MX_GPIO_Init+0xc4>)
 8000420:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b22      	ldr	r3, [pc, #136]	; (80004b0 <MX_GPIO_Init+0xc4>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000432:	4b1f      	ldr	r3, [pc, #124]	; (80004b0 <MX_GPIO_Init+0xc4>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a1e      	ldr	r2, [pc, #120]	; (80004b0 <MX_GPIO_Init+0xc4>)
 8000438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800043c:	6153      	str	r3, [r2, #20]
 800043e:	4b1c      	ldr	r3, [pc, #112]	; (80004b0 <MX_GPIO_Init+0xc4>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044a:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <MX_GPIO_Init+0xc4>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a18      	ldr	r2, [pc, #96]	; (80004b0 <MX_GPIO_Init+0xc4>)
 8000450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000454:	6153      	str	r3, [r2, #20]
 8000456:	4b16      	ldr	r3, [pc, #88]	; (80004b0 <MX_GPIO_Init+0xc4>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000462:	2200      	movs	r2, #0
 8000464:	2120      	movs	r1, #32
 8000466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800046a:	f000 fc67 	bl	8000d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800046e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000474:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	2300      	movs	r3, #0
 800047c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800047e:	f107 0314 	add.w	r3, r7, #20
 8000482:	4619      	mov	r1, r3
 8000484:	480b      	ldr	r0, [pc, #44]	; (80004b4 <MX_GPIO_Init+0xc8>)
 8000486:	f000 facf 	bl	8000a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800048a:	2320      	movs	r3, #32
 800048c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048e:	2301      	movs	r3, #1
 8000490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	2300      	movs	r3, #0
 8000494:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000496:	2300      	movs	r3, #0
 8000498:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800049a:	f107 0314 	add.w	r3, r7, #20
 800049e:	4619      	mov	r1, r3
 80004a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a4:	f000 fac0 	bl	8000a28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004a8:	bf00      	nop
 80004aa:	3728      	adds	r7, #40	; 0x28
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40021000 	.word	0x40021000
 80004b4:	48000800 	.word	0x48000800

080004b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004bc:	b672      	cpsid	i
}
 80004be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80004c0:	e7fe      	b.n	80004c0 <Error_Handler+0x8>
	...

080004c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ca:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <HAL_MspInit+0x44>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	4a0e      	ldr	r2, [pc, #56]	; (8000508 <HAL_MspInit+0x44>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6193      	str	r3, [r2, #24]
 80004d6:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <HAL_MspInit+0x44>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <HAL_MspInit+0x44>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	4a08      	ldr	r2, [pc, #32]	; (8000508 <HAL_MspInit+0x44>)
 80004e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004ec:	61d3      	str	r3, [r2, #28]
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <HAL_MspInit+0x44>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004f6:	603b      	str	r3, [r7, #0]
 80004f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004fa:	2007      	movs	r0, #7
 80004fc:	f000 fa60 	bl	80009c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40021000 	.word	0x40021000

0800050c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08a      	sub	sp, #40	; 0x28
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000514:	f107 0314 	add.w	r3, r7, #20
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a20      	ldr	r2, [pc, #128]	; (80005ac <HAL_UART_MspInit+0xa0>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d139      	bne.n	80005a2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800052e:	4b20      	ldr	r3, [pc, #128]	; (80005b0 <HAL_UART_MspInit+0xa4>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	4a1f      	ldr	r2, [pc, #124]	; (80005b0 <HAL_UART_MspInit+0xa4>)
 8000534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000538:	61d3      	str	r3, [r2, #28]
 800053a:	4b1d      	ldr	r3, [pc, #116]	; (80005b0 <HAL_UART_MspInit+0xa4>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000542:	613b      	str	r3, [r7, #16]
 8000544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	4b1a      	ldr	r3, [pc, #104]	; (80005b0 <HAL_UART_MspInit+0xa4>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	4a19      	ldr	r2, [pc, #100]	; (80005b0 <HAL_UART_MspInit+0xa4>)
 800054c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000550:	6153      	str	r3, [r2, #20]
 8000552:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <HAL_UART_MspInit+0xa4>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA1     ------> USART2_DE
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800055e:	2306      	movs	r3, #6
 8000560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000562:	2302      	movs	r3, #2
 8000564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	2300      	movs	r3, #0
 8000568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800056a:	2303      	movs	r3, #3
 800056c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800056e:	2307      	movs	r3, #7
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	4619      	mov	r1, r3
 8000578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057c:	f000 fa54 	bl	8000a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART_RX_Pin;
 8000580:	2308      	movs	r3, #8
 8000582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000584:	2302      	movs	r3, #2
 8000586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058c:	2300      	movs	r3, #0
 800058e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000590:	2307      	movs	r3, #7
 8000592:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	4619      	mov	r1, r3
 800059a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059e:	f000 fa43 	bl	8000a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005a2:	bf00      	nop
 80005a4:	3728      	adds	r7, #40	; 0x28
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40004400 	.word	0x40004400
 80005b0:	40021000 	.word	0x40021000

080005b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <NMI_Handler+0x4>

080005ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005be:	e7fe      	b.n	80005be <HardFault_Handler+0x4>

080005c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <MemManage_Handler+0x4>

080005c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ca:	e7fe      	b.n	80005ca <BusFault_Handler+0x4>

080005cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <UsageFault_Handler+0x4>

080005d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000600:	f000 f90c 	bl	800081c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}

08000608 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	e00a      	b.n	8000630 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800061a:	f3af 8000 	nop.w
 800061e:	4601      	mov	r1, r0
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	1c5a      	adds	r2, r3, #1
 8000624:	60ba      	str	r2, [r7, #8]
 8000626:	b2ca      	uxtb	r2, r1
 8000628:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	3301      	adds	r3, #1
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	697a      	ldr	r2, [r7, #20]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	429a      	cmp	r2, r3
 8000636:	dbf0      	blt.n	800061a <_read+0x12>
  }

  return len;
 8000638:	687b      	ldr	r3, [r7, #4]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3718      	adds	r7, #24
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}

08000642 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000642:	b480      	push	{r7}
 8000644:	b083      	sub	sp, #12
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800064a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800064e:	4618      	mov	r0, r3
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800065a:	b480      	push	{r7}
 800065c:	b083      	sub	sp, #12
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
 8000662:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800066a:	605a      	str	r2, [r3, #4]
  return 0;
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr

0800067a <_isatty>:

int _isatty(int file)
{
 800067a:	b480      	push	{r7}
 800067c:	b083      	sub	sp, #12
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000682:	2301      	movs	r3, #1
}
 8000684:	4618      	mov	r0, r3
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr

08000690 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800069c:	2300      	movs	r3, #0
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
	...

080006ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006b4:	4a14      	ldr	r2, [pc, #80]	; (8000708 <_sbrk+0x5c>)
 80006b6:	4b15      	ldr	r3, [pc, #84]	; (800070c <_sbrk+0x60>)
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006c0:	4b13      	ldr	r3, [pc, #76]	; (8000710 <_sbrk+0x64>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d102      	bne.n	80006ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <_sbrk+0x64>)
 80006ca:	4a12      	ldr	r2, [pc, #72]	; (8000714 <_sbrk+0x68>)
 80006cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <_sbrk+0x64>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4413      	add	r3, r2
 80006d6:	693a      	ldr	r2, [r7, #16]
 80006d8:	429a      	cmp	r2, r3
 80006da:	d207      	bcs.n	80006ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006dc:	f002 fe1c 	bl	8003318 <__errno>
 80006e0:	4603      	mov	r3, r0
 80006e2:	220c      	movs	r2, #12
 80006e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ea:	e009      	b.n	8000700 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <_sbrk+0x64>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006f2:	4b07      	ldr	r3, [pc, #28]	; (8000710 <_sbrk+0x64>)
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4413      	add	r3, r2
 80006fa:	4a05      	ldr	r2, [pc, #20]	; (8000710 <_sbrk+0x64>)
 80006fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006fe:	68fb      	ldr	r3, [r7, #12]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3718      	adds	r7, #24
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20010000 	.word	0x20010000
 800070c:	00000400 	.word	0x00000400
 8000710:	2000010c 	.word	0x2000010c
 8000714:	20000260 	.word	0x20000260

08000718 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <SystemInit+0x20>)
 800071e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000722:	4a05      	ldr	r2, [pc, #20]	; (8000738 <SystemInit+0x20>)
 8000724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000728:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800073c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000774 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000740:	f7ff ffea 	bl	8000718 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000744:	480c      	ldr	r0, [pc, #48]	; (8000778 <LoopForever+0x6>)
  ldr r1, =_edata
 8000746:	490d      	ldr	r1, [pc, #52]	; (800077c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000748:	4a0d      	ldr	r2, [pc, #52]	; (8000780 <LoopForever+0xe>)
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800074c:	e002      	b.n	8000754 <LoopCopyDataInit>

0800074e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000752:	3304      	adds	r3, #4

08000754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000758:	d3f9      	bcc.n	800074e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075a:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <LoopForever+0x12>)
  ldr r4, =_ebss
 800075c:	4c0a      	ldr	r4, [pc, #40]	; (8000788 <LoopForever+0x16>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000760:	e001      	b.n	8000766 <LoopFillZerobss>

08000762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000764:	3204      	adds	r2, #4

08000766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000768:	d3fb      	bcc.n	8000762 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800076a:	f002 fddb 	bl	8003324 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800076e:	f7ff fd9d 	bl	80002ac <main>

08000772 <LoopForever>:

LoopForever:
    b LoopForever
 8000772:	e7fe      	b.n	8000772 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000774:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800077c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000780:	08003f60 	.word	0x08003f60
  ldr r2, =_sbss
 8000784:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000788:	20000260 	.word	0x20000260

0800078c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800078c:	e7fe      	b.n	800078c <ADC1_2_IRQHandler>
	...

08000790 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <HAL_Init+0x28>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <HAL_Init+0x28>)
 800079a:	f043 0310 	orr.w	r3, r3, #16
 800079e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a0:	2003      	movs	r0, #3
 80007a2:	f000 f90d 	bl	80009c0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007a6:	2000      	movs	r0, #0
 80007a8:	f000 f808 	bl	80007bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007ac:	f7ff fe8a 	bl	80004c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40022000 	.word	0x40022000

080007bc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <HAL_InitTick+0x54>)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <HAL_InitTick+0x58>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	4619      	mov	r1, r3
 80007ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 f917 	bl	8000a0e <HAL_SYSTICK_Config>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
 80007e8:	e00e      	b.n	8000808 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b0f      	cmp	r3, #15
 80007ee:	d80a      	bhi.n	8000806 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007f0:	2200      	movs	r2, #0
 80007f2:	6879      	ldr	r1, [r7, #4]
 80007f4:	f04f 30ff 	mov.w	r0, #4294967295
 80007f8:	f000 f8ed 	bl	80009d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007fc:	4a06      	ldr	r2, [pc, #24]	; (8000818 <HAL_InitTick+0x5c>)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000802:	2300      	movs	r3, #0
 8000804:	e000      	b.n	8000808 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000806:	2301      	movs	r3, #1
}
 8000808:	4618      	mov	r0, r3
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000000 	.word	0x20000000
 8000814:	20000008 	.word	0x20000008
 8000818:	20000004 	.word	0x20000004

0800081c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_IncTick+0x20>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	461a      	mov	r2, r3
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <HAL_IncTick+0x24>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4413      	add	r3, r2
 800082c:	4a04      	ldr	r2, [pc, #16]	; (8000840 <HAL_IncTick+0x24>)
 800082e:	6013      	str	r3, [r2, #0]
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	20000008 	.word	0x20000008
 8000840:	20000110 	.word	0x20000110

08000844 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  return uwTick;  
 8000848:	4b03      	ldr	r3, [pc, #12]	; (8000858 <HAL_GetTick+0x14>)
 800084a:	681b      	ldr	r3, [r3, #0]
}
 800084c:	4618      	mov	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	20000110 	.word	0x20000110

0800085c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <__NVIC_SetPriorityGrouping+0x44>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000878:	4013      	ands	r3, r2
 800087a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800088c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800088e:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	60d3      	str	r3, [r2, #12]
}
 8000894:	bf00      	nop
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a8:	4b04      	ldr	r3, [pc, #16]	; (80008bc <__NVIC_GetPriorityGrouping+0x18>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	0a1b      	lsrs	r3, r3, #8
 80008ae:	f003 0307 	and.w	r3, r3, #7
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	6039      	str	r1, [r7, #0]
 80008ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	db0a      	blt.n	80008ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	490c      	ldr	r1, [pc, #48]	; (800090c <__NVIC_SetPriority+0x4c>)
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	0112      	lsls	r2, r2, #4
 80008e0:	b2d2      	uxtb	r2, r2
 80008e2:	440b      	add	r3, r1
 80008e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e8:	e00a      	b.n	8000900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4908      	ldr	r1, [pc, #32]	; (8000910 <__NVIC_SetPriority+0x50>)
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	f003 030f 	and.w	r3, r3, #15
 80008f6:	3b04      	subs	r3, #4
 80008f8:	0112      	lsls	r2, r2, #4
 80008fa:	b2d2      	uxtb	r2, r2
 80008fc:	440b      	add	r3, r1
 80008fe:	761a      	strb	r2, [r3, #24]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	e000e100 	.word	0xe000e100
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000914:	b480      	push	{r7}
 8000916:	b089      	sub	sp, #36	; 0x24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	f1c3 0307 	rsb	r3, r3, #7
 800092e:	2b04      	cmp	r3, #4
 8000930:	bf28      	it	cs
 8000932:	2304      	movcs	r3, #4
 8000934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3304      	adds	r3, #4
 800093a:	2b06      	cmp	r3, #6
 800093c:	d902      	bls.n	8000944 <NVIC_EncodePriority+0x30>
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3b03      	subs	r3, #3
 8000942:	e000      	b.n	8000946 <NVIC_EncodePriority+0x32>
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000948:	f04f 32ff 	mov.w	r2, #4294967295
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	43da      	mvns	r2, r3
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	401a      	ands	r2, r3
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800095c:	f04f 31ff 	mov.w	r1, #4294967295
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	fa01 f303 	lsl.w	r3, r1, r3
 8000966:	43d9      	mvns	r1, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800096c:	4313      	orrs	r3, r2
         );
}
 800096e:	4618      	mov	r0, r3
 8000970:	3724      	adds	r7, #36	; 0x24
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
	...

0800097c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800098c:	d301      	bcc.n	8000992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800098e:	2301      	movs	r3, #1
 8000990:	e00f      	b.n	80009b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <SysTick_Config+0x40>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3b01      	subs	r3, #1
 8000998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800099a:	210f      	movs	r1, #15
 800099c:	f04f 30ff 	mov.w	r0, #4294967295
 80009a0:	f7ff ff8e 	bl	80008c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <SysTick_Config+0x40>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009aa:	4b04      	ldr	r3, [pc, #16]	; (80009bc <SysTick_Config+0x40>)
 80009ac:	2207      	movs	r2, #7
 80009ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	e000e010 	.word	0xe000e010

080009c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff ff47 	bl	800085c <__NVIC_SetPriorityGrouping>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b086      	sub	sp, #24
 80009da:	af00      	add	r7, sp, #0
 80009dc:	4603      	mov	r3, r0
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
 80009e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009e8:	f7ff ff5c 	bl	80008a4 <__NVIC_GetPriorityGrouping>
 80009ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	68b9      	ldr	r1, [r7, #8]
 80009f2:	6978      	ldr	r0, [r7, #20]
 80009f4:	f7ff ff8e 	bl	8000914 <NVIC_EncodePriority>
 80009f8:	4602      	mov	r2, r0
 80009fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009fe:	4611      	mov	r1, r2
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff5d 	bl	80008c0 <__NVIC_SetPriority>
}
 8000a06:	bf00      	nop
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f7ff ffb0 	bl	800097c <SysTick_Config>
 8000a1c:	4603      	mov	r3, r0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b087      	sub	sp, #28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a36:	e160      	b.n	8000cfa <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	fa01 f303 	lsl.w	r3, r1, r3
 8000a44:	4013      	ands	r3, r2
 8000a46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	f000 8152 	beq.w	8000cf4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f003 0303 	and.w	r3, r3, #3
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d005      	beq.n	8000a68 <HAL_GPIO_Init+0x40>
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f003 0303 	and.w	r3, r3, #3
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d130      	bne.n	8000aca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	2203      	movs	r2, #3
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	68da      	ldr	r2, [r3, #12]
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	091b      	lsrs	r3, r3, #4
 8000ab4:	f003 0201 	and.w	r2, r3, #1
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f003 0303 	and.w	r3, r3, #3
 8000ad2:	2b03      	cmp	r3, #3
 8000ad4:	d017      	beq.n	8000b06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	2203      	movs	r2, #3
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	4013      	ands	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	689a      	ldr	r2, [r3, #8]
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f003 0303 	and.w	r3, r3, #3
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	d123      	bne.n	8000b5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	08da      	lsrs	r2, r3, #3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	3208      	adds	r2, #8
 8000b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	220f      	movs	r2, #15
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	4013      	ands	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	691a      	ldr	r2, [r3, #16]
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	f003 0307 	and.w	r3, r3, #7
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	08da      	lsrs	r2, r3, #3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3208      	adds	r2, #8
 8000b54:	6939      	ldr	r1, [r7, #16]
 8000b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	2203      	movs	r2, #3
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f003 0203 	and.w	r2, r3, #3
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f000 80ac 	beq.w	8000cf4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9c:	4b5e      	ldr	r3, [pc, #376]	; (8000d18 <HAL_GPIO_Init+0x2f0>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	4a5d      	ldr	r2, [pc, #372]	; (8000d18 <HAL_GPIO_Init+0x2f0>)
 8000ba2:	f043 0301 	orr.w	r3, r3, #1
 8000ba6:	6193      	str	r3, [r2, #24]
 8000ba8:	4b5b      	ldr	r3, [pc, #364]	; (8000d18 <HAL_GPIO_Init+0x2f0>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	f003 0301 	and.w	r3, r3, #1
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bb4:	4a59      	ldr	r2, [pc, #356]	; (8000d1c <HAL_GPIO_Init+0x2f4>)
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	089b      	lsrs	r3, r3, #2
 8000bba:	3302      	adds	r3, #2
 8000bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	f003 0303 	and.w	r3, r3, #3
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	220f      	movs	r2, #15
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bde:	d025      	beq.n	8000c2c <HAL_GPIO_Init+0x204>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a4f      	ldr	r2, [pc, #316]	; (8000d20 <HAL_GPIO_Init+0x2f8>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d01f      	beq.n	8000c28 <HAL_GPIO_Init+0x200>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a4e      	ldr	r2, [pc, #312]	; (8000d24 <HAL_GPIO_Init+0x2fc>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d019      	beq.n	8000c24 <HAL_GPIO_Init+0x1fc>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a4d      	ldr	r2, [pc, #308]	; (8000d28 <HAL_GPIO_Init+0x300>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d013      	beq.n	8000c20 <HAL_GPIO_Init+0x1f8>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a4c      	ldr	r2, [pc, #304]	; (8000d2c <HAL_GPIO_Init+0x304>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d00d      	beq.n	8000c1c <HAL_GPIO_Init+0x1f4>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a4b      	ldr	r2, [pc, #300]	; (8000d30 <HAL_GPIO_Init+0x308>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d007      	beq.n	8000c18 <HAL_GPIO_Init+0x1f0>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a4a      	ldr	r2, [pc, #296]	; (8000d34 <HAL_GPIO_Init+0x30c>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d101      	bne.n	8000c14 <HAL_GPIO_Init+0x1ec>
 8000c10:	2306      	movs	r3, #6
 8000c12:	e00c      	b.n	8000c2e <HAL_GPIO_Init+0x206>
 8000c14:	2307      	movs	r3, #7
 8000c16:	e00a      	b.n	8000c2e <HAL_GPIO_Init+0x206>
 8000c18:	2305      	movs	r3, #5
 8000c1a:	e008      	b.n	8000c2e <HAL_GPIO_Init+0x206>
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	e006      	b.n	8000c2e <HAL_GPIO_Init+0x206>
 8000c20:	2303      	movs	r3, #3
 8000c22:	e004      	b.n	8000c2e <HAL_GPIO_Init+0x206>
 8000c24:	2302      	movs	r3, #2
 8000c26:	e002      	b.n	8000c2e <HAL_GPIO_Init+0x206>
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e000      	b.n	8000c2e <HAL_GPIO_Init+0x206>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	697a      	ldr	r2, [r7, #20]
 8000c30:	f002 0203 	and.w	r2, r2, #3
 8000c34:	0092      	lsls	r2, r2, #2
 8000c36:	4093      	lsls	r3, r2
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c3e:	4937      	ldr	r1, [pc, #220]	; (8000d1c <HAL_GPIO_Init+0x2f4>)
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	089b      	lsrs	r3, r3, #2
 8000c44:	3302      	adds	r3, #2
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c4c:	4b3a      	ldr	r3, [pc, #232]	; (8000d38 <HAL_GPIO_Init+0x310>)
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	43db      	mvns	r3, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d003      	beq.n	8000c70 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c70:	4a31      	ldr	r2, [pc, #196]	; (8000d38 <HAL_GPIO_Init+0x310>)
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c76:	4b30      	ldr	r3, [pc, #192]	; (8000d38 <HAL_GPIO_Init+0x310>)
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4013      	ands	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c9a:	4a27      	ldr	r2, [pc, #156]	; (8000d38 <HAL_GPIO_Init+0x310>)
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ca0:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <HAL_GPIO_Init+0x310>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d003      	beq.n	8000cc4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cc4:	4a1c      	ldr	r2, [pc, #112]	; (8000d38 <HAL_GPIO_Init+0x310>)
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cca:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <HAL_GPIO_Init+0x310>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d003      	beq.n	8000cee <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cee:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <HAL_GPIO_Init+0x310>)
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	fa22 f303 	lsr.w	r3, r2, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f47f ae97 	bne.w	8000a38 <HAL_GPIO_Init+0x10>
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	bf00      	nop
 8000d0e:	371c      	adds	r7, #28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40010000 	.word	0x40010000
 8000d20:	48000400 	.word	0x48000400
 8000d24:	48000800 	.word	0x48000800
 8000d28:	48000c00 	.word	0x48000c00
 8000d2c:	48001000 	.word	0x48001000
 8000d30:	48001400 	.word	0x48001400
 8000d34:	48001800 	.word	0x48001800
 8000d38:	40010400 	.word	0x40010400

08000d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	460b      	mov	r3, r1
 8000d46:	807b      	strh	r3, [r7, #2]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d4c:	787b      	ldrb	r3, [r7, #1]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d003      	beq.n	8000d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d52:	887a      	ldrh	r2, [r7, #2]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d58:	e002      	b.n	8000d60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d5a:	887a      	ldrh	r2, [r7, #2]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000d78:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000d7c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000d82:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d102      	bne.n	8000d92 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	f001 b83a 	b.w	8001e06 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000d96:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 816f 	beq.w	8001086 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000da8:	4bb5      	ldr	r3, [pc, #724]	; (8001080 <HAL_RCC_OscConfig+0x314>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 030c 	and.w	r3, r3, #12
 8000db0:	2b04      	cmp	r3, #4
 8000db2:	d00c      	beq.n	8000dce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000db4:	4bb2      	ldr	r3, [pc, #712]	; (8001080 <HAL_RCC_OscConfig+0x314>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 030c 	and.w	r3, r3, #12
 8000dbc:	2b08      	cmp	r3, #8
 8000dbe:	d15c      	bne.n	8000e7a <HAL_RCC_OscConfig+0x10e>
 8000dc0:	4baf      	ldr	r3, [pc, #700]	; (8001080 <HAL_RCC_OscConfig+0x314>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dcc:	d155      	bne.n	8000e7a <HAL_RCC_OscConfig+0x10e>
 8000dce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dd2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000dda:	fa93 f3a3 	rbit	r3, r3
 8000dde:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000de2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de6:	fab3 f383 	clz	r3, r3
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	095b      	lsrs	r3, r3, #5
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d102      	bne.n	8000e00 <HAL_RCC_OscConfig+0x94>
 8000dfa:	4ba1      	ldr	r3, [pc, #644]	; (8001080 <HAL_RCC_OscConfig+0x314>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	e015      	b.n	8000e2c <HAL_RCC_OscConfig+0xc0>
 8000e00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e04:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e08:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000e0c:	fa93 f3a3 	rbit	r3, r3
 8000e10:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000e14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e18:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e1c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000e20:	fa93 f3a3 	rbit	r3, r3
 8000e24:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e28:	4b95      	ldr	r3, [pc, #596]	; (8001080 <HAL_RCC_OscConfig+0x314>)
 8000e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e30:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000e34:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000e38:	fa92 f2a2 	rbit	r2, r2
 8000e3c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000e40:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e44:	fab2 f282 	clz	r2, r2
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	f042 0220 	orr.w	r2, r2, #32
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	f002 021f 	and.w	r2, r2, #31
 8000e54:	2101      	movs	r1, #1
 8000e56:	fa01 f202 	lsl.w	r2, r1, r2
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	f000 8111 	beq.w	8001084 <HAL_RCC_OscConfig+0x318>
 8000e62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f040 8108 	bne.w	8001084 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	f000 bfc6 	b.w	8001e06 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e7e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e8a:	d106      	bne.n	8000e9a <HAL_RCC_OscConfig+0x12e>
 8000e8c:	4b7c      	ldr	r3, [pc, #496]	; (8001080 <HAL_RCC_OscConfig+0x314>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a7b      	ldr	r2, [pc, #492]	; (8001080 <HAL_RCC_OscConfig+0x314>)
 8000e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	e036      	b.n	8000f08 <HAL_RCC_OscConfig+0x19c>
 8000e9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e9e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10c      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x158>
 8000eaa:	4b75      	ldr	r3, [pc, #468]	; (8001080 <HAL_RCC_OscConfig+0x314>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a74      	ldr	r2, [pc, #464]	; (8001080 <HAL_RCC_OscConfig+0x314>)
 8000eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eb4:	6013      	str	r3, [r2, #0]
 8000eb6:	4b72      	ldr	r3, [pc, #456]	; (8001080 <HAL_RCC_OscConfig+0x314>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a71      	ldr	r2, [pc, #452]	; (8001080 <HAL_RCC_OscConfig+0x314>)
 8000ebc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	e021      	b.n	8000f08 <HAL_RCC_OscConfig+0x19c>
 8000ec4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ec8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ed4:	d10c      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x184>
 8000ed6:	4b6a      	ldr	r3, [pc, #424]	; (8001080 <HAL_RCC_OscConfig+0x314>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a69      	ldr	r2, [pc, #420]	; (8001080 <HAL_RCC_OscConfig+0x314>)
 8000edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	4b67      	ldr	r3, [pc, #412]	; (8001080 <HAL_RCC_OscConfig+0x314>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a66      	ldr	r2, [pc, #408]	; (8001080 <HAL_RCC_OscConfig+0x314>)
 8000ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	e00b      	b.n	8000f08 <HAL_RCC_OscConfig+0x19c>
 8000ef0:	4b63      	ldr	r3, [pc, #396]	; (8001080 <HAL_RCC_OscConfig+0x314>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a62      	ldr	r2, [pc, #392]	; (8001080 <HAL_RCC_OscConfig+0x314>)
 8000ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	4b60      	ldr	r3, [pc, #384]	; (8001080 <HAL_RCC_OscConfig+0x314>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a5f      	ldr	r2, [pc, #380]	; (8001080 <HAL_RCC_OscConfig+0x314>)
 8000f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f06:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f0c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d059      	beq.n	8000fcc <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f18:	f7ff fc94 	bl	8000844 <HAL_GetTick>
 8000f1c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f20:	e00a      	b.n	8000f38 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f22:	f7ff fc8f 	bl	8000844 <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b64      	cmp	r3, #100	; 0x64
 8000f30:	d902      	bls.n	8000f38 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	f000 bf67 	b.w	8001e06 <HAL_RCC_OscConfig+0x109a>
 8000f38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f3c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f40:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000f44:	fa93 f3a3 	rbit	r3, r3
 8000f48:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000f4c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f50:	fab3 f383 	clz	r3, r3
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	095b      	lsrs	r3, r3, #5
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d102      	bne.n	8000f6a <HAL_RCC_OscConfig+0x1fe>
 8000f64:	4b46      	ldr	r3, [pc, #280]	; (8001080 <HAL_RCC_OscConfig+0x314>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	e015      	b.n	8000f96 <HAL_RCC_OscConfig+0x22a>
 8000f6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f6e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f72:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000f76:	fa93 f3a3 	rbit	r3, r3
 8000f7a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000f7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f82:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f86:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000f8a:	fa93 f3a3 	rbit	r3, r3
 8000f8e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f92:	4b3b      	ldr	r3, [pc, #236]	; (8001080 <HAL_RCC_OscConfig+0x314>)
 8000f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f9a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000f9e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000fa2:	fa92 f2a2 	rbit	r2, r2
 8000fa6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000faa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000fae:	fab2 f282 	clz	r2, r2
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	f042 0220 	orr.w	r2, r2, #32
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	f002 021f 	and.w	r2, r2, #31
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d0ab      	beq.n	8000f22 <HAL_RCC_OscConfig+0x1b6>
 8000fca:	e05c      	b.n	8001086 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fcc:	f7ff fc3a 	bl	8000844 <HAL_GetTick>
 8000fd0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd4:	e00a      	b.n	8000fec <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fd6:	f7ff fc35 	bl	8000844 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b64      	cmp	r3, #100	; 0x64
 8000fe4:	d902      	bls.n	8000fec <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	f000 bf0d 	b.w	8001e06 <HAL_RCC_OscConfig+0x109a>
 8000fec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ff0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000ff8:	fa93 f3a3 	rbit	r3, r3
 8000ffc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001000:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001004:	fab3 f383 	clz	r3, r3
 8001008:	b2db      	uxtb	r3, r3
 800100a:	095b      	lsrs	r3, r3, #5
 800100c:	b2db      	uxtb	r3, r3
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b01      	cmp	r3, #1
 8001016:	d102      	bne.n	800101e <HAL_RCC_OscConfig+0x2b2>
 8001018:	4b19      	ldr	r3, [pc, #100]	; (8001080 <HAL_RCC_OscConfig+0x314>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	e015      	b.n	800104a <HAL_RCC_OscConfig+0x2de>
 800101e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001022:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001026:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800102a:	fa93 f3a3 	rbit	r3, r3
 800102e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001032:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001036:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800103a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800103e:	fa93 f3a3 	rbit	r3, r3
 8001042:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_RCC_OscConfig+0x314>)
 8001048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800104e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001052:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001056:	fa92 f2a2 	rbit	r2, r2
 800105a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800105e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001062:	fab2 f282 	clz	r2, r2
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	f042 0220 	orr.w	r2, r2, #32
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	f002 021f 	and.w	r2, r2, #31
 8001072:	2101      	movs	r1, #1
 8001074:	fa01 f202 	lsl.w	r2, r1, r2
 8001078:	4013      	ands	r3, r2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1ab      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x26a>
 800107e:	e002      	b.n	8001086 <HAL_RCC_OscConfig+0x31a>
 8001080:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001086:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800108a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 817f 	beq.w	800139a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800109c:	4ba7      	ldr	r3, [pc, #668]	; (800133c <HAL_RCC_OscConfig+0x5d0>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 030c 	and.w	r3, r3, #12
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d00c      	beq.n	80010c2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010a8:	4ba4      	ldr	r3, [pc, #656]	; (800133c <HAL_RCC_OscConfig+0x5d0>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 030c 	and.w	r3, r3, #12
 80010b0:	2b08      	cmp	r3, #8
 80010b2:	d173      	bne.n	800119c <HAL_RCC_OscConfig+0x430>
 80010b4:	4ba1      	ldr	r3, [pc, #644]	; (800133c <HAL_RCC_OscConfig+0x5d0>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80010bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010c0:	d16c      	bne.n	800119c <HAL_RCC_OscConfig+0x430>
 80010c2:	2302      	movs	r3, #2
 80010c4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80010cc:	fa93 f3a3 	rbit	r3, r3
 80010d0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80010d4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d8:	fab3 f383 	clz	r3, r3
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	095b      	lsrs	r3, r3, #5
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d102      	bne.n	80010f2 <HAL_RCC_OscConfig+0x386>
 80010ec:	4b93      	ldr	r3, [pc, #588]	; (800133c <HAL_RCC_OscConfig+0x5d0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	e013      	b.n	800111a <HAL_RCC_OscConfig+0x3ae>
 80010f2:	2302      	movs	r3, #2
 80010f4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80010fc:	fa93 f3a3 	rbit	r3, r3
 8001100:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001104:	2302      	movs	r3, #2
 8001106:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800110a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800110e:	fa93 f3a3 	rbit	r3, r3
 8001112:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001116:	4b89      	ldr	r3, [pc, #548]	; (800133c <HAL_RCC_OscConfig+0x5d0>)
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	2202      	movs	r2, #2
 800111c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001120:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001124:	fa92 f2a2 	rbit	r2, r2
 8001128:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800112c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001130:	fab2 f282 	clz	r2, r2
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	f042 0220 	orr.w	r2, r2, #32
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	f002 021f 	and.w	r2, r2, #31
 8001140:	2101      	movs	r1, #1
 8001142:	fa01 f202 	lsl.w	r2, r1, r2
 8001146:	4013      	ands	r3, r2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d00a      	beq.n	8001162 <HAL_RCC_OscConfig+0x3f6>
 800114c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001150:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d002      	beq.n	8001162 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	f000 be52 	b.w	8001e06 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001162:	4b76      	ldr	r3, [pc, #472]	; (800133c <HAL_RCC_OscConfig+0x5d0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800116a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800116e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	21f8      	movs	r1, #248	; 0xf8
 8001178:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001180:	fa91 f1a1 	rbit	r1, r1
 8001184:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001188:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800118c:	fab1 f181 	clz	r1, r1
 8001190:	b2c9      	uxtb	r1, r1
 8001192:	408b      	lsls	r3, r1
 8001194:	4969      	ldr	r1, [pc, #420]	; (800133c <HAL_RCC_OscConfig+0x5d0>)
 8001196:	4313      	orrs	r3, r2
 8001198:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119a:	e0fe      	b.n	800139a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800119c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f000 8088 	beq.w	80012be <HAL_RCC_OscConfig+0x552>
 80011ae:	2301      	movs	r3, #1
 80011b0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80011b8:	fa93 f3a3 	rbit	r3, r3
 80011bc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80011c0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011c4:	fab3 f383 	clz	r3, r3
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	461a      	mov	r2, r3
 80011d6:	2301      	movs	r3, #1
 80011d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011da:	f7ff fb33 	bl	8000844 <HAL_GetTick>
 80011de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e2:	e00a      	b.n	80011fa <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e4:	f7ff fb2e 	bl	8000844 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d902      	bls.n	80011fa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	f000 be06 	b.w	8001e06 <HAL_RCC_OscConfig+0x109a>
 80011fa:	2302      	movs	r3, #2
 80011fc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001200:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001204:	fa93 f3a3 	rbit	r3, r3
 8001208:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800120c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001210:	fab3 f383 	clz	r3, r3
 8001214:	b2db      	uxtb	r3, r3
 8001216:	095b      	lsrs	r3, r3, #5
 8001218:	b2db      	uxtb	r3, r3
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b01      	cmp	r3, #1
 8001222:	d102      	bne.n	800122a <HAL_RCC_OscConfig+0x4be>
 8001224:	4b45      	ldr	r3, [pc, #276]	; (800133c <HAL_RCC_OscConfig+0x5d0>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	e013      	b.n	8001252 <HAL_RCC_OscConfig+0x4e6>
 800122a:	2302      	movs	r3, #2
 800122c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001230:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001234:	fa93 f3a3 	rbit	r3, r3
 8001238:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800123c:	2302      	movs	r3, #2
 800123e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001242:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001246:	fa93 f3a3 	rbit	r3, r3
 800124a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800124e:	4b3b      	ldr	r3, [pc, #236]	; (800133c <HAL_RCC_OscConfig+0x5d0>)
 8001250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001252:	2202      	movs	r2, #2
 8001254:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001258:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800125c:	fa92 f2a2 	rbit	r2, r2
 8001260:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001264:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001268:	fab2 f282 	clz	r2, r2
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	f042 0220 	orr.w	r2, r2, #32
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	f002 021f 	and.w	r2, r2, #31
 8001278:	2101      	movs	r1, #1
 800127a:	fa01 f202 	lsl.w	r2, r1, r2
 800127e:	4013      	ands	r3, r2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0af      	beq.n	80011e4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001284:	4b2d      	ldr	r3, [pc, #180]	; (800133c <HAL_RCC_OscConfig+0x5d0>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800128c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001290:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	21f8      	movs	r1, #248	; 0xf8
 800129a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80012a2:	fa91 f1a1 	rbit	r1, r1
 80012a6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80012aa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80012ae:	fab1 f181 	clz	r1, r1
 80012b2:	b2c9      	uxtb	r1, r1
 80012b4:	408b      	lsls	r3, r1
 80012b6:	4921      	ldr	r1, [pc, #132]	; (800133c <HAL_RCC_OscConfig+0x5d0>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	600b      	str	r3, [r1, #0]
 80012bc:	e06d      	b.n	800139a <HAL_RCC_OscConfig+0x62e>
 80012be:	2301      	movs	r3, #1
 80012c0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80012c8:	fa93 f3a3 	rbit	r3, r3
 80012cc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80012d0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d4:	fab3 f383 	clz	r3, r3
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	461a      	mov	r2, r3
 80012e6:	2300      	movs	r3, #0
 80012e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ea:	f7ff faab 	bl	8000844 <HAL_GetTick>
 80012ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f2:	e00a      	b.n	800130a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f4:	f7ff faa6 	bl	8000844 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d902      	bls.n	800130a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	f000 bd7e 	b.w	8001e06 <HAL_RCC_OscConfig+0x109a>
 800130a:	2302      	movs	r3, #2
 800130c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001310:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001314:	fa93 f3a3 	rbit	r3, r3
 8001318:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800131c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001320:	fab3 f383 	clz	r3, r3
 8001324:	b2db      	uxtb	r3, r3
 8001326:	095b      	lsrs	r3, r3, #5
 8001328:	b2db      	uxtb	r3, r3
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b01      	cmp	r3, #1
 8001332:	d105      	bne.n	8001340 <HAL_RCC_OscConfig+0x5d4>
 8001334:	4b01      	ldr	r3, [pc, #4]	; (800133c <HAL_RCC_OscConfig+0x5d0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	e016      	b.n	8001368 <HAL_RCC_OscConfig+0x5fc>
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000
 8001340:	2302      	movs	r3, #2
 8001342:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800134a:	fa93 f3a3 	rbit	r3, r3
 800134e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001352:	2302      	movs	r3, #2
 8001354:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001358:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800135c:	fa93 f3a3 	rbit	r3, r3
 8001360:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001364:	4bbf      	ldr	r3, [pc, #764]	; (8001664 <HAL_RCC_OscConfig+0x8f8>)
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	2202      	movs	r2, #2
 800136a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800136e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001372:	fa92 f2a2 	rbit	r2, r2
 8001376:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800137a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800137e:	fab2 f282 	clz	r2, r2
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	f042 0220 	orr.w	r2, r2, #32
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	f002 021f 	and.w	r2, r2, #31
 800138e:	2101      	movs	r1, #1
 8001390:	fa01 f202 	lsl.w	r2, r1, r2
 8001394:	4013      	ands	r3, r2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1ac      	bne.n	80012f4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800139a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800139e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f000 8113 	beq.w	80015d6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d07c      	beq.n	80014ba <HAL_RCC_OscConfig+0x74e>
 80013c0:	2301      	movs	r3, #1
 80013c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013ca:	fa93 f3a3 	rbit	r3, r3
 80013ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80013d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013d6:	fab3 f383 	clz	r3, r3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	461a      	mov	r2, r3
 80013de:	4ba2      	ldr	r3, [pc, #648]	; (8001668 <HAL_RCC_OscConfig+0x8fc>)
 80013e0:	4413      	add	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	461a      	mov	r2, r3
 80013e6:	2301      	movs	r3, #1
 80013e8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ea:	f7ff fa2b 	bl	8000844 <HAL_GetTick>
 80013ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f2:	e00a      	b.n	800140a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013f4:	f7ff fa26 	bl	8000844 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d902      	bls.n	800140a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	f000 bcfe 	b.w	8001e06 <HAL_RCC_OscConfig+0x109a>
 800140a:	2302      	movs	r3, #2
 800140c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001414:	fa93 f2a3 	rbit	r2, r3
 8001418:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800141c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001426:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800142a:	2202      	movs	r2, #2
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001432:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	fa93 f2a3 	rbit	r2, r3
 800143c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800144a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800144e:	2202      	movs	r2, #2
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001456:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	fa93 f2a3 	rbit	r2, r3
 8001460:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001464:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001468:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800146a:	4b7e      	ldr	r3, [pc, #504]	; (8001664 <HAL_RCC_OscConfig+0x8f8>)
 800146c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800146e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001472:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001476:	2102      	movs	r1, #2
 8001478:	6019      	str	r1, [r3, #0]
 800147a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800147e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	fa93 f1a3 	rbit	r1, r3
 8001488:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800148c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001490:	6019      	str	r1, [r3, #0]
  return result;
 8001492:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001496:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	fab3 f383 	clz	r3, r3
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	f003 031f 	and.w	r3, r3, #31
 80014ac:	2101      	movs	r1, #1
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	4013      	ands	r3, r2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d09d      	beq.n	80013f4 <HAL_RCC_OscConfig+0x688>
 80014b8:	e08d      	b.n	80015d6 <HAL_RCC_OscConfig+0x86a>
 80014ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014be:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014c2:	2201      	movs	r2, #1
 80014c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	fa93 f2a3 	rbit	r2, r3
 80014d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014d8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014dc:	601a      	str	r2, [r3, #0]
  return result;
 80014de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014e2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014e6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e8:	fab3 f383 	clz	r3, r3
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b5d      	ldr	r3, [pc, #372]	; (8001668 <HAL_RCC_OscConfig+0x8fc>)
 80014f2:	4413      	add	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	461a      	mov	r2, r3
 80014f8:	2300      	movs	r3, #0
 80014fa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fc:	f7ff f9a2 	bl	8000844 <HAL_GetTick>
 8001500:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001504:	e00a      	b.n	800151c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001506:	f7ff f99d 	bl	8000844 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d902      	bls.n	800151c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	f000 bc75 	b.w	8001e06 <HAL_RCC_OscConfig+0x109a>
 800151c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001520:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001524:	2202      	movs	r2, #2
 8001526:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001528:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800152c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	fa93 f2a3 	rbit	r2, r3
 8001536:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800153a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001544:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001548:	2202      	movs	r2, #2
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001550:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	fa93 f2a3 	rbit	r2, r3
 800155a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800155e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001568:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800156c:	2202      	movs	r2, #2
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001574:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	fa93 f2a3 	rbit	r2, r3
 800157e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001582:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001586:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001588:	4b36      	ldr	r3, [pc, #216]	; (8001664 <HAL_RCC_OscConfig+0x8f8>)
 800158a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800158c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001590:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001594:	2102      	movs	r1, #2
 8001596:	6019      	str	r1, [r3, #0]
 8001598:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800159c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	fa93 f1a3 	rbit	r1, r3
 80015a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015aa:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80015ae:	6019      	str	r1, [r3, #0]
  return result;
 80015b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	fab3 f383 	clz	r3, r3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	f003 031f 	and.w	r3, r3, #31
 80015ca:	2101      	movs	r1, #1
 80015cc:	fa01 f303 	lsl.w	r3, r1, r3
 80015d0:	4013      	ands	r3, r2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d197      	bne.n	8001506 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0304 	and.w	r3, r3, #4
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 81a5 	beq.w	8001936 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015f2:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <HAL_RCC_OscConfig+0x8f8>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d116      	bne.n	800162c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015fe:	4b19      	ldr	r3, [pc, #100]	; (8001664 <HAL_RCC_OscConfig+0x8f8>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	4a18      	ldr	r2, [pc, #96]	; (8001664 <HAL_RCC_OscConfig+0x8f8>)
 8001604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001608:	61d3      	str	r3, [r2, #28]
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <HAL_RCC_OscConfig+0x8f8>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001612:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001616:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001620:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001624:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001626:	2301      	movs	r3, #1
 8001628:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <HAL_RCC_OscConfig+0x900>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001634:	2b00      	cmp	r3, #0
 8001636:	d121      	bne.n	800167c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <HAL_RCC_OscConfig+0x900>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a0b      	ldr	r2, [pc, #44]	; (800166c <HAL_RCC_OscConfig+0x900>)
 800163e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001642:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001644:	f7ff f8fe 	bl	8000844 <HAL_GetTick>
 8001648:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164c:	e010      	b.n	8001670 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800164e:	f7ff f8f9 	bl	8000844 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b64      	cmp	r3, #100	; 0x64
 800165c:	d908      	bls.n	8001670 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e3d1      	b.n	8001e06 <HAL_RCC_OscConfig+0x109a>
 8001662:	bf00      	nop
 8001664:	40021000 	.word	0x40021000
 8001668:	10908120 	.word	0x10908120
 800166c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001670:	4b8d      	ldr	r3, [pc, #564]	; (80018a8 <HAL_RCC_OscConfig+0xb3c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0e8      	beq.n	800164e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800167c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001680:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d106      	bne.n	800169a <HAL_RCC_OscConfig+0x92e>
 800168c:	4b87      	ldr	r3, [pc, #540]	; (80018ac <HAL_RCC_OscConfig+0xb40>)
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	4a86      	ldr	r2, [pc, #536]	; (80018ac <HAL_RCC_OscConfig+0xb40>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6213      	str	r3, [r2, #32]
 8001698:	e035      	b.n	8001706 <HAL_RCC_OscConfig+0x99a>
 800169a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800169e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10c      	bne.n	80016c4 <HAL_RCC_OscConfig+0x958>
 80016aa:	4b80      	ldr	r3, [pc, #512]	; (80018ac <HAL_RCC_OscConfig+0xb40>)
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	4a7f      	ldr	r2, [pc, #508]	; (80018ac <HAL_RCC_OscConfig+0xb40>)
 80016b0:	f023 0301 	bic.w	r3, r3, #1
 80016b4:	6213      	str	r3, [r2, #32]
 80016b6:	4b7d      	ldr	r3, [pc, #500]	; (80018ac <HAL_RCC_OscConfig+0xb40>)
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	4a7c      	ldr	r2, [pc, #496]	; (80018ac <HAL_RCC_OscConfig+0xb40>)
 80016bc:	f023 0304 	bic.w	r3, r3, #4
 80016c0:	6213      	str	r3, [r2, #32]
 80016c2:	e020      	b.n	8001706 <HAL_RCC_OscConfig+0x99a>
 80016c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b05      	cmp	r3, #5
 80016d2:	d10c      	bne.n	80016ee <HAL_RCC_OscConfig+0x982>
 80016d4:	4b75      	ldr	r3, [pc, #468]	; (80018ac <HAL_RCC_OscConfig+0xb40>)
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	4a74      	ldr	r2, [pc, #464]	; (80018ac <HAL_RCC_OscConfig+0xb40>)
 80016da:	f043 0304 	orr.w	r3, r3, #4
 80016de:	6213      	str	r3, [r2, #32]
 80016e0:	4b72      	ldr	r3, [pc, #456]	; (80018ac <HAL_RCC_OscConfig+0xb40>)
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	4a71      	ldr	r2, [pc, #452]	; (80018ac <HAL_RCC_OscConfig+0xb40>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6213      	str	r3, [r2, #32]
 80016ec:	e00b      	b.n	8001706 <HAL_RCC_OscConfig+0x99a>
 80016ee:	4b6f      	ldr	r3, [pc, #444]	; (80018ac <HAL_RCC_OscConfig+0xb40>)
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	4a6e      	ldr	r2, [pc, #440]	; (80018ac <HAL_RCC_OscConfig+0xb40>)
 80016f4:	f023 0301 	bic.w	r3, r3, #1
 80016f8:	6213      	str	r3, [r2, #32]
 80016fa:	4b6c      	ldr	r3, [pc, #432]	; (80018ac <HAL_RCC_OscConfig+0xb40>)
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	4a6b      	ldr	r2, [pc, #428]	; (80018ac <HAL_RCC_OscConfig+0xb40>)
 8001700:	f023 0304 	bic.w	r3, r3, #4
 8001704:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001706:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800170a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 8081 	beq.w	800181a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001718:	f7ff f894 	bl	8000844 <HAL_GetTick>
 800171c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001720:	e00b      	b.n	800173a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001722:	f7ff f88f 	bl	8000844 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001732:	4293      	cmp	r3, r2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e365      	b.n	8001e06 <HAL_RCC_OscConfig+0x109a>
 800173a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800173e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001742:	2202      	movs	r2, #2
 8001744:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001746:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800174a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	fa93 f2a3 	rbit	r2, r3
 8001754:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001758:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001762:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001766:	2202      	movs	r2, #2
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800176e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	fa93 f2a3 	rbit	r2, r3
 8001778:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800177c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001780:	601a      	str	r2, [r3, #0]
  return result;
 8001782:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001786:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800178a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800178c:	fab3 f383 	clz	r3, r3
 8001790:	b2db      	uxtb	r3, r3
 8001792:	095b      	lsrs	r3, r3, #5
 8001794:	b2db      	uxtb	r3, r3
 8001796:	f043 0302 	orr.w	r3, r3, #2
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d102      	bne.n	80017a6 <HAL_RCC_OscConfig+0xa3a>
 80017a0:	4b42      	ldr	r3, [pc, #264]	; (80018ac <HAL_RCC_OscConfig+0xb40>)
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	e013      	b.n	80017ce <HAL_RCC_OscConfig+0xa62>
 80017a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017aa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017ae:	2202      	movs	r2, #2
 80017b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017b6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	fa93 f2a3 	rbit	r2, r3
 80017c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	4b38      	ldr	r3, [pc, #224]	; (80018ac <HAL_RCC_OscConfig+0xb40>)
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80017d2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017d6:	2102      	movs	r1, #2
 80017d8:	6011      	str	r1, [r2, #0]
 80017da:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80017de:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	fa92 f1a2 	rbit	r1, r2
 80017e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80017ec:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80017f0:	6011      	str	r1, [r2, #0]
  return result;
 80017f2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80017f6:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	fab2 f282 	clz	r2, r2
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	f002 021f 	and.w	r2, r2, #31
 800180c:	2101      	movs	r1, #1
 800180e:	fa01 f202 	lsl.w	r2, r1, r2
 8001812:	4013      	ands	r3, r2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d084      	beq.n	8001722 <HAL_RCC_OscConfig+0x9b6>
 8001818:	e083      	b.n	8001922 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181a:	f7ff f813 	bl	8000844 <HAL_GetTick>
 800181e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001822:	e00b      	b.n	800183c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001824:	f7ff f80e 	bl	8000844 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	f241 3288 	movw	r2, #5000	; 0x1388
 8001834:	4293      	cmp	r3, r2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e2e4      	b.n	8001e06 <HAL_RCC_OscConfig+0x109a>
 800183c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001840:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001844:	2202      	movs	r2, #2
 8001846:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001848:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800184c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	fa93 f2a3 	rbit	r2, r3
 8001856:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800185a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001864:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001868:	2202      	movs	r2, #2
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001870:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	fa93 f2a3 	rbit	r2, r3
 800187a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800187e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001882:	601a      	str	r2, [r3, #0]
  return result;
 8001884:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001888:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800188c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800188e:	fab3 f383 	clz	r3, r3
 8001892:	b2db      	uxtb	r3, r3
 8001894:	095b      	lsrs	r3, r3, #5
 8001896:	b2db      	uxtb	r3, r3
 8001898:	f043 0302 	orr.w	r3, r3, #2
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d106      	bne.n	80018b0 <HAL_RCC_OscConfig+0xb44>
 80018a2:	4b02      	ldr	r3, [pc, #8]	; (80018ac <HAL_RCC_OscConfig+0xb40>)
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	e017      	b.n	80018d8 <HAL_RCC_OscConfig+0xb6c>
 80018a8:	40007000 	.word	0x40007000
 80018ac:	40021000 	.word	0x40021000
 80018b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80018b8:	2202      	movs	r2, #2
 80018ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	fa93 f2a3 	rbit	r2, r3
 80018ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ce:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	4bb3      	ldr	r3, [pc, #716]	; (8001ba4 <HAL_RCC_OscConfig+0xe38>)
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80018dc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018e0:	2102      	movs	r1, #2
 80018e2:	6011      	str	r1, [r2, #0]
 80018e4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80018e8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018ec:	6812      	ldr	r2, [r2, #0]
 80018ee:	fa92 f1a2 	rbit	r1, r2
 80018f2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80018f6:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80018fa:	6011      	str	r1, [r2, #0]
  return result;
 80018fc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001900:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	fab2 f282 	clz	r2, r2
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	f002 021f 	and.w	r2, r2, #31
 8001916:	2101      	movs	r1, #1
 8001918:	fa01 f202 	lsl.w	r2, r1, r2
 800191c:	4013      	ands	r3, r2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d180      	bne.n	8001824 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001922:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001926:	2b01      	cmp	r3, #1
 8001928:	d105      	bne.n	8001936 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800192a:	4b9e      	ldr	r3, [pc, #632]	; (8001ba4 <HAL_RCC_OscConfig+0xe38>)
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	4a9d      	ldr	r2, [pc, #628]	; (8001ba4 <HAL_RCC_OscConfig+0xe38>)
 8001930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001934:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001936:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800193a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 825e 	beq.w	8001e04 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001948:	4b96      	ldr	r3, [pc, #600]	; (8001ba4 <HAL_RCC_OscConfig+0xe38>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 030c 	and.w	r3, r3, #12
 8001950:	2b08      	cmp	r3, #8
 8001952:	f000 821f 	beq.w	8001d94 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001956:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800195a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	2b02      	cmp	r3, #2
 8001964:	f040 8170 	bne.w	8001c48 <HAL_RCC_OscConfig+0xedc>
 8001968:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800196c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001970:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001974:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001976:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800197a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	fa93 f2a3 	rbit	r2, r3
 8001984:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001988:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800198c:	601a      	str	r2, [r3, #0]
  return result;
 800198e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001992:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001996:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001998:	fab3 f383 	clz	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	461a      	mov	r2, r3
 80019aa:	2300      	movs	r3, #0
 80019ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ae:	f7fe ff49 	bl	8000844 <HAL_GetTick>
 80019b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b6:	e009      	b.n	80019cc <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b8:	f7fe ff44 	bl	8000844 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e21c      	b.n	8001e06 <HAL_RCC_OscConfig+0x109a>
 80019cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019de:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	fa93 f2a3 	rbit	r2, r3
 80019e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019f0:	601a      	str	r2, [r3, #0]
  return result;
 80019f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019fa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019fc:	fab3 f383 	clz	r3, r3
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	095b      	lsrs	r3, r3, #5
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d102      	bne.n	8001a16 <HAL_RCC_OscConfig+0xcaa>
 8001a10:	4b64      	ldr	r3, [pc, #400]	; (8001ba4 <HAL_RCC_OscConfig+0xe38>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	e027      	b.n	8001a66 <HAL_RCC_OscConfig+0xcfa>
 8001a16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a1a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a28:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	fa93 f2a3 	rbit	r2, r3
 8001a32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a36:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a40:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a4e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	fa93 f2a3 	rbit	r2, r3
 8001a58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a5c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	4b50      	ldr	r3, [pc, #320]	; (8001ba4 <HAL_RCC_OscConfig+0xe38>)
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a6a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a6e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a72:	6011      	str	r1, [r2, #0]
 8001a74:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a78:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a7c:	6812      	ldr	r2, [r2, #0]
 8001a7e:	fa92 f1a2 	rbit	r1, r2
 8001a82:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a86:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001a8a:	6011      	str	r1, [r2, #0]
  return result;
 8001a8c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a90:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	fab2 f282 	clz	r2, r2
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	f042 0220 	orr.w	r2, r2, #32
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	f002 021f 	and.w	r2, r2, #31
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8001aac:	4013      	ands	r3, r2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d182      	bne.n	80019b8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab2:	4b3c      	ldr	r3, [pc, #240]	; (8001ba4 <HAL_RCC_OscConfig+0xe38>)
 8001ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab6:	f023 020f 	bic.w	r2, r3, #15
 8001aba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001abe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	4937      	ldr	r1, [pc, #220]	; (8001ba4 <HAL_RCC_OscConfig+0xe38>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001acc:	4b35      	ldr	r3, [pc, #212]	; (8001ba4 <HAL_RCC_OscConfig+0xe38>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001ad4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6a19      	ldr	r1, [r3, #32]
 8001ae0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	430b      	orrs	r3, r1
 8001aee:	492d      	ldr	r1, [pc, #180]	; (8001ba4 <HAL_RCC_OscConfig+0xe38>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	604b      	str	r3, [r1, #4]
 8001af4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001afc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b06:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	fa93 f2a3 	rbit	r2, r3
 8001b10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b14:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b18:	601a      	str	r2, [r3, #0]
  return result;
 8001b1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b1e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b22:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b24:	fab3 f383 	clz	r3, r3
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b2e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	461a      	mov	r2, r3
 8001b36:	2301      	movs	r3, #1
 8001b38:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3a:	f7fe fe83 	bl	8000844 <HAL_GetTick>
 8001b3e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b42:	e009      	b.n	8001b58 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b44:	f7fe fe7e 	bl	8000844 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e156      	b.n	8001e06 <HAL_RCC_OscConfig+0x109a>
 8001b58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b5c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b6a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	fa93 f2a3 	rbit	r2, r3
 8001b74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b78:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b7c:	601a      	str	r2, [r3, #0]
  return result;
 8001b7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b82:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b86:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b88:	fab3 f383 	clz	r3, r3
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	095b      	lsrs	r3, r3, #5
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d105      	bne.n	8001ba8 <HAL_RCC_OscConfig+0xe3c>
 8001b9c:	4b01      	ldr	r3, [pc, #4]	; (8001ba4 <HAL_RCC_OscConfig+0xe38>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	e02a      	b.n	8001bf8 <HAL_RCC_OscConfig+0xe8c>
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bac:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001bb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bba:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	fa93 f2a3 	rbit	r2, r3
 8001bc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001bd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	fa93 f2a3 	rbit	r2, r3
 8001bea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bee:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	4b86      	ldr	r3, [pc, #536]	; (8001e10 <HAL_RCC_OscConfig+0x10a4>)
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bfc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c00:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c04:	6011      	str	r1, [r2, #0]
 8001c06:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c0a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	fa92 f1a2 	rbit	r1, r2
 8001c14:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c18:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001c1c:	6011      	str	r1, [r2, #0]
  return result;
 8001c1e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c22:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	fab2 f282 	clz	r2, r2
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	f042 0220 	orr.w	r2, r2, #32
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	f002 021f 	and.w	r2, r2, #31
 8001c38:	2101      	movs	r1, #1
 8001c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f43f af7f 	beq.w	8001b44 <HAL_RCC_OscConfig+0xdd8>
 8001c46:	e0dd      	b.n	8001e04 <HAL_RCC_OscConfig+0x1098>
 8001c48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c4c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c5a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	fa93 f2a3 	rbit	r2, r3
 8001c64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c68:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c6c:	601a      	str	r2, [r3, #0]
  return result;
 8001c6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c72:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c76:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c78:	fab3 f383 	clz	r3, r3
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c82:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	461a      	mov	r2, r3
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8e:	f7fe fdd9 	bl	8000844 <HAL_GetTick>
 8001c92:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c96:	e009      	b.n	8001cac <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c98:	f7fe fdd4 	bl	8000844 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e0ac      	b.n	8001e06 <HAL_RCC_OscConfig+0x109a>
 8001cac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001cb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cbe:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	fa93 f2a3 	rbit	r2, r3
 8001cc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ccc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cd0:	601a      	str	r2, [r3, #0]
  return result;
 8001cd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cda:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cdc:	fab3 f383 	clz	r3, r3
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d102      	bne.n	8001cf6 <HAL_RCC_OscConfig+0xf8a>
 8001cf0:	4b47      	ldr	r3, [pc, #284]	; (8001e10 <HAL_RCC_OscConfig+0x10a4>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	e027      	b.n	8001d46 <HAL_RCC_OscConfig+0xfda>
 8001cf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cfa:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001cfe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d08:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	fa93 f2a3 	rbit	r2, r3
 8001d12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d16:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d20:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d2e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	fa93 f2a3 	rbit	r2, r3
 8001d38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d3c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	4b33      	ldr	r3, [pc, #204]	; (8001e10 <HAL_RCC_OscConfig+0x10a4>)
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d4a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d4e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d52:	6011      	str	r1, [r2, #0]
 8001d54:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d58:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d5c:	6812      	ldr	r2, [r2, #0]
 8001d5e:	fa92 f1a2 	rbit	r1, r2
 8001d62:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d66:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001d6a:	6011      	str	r1, [r2, #0]
  return result;
 8001d6c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d70:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	fab2 f282 	clz	r2, r2
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	f042 0220 	orr.w	r2, r2, #32
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	f002 021f 	and.w	r2, r2, #31
 8001d86:	2101      	movs	r1, #1
 8001d88:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d182      	bne.n	8001c98 <HAL_RCC_OscConfig+0xf2c>
 8001d92:	e037      	b.n	8001e04 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d98:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d101      	bne.n	8001da8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e02e      	b.n	8001e06 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001da8:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <HAL_RCC_OscConfig+0x10a4>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001db0:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <HAL_RCC_OscConfig+0x10a4>)
 8001db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001db8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001dbc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001dc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d117      	bne.n	8001e00 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001dd0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001dd4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ddc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d10b      	bne.n	8001e00 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001de8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dec:	f003 020f 	and.w	r2, r3, #15
 8001df0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d001      	beq.n	8001e04 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40021000 	.word	0x40021000

08001e14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b09e      	sub	sp, #120	; 0x78
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e162      	b.n	80020f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e2c:	4b90      	ldr	r3, [pc, #576]	; (8002070 <HAL_RCC_ClockConfig+0x25c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d910      	bls.n	8001e5c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3a:	4b8d      	ldr	r3, [pc, #564]	; (8002070 <HAL_RCC_ClockConfig+0x25c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 0207 	bic.w	r2, r3, #7
 8001e42:	498b      	ldr	r1, [pc, #556]	; (8002070 <HAL_RCC_ClockConfig+0x25c>)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4a:	4b89      	ldr	r3, [pc, #548]	; (8002070 <HAL_RCC_ClockConfig+0x25c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e14a      	b.n	80020f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d008      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e68:	4b82      	ldr	r3, [pc, #520]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	497f      	ldr	r1, [pc, #508]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 80dc 	beq.w	8002040 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d13c      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xf6>
 8001e90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e94:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e98:	fa93 f3a3 	rbit	r3, r3
 8001e9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea0:	fab3 f383 	clz	r3, r3
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	095b      	lsrs	r3, r3, #5
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d102      	bne.n	8001eba <HAL_RCC_ClockConfig+0xa6>
 8001eb4:	4b6f      	ldr	r3, [pc, #444]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	e00f      	b.n	8001eda <HAL_RCC_ClockConfig+0xc6>
 8001eba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ebe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ec2:	fa93 f3a3 	rbit	r3, r3
 8001ec6:	667b      	str	r3, [r7, #100]	; 0x64
 8001ec8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ecc:	663b      	str	r3, [r7, #96]	; 0x60
 8001ece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ed0:	fa93 f3a3 	rbit	r3, r3
 8001ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ed6:	4b67      	ldr	r3, [pc, #412]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ede:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ee0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ee2:	fa92 f2a2 	rbit	r2, r2
 8001ee6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001ee8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001eea:	fab2 f282 	clz	r2, r2
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	f042 0220 	orr.w	r2, r2, #32
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	f002 021f 	and.w	r2, r2, #31
 8001efa:	2101      	movs	r1, #1
 8001efc:	fa01 f202 	lsl.w	r2, r1, r2
 8001f00:	4013      	ands	r3, r2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d17b      	bne.n	8001ffe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e0f3      	b.n	80020f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d13c      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x178>
 8001f12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f1a:	fa93 f3a3 	rbit	r3, r3
 8001f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f22:	fab3 f383 	clz	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	095b      	lsrs	r3, r3, #5
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d102      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x128>
 8001f36:	4b4f      	ldr	r3, [pc, #316]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	e00f      	b.n	8001f5c <HAL_RCC_ClockConfig+0x148>
 8001f3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	647b      	str	r3, [r7, #68]	; 0x44
 8001f4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f4e:	643b      	str	r3, [r7, #64]	; 0x40
 8001f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f52:	fa93 f3a3 	rbit	r3, r3
 8001f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f58:	4b46      	ldr	r3, [pc, #280]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f60:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f64:	fa92 f2a2 	rbit	r2, r2
 8001f68:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f6c:	fab2 f282 	clz	r2, r2
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	f042 0220 	orr.w	r2, r2, #32
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	f002 021f 	and.w	r2, r2, #31
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f82:	4013      	ands	r3, r2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d13a      	bne.n	8001ffe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0b2      	b.n	80020f2 <HAL_RCC_ClockConfig+0x2de>
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f92:	fa93 f3a3 	rbit	r3, r3
 8001f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	095b      	lsrs	r3, r3, #5
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d102      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0x1a0>
 8001fae:	4b31      	ldr	r3, [pc, #196]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	e00d      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1bc>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fba:	fa93 f3a3 	rbit	r3, r3
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	623b      	str	r3, [r7, #32]
 8001fc4:	6a3b      	ldr	r3, [r7, #32]
 8001fc6:	fa93 f3a3 	rbit	r3, r3
 8001fca:	61fb      	str	r3, [r7, #28]
 8001fcc:	4b29      	ldr	r3, [pc, #164]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	61ba      	str	r2, [r7, #24]
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	fa92 f2a2 	rbit	r2, r2
 8001fda:	617a      	str	r2, [r7, #20]
  return result;
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	fab2 f282 	clz	r2, r2
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	f042 0220 	orr.w	r2, r2, #32
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	f002 021f 	and.w	r2, r2, #31
 8001fee:	2101      	movs	r1, #1
 8001ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e079      	b.n	80020f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ffe:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f023 0203 	bic.w	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	491a      	ldr	r1, [pc, #104]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002010:	f7fe fc18 	bl	8000844 <HAL_GetTick>
 8002014:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002016:	e00a      	b.n	800202e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002018:	f7fe fc14 	bl	8000844 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	f241 3288 	movw	r2, #5000	; 0x1388
 8002026:	4293      	cmp	r3, r2
 8002028:	d901      	bls.n	800202e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e061      	b.n	80020f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <HAL_RCC_ClockConfig+0x260>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 020c 	and.w	r2, r3, #12
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	429a      	cmp	r2, r3
 800203e:	d1eb      	bne.n	8002018 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <HAL_RCC_ClockConfig+0x25c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d214      	bcs.n	8002078 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <HAL_RCC_ClockConfig+0x25c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 0207 	bic.w	r2, r3, #7
 8002056:	4906      	ldr	r1, [pc, #24]	; (8002070 <HAL_RCC_ClockConfig+0x25c>)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	4313      	orrs	r3, r2
 800205c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800205e:	4b04      	ldr	r3, [pc, #16]	; (8002070 <HAL_RCC_ClockConfig+0x25c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d005      	beq.n	8002078 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e040      	b.n	80020f2 <HAL_RCC_ClockConfig+0x2de>
 8002070:	40022000 	.word	0x40022000
 8002074:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002084:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <HAL_RCC_ClockConfig+0x2e8>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	491a      	ldr	r1, [pc, #104]	; (80020fc <HAL_RCC_ClockConfig+0x2e8>)
 8002092:	4313      	orrs	r3, r2
 8002094:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d009      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020a2:	4b16      	ldr	r3, [pc, #88]	; (80020fc <HAL_RCC_ClockConfig+0x2e8>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4912      	ldr	r1, [pc, #72]	; (80020fc <HAL_RCC_ClockConfig+0x2e8>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020b6:	f000 f829 	bl	800210c <HAL_RCC_GetSysClockFreq>
 80020ba:	4601      	mov	r1, r0
 80020bc:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <HAL_RCC_ClockConfig+0x2e8>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020c4:	22f0      	movs	r2, #240	; 0xf0
 80020c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	fa92 f2a2 	rbit	r2, r2
 80020ce:	60fa      	str	r2, [r7, #12]
  return result;
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	fab2 f282 	clz	r2, r2
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	40d3      	lsrs	r3, r2
 80020da:	4a09      	ldr	r2, [pc, #36]	; (8002100 <HAL_RCC_ClockConfig+0x2ec>)
 80020dc:	5cd3      	ldrb	r3, [r2, r3]
 80020de:	fa21 f303 	lsr.w	r3, r1, r3
 80020e2:	4a08      	ldr	r2, [pc, #32]	; (8002104 <HAL_RCC_ClockConfig+0x2f0>)
 80020e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <HAL_RCC_ClockConfig+0x2f4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe fb66 	bl	80007bc <HAL_InitTick>
  
  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3778      	adds	r7, #120	; 0x78
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40021000 	.word	0x40021000
 8002100:	08003eec 	.word	0x08003eec
 8002104:	20000000 	.word	0x20000000
 8002108:	20000004 	.word	0x20000004

0800210c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800210c:	b480      	push	{r7}
 800210e:	b08b      	sub	sp, #44	; 0x2c
 8002110:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	2300      	movs	r3, #0
 8002118:	61bb      	str	r3, [r7, #24]
 800211a:	2300      	movs	r3, #0
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002122:	2300      	movs	r3, #0
 8002124:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002126:	4b2a      	ldr	r3, [pc, #168]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f003 030c 	and.w	r3, r3, #12
 8002132:	2b04      	cmp	r3, #4
 8002134:	d002      	beq.n	800213c <HAL_RCC_GetSysClockFreq+0x30>
 8002136:	2b08      	cmp	r3, #8
 8002138:	d003      	beq.n	8002142 <HAL_RCC_GetSysClockFreq+0x36>
 800213a:	e03f      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800213c:	4b25      	ldr	r3, [pc, #148]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800213e:	623b      	str	r3, [r7, #32]
      break;
 8002140:	e03f      	b.n	80021c2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002148:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800214c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	fa92 f2a2 	rbit	r2, r2
 8002154:	607a      	str	r2, [r7, #4]
  return result;
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	fab2 f282 	clz	r2, r2
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	40d3      	lsrs	r3, r2
 8002160:	4a1d      	ldr	r2, [pc, #116]	; (80021d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002162:	5cd3      	ldrb	r3, [r2, r3]
 8002164:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002166:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	220f      	movs	r2, #15
 8002170:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	fa92 f2a2 	rbit	r2, r2
 8002178:	60fa      	str	r2, [r7, #12]
  return result;
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	fab2 f282 	clz	r2, r2
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	40d3      	lsrs	r3, r2
 8002184:	4a15      	ldr	r2, [pc, #84]	; (80021dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002186:	5cd3      	ldrb	r3, [r2, r3]
 8002188:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002194:	4a0f      	ldr	r2, [pc, #60]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	fbb2 f2f3 	udiv	r2, r2, r3
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	fb02 f303 	mul.w	r3, r2, r3
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
 80021a4:	e007      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021a6:	4a0b      	ldr	r2, [pc, #44]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	fb02 f303 	mul.w	r3, r2, r3
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	623b      	str	r3, [r7, #32]
      break;
 80021ba:	e002      	b.n	80021c2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021be:	623b      	str	r3, [r7, #32]
      break;
 80021c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021c2:	6a3b      	ldr	r3, [r7, #32]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	372c      	adds	r7, #44	; 0x2c
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	40021000 	.word	0x40021000
 80021d4:	007a1200 	.word	0x007a1200
 80021d8:	08003f04 	.word	0x08003f04
 80021dc:	08003f14 	.word	0x08003f14

080021e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021e4:	4b03      	ldr	r3, [pc, #12]	; (80021f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021e6:	681b      	ldr	r3, [r3, #0]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	20000000 	.word	0x20000000

080021f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80021fe:	f7ff ffef 	bl	80021e0 <HAL_RCC_GetHCLKFreq>
 8002202:	4601      	mov	r1, r0
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800220c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002210:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	fa92 f2a2 	rbit	r2, r2
 8002218:	603a      	str	r2, [r7, #0]
  return result;
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	fab2 f282 	clz	r2, r2
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	40d3      	lsrs	r3, r2
 8002224:	4a04      	ldr	r2, [pc, #16]	; (8002238 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002226:	5cd3      	ldrb	r3, [r2, r3]
 8002228:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40021000 	.word	0x40021000
 8002238:	08003efc 	.word	0x08003efc

0800223c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002242:	f7ff ffcd 	bl	80021e0 <HAL_RCC_GetHCLKFreq>
 8002246:	4601      	mov	r1, r0
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002250:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002254:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	fa92 f2a2 	rbit	r2, r2
 800225c:	603a      	str	r2, [r7, #0]
  return result;
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	fab2 f282 	clz	r2, r2
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	40d3      	lsrs	r3, r2
 8002268:	4a04      	ldr	r2, [pc, #16]	; (800227c <HAL_RCC_GetPCLK2Freq+0x40>)
 800226a:	5cd3      	ldrb	r3, [r2, r3]
 800226c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40021000 	.word	0x40021000
 800227c:	08003efc 	.word	0x08003efc

08002280 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b092      	sub	sp, #72	; 0x48
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002290:	2300      	movs	r3, #0
 8002292:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 80d4 	beq.w	800244c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a4:	4b4e      	ldr	r3, [pc, #312]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10e      	bne.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b0:	4b4b      	ldr	r3, [pc, #300]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	4a4a      	ldr	r2, [pc, #296]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ba:	61d3      	str	r3, [r2, #28]
 80022bc:	4b48      	ldr	r3, [pc, #288]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c8:	2301      	movs	r3, #1
 80022ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ce:	4b45      	ldr	r3, [pc, #276]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d118      	bne.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022da:	4b42      	ldr	r3, [pc, #264]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a41      	ldr	r2, [pc, #260]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022e6:	f7fe faad 	bl	8000844 <HAL_GetTick>
 80022ea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ec:	e008      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ee:	f7fe faa9 	bl	8000844 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b64      	cmp	r3, #100	; 0x64
 80022fa:	d901      	bls.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e1d6      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002300:	4b38      	ldr	r3, [pc, #224]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800230c:	4b34      	ldr	r3, [pc, #208]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002314:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 8084 	beq.w	8002426 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002326:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002328:	429a      	cmp	r2, r3
 800232a:	d07c      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800232c:	4b2c      	ldr	r3, [pc, #176]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002334:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002336:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800233a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233e:	fa93 f3a3 	rbit	r3, r3
 8002342:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002346:	fab3 f383 	clz	r3, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	461a      	mov	r2, r3
 800234e:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002350:	4413      	add	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	461a      	mov	r2, r3
 8002356:	2301      	movs	r3, #1
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800235e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002362:	fa93 f3a3 	rbit	r3, r3
 8002366:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	461a      	mov	r2, r3
 8002372:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002374:	4413      	add	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	461a      	mov	r2, r3
 800237a:	2300      	movs	r3, #0
 800237c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800237e:	4a18      	ldr	r2, [pc, #96]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002382:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d04b      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238e:	f7fe fa59 	bl	8000844 <HAL_GetTick>
 8002392:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002394:	e00a      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002396:	f7fe fa55 	bl	8000844 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d901      	bls.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e180      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80023ac:	2302      	movs	r3, #2
 80023ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b2:	fa93 f3a3 	rbit	r3, r3
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
 80023b8:	2302      	movs	r3, #2
 80023ba:	623b      	str	r3, [r7, #32]
 80023bc:	6a3b      	ldr	r3, [r7, #32]
 80023be:	fa93 f3a3 	rbit	r3, r3
 80023c2:	61fb      	str	r3, [r7, #28]
  return result;
 80023c4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c6:	fab3 f383 	clz	r3, r3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	095b      	lsrs	r3, r3, #5
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	f043 0302 	orr.w	r3, r3, #2
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d108      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80023da:	4b01      	ldr	r3, [pc, #4]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	e00d      	b.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40007000 	.word	0x40007000
 80023e8:	10908100 	.word	0x10908100
 80023ec:	2302      	movs	r3, #2
 80023ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	fa93 f3a3 	rbit	r3, r3
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	4b9a      	ldr	r3, [pc, #616]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	2202      	movs	r2, #2
 80023fe:	613a      	str	r2, [r7, #16]
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	fa92 f2a2 	rbit	r2, r2
 8002406:	60fa      	str	r2, [r7, #12]
  return result;
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	fab2 f282 	clz	r2, r2
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	f002 021f 	and.w	r2, r2, #31
 800241a:	2101      	movs	r1, #1
 800241c:	fa01 f202 	lsl.w	r2, r1, r2
 8002420:	4013      	ands	r3, r2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0b7      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002426:	4b8f      	ldr	r3, [pc, #572]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	498c      	ldr	r1, [pc, #560]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002434:	4313      	orrs	r3, r2
 8002436:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002438:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800243c:	2b01      	cmp	r3, #1
 800243e:	d105      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002440:	4b88      	ldr	r3, [pc, #544]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	4a87      	ldr	r2, [pc, #540]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800244a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002458:	4b82      	ldr	r3, [pc, #520]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	f023 0203 	bic.w	r2, r3, #3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	497f      	ldr	r1, [pc, #508]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002466:	4313      	orrs	r3, r2
 8002468:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d008      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002476:	4b7b      	ldr	r3, [pc, #492]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	4978      	ldr	r1, [pc, #480]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002484:	4313      	orrs	r3, r2
 8002486:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002494:	4b73      	ldr	r3, [pc, #460]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002498:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	4970      	ldr	r1, [pc, #448]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0320 	and.w	r3, r3, #32
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d008      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024b2:	4b6c      	ldr	r3, [pc, #432]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f023 0210 	bic.w	r2, r3, #16
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	4969      	ldr	r1, [pc, #420]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d008      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80024d0:	4b64      	ldr	r3, [pc, #400]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024dc:	4961      	ldr	r1, [pc, #388]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d008      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024ee:	4b5d      	ldr	r3, [pc, #372]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	f023 0220 	bic.w	r2, r3, #32
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	495a      	ldr	r1, [pc, #360]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800250c:	4b55      	ldr	r3, [pc, #340]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	4952      	ldr	r1, [pc, #328]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800251a:	4313      	orrs	r3, r2
 800251c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b00      	cmp	r3, #0
 8002528:	d008      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800252a:	4b4e      	ldr	r3, [pc, #312]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	494b      	ldr	r1, [pc, #300]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002538:	4313      	orrs	r3, r2
 800253a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0310 	and.w	r3, r3, #16
 8002544:	2b00      	cmp	r3, #0
 8002546:	d008      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002548:	4b46      	ldr	r3, [pc, #280]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	4943      	ldr	r1, [pc, #268]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002556:	4313      	orrs	r3, r2
 8002558:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002562:	2b00      	cmp	r3, #0
 8002564:	d008      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002566:	4b3f      	ldr	r3, [pc, #252]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	493c      	ldr	r1, [pc, #240]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002574:	4313      	orrs	r3, r2
 8002576:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002584:	4b37      	ldr	r3, [pc, #220]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002590:	4934      	ldr	r1, [pc, #208]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002592:	4313      	orrs	r3, r2
 8002594:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d008      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80025a2:	4b30      	ldr	r3, [pc, #192]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ae:	492d      	ldr	r1, [pc, #180]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80025c0:	4b28      	ldr	r3, [pc, #160]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025cc:	4925      	ldr	r1, [pc, #148]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d008      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80025de:	4b21      	ldr	r3, [pc, #132]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	491e      	ldr	r1, [pc, #120]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80025fc:	4b19      	ldr	r3, [pc, #100]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002608:	4916      	ldr	r1, [pc, #88]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800260a:	4313      	orrs	r3, r2
 800260c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d008      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800261a:	4b12      	ldr	r3, [pc, #72]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002626:	490f      	ldr	r1, [pc, #60]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002628:	4313      	orrs	r3, r2
 800262a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002638:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800263a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002644:	4907      	ldr	r1, [pc, #28]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002646:	4313      	orrs	r3, r2
 8002648:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00c      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002656:	4b03      	ldr	r3, [pc, #12]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	e002      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000
 8002668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800266a:	4913      	ldr	r1, [pc, #76]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800266c:	4313      	orrs	r3, r2
 800266e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800267c:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002688:	490b      	ldr	r1, [pc, #44]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800268a:	4313      	orrs	r3, r2
 800268c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d008      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800269a:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a6:	4904      	ldr	r1, [pc, #16]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3748      	adds	r7, #72	; 0x48
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40021000 	.word	0x40021000

080026bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08a      	sub	sp, #40	; 0x28
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	4613      	mov	r3, r2
 80026ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026d0:	2b20      	cmp	r3, #32
 80026d2:	d178      	bne.n	80027c6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <HAL_UART_Transmit+0x24>
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e071      	b.n	80027c8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2221      	movs	r2, #33	; 0x21
 80026f0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026f2:	f7fe f8a7 	bl	8000844 <HAL_GetTick>
 80026f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	88fa      	ldrh	r2, [r7, #6]
 80026fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	88fa      	ldrh	r2, [r7, #6]
 8002704:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002710:	d108      	bne.n	8002724 <HAL_UART_Transmit+0x68>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d104      	bne.n	8002724 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	e003      	b.n	800272c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002728:	2300      	movs	r3, #0
 800272a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800272c:	e030      	b.n	8002790 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2200      	movs	r2, #0
 8002736:	2180      	movs	r1, #128	; 0x80
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 fb67 	bl	8002e0c <UART_WaitOnFlagUntilTimeout>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d004      	beq.n	800274e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2220      	movs	r2, #32
 8002748:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e03c      	b.n	80027c8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10b      	bne.n	800276c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	881a      	ldrh	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002760:	b292      	uxth	r2, r2
 8002762:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	3302      	adds	r3, #2
 8002768:	61bb      	str	r3, [r7, #24]
 800276a:	e008      	b.n	800277e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	781a      	ldrb	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	b292      	uxth	r2, r2
 8002776:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	3301      	adds	r3, #1
 800277c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002784:	b29b      	uxth	r3, r3
 8002786:	3b01      	subs	r3, #1
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002796:	b29b      	uxth	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1c8      	bne.n	800272e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	2200      	movs	r2, #0
 80027a4:	2140      	movs	r1, #64	; 0x40
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 fb30 	bl	8002e0c <UART_WaitOnFlagUntilTimeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d004      	beq.n	80027bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2220      	movs	r2, #32
 80027b6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e005      	b.n	80027c8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2220      	movs	r2, #32
 80027c0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	e000      	b.n	80027c8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80027c6:	2302      	movs	r3, #2
  }
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3720      	adds	r7, #32
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	4b92      	ldr	r3, [pc, #584]	; (8002a44 <UART_SetConfig+0x274>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	6979      	ldr	r1, [r7, #20]
 8002804:	430b      	orrs	r3, r1
 8002806:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	4313      	orrs	r3, r2
 800282c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	430a      	orrs	r2, r1
 8002840:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a80      	ldr	r2, [pc, #512]	; (8002a48 <UART_SetConfig+0x278>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d120      	bne.n	800288e <UART_SetConfig+0xbe>
 800284c:	4b7f      	ldr	r3, [pc, #508]	; (8002a4c <UART_SetConfig+0x27c>)
 800284e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002850:	f003 0303 	and.w	r3, r3, #3
 8002854:	2b03      	cmp	r3, #3
 8002856:	d817      	bhi.n	8002888 <UART_SetConfig+0xb8>
 8002858:	a201      	add	r2, pc, #4	; (adr r2, 8002860 <UART_SetConfig+0x90>)
 800285a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800285e:	bf00      	nop
 8002860:	08002871 	.word	0x08002871
 8002864:	0800287d 	.word	0x0800287d
 8002868:	08002883 	.word	0x08002883
 800286c:	08002877 	.word	0x08002877
 8002870:	2301      	movs	r3, #1
 8002872:	77fb      	strb	r3, [r7, #31]
 8002874:	e0b5      	b.n	80029e2 <UART_SetConfig+0x212>
 8002876:	2302      	movs	r3, #2
 8002878:	77fb      	strb	r3, [r7, #31]
 800287a:	e0b2      	b.n	80029e2 <UART_SetConfig+0x212>
 800287c:	2304      	movs	r3, #4
 800287e:	77fb      	strb	r3, [r7, #31]
 8002880:	e0af      	b.n	80029e2 <UART_SetConfig+0x212>
 8002882:	2308      	movs	r3, #8
 8002884:	77fb      	strb	r3, [r7, #31]
 8002886:	e0ac      	b.n	80029e2 <UART_SetConfig+0x212>
 8002888:	2310      	movs	r3, #16
 800288a:	77fb      	strb	r3, [r7, #31]
 800288c:	e0a9      	b.n	80029e2 <UART_SetConfig+0x212>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a6f      	ldr	r2, [pc, #444]	; (8002a50 <UART_SetConfig+0x280>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d124      	bne.n	80028e2 <UART_SetConfig+0x112>
 8002898:	4b6c      	ldr	r3, [pc, #432]	; (8002a4c <UART_SetConfig+0x27c>)
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028a4:	d011      	beq.n	80028ca <UART_SetConfig+0xfa>
 80028a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028aa:	d817      	bhi.n	80028dc <UART_SetConfig+0x10c>
 80028ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028b0:	d011      	beq.n	80028d6 <UART_SetConfig+0x106>
 80028b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028b6:	d811      	bhi.n	80028dc <UART_SetConfig+0x10c>
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <UART_SetConfig+0xf4>
 80028bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c0:	d006      	beq.n	80028d0 <UART_SetConfig+0x100>
 80028c2:	e00b      	b.n	80028dc <UART_SetConfig+0x10c>
 80028c4:	2300      	movs	r3, #0
 80028c6:	77fb      	strb	r3, [r7, #31]
 80028c8:	e08b      	b.n	80029e2 <UART_SetConfig+0x212>
 80028ca:	2302      	movs	r3, #2
 80028cc:	77fb      	strb	r3, [r7, #31]
 80028ce:	e088      	b.n	80029e2 <UART_SetConfig+0x212>
 80028d0:	2304      	movs	r3, #4
 80028d2:	77fb      	strb	r3, [r7, #31]
 80028d4:	e085      	b.n	80029e2 <UART_SetConfig+0x212>
 80028d6:	2308      	movs	r3, #8
 80028d8:	77fb      	strb	r3, [r7, #31]
 80028da:	e082      	b.n	80029e2 <UART_SetConfig+0x212>
 80028dc:	2310      	movs	r3, #16
 80028de:	77fb      	strb	r3, [r7, #31]
 80028e0:	e07f      	b.n	80029e2 <UART_SetConfig+0x212>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a5b      	ldr	r2, [pc, #364]	; (8002a54 <UART_SetConfig+0x284>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d124      	bne.n	8002936 <UART_SetConfig+0x166>
 80028ec:	4b57      	ldr	r3, [pc, #348]	; (8002a4c <UART_SetConfig+0x27c>)
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80028f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80028f8:	d011      	beq.n	800291e <UART_SetConfig+0x14e>
 80028fa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80028fe:	d817      	bhi.n	8002930 <UART_SetConfig+0x160>
 8002900:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002904:	d011      	beq.n	800292a <UART_SetConfig+0x15a>
 8002906:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800290a:	d811      	bhi.n	8002930 <UART_SetConfig+0x160>
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <UART_SetConfig+0x148>
 8002910:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002914:	d006      	beq.n	8002924 <UART_SetConfig+0x154>
 8002916:	e00b      	b.n	8002930 <UART_SetConfig+0x160>
 8002918:	2300      	movs	r3, #0
 800291a:	77fb      	strb	r3, [r7, #31]
 800291c:	e061      	b.n	80029e2 <UART_SetConfig+0x212>
 800291e:	2302      	movs	r3, #2
 8002920:	77fb      	strb	r3, [r7, #31]
 8002922:	e05e      	b.n	80029e2 <UART_SetConfig+0x212>
 8002924:	2304      	movs	r3, #4
 8002926:	77fb      	strb	r3, [r7, #31]
 8002928:	e05b      	b.n	80029e2 <UART_SetConfig+0x212>
 800292a:	2308      	movs	r3, #8
 800292c:	77fb      	strb	r3, [r7, #31]
 800292e:	e058      	b.n	80029e2 <UART_SetConfig+0x212>
 8002930:	2310      	movs	r3, #16
 8002932:	77fb      	strb	r3, [r7, #31]
 8002934:	e055      	b.n	80029e2 <UART_SetConfig+0x212>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a47      	ldr	r2, [pc, #284]	; (8002a58 <UART_SetConfig+0x288>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d124      	bne.n	800298a <UART_SetConfig+0x1ba>
 8002940:	4b42      	ldr	r3, [pc, #264]	; (8002a4c <UART_SetConfig+0x27c>)
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002948:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800294c:	d011      	beq.n	8002972 <UART_SetConfig+0x1a2>
 800294e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002952:	d817      	bhi.n	8002984 <UART_SetConfig+0x1b4>
 8002954:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002958:	d011      	beq.n	800297e <UART_SetConfig+0x1ae>
 800295a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800295e:	d811      	bhi.n	8002984 <UART_SetConfig+0x1b4>
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <UART_SetConfig+0x19c>
 8002964:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002968:	d006      	beq.n	8002978 <UART_SetConfig+0x1a8>
 800296a:	e00b      	b.n	8002984 <UART_SetConfig+0x1b4>
 800296c:	2300      	movs	r3, #0
 800296e:	77fb      	strb	r3, [r7, #31]
 8002970:	e037      	b.n	80029e2 <UART_SetConfig+0x212>
 8002972:	2302      	movs	r3, #2
 8002974:	77fb      	strb	r3, [r7, #31]
 8002976:	e034      	b.n	80029e2 <UART_SetConfig+0x212>
 8002978:	2304      	movs	r3, #4
 800297a:	77fb      	strb	r3, [r7, #31]
 800297c:	e031      	b.n	80029e2 <UART_SetConfig+0x212>
 800297e:	2308      	movs	r3, #8
 8002980:	77fb      	strb	r3, [r7, #31]
 8002982:	e02e      	b.n	80029e2 <UART_SetConfig+0x212>
 8002984:	2310      	movs	r3, #16
 8002986:	77fb      	strb	r3, [r7, #31]
 8002988:	e02b      	b.n	80029e2 <UART_SetConfig+0x212>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a33      	ldr	r2, [pc, #204]	; (8002a5c <UART_SetConfig+0x28c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d124      	bne.n	80029de <UART_SetConfig+0x20e>
 8002994:	4b2d      	ldr	r3, [pc, #180]	; (8002a4c <UART_SetConfig+0x27c>)
 8002996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002998:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800299c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029a0:	d011      	beq.n	80029c6 <UART_SetConfig+0x1f6>
 80029a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029a6:	d817      	bhi.n	80029d8 <UART_SetConfig+0x208>
 80029a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029ac:	d011      	beq.n	80029d2 <UART_SetConfig+0x202>
 80029ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029b2:	d811      	bhi.n	80029d8 <UART_SetConfig+0x208>
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <UART_SetConfig+0x1f0>
 80029b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029bc:	d006      	beq.n	80029cc <UART_SetConfig+0x1fc>
 80029be:	e00b      	b.n	80029d8 <UART_SetConfig+0x208>
 80029c0:	2300      	movs	r3, #0
 80029c2:	77fb      	strb	r3, [r7, #31]
 80029c4:	e00d      	b.n	80029e2 <UART_SetConfig+0x212>
 80029c6:	2302      	movs	r3, #2
 80029c8:	77fb      	strb	r3, [r7, #31]
 80029ca:	e00a      	b.n	80029e2 <UART_SetConfig+0x212>
 80029cc:	2304      	movs	r3, #4
 80029ce:	77fb      	strb	r3, [r7, #31]
 80029d0:	e007      	b.n	80029e2 <UART_SetConfig+0x212>
 80029d2:	2308      	movs	r3, #8
 80029d4:	77fb      	strb	r3, [r7, #31]
 80029d6:	e004      	b.n	80029e2 <UART_SetConfig+0x212>
 80029d8:	2310      	movs	r3, #16
 80029da:	77fb      	strb	r3, [r7, #31]
 80029dc:	e001      	b.n	80029e2 <UART_SetConfig+0x212>
 80029de:	2310      	movs	r3, #16
 80029e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ea:	d16b      	bne.n	8002ac4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80029ec:	7ffb      	ldrb	r3, [r7, #31]
 80029ee:	2b08      	cmp	r3, #8
 80029f0:	d838      	bhi.n	8002a64 <UART_SetConfig+0x294>
 80029f2:	a201      	add	r2, pc, #4	; (adr r2, 80029f8 <UART_SetConfig+0x228>)
 80029f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f8:	08002a1d 	.word	0x08002a1d
 80029fc:	08002a25 	.word	0x08002a25
 8002a00:	08002a2d 	.word	0x08002a2d
 8002a04:	08002a65 	.word	0x08002a65
 8002a08:	08002a33 	.word	0x08002a33
 8002a0c:	08002a65 	.word	0x08002a65
 8002a10:	08002a65 	.word	0x08002a65
 8002a14:	08002a65 	.word	0x08002a65
 8002a18:	08002a3b 	.word	0x08002a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a1c:	f7ff fbec 	bl	80021f8 <HAL_RCC_GetPCLK1Freq>
 8002a20:	61b8      	str	r0, [r7, #24]
        break;
 8002a22:	e024      	b.n	8002a6e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a24:	f7ff fc0a 	bl	800223c <HAL_RCC_GetPCLK2Freq>
 8002a28:	61b8      	str	r0, [r7, #24]
        break;
 8002a2a:	e020      	b.n	8002a6e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <UART_SetConfig+0x290>)
 8002a2e:	61bb      	str	r3, [r7, #24]
        break;
 8002a30:	e01d      	b.n	8002a6e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a32:	f7ff fb6b 	bl	800210c <HAL_RCC_GetSysClockFreq>
 8002a36:	61b8      	str	r0, [r7, #24]
        break;
 8002a38:	e019      	b.n	8002a6e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a3e:	61bb      	str	r3, [r7, #24]
        break;
 8002a40:	e015      	b.n	8002a6e <UART_SetConfig+0x29e>
 8002a42:	bf00      	nop
 8002a44:	efff69f3 	.word	0xefff69f3
 8002a48:	40013800 	.word	0x40013800
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40004400 	.word	0x40004400
 8002a54:	40004800 	.word	0x40004800
 8002a58:	40004c00 	.word	0x40004c00
 8002a5c:	40005000 	.word	0x40005000
 8002a60:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	77bb      	strb	r3, [r7, #30]
        break;
 8002a6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d073      	beq.n	8002b5c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	005a      	lsls	r2, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	085b      	lsrs	r3, r3, #1
 8002a7e:	441a      	add	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	2b0f      	cmp	r3, #15
 8002a8e:	d916      	bls.n	8002abe <UART_SetConfig+0x2ee>
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a96:	d212      	bcs.n	8002abe <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	f023 030f 	bic.w	r3, r3, #15
 8002aa0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	085b      	lsrs	r3, r3, #1
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	89fb      	ldrh	r3, [r7, #14]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	89fa      	ldrh	r2, [r7, #14]
 8002aba:	60da      	str	r2, [r3, #12]
 8002abc:	e04e      	b.n	8002b5c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	77bb      	strb	r3, [r7, #30]
 8002ac2:	e04b      	b.n	8002b5c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ac4:	7ffb      	ldrb	r3, [r7, #31]
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d827      	bhi.n	8002b1a <UART_SetConfig+0x34a>
 8002aca:	a201      	add	r2, pc, #4	; (adr r2, 8002ad0 <UART_SetConfig+0x300>)
 8002acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad0:	08002af5 	.word	0x08002af5
 8002ad4:	08002afd 	.word	0x08002afd
 8002ad8:	08002b05 	.word	0x08002b05
 8002adc:	08002b1b 	.word	0x08002b1b
 8002ae0:	08002b0b 	.word	0x08002b0b
 8002ae4:	08002b1b 	.word	0x08002b1b
 8002ae8:	08002b1b 	.word	0x08002b1b
 8002aec:	08002b1b 	.word	0x08002b1b
 8002af0:	08002b13 	.word	0x08002b13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002af4:	f7ff fb80 	bl	80021f8 <HAL_RCC_GetPCLK1Freq>
 8002af8:	61b8      	str	r0, [r7, #24]
        break;
 8002afa:	e013      	b.n	8002b24 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002afc:	f7ff fb9e 	bl	800223c <HAL_RCC_GetPCLK2Freq>
 8002b00:	61b8      	str	r0, [r7, #24]
        break;
 8002b02:	e00f      	b.n	8002b24 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b04:	4b1b      	ldr	r3, [pc, #108]	; (8002b74 <UART_SetConfig+0x3a4>)
 8002b06:	61bb      	str	r3, [r7, #24]
        break;
 8002b08:	e00c      	b.n	8002b24 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b0a:	f7ff faff 	bl	800210c <HAL_RCC_GetSysClockFreq>
 8002b0e:	61b8      	str	r0, [r7, #24]
        break;
 8002b10:	e008      	b.n	8002b24 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b16:	61bb      	str	r3, [r7, #24]
        break;
 8002b18:	e004      	b.n	8002b24 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	77bb      	strb	r3, [r7, #30]
        break;
 8002b22:	bf00      	nop
    }

    if (pclk != 0U)
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d018      	beq.n	8002b5c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	085a      	lsrs	r2, r3, #1
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	441a      	add	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	2b0f      	cmp	r3, #15
 8002b42:	d909      	bls.n	8002b58 <UART_SetConfig+0x388>
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b4a:	d205      	bcs.n	8002b58 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60da      	str	r2, [r3, #12]
 8002b56:	e001      	b.n	8002b5c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002b68:	7fbb      	ldrb	r3, [r7, #30]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3720      	adds	r7, #32
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	007a1200 	.word	0x007a1200

08002b78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00a      	beq.n	8002ba2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00a      	beq.n	8002bc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00a      	beq.n	8002be6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00a      	beq.n	8002c4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d01a      	beq.n	8002c8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c76:	d10a      	bne.n	8002c8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	605a      	str	r2, [r3, #4]
  }
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b098      	sub	sp, #96	; 0x60
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ccc:	f7fd fdba 	bl	8000844 <HAL_GetTick>
 8002cd0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d12e      	bne.n	8002d3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ce0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f88c 	bl	8002e0c <UART_WaitOnFlagUntilTimeout>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d021      	beq.n	8002d3e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d02:	e853 3f00 	ldrex	r3, [r3]
 8002d06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d0e:	653b      	str	r3, [r7, #80]	; 0x50
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d18:	647b      	str	r3, [r7, #68]	; 0x44
 8002d1a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d20:	e841 2300 	strex	r3, r2, [r1]
 8002d24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1e6      	bne.n	8002cfa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e062      	b.n	8002e04 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d149      	bne.n	8002de0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d54:	2200      	movs	r2, #0
 8002d56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f856 	bl	8002e0c <UART_WaitOnFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d03c      	beq.n	8002de0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	e853 3f00 	ldrex	r3, [r3]
 8002d72:	623b      	str	r3, [r7, #32]
   return(result);
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	461a      	mov	r2, r3
 8002d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d84:	633b      	str	r3, [r7, #48]	; 0x30
 8002d86:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d8c:	e841 2300 	strex	r3, r2, [r1]
 8002d90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1e6      	bne.n	8002d66 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	3308      	adds	r3, #8
 8002d9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	e853 3f00 	ldrex	r3, [r3]
 8002da6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 0301 	bic.w	r3, r3, #1
 8002dae:	64bb      	str	r3, [r7, #72]	; 0x48
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3308      	adds	r3, #8
 8002db6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002db8:	61fa      	str	r2, [r7, #28]
 8002dba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dbc:	69b9      	ldr	r1, [r7, #24]
 8002dbe:	69fa      	ldr	r2, [r7, #28]
 8002dc0:	e841 2300 	strex	r3, r2, [r1]
 8002dc4:	617b      	str	r3, [r7, #20]
   return(result);
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1e5      	bne.n	8002d98 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e011      	b.n	8002e04 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2220      	movs	r2, #32
 8002de4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3758      	adds	r7, #88	; 0x58
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e1c:	e049      	b.n	8002eb2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e24:	d045      	beq.n	8002eb2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e26:	f7fd fd0d 	bl	8000844 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d302      	bcc.n	8002e3c <UART_WaitOnFlagUntilTimeout+0x30>
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e048      	b.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d031      	beq.n	8002eb2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	f003 0308 	and.w	r3, r3, #8
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d110      	bne.n	8002e7e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2208      	movs	r2, #8
 8002e62:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f838 	bl	8002eda <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2208      	movs	r2, #8
 8002e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e029      	b.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e8c:	d111      	bne.n	8002eb2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 f81e 	bl	8002eda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e00f      	b.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	69da      	ldr	r2, [r3, #28]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	bf0c      	ite	eq
 8002ec2:	2301      	moveq	r3, #1
 8002ec4:	2300      	movne	r3, #0
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	461a      	mov	r2, r3
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d0a6      	beq.n	8002e1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b095      	sub	sp, #84	; 0x54
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eea:	e853 3f00 	ldrex	r3, [r3]
 8002eee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f00:	643b      	str	r3, [r7, #64]	; 0x40
 8002f02:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f08:	e841 2300 	strex	r3, r2, [r1]
 8002f0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1e6      	bne.n	8002ee2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	3308      	adds	r3, #8
 8002f1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	e853 3f00 	ldrex	r3, [r3]
 8002f22:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f023 0301 	bic.w	r3, r3, #1
 8002f2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	3308      	adds	r3, #8
 8002f32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f3c:	e841 2300 	strex	r3, r2, [r1]
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1e5      	bne.n	8002f14 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d118      	bne.n	8002f82 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	e853 3f00 	ldrex	r3, [r3]
 8002f5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f023 0310 	bic.w	r3, r3, #16
 8002f64:	647b      	str	r3, [r7, #68]	; 0x44
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f6e:	61bb      	str	r3, [r7, #24]
 8002f70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f72:	6979      	ldr	r1, [r7, #20]
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	e841 2300 	strex	r3, r2, [r1]
 8002f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1e6      	bne.n	8002f50 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002f96:	bf00      	nop
 8002f98:	3754      	adds	r7, #84	; 0x54
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b086      	sub	sp, #24
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	60f8      	str	r0, [r7, #12]
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	607a      	str	r2, [r7, #4]
 8002fae:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e056      	b.n	8003068 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d106      	bne.n	8002fd0 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f7fd fa9e 	bl	800050c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2224      	movs	r2, #36	; 0x24
 8002fd4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0201 	bic.w	r2, r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f7ff fbf2 	bl	80027d0 <UART_SetConfig>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RS485Ex_Init+0x54>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e038      	b.n	8003068 <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <HAL_RS485Ex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f7ff fdba 	bl	8002b78 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003012:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	430a      	orrs	r2, r1
 8003026:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	055b      	lsls	r3, r3, #21
 800302c:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	041b      	lsls	r3, r3, #16
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4313      	orrs	r3, r2
 8003036:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 8003042:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	6812      	ldr	r2, [r2, #0]
 800304a:	6979      	ldr	r1, [r7, #20]
 800304c:	430b      	orrs	r3, r1
 800304e:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0201 	orr.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f7ff fe2b 	bl	8002cbc <UART_CheckIdleState>
 8003066:	4603      	mov	r3, r0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <std>:
 8003070:	2300      	movs	r3, #0
 8003072:	b510      	push	{r4, lr}
 8003074:	4604      	mov	r4, r0
 8003076:	e9c0 3300 	strd	r3, r3, [r0]
 800307a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800307e:	6083      	str	r3, [r0, #8]
 8003080:	8181      	strh	r1, [r0, #12]
 8003082:	6643      	str	r3, [r0, #100]	; 0x64
 8003084:	81c2      	strh	r2, [r0, #14]
 8003086:	6183      	str	r3, [r0, #24]
 8003088:	4619      	mov	r1, r3
 800308a:	2208      	movs	r2, #8
 800308c:	305c      	adds	r0, #92	; 0x5c
 800308e:	f000 f8f4 	bl	800327a <memset>
 8003092:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <std+0x38>)
 8003094:	6263      	str	r3, [r4, #36]	; 0x24
 8003096:	4b05      	ldr	r3, [pc, #20]	; (80030ac <std+0x3c>)
 8003098:	62a3      	str	r3, [r4, #40]	; 0x28
 800309a:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <std+0x40>)
 800309c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800309e:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <std+0x44>)
 80030a0:	6224      	str	r4, [r4, #32]
 80030a2:	6323      	str	r3, [r4, #48]	; 0x30
 80030a4:	bd10      	pop	{r4, pc}
 80030a6:	bf00      	nop
 80030a8:	080031f5 	.word	0x080031f5
 80030ac:	08003217 	.word	0x08003217
 80030b0:	0800324f 	.word	0x0800324f
 80030b4:	08003273 	.word	0x08003273

080030b8 <stdio_exit_handler>:
 80030b8:	4a02      	ldr	r2, [pc, #8]	; (80030c4 <stdio_exit_handler+0xc>)
 80030ba:	4903      	ldr	r1, [pc, #12]	; (80030c8 <stdio_exit_handler+0x10>)
 80030bc:	4803      	ldr	r0, [pc, #12]	; (80030cc <stdio_exit_handler+0x14>)
 80030be:	f000 b869 	b.w	8003194 <_fwalk_sglue>
 80030c2:	bf00      	nop
 80030c4:	2000000c 	.word	0x2000000c
 80030c8:	08003c15 	.word	0x08003c15
 80030cc:	20000018 	.word	0x20000018

080030d0 <cleanup_stdio>:
 80030d0:	6841      	ldr	r1, [r0, #4]
 80030d2:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <cleanup_stdio+0x34>)
 80030d4:	4299      	cmp	r1, r3
 80030d6:	b510      	push	{r4, lr}
 80030d8:	4604      	mov	r4, r0
 80030da:	d001      	beq.n	80030e0 <cleanup_stdio+0x10>
 80030dc:	f000 fd9a 	bl	8003c14 <_fflush_r>
 80030e0:	68a1      	ldr	r1, [r4, #8]
 80030e2:	4b09      	ldr	r3, [pc, #36]	; (8003108 <cleanup_stdio+0x38>)
 80030e4:	4299      	cmp	r1, r3
 80030e6:	d002      	beq.n	80030ee <cleanup_stdio+0x1e>
 80030e8:	4620      	mov	r0, r4
 80030ea:	f000 fd93 	bl	8003c14 <_fflush_r>
 80030ee:	68e1      	ldr	r1, [r4, #12]
 80030f0:	4b06      	ldr	r3, [pc, #24]	; (800310c <cleanup_stdio+0x3c>)
 80030f2:	4299      	cmp	r1, r3
 80030f4:	d004      	beq.n	8003100 <cleanup_stdio+0x30>
 80030f6:	4620      	mov	r0, r4
 80030f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030fc:	f000 bd8a 	b.w	8003c14 <_fflush_r>
 8003100:	bd10      	pop	{r4, pc}
 8003102:	bf00      	nop
 8003104:	20000114 	.word	0x20000114
 8003108:	2000017c 	.word	0x2000017c
 800310c:	200001e4 	.word	0x200001e4

08003110 <global_stdio_init.part.0>:
 8003110:	b510      	push	{r4, lr}
 8003112:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <global_stdio_init.part.0+0x30>)
 8003114:	4c0b      	ldr	r4, [pc, #44]	; (8003144 <global_stdio_init.part.0+0x34>)
 8003116:	4a0c      	ldr	r2, [pc, #48]	; (8003148 <global_stdio_init.part.0+0x38>)
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	4620      	mov	r0, r4
 800311c:	2200      	movs	r2, #0
 800311e:	2104      	movs	r1, #4
 8003120:	f7ff ffa6 	bl	8003070 <std>
 8003124:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003128:	2201      	movs	r2, #1
 800312a:	2109      	movs	r1, #9
 800312c:	f7ff ffa0 	bl	8003070 <std>
 8003130:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003134:	2202      	movs	r2, #2
 8003136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800313a:	2112      	movs	r1, #18
 800313c:	f7ff bf98 	b.w	8003070 <std>
 8003140:	2000024c 	.word	0x2000024c
 8003144:	20000114 	.word	0x20000114
 8003148:	080030b9 	.word	0x080030b9

0800314c <__sfp_lock_acquire>:
 800314c:	4801      	ldr	r0, [pc, #4]	; (8003154 <__sfp_lock_acquire+0x8>)
 800314e:	f000 b90d 	b.w	800336c <__retarget_lock_acquire_recursive>
 8003152:	bf00      	nop
 8003154:	20000255 	.word	0x20000255

08003158 <__sfp_lock_release>:
 8003158:	4801      	ldr	r0, [pc, #4]	; (8003160 <__sfp_lock_release+0x8>)
 800315a:	f000 b908 	b.w	800336e <__retarget_lock_release_recursive>
 800315e:	bf00      	nop
 8003160:	20000255 	.word	0x20000255

08003164 <__sinit>:
 8003164:	b510      	push	{r4, lr}
 8003166:	4604      	mov	r4, r0
 8003168:	f7ff fff0 	bl	800314c <__sfp_lock_acquire>
 800316c:	6a23      	ldr	r3, [r4, #32]
 800316e:	b11b      	cbz	r3, 8003178 <__sinit+0x14>
 8003170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003174:	f7ff bff0 	b.w	8003158 <__sfp_lock_release>
 8003178:	4b04      	ldr	r3, [pc, #16]	; (800318c <__sinit+0x28>)
 800317a:	6223      	str	r3, [r4, #32]
 800317c:	4b04      	ldr	r3, [pc, #16]	; (8003190 <__sinit+0x2c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f5      	bne.n	8003170 <__sinit+0xc>
 8003184:	f7ff ffc4 	bl	8003110 <global_stdio_init.part.0>
 8003188:	e7f2      	b.n	8003170 <__sinit+0xc>
 800318a:	bf00      	nop
 800318c:	080030d1 	.word	0x080030d1
 8003190:	2000024c 	.word	0x2000024c

08003194 <_fwalk_sglue>:
 8003194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003198:	4607      	mov	r7, r0
 800319a:	4688      	mov	r8, r1
 800319c:	4614      	mov	r4, r2
 800319e:	2600      	movs	r6, #0
 80031a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80031a4:	f1b9 0901 	subs.w	r9, r9, #1
 80031a8:	d505      	bpl.n	80031b6 <_fwalk_sglue+0x22>
 80031aa:	6824      	ldr	r4, [r4, #0]
 80031ac:	2c00      	cmp	r4, #0
 80031ae:	d1f7      	bne.n	80031a0 <_fwalk_sglue+0xc>
 80031b0:	4630      	mov	r0, r6
 80031b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031b6:	89ab      	ldrh	r3, [r5, #12]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d907      	bls.n	80031cc <_fwalk_sglue+0x38>
 80031bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80031c0:	3301      	adds	r3, #1
 80031c2:	d003      	beq.n	80031cc <_fwalk_sglue+0x38>
 80031c4:	4629      	mov	r1, r5
 80031c6:	4638      	mov	r0, r7
 80031c8:	47c0      	blx	r8
 80031ca:	4306      	orrs	r6, r0
 80031cc:	3568      	adds	r5, #104	; 0x68
 80031ce:	e7e9      	b.n	80031a4 <_fwalk_sglue+0x10>

080031d0 <iprintf>:
 80031d0:	b40f      	push	{r0, r1, r2, r3}
 80031d2:	b507      	push	{r0, r1, r2, lr}
 80031d4:	4906      	ldr	r1, [pc, #24]	; (80031f0 <iprintf+0x20>)
 80031d6:	ab04      	add	r3, sp, #16
 80031d8:	6808      	ldr	r0, [r1, #0]
 80031da:	f853 2b04 	ldr.w	r2, [r3], #4
 80031de:	6881      	ldr	r1, [r0, #8]
 80031e0:	9301      	str	r3, [sp, #4]
 80031e2:	f000 f9e7 	bl	80035b4 <_vfiprintf_r>
 80031e6:	b003      	add	sp, #12
 80031e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80031ec:	b004      	add	sp, #16
 80031ee:	4770      	bx	lr
 80031f0:	20000064 	.word	0x20000064

080031f4 <__sread>:
 80031f4:	b510      	push	{r4, lr}
 80031f6:	460c      	mov	r4, r1
 80031f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031fc:	f000 f868 	bl	80032d0 <_read_r>
 8003200:	2800      	cmp	r0, #0
 8003202:	bfab      	itete	ge
 8003204:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003206:	89a3      	ldrhlt	r3, [r4, #12]
 8003208:	181b      	addge	r3, r3, r0
 800320a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800320e:	bfac      	ite	ge
 8003210:	6563      	strge	r3, [r4, #84]	; 0x54
 8003212:	81a3      	strhlt	r3, [r4, #12]
 8003214:	bd10      	pop	{r4, pc}

08003216 <__swrite>:
 8003216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800321a:	461f      	mov	r7, r3
 800321c:	898b      	ldrh	r3, [r1, #12]
 800321e:	05db      	lsls	r3, r3, #23
 8003220:	4605      	mov	r5, r0
 8003222:	460c      	mov	r4, r1
 8003224:	4616      	mov	r6, r2
 8003226:	d505      	bpl.n	8003234 <__swrite+0x1e>
 8003228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800322c:	2302      	movs	r3, #2
 800322e:	2200      	movs	r2, #0
 8003230:	f000 f83c 	bl	80032ac <_lseek_r>
 8003234:	89a3      	ldrh	r3, [r4, #12]
 8003236:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800323a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800323e:	81a3      	strh	r3, [r4, #12]
 8003240:	4632      	mov	r2, r6
 8003242:	463b      	mov	r3, r7
 8003244:	4628      	mov	r0, r5
 8003246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800324a:	f000 b853 	b.w	80032f4 <_write_r>

0800324e <__sseek>:
 800324e:	b510      	push	{r4, lr}
 8003250:	460c      	mov	r4, r1
 8003252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003256:	f000 f829 	bl	80032ac <_lseek_r>
 800325a:	1c43      	adds	r3, r0, #1
 800325c:	89a3      	ldrh	r3, [r4, #12]
 800325e:	bf15      	itete	ne
 8003260:	6560      	strne	r0, [r4, #84]	; 0x54
 8003262:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003266:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800326a:	81a3      	strheq	r3, [r4, #12]
 800326c:	bf18      	it	ne
 800326e:	81a3      	strhne	r3, [r4, #12]
 8003270:	bd10      	pop	{r4, pc}

08003272 <__sclose>:
 8003272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003276:	f000 b809 	b.w	800328c <_close_r>

0800327a <memset>:
 800327a:	4402      	add	r2, r0
 800327c:	4603      	mov	r3, r0
 800327e:	4293      	cmp	r3, r2
 8003280:	d100      	bne.n	8003284 <memset+0xa>
 8003282:	4770      	bx	lr
 8003284:	f803 1b01 	strb.w	r1, [r3], #1
 8003288:	e7f9      	b.n	800327e <memset+0x4>
	...

0800328c <_close_r>:
 800328c:	b538      	push	{r3, r4, r5, lr}
 800328e:	4d06      	ldr	r5, [pc, #24]	; (80032a8 <_close_r+0x1c>)
 8003290:	2300      	movs	r3, #0
 8003292:	4604      	mov	r4, r0
 8003294:	4608      	mov	r0, r1
 8003296:	602b      	str	r3, [r5, #0]
 8003298:	f7fd f9d3 	bl	8000642 <_close>
 800329c:	1c43      	adds	r3, r0, #1
 800329e:	d102      	bne.n	80032a6 <_close_r+0x1a>
 80032a0:	682b      	ldr	r3, [r5, #0]
 80032a2:	b103      	cbz	r3, 80032a6 <_close_r+0x1a>
 80032a4:	6023      	str	r3, [r4, #0]
 80032a6:	bd38      	pop	{r3, r4, r5, pc}
 80032a8:	20000250 	.word	0x20000250

080032ac <_lseek_r>:
 80032ac:	b538      	push	{r3, r4, r5, lr}
 80032ae:	4d07      	ldr	r5, [pc, #28]	; (80032cc <_lseek_r+0x20>)
 80032b0:	4604      	mov	r4, r0
 80032b2:	4608      	mov	r0, r1
 80032b4:	4611      	mov	r1, r2
 80032b6:	2200      	movs	r2, #0
 80032b8:	602a      	str	r2, [r5, #0]
 80032ba:	461a      	mov	r2, r3
 80032bc:	f7fd f9e8 	bl	8000690 <_lseek>
 80032c0:	1c43      	adds	r3, r0, #1
 80032c2:	d102      	bne.n	80032ca <_lseek_r+0x1e>
 80032c4:	682b      	ldr	r3, [r5, #0]
 80032c6:	b103      	cbz	r3, 80032ca <_lseek_r+0x1e>
 80032c8:	6023      	str	r3, [r4, #0]
 80032ca:	bd38      	pop	{r3, r4, r5, pc}
 80032cc:	20000250 	.word	0x20000250

080032d0 <_read_r>:
 80032d0:	b538      	push	{r3, r4, r5, lr}
 80032d2:	4d07      	ldr	r5, [pc, #28]	; (80032f0 <_read_r+0x20>)
 80032d4:	4604      	mov	r4, r0
 80032d6:	4608      	mov	r0, r1
 80032d8:	4611      	mov	r1, r2
 80032da:	2200      	movs	r2, #0
 80032dc:	602a      	str	r2, [r5, #0]
 80032de:	461a      	mov	r2, r3
 80032e0:	f7fd f992 	bl	8000608 <_read>
 80032e4:	1c43      	adds	r3, r0, #1
 80032e6:	d102      	bne.n	80032ee <_read_r+0x1e>
 80032e8:	682b      	ldr	r3, [r5, #0]
 80032ea:	b103      	cbz	r3, 80032ee <_read_r+0x1e>
 80032ec:	6023      	str	r3, [r4, #0]
 80032ee:	bd38      	pop	{r3, r4, r5, pc}
 80032f0:	20000250 	.word	0x20000250

080032f4 <_write_r>:
 80032f4:	b538      	push	{r3, r4, r5, lr}
 80032f6:	4d07      	ldr	r5, [pc, #28]	; (8003314 <_write_r+0x20>)
 80032f8:	4604      	mov	r4, r0
 80032fa:	4608      	mov	r0, r1
 80032fc:	4611      	mov	r1, r2
 80032fe:	2200      	movs	r2, #0
 8003300:	602a      	str	r2, [r5, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	f7fc ffbc 	bl	8000280 <_write>
 8003308:	1c43      	adds	r3, r0, #1
 800330a:	d102      	bne.n	8003312 <_write_r+0x1e>
 800330c:	682b      	ldr	r3, [r5, #0]
 800330e:	b103      	cbz	r3, 8003312 <_write_r+0x1e>
 8003310:	6023      	str	r3, [r4, #0]
 8003312:	bd38      	pop	{r3, r4, r5, pc}
 8003314:	20000250 	.word	0x20000250

08003318 <__errno>:
 8003318:	4b01      	ldr	r3, [pc, #4]	; (8003320 <__errno+0x8>)
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	20000064 	.word	0x20000064

08003324 <__libc_init_array>:
 8003324:	b570      	push	{r4, r5, r6, lr}
 8003326:	4d0d      	ldr	r5, [pc, #52]	; (800335c <__libc_init_array+0x38>)
 8003328:	4c0d      	ldr	r4, [pc, #52]	; (8003360 <__libc_init_array+0x3c>)
 800332a:	1b64      	subs	r4, r4, r5
 800332c:	10a4      	asrs	r4, r4, #2
 800332e:	2600      	movs	r6, #0
 8003330:	42a6      	cmp	r6, r4
 8003332:	d109      	bne.n	8003348 <__libc_init_array+0x24>
 8003334:	4d0b      	ldr	r5, [pc, #44]	; (8003364 <__libc_init_array+0x40>)
 8003336:	4c0c      	ldr	r4, [pc, #48]	; (8003368 <__libc_init_array+0x44>)
 8003338:	f000 fdbe 	bl	8003eb8 <_init>
 800333c:	1b64      	subs	r4, r4, r5
 800333e:	10a4      	asrs	r4, r4, #2
 8003340:	2600      	movs	r6, #0
 8003342:	42a6      	cmp	r6, r4
 8003344:	d105      	bne.n	8003352 <__libc_init_array+0x2e>
 8003346:	bd70      	pop	{r4, r5, r6, pc}
 8003348:	f855 3b04 	ldr.w	r3, [r5], #4
 800334c:	4798      	blx	r3
 800334e:	3601      	adds	r6, #1
 8003350:	e7ee      	b.n	8003330 <__libc_init_array+0xc>
 8003352:	f855 3b04 	ldr.w	r3, [r5], #4
 8003356:	4798      	blx	r3
 8003358:	3601      	adds	r6, #1
 800335a:	e7f2      	b.n	8003342 <__libc_init_array+0x1e>
 800335c:	08003f58 	.word	0x08003f58
 8003360:	08003f58 	.word	0x08003f58
 8003364:	08003f58 	.word	0x08003f58
 8003368:	08003f5c 	.word	0x08003f5c

0800336c <__retarget_lock_acquire_recursive>:
 800336c:	4770      	bx	lr

0800336e <__retarget_lock_release_recursive>:
 800336e:	4770      	bx	lr

08003370 <_free_r>:
 8003370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003372:	2900      	cmp	r1, #0
 8003374:	d044      	beq.n	8003400 <_free_r+0x90>
 8003376:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800337a:	9001      	str	r0, [sp, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	f1a1 0404 	sub.w	r4, r1, #4
 8003382:	bfb8      	it	lt
 8003384:	18e4      	addlt	r4, r4, r3
 8003386:	f000 f8df 	bl	8003548 <__malloc_lock>
 800338a:	4a1e      	ldr	r2, [pc, #120]	; (8003404 <_free_r+0x94>)
 800338c:	9801      	ldr	r0, [sp, #4]
 800338e:	6813      	ldr	r3, [r2, #0]
 8003390:	b933      	cbnz	r3, 80033a0 <_free_r+0x30>
 8003392:	6063      	str	r3, [r4, #4]
 8003394:	6014      	str	r4, [r2, #0]
 8003396:	b003      	add	sp, #12
 8003398:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800339c:	f000 b8da 	b.w	8003554 <__malloc_unlock>
 80033a0:	42a3      	cmp	r3, r4
 80033a2:	d908      	bls.n	80033b6 <_free_r+0x46>
 80033a4:	6825      	ldr	r5, [r4, #0]
 80033a6:	1961      	adds	r1, r4, r5
 80033a8:	428b      	cmp	r3, r1
 80033aa:	bf01      	itttt	eq
 80033ac:	6819      	ldreq	r1, [r3, #0]
 80033ae:	685b      	ldreq	r3, [r3, #4]
 80033b0:	1949      	addeq	r1, r1, r5
 80033b2:	6021      	streq	r1, [r4, #0]
 80033b4:	e7ed      	b.n	8003392 <_free_r+0x22>
 80033b6:	461a      	mov	r2, r3
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	b10b      	cbz	r3, 80033c0 <_free_r+0x50>
 80033bc:	42a3      	cmp	r3, r4
 80033be:	d9fa      	bls.n	80033b6 <_free_r+0x46>
 80033c0:	6811      	ldr	r1, [r2, #0]
 80033c2:	1855      	adds	r5, r2, r1
 80033c4:	42a5      	cmp	r5, r4
 80033c6:	d10b      	bne.n	80033e0 <_free_r+0x70>
 80033c8:	6824      	ldr	r4, [r4, #0]
 80033ca:	4421      	add	r1, r4
 80033cc:	1854      	adds	r4, r2, r1
 80033ce:	42a3      	cmp	r3, r4
 80033d0:	6011      	str	r1, [r2, #0]
 80033d2:	d1e0      	bne.n	8003396 <_free_r+0x26>
 80033d4:	681c      	ldr	r4, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	6053      	str	r3, [r2, #4]
 80033da:	440c      	add	r4, r1
 80033dc:	6014      	str	r4, [r2, #0]
 80033de:	e7da      	b.n	8003396 <_free_r+0x26>
 80033e0:	d902      	bls.n	80033e8 <_free_r+0x78>
 80033e2:	230c      	movs	r3, #12
 80033e4:	6003      	str	r3, [r0, #0]
 80033e6:	e7d6      	b.n	8003396 <_free_r+0x26>
 80033e8:	6825      	ldr	r5, [r4, #0]
 80033ea:	1961      	adds	r1, r4, r5
 80033ec:	428b      	cmp	r3, r1
 80033ee:	bf04      	itt	eq
 80033f0:	6819      	ldreq	r1, [r3, #0]
 80033f2:	685b      	ldreq	r3, [r3, #4]
 80033f4:	6063      	str	r3, [r4, #4]
 80033f6:	bf04      	itt	eq
 80033f8:	1949      	addeq	r1, r1, r5
 80033fa:	6021      	streq	r1, [r4, #0]
 80033fc:	6054      	str	r4, [r2, #4]
 80033fe:	e7ca      	b.n	8003396 <_free_r+0x26>
 8003400:	b003      	add	sp, #12
 8003402:	bd30      	pop	{r4, r5, pc}
 8003404:	20000258 	.word	0x20000258

08003408 <sbrk_aligned>:
 8003408:	b570      	push	{r4, r5, r6, lr}
 800340a:	4e0e      	ldr	r6, [pc, #56]	; (8003444 <sbrk_aligned+0x3c>)
 800340c:	460c      	mov	r4, r1
 800340e:	6831      	ldr	r1, [r6, #0]
 8003410:	4605      	mov	r5, r0
 8003412:	b911      	cbnz	r1, 800341a <sbrk_aligned+0x12>
 8003414:	f000 fcbc 	bl	8003d90 <_sbrk_r>
 8003418:	6030      	str	r0, [r6, #0]
 800341a:	4621      	mov	r1, r4
 800341c:	4628      	mov	r0, r5
 800341e:	f000 fcb7 	bl	8003d90 <_sbrk_r>
 8003422:	1c43      	adds	r3, r0, #1
 8003424:	d00a      	beq.n	800343c <sbrk_aligned+0x34>
 8003426:	1cc4      	adds	r4, r0, #3
 8003428:	f024 0403 	bic.w	r4, r4, #3
 800342c:	42a0      	cmp	r0, r4
 800342e:	d007      	beq.n	8003440 <sbrk_aligned+0x38>
 8003430:	1a21      	subs	r1, r4, r0
 8003432:	4628      	mov	r0, r5
 8003434:	f000 fcac 	bl	8003d90 <_sbrk_r>
 8003438:	3001      	adds	r0, #1
 800343a:	d101      	bne.n	8003440 <sbrk_aligned+0x38>
 800343c:	f04f 34ff 	mov.w	r4, #4294967295
 8003440:	4620      	mov	r0, r4
 8003442:	bd70      	pop	{r4, r5, r6, pc}
 8003444:	2000025c 	.word	0x2000025c

08003448 <_malloc_r>:
 8003448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800344c:	1ccd      	adds	r5, r1, #3
 800344e:	f025 0503 	bic.w	r5, r5, #3
 8003452:	3508      	adds	r5, #8
 8003454:	2d0c      	cmp	r5, #12
 8003456:	bf38      	it	cc
 8003458:	250c      	movcc	r5, #12
 800345a:	2d00      	cmp	r5, #0
 800345c:	4607      	mov	r7, r0
 800345e:	db01      	blt.n	8003464 <_malloc_r+0x1c>
 8003460:	42a9      	cmp	r1, r5
 8003462:	d905      	bls.n	8003470 <_malloc_r+0x28>
 8003464:	230c      	movs	r3, #12
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	2600      	movs	r6, #0
 800346a:	4630      	mov	r0, r6
 800346c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003470:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003544 <_malloc_r+0xfc>
 8003474:	f000 f868 	bl	8003548 <__malloc_lock>
 8003478:	f8d8 3000 	ldr.w	r3, [r8]
 800347c:	461c      	mov	r4, r3
 800347e:	bb5c      	cbnz	r4, 80034d8 <_malloc_r+0x90>
 8003480:	4629      	mov	r1, r5
 8003482:	4638      	mov	r0, r7
 8003484:	f7ff ffc0 	bl	8003408 <sbrk_aligned>
 8003488:	1c43      	adds	r3, r0, #1
 800348a:	4604      	mov	r4, r0
 800348c:	d155      	bne.n	800353a <_malloc_r+0xf2>
 800348e:	f8d8 4000 	ldr.w	r4, [r8]
 8003492:	4626      	mov	r6, r4
 8003494:	2e00      	cmp	r6, #0
 8003496:	d145      	bne.n	8003524 <_malloc_r+0xdc>
 8003498:	2c00      	cmp	r4, #0
 800349a:	d048      	beq.n	800352e <_malloc_r+0xe6>
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	4631      	mov	r1, r6
 80034a0:	4638      	mov	r0, r7
 80034a2:	eb04 0903 	add.w	r9, r4, r3
 80034a6:	f000 fc73 	bl	8003d90 <_sbrk_r>
 80034aa:	4581      	cmp	r9, r0
 80034ac:	d13f      	bne.n	800352e <_malloc_r+0xe6>
 80034ae:	6821      	ldr	r1, [r4, #0]
 80034b0:	1a6d      	subs	r5, r5, r1
 80034b2:	4629      	mov	r1, r5
 80034b4:	4638      	mov	r0, r7
 80034b6:	f7ff ffa7 	bl	8003408 <sbrk_aligned>
 80034ba:	3001      	adds	r0, #1
 80034bc:	d037      	beq.n	800352e <_malloc_r+0xe6>
 80034be:	6823      	ldr	r3, [r4, #0]
 80034c0:	442b      	add	r3, r5
 80034c2:	6023      	str	r3, [r4, #0]
 80034c4:	f8d8 3000 	ldr.w	r3, [r8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d038      	beq.n	800353e <_malloc_r+0xf6>
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	42a2      	cmp	r2, r4
 80034d0:	d12b      	bne.n	800352a <_malloc_r+0xe2>
 80034d2:	2200      	movs	r2, #0
 80034d4:	605a      	str	r2, [r3, #4]
 80034d6:	e00f      	b.n	80034f8 <_malloc_r+0xb0>
 80034d8:	6822      	ldr	r2, [r4, #0]
 80034da:	1b52      	subs	r2, r2, r5
 80034dc:	d41f      	bmi.n	800351e <_malloc_r+0xd6>
 80034de:	2a0b      	cmp	r2, #11
 80034e0:	d917      	bls.n	8003512 <_malloc_r+0xca>
 80034e2:	1961      	adds	r1, r4, r5
 80034e4:	42a3      	cmp	r3, r4
 80034e6:	6025      	str	r5, [r4, #0]
 80034e8:	bf18      	it	ne
 80034ea:	6059      	strne	r1, [r3, #4]
 80034ec:	6863      	ldr	r3, [r4, #4]
 80034ee:	bf08      	it	eq
 80034f0:	f8c8 1000 	streq.w	r1, [r8]
 80034f4:	5162      	str	r2, [r4, r5]
 80034f6:	604b      	str	r3, [r1, #4]
 80034f8:	4638      	mov	r0, r7
 80034fa:	f104 060b 	add.w	r6, r4, #11
 80034fe:	f000 f829 	bl	8003554 <__malloc_unlock>
 8003502:	f026 0607 	bic.w	r6, r6, #7
 8003506:	1d23      	adds	r3, r4, #4
 8003508:	1af2      	subs	r2, r6, r3
 800350a:	d0ae      	beq.n	800346a <_malloc_r+0x22>
 800350c:	1b9b      	subs	r3, r3, r6
 800350e:	50a3      	str	r3, [r4, r2]
 8003510:	e7ab      	b.n	800346a <_malloc_r+0x22>
 8003512:	42a3      	cmp	r3, r4
 8003514:	6862      	ldr	r2, [r4, #4]
 8003516:	d1dd      	bne.n	80034d4 <_malloc_r+0x8c>
 8003518:	f8c8 2000 	str.w	r2, [r8]
 800351c:	e7ec      	b.n	80034f8 <_malloc_r+0xb0>
 800351e:	4623      	mov	r3, r4
 8003520:	6864      	ldr	r4, [r4, #4]
 8003522:	e7ac      	b.n	800347e <_malloc_r+0x36>
 8003524:	4634      	mov	r4, r6
 8003526:	6876      	ldr	r6, [r6, #4]
 8003528:	e7b4      	b.n	8003494 <_malloc_r+0x4c>
 800352a:	4613      	mov	r3, r2
 800352c:	e7cc      	b.n	80034c8 <_malloc_r+0x80>
 800352e:	230c      	movs	r3, #12
 8003530:	603b      	str	r3, [r7, #0]
 8003532:	4638      	mov	r0, r7
 8003534:	f000 f80e 	bl	8003554 <__malloc_unlock>
 8003538:	e797      	b.n	800346a <_malloc_r+0x22>
 800353a:	6025      	str	r5, [r4, #0]
 800353c:	e7dc      	b.n	80034f8 <_malloc_r+0xb0>
 800353e:	605b      	str	r3, [r3, #4]
 8003540:	deff      	udf	#255	; 0xff
 8003542:	bf00      	nop
 8003544:	20000258 	.word	0x20000258

08003548 <__malloc_lock>:
 8003548:	4801      	ldr	r0, [pc, #4]	; (8003550 <__malloc_lock+0x8>)
 800354a:	f7ff bf0f 	b.w	800336c <__retarget_lock_acquire_recursive>
 800354e:	bf00      	nop
 8003550:	20000254 	.word	0x20000254

08003554 <__malloc_unlock>:
 8003554:	4801      	ldr	r0, [pc, #4]	; (800355c <__malloc_unlock+0x8>)
 8003556:	f7ff bf0a 	b.w	800336e <__retarget_lock_release_recursive>
 800355a:	bf00      	nop
 800355c:	20000254 	.word	0x20000254

08003560 <__sfputc_r>:
 8003560:	6893      	ldr	r3, [r2, #8]
 8003562:	3b01      	subs	r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	b410      	push	{r4}
 8003568:	6093      	str	r3, [r2, #8]
 800356a:	da08      	bge.n	800357e <__sfputc_r+0x1e>
 800356c:	6994      	ldr	r4, [r2, #24]
 800356e:	42a3      	cmp	r3, r4
 8003570:	db01      	blt.n	8003576 <__sfputc_r+0x16>
 8003572:	290a      	cmp	r1, #10
 8003574:	d103      	bne.n	800357e <__sfputc_r+0x1e>
 8003576:	f85d 4b04 	ldr.w	r4, [sp], #4
 800357a:	f000 bb73 	b.w	8003c64 <__swbuf_r>
 800357e:	6813      	ldr	r3, [r2, #0]
 8003580:	1c58      	adds	r0, r3, #1
 8003582:	6010      	str	r0, [r2, #0]
 8003584:	7019      	strb	r1, [r3, #0]
 8003586:	4608      	mov	r0, r1
 8003588:	f85d 4b04 	ldr.w	r4, [sp], #4
 800358c:	4770      	bx	lr

0800358e <__sfputs_r>:
 800358e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003590:	4606      	mov	r6, r0
 8003592:	460f      	mov	r7, r1
 8003594:	4614      	mov	r4, r2
 8003596:	18d5      	adds	r5, r2, r3
 8003598:	42ac      	cmp	r4, r5
 800359a:	d101      	bne.n	80035a0 <__sfputs_r+0x12>
 800359c:	2000      	movs	r0, #0
 800359e:	e007      	b.n	80035b0 <__sfputs_r+0x22>
 80035a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035a4:	463a      	mov	r2, r7
 80035a6:	4630      	mov	r0, r6
 80035a8:	f7ff ffda 	bl	8003560 <__sfputc_r>
 80035ac:	1c43      	adds	r3, r0, #1
 80035ae:	d1f3      	bne.n	8003598 <__sfputs_r+0xa>
 80035b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080035b4 <_vfiprintf_r>:
 80035b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035b8:	460d      	mov	r5, r1
 80035ba:	b09d      	sub	sp, #116	; 0x74
 80035bc:	4614      	mov	r4, r2
 80035be:	4698      	mov	r8, r3
 80035c0:	4606      	mov	r6, r0
 80035c2:	b118      	cbz	r0, 80035cc <_vfiprintf_r+0x18>
 80035c4:	6a03      	ldr	r3, [r0, #32]
 80035c6:	b90b      	cbnz	r3, 80035cc <_vfiprintf_r+0x18>
 80035c8:	f7ff fdcc 	bl	8003164 <__sinit>
 80035cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80035ce:	07d9      	lsls	r1, r3, #31
 80035d0:	d405      	bmi.n	80035de <_vfiprintf_r+0x2a>
 80035d2:	89ab      	ldrh	r3, [r5, #12]
 80035d4:	059a      	lsls	r2, r3, #22
 80035d6:	d402      	bmi.n	80035de <_vfiprintf_r+0x2a>
 80035d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80035da:	f7ff fec7 	bl	800336c <__retarget_lock_acquire_recursive>
 80035de:	89ab      	ldrh	r3, [r5, #12]
 80035e0:	071b      	lsls	r3, r3, #28
 80035e2:	d501      	bpl.n	80035e8 <_vfiprintf_r+0x34>
 80035e4:	692b      	ldr	r3, [r5, #16]
 80035e6:	b99b      	cbnz	r3, 8003610 <_vfiprintf_r+0x5c>
 80035e8:	4629      	mov	r1, r5
 80035ea:	4630      	mov	r0, r6
 80035ec:	f000 fb78 	bl	8003ce0 <__swsetup_r>
 80035f0:	b170      	cbz	r0, 8003610 <_vfiprintf_r+0x5c>
 80035f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80035f4:	07dc      	lsls	r4, r3, #31
 80035f6:	d504      	bpl.n	8003602 <_vfiprintf_r+0x4e>
 80035f8:	f04f 30ff 	mov.w	r0, #4294967295
 80035fc:	b01d      	add	sp, #116	; 0x74
 80035fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003602:	89ab      	ldrh	r3, [r5, #12]
 8003604:	0598      	lsls	r0, r3, #22
 8003606:	d4f7      	bmi.n	80035f8 <_vfiprintf_r+0x44>
 8003608:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800360a:	f7ff feb0 	bl	800336e <__retarget_lock_release_recursive>
 800360e:	e7f3      	b.n	80035f8 <_vfiprintf_r+0x44>
 8003610:	2300      	movs	r3, #0
 8003612:	9309      	str	r3, [sp, #36]	; 0x24
 8003614:	2320      	movs	r3, #32
 8003616:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800361a:	f8cd 800c 	str.w	r8, [sp, #12]
 800361e:	2330      	movs	r3, #48	; 0x30
 8003620:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80037d4 <_vfiprintf_r+0x220>
 8003624:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003628:	f04f 0901 	mov.w	r9, #1
 800362c:	4623      	mov	r3, r4
 800362e:	469a      	mov	sl, r3
 8003630:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003634:	b10a      	cbz	r2, 800363a <_vfiprintf_r+0x86>
 8003636:	2a25      	cmp	r2, #37	; 0x25
 8003638:	d1f9      	bne.n	800362e <_vfiprintf_r+0x7a>
 800363a:	ebba 0b04 	subs.w	fp, sl, r4
 800363e:	d00b      	beq.n	8003658 <_vfiprintf_r+0xa4>
 8003640:	465b      	mov	r3, fp
 8003642:	4622      	mov	r2, r4
 8003644:	4629      	mov	r1, r5
 8003646:	4630      	mov	r0, r6
 8003648:	f7ff ffa1 	bl	800358e <__sfputs_r>
 800364c:	3001      	adds	r0, #1
 800364e:	f000 80a9 	beq.w	80037a4 <_vfiprintf_r+0x1f0>
 8003652:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003654:	445a      	add	r2, fp
 8003656:	9209      	str	r2, [sp, #36]	; 0x24
 8003658:	f89a 3000 	ldrb.w	r3, [sl]
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80a1 	beq.w	80037a4 <_vfiprintf_r+0x1f0>
 8003662:	2300      	movs	r3, #0
 8003664:	f04f 32ff 	mov.w	r2, #4294967295
 8003668:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800366c:	f10a 0a01 	add.w	sl, sl, #1
 8003670:	9304      	str	r3, [sp, #16]
 8003672:	9307      	str	r3, [sp, #28]
 8003674:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003678:	931a      	str	r3, [sp, #104]	; 0x68
 800367a:	4654      	mov	r4, sl
 800367c:	2205      	movs	r2, #5
 800367e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003682:	4854      	ldr	r0, [pc, #336]	; (80037d4 <_vfiprintf_r+0x220>)
 8003684:	f7fc fdac 	bl	80001e0 <memchr>
 8003688:	9a04      	ldr	r2, [sp, #16]
 800368a:	b9d8      	cbnz	r0, 80036c4 <_vfiprintf_r+0x110>
 800368c:	06d1      	lsls	r1, r2, #27
 800368e:	bf44      	itt	mi
 8003690:	2320      	movmi	r3, #32
 8003692:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003696:	0713      	lsls	r3, r2, #28
 8003698:	bf44      	itt	mi
 800369a:	232b      	movmi	r3, #43	; 0x2b
 800369c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036a0:	f89a 3000 	ldrb.w	r3, [sl]
 80036a4:	2b2a      	cmp	r3, #42	; 0x2a
 80036a6:	d015      	beq.n	80036d4 <_vfiprintf_r+0x120>
 80036a8:	9a07      	ldr	r2, [sp, #28]
 80036aa:	4654      	mov	r4, sl
 80036ac:	2000      	movs	r0, #0
 80036ae:	f04f 0c0a 	mov.w	ip, #10
 80036b2:	4621      	mov	r1, r4
 80036b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036b8:	3b30      	subs	r3, #48	; 0x30
 80036ba:	2b09      	cmp	r3, #9
 80036bc:	d94d      	bls.n	800375a <_vfiprintf_r+0x1a6>
 80036be:	b1b0      	cbz	r0, 80036ee <_vfiprintf_r+0x13a>
 80036c0:	9207      	str	r2, [sp, #28]
 80036c2:	e014      	b.n	80036ee <_vfiprintf_r+0x13a>
 80036c4:	eba0 0308 	sub.w	r3, r0, r8
 80036c8:	fa09 f303 	lsl.w	r3, r9, r3
 80036cc:	4313      	orrs	r3, r2
 80036ce:	9304      	str	r3, [sp, #16]
 80036d0:	46a2      	mov	sl, r4
 80036d2:	e7d2      	b.n	800367a <_vfiprintf_r+0xc6>
 80036d4:	9b03      	ldr	r3, [sp, #12]
 80036d6:	1d19      	adds	r1, r3, #4
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	9103      	str	r1, [sp, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	bfbb      	ittet	lt
 80036e0:	425b      	neglt	r3, r3
 80036e2:	f042 0202 	orrlt.w	r2, r2, #2
 80036e6:	9307      	strge	r3, [sp, #28]
 80036e8:	9307      	strlt	r3, [sp, #28]
 80036ea:	bfb8      	it	lt
 80036ec:	9204      	strlt	r2, [sp, #16]
 80036ee:	7823      	ldrb	r3, [r4, #0]
 80036f0:	2b2e      	cmp	r3, #46	; 0x2e
 80036f2:	d10c      	bne.n	800370e <_vfiprintf_r+0x15a>
 80036f4:	7863      	ldrb	r3, [r4, #1]
 80036f6:	2b2a      	cmp	r3, #42	; 0x2a
 80036f8:	d134      	bne.n	8003764 <_vfiprintf_r+0x1b0>
 80036fa:	9b03      	ldr	r3, [sp, #12]
 80036fc:	1d1a      	adds	r2, r3, #4
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	9203      	str	r2, [sp, #12]
 8003702:	2b00      	cmp	r3, #0
 8003704:	bfb8      	it	lt
 8003706:	f04f 33ff 	movlt.w	r3, #4294967295
 800370a:	3402      	adds	r4, #2
 800370c:	9305      	str	r3, [sp, #20]
 800370e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80037e4 <_vfiprintf_r+0x230>
 8003712:	7821      	ldrb	r1, [r4, #0]
 8003714:	2203      	movs	r2, #3
 8003716:	4650      	mov	r0, sl
 8003718:	f7fc fd62 	bl	80001e0 <memchr>
 800371c:	b138      	cbz	r0, 800372e <_vfiprintf_r+0x17a>
 800371e:	9b04      	ldr	r3, [sp, #16]
 8003720:	eba0 000a 	sub.w	r0, r0, sl
 8003724:	2240      	movs	r2, #64	; 0x40
 8003726:	4082      	lsls	r2, r0
 8003728:	4313      	orrs	r3, r2
 800372a:	3401      	adds	r4, #1
 800372c:	9304      	str	r3, [sp, #16]
 800372e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003732:	4829      	ldr	r0, [pc, #164]	; (80037d8 <_vfiprintf_r+0x224>)
 8003734:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003738:	2206      	movs	r2, #6
 800373a:	f7fc fd51 	bl	80001e0 <memchr>
 800373e:	2800      	cmp	r0, #0
 8003740:	d03f      	beq.n	80037c2 <_vfiprintf_r+0x20e>
 8003742:	4b26      	ldr	r3, [pc, #152]	; (80037dc <_vfiprintf_r+0x228>)
 8003744:	bb1b      	cbnz	r3, 800378e <_vfiprintf_r+0x1da>
 8003746:	9b03      	ldr	r3, [sp, #12]
 8003748:	3307      	adds	r3, #7
 800374a:	f023 0307 	bic.w	r3, r3, #7
 800374e:	3308      	adds	r3, #8
 8003750:	9303      	str	r3, [sp, #12]
 8003752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003754:	443b      	add	r3, r7
 8003756:	9309      	str	r3, [sp, #36]	; 0x24
 8003758:	e768      	b.n	800362c <_vfiprintf_r+0x78>
 800375a:	fb0c 3202 	mla	r2, ip, r2, r3
 800375e:	460c      	mov	r4, r1
 8003760:	2001      	movs	r0, #1
 8003762:	e7a6      	b.n	80036b2 <_vfiprintf_r+0xfe>
 8003764:	2300      	movs	r3, #0
 8003766:	3401      	adds	r4, #1
 8003768:	9305      	str	r3, [sp, #20]
 800376a:	4619      	mov	r1, r3
 800376c:	f04f 0c0a 	mov.w	ip, #10
 8003770:	4620      	mov	r0, r4
 8003772:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003776:	3a30      	subs	r2, #48	; 0x30
 8003778:	2a09      	cmp	r2, #9
 800377a:	d903      	bls.n	8003784 <_vfiprintf_r+0x1d0>
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0c6      	beq.n	800370e <_vfiprintf_r+0x15a>
 8003780:	9105      	str	r1, [sp, #20]
 8003782:	e7c4      	b.n	800370e <_vfiprintf_r+0x15a>
 8003784:	fb0c 2101 	mla	r1, ip, r1, r2
 8003788:	4604      	mov	r4, r0
 800378a:	2301      	movs	r3, #1
 800378c:	e7f0      	b.n	8003770 <_vfiprintf_r+0x1bc>
 800378e:	ab03      	add	r3, sp, #12
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	462a      	mov	r2, r5
 8003794:	4b12      	ldr	r3, [pc, #72]	; (80037e0 <_vfiprintf_r+0x22c>)
 8003796:	a904      	add	r1, sp, #16
 8003798:	4630      	mov	r0, r6
 800379a:	f3af 8000 	nop.w
 800379e:	4607      	mov	r7, r0
 80037a0:	1c78      	adds	r0, r7, #1
 80037a2:	d1d6      	bne.n	8003752 <_vfiprintf_r+0x19e>
 80037a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80037a6:	07d9      	lsls	r1, r3, #31
 80037a8:	d405      	bmi.n	80037b6 <_vfiprintf_r+0x202>
 80037aa:	89ab      	ldrh	r3, [r5, #12]
 80037ac:	059a      	lsls	r2, r3, #22
 80037ae:	d402      	bmi.n	80037b6 <_vfiprintf_r+0x202>
 80037b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037b2:	f7ff fddc 	bl	800336e <__retarget_lock_release_recursive>
 80037b6:	89ab      	ldrh	r3, [r5, #12]
 80037b8:	065b      	lsls	r3, r3, #25
 80037ba:	f53f af1d 	bmi.w	80035f8 <_vfiprintf_r+0x44>
 80037be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037c0:	e71c      	b.n	80035fc <_vfiprintf_r+0x48>
 80037c2:	ab03      	add	r3, sp, #12
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	462a      	mov	r2, r5
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <_vfiprintf_r+0x22c>)
 80037ca:	a904      	add	r1, sp, #16
 80037cc:	4630      	mov	r0, r6
 80037ce:	f000 f879 	bl	80038c4 <_printf_i>
 80037d2:	e7e4      	b.n	800379e <_vfiprintf_r+0x1ea>
 80037d4:	08003f24 	.word	0x08003f24
 80037d8:	08003f2e 	.word	0x08003f2e
 80037dc:	00000000 	.word	0x00000000
 80037e0:	0800358f 	.word	0x0800358f
 80037e4:	08003f2a 	.word	0x08003f2a

080037e8 <_printf_common>:
 80037e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037ec:	4616      	mov	r6, r2
 80037ee:	4699      	mov	r9, r3
 80037f0:	688a      	ldr	r2, [r1, #8]
 80037f2:	690b      	ldr	r3, [r1, #16]
 80037f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037f8:	4293      	cmp	r3, r2
 80037fa:	bfb8      	it	lt
 80037fc:	4613      	movlt	r3, r2
 80037fe:	6033      	str	r3, [r6, #0]
 8003800:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003804:	4607      	mov	r7, r0
 8003806:	460c      	mov	r4, r1
 8003808:	b10a      	cbz	r2, 800380e <_printf_common+0x26>
 800380a:	3301      	adds	r3, #1
 800380c:	6033      	str	r3, [r6, #0]
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	0699      	lsls	r1, r3, #26
 8003812:	bf42      	ittt	mi
 8003814:	6833      	ldrmi	r3, [r6, #0]
 8003816:	3302      	addmi	r3, #2
 8003818:	6033      	strmi	r3, [r6, #0]
 800381a:	6825      	ldr	r5, [r4, #0]
 800381c:	f015 0506 	ands.w	r5, r5, #6
 8003820:	d106      	bne.n	8003830 <_printf_common+0x48>
 8003822:	f104 0a19 	add.w	sl, r4, #25
 8003826:	68e3      	ldr	r3, [r4, #12]
 8003828:	6832      	ldr	r2, [r6, #0]
 800382a:	1a9b      	subs	r3, r3, r2
 800382c:	42ab      	cmp	r3, r5
 800382e:	dc26      	bgt.n	800387e <_printf_common+0x96>
 8003830:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003834:	1e13      	subs	r3, r2, #0
 8003836:	6822      	ldr	r2, [r4, #0]
 8003838:	bf18      	it	ne
 800383a:	2301      	movne	r3, #1
 800383c:	0692      	lsls	r2, r2, #26
 800383e:	d42b      	bmi.n	8003898 <_printf_common+0xb0>
 8003840:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003844:	4649      	mov	r1, r9
 8003846:	4638      	mov	r0, r7
 8003848:	47c0      	blx	r8
 800384a:	3001      	adds	r0, #1
 800384c:	d01e      	beq.n	800388c <_printf_common+0xa4>
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	6922      	ldr	r2, [r4, #16]
 8003852:	f003 0306 	and.w	r3, r3, #6
 8003856:	2b04      	cmp	r3, #4
 8003858:	bf02      	ittt	eq
 800385a:	68e5      	ldreq	r5, [r4, #12]
 800385c:	6833      	ldreq	r3, [r6, #0]
 800385e:	1aed      	subeq	r5, r5, r3
 8003860:	68a3      	ldr	r3, [r4, #8]
 8003862:	bf0c      	ite	eq
 8003864:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003868:	2500      	movne	r5, #0
 800386a:	4293      	cmp	r3, r2
 800386c:	bfc4      	itt	gt
 800386e:	1a9b      	subgt	r3, r3, r2
 8003870:	18ed      	addgt	r5, r5, r3
 8003872:	2600      	movs	r6, #0
 8003874:	341a      	adds	r4, #26
 8003876:	42b5      	cmp	r5, r6
 8003878:	d11a      	bne.n	80038b0 <_printf_common+0xc8>
 800387a:	2000      	movs	r0, #0
 800387c:	e008      	b.n	8003890 <_printf_common+0xa8>
 800387e:	2301      	movs	r3, #1
 8003880:	4652      	mov	r2, sl
 8003882:	4649      	mov	r1, r9
 8003884:	4638      	mov	r0, r7
 8003886:	47c0      	blx	r8
 8003888:	3001      	adds	r0, #1
 800388a:	d103      	bne.n	8003894 <_printf_common+0xac>
 800388c:	f04f 30ff 	mov.w	r0, #4294967295
 8003890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003894:	3501      	adds	r5, #1
 8003896:	e7c6      	b.n	8003826 <_printf_common+0x3e>
 8003898:	18e1      	adds	r1, r4, r3
 800389a:	1c5a      	adds	r2, r3, #1
 800389c:	2030      	movs	r0, #48	; 0x30
 800389e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038a2:	4422      	add	r2, r4
 80038a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038ac:	3302      	adds	r3, #2
 80038ae:	e7c7      	b.n	8003840 <_printf_common+0x58>
 80038b0:	2301      	movs	r3, #1
 80038b2:	4622      	mov	r2, r4
 80038b4:	4649      	mov	r1, r9
 80038b6:	4638      	mov	r0, r7
 80038b8:	47c0      	blx	r8
 80038ba:	3001      	adds	r0, #1
 80038bc:	d0e6      	beq.n	800388c <_printf_common+0xa4>
 80038be:	3601      	adds	r6, #1
 80038c0:	e7d9      	b.n	8003876 <_printf_common+0x8e>
	...

080038c4 <_printf_i>:
 80038c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038c8:	7e0f      	ldrb	r7, [r1, #24]
 80038ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80038cc:	2f78      	cmp	r7, #120	; 0x78
 80038ce:	4691      	mov	r9, r2
 80038d0:	4680      	mov	r8, r0
 80038d2:	460c      	mov	r4, r1
 80038d4:	469a      	mov	sl, r3
 80038d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80038da:	d807      	bhi.n	80038ec <_printf_i+0x28>
 80038dc:	2f62      	cmp	r7, #98	; 0x62
 80038de:	d80a      	bhi.n	80038f6 <_printf_i+0x32>
 80038e0:	2f00      	cmp	r7, #0
 80038e2:	f000 80d4 	beq.w	8003a8e <_printf_i+0x1ca>
 80038e6:	2f58      	cmp	r7, #88	; 0x58
 80038e8:	f000 80c0 	beq.w	8003a6c <_printf_i+0x1a8>
 80038ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038f4:	e03a      	b.n	800396c <_printf_i+0xa8>
 80038f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038fa:	2b15      	cmp	r3, #21
 80038fc:	d8f6      	bhi.n	80038ec <_printf_i+0x28>
 80038fe:	a101      	add	r1, pc, #4	; (adr r1, 8003904 <_printf_i+0x40>)
 8003900:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003904:	0800395d 	.word	0x0800395d
 8003908:	08003971 	.word	0x08003971
 800390c:	080038ed 	.word	0x080038ed
 8003910:	080038ed 	.word	0x080038ed
 8003914:	080038ed 	.word	0x080038ed
 8003918:	080038ed 	.word	0x080038ed
 800391c:	08003971 	.word	0x08003971
 8003920:	080038ed 	.word	0x080038ed
 8003924:	080038ed 	.word	0x080038ed
 8003928:	080038ed 	.word	0x080038ed
 800392c:	080038ed 	.word	0x080038ed
 8003930:	08003a75 	.word	0x08003a75
 8003934:	0800399d 	.word	0x0800399d
 8003938:	08003a2f 	.word	0x08003a2f
 800393c:	080038ed 	.word	0x080038ed
 8003940:	080038ed 	.word	0x080038ed
 8003944:	08003a97 	.word	0x08003a97
 8003948:	080038ed 	.word	0x080038ed
 800394c:	0800399d 	.word	0x0800399d
 8003950:	080038ed 	.word	0x080038ed
 8003954:	080038ed 	.word	0x080038ed
 8003958:	08003a37 	.word	0x08003a37
 800395c:	682b      	ldr	r3, [r5, #0]
 800395e:	1d1a      	adds	r2, r3, #4
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	602a      	str	r2, [r5, #0]
 8003964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800396c:	2301      	movs	r3, #1
 800396e:	e09f      	b.n	8003ab0 <_printf_i+0x1ec>
 8003970:	6820      	ldr	r0, [r4, #0]
 8003972:	682b      	ldr	r3, [r5, #0]
 8003974:	0607      	lsls	r7, r0, #24
 8003976:	f103 0104 	add.w	r1, r3, #4
 800397a:	6029      	str	r1, [r5, #0]
 800397c:	d501      	bpl.n	8003982 <_printf_i+0xbe>
 800397e:	681e      	ldr	r6, [r3, #0]
 8003980:	e003      	b.n	800398a <_printf_i+0xc6>
 8003982:	0646      	lsls	r6, r0, #25
 8003984:	d5fb      	bpl.n	800397e <_printf_i+0xba>
 8003986:	f9b3 6000 	ldrsh.w	r6, [r3]
 800398a:	2e00      	cmp	r6, #0
 800398c:	da03      	bge.n	8003996 <_printf_i+0xd2>
 800398e:	232d      	movs	r3, #45	; 0x2d
 8003990:	4276      	negs	r6, r6
 8003992:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003996:	485a      	ldr	r0, [pc, #360]	; (8003b00 <_printf_i+0x23c>)
 8003998:	230a      	movs	r3, #10
 800399a:	e012      	b.n	80039c2 <_printf_i+0xfe>
 800399c:	682b      	ldr	r3, [r5, #0]
 800399e:	6820      	ldr	r0, [r4, #0]
 80039a0:	1d19      	adds	r1, r3, #4
 80039a2:	6029      	str	r1, [r5, #0]
 80039a4:	0605      	lsls	r5, r0, #24
 80039a6:	d501      	bpl.n	80039ac <_printf_i+0xe8>
 80039a8:	681e      	ldr	r6, [r3, #0]
 80039aa:	e002      	b.n	80039b2 <_printf_i+0xee>
 80039ac:	0641      	lsls	r1, r0, #25
 80039ae:	d5fb      	bpl.n	80039a8 <_printf_i+0xe4>
 80039b0:	881e      	ldrh	r6, [r3, #0]
 80039b2:	4853      	ldr	r0, [pc, #332]	; (8003b00 <_printf_i+0x23c>)
 80039b4:	2f6f      	cmp	r7, #111	; 0x6f
 80039b6:	bf0c      	ite	eq
 80039b8:	2308      	moveq	r3, #8
 80039ba:	230a      	movne	r3, #10
 80039bc:	2100      	movs	r1, #0
 80039be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039c2:	6865      	ldr	r5, [r4, #4]
 80039c4:	60a5      	str	r5, [r4, #8]
 80039c6:	2d00      	cmp	r5, #0
 80039c8:	bfa2      	ittt	ge
 80039ca:	6821      	ldrge	r1, [r4, #0]
 80039cc:	f021 0104 	bicge.w	r1, r1, #4
 80039d0:	6021      	strge	r1, [r4, #0]
 80039d2:	b90e      	cbnz	r6, 80039d8 <_printf_i+0x114>
 80039d4:	2d00      	cmp	r5, #0
 80039d6:	d04b      	beq.n	8003a70 <_printf_i+0x1ac>
 80039d8:	4615      	mov	r5, r2
 80039da:	fbb6 f1f3 	udiv	r1, r6, r3
 80039de:	fb03 6711 	mls	r7, r3, r1, r6
 80039e2:	5dc7      	ldrb	r7, [r0, r7]
 80039e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80039e8:	4637      	mov	r7, r6
 80039ea:	42bb      	cmp	r3, r7
 80039ec:	460e      	mov	r6, r1
 80039ee:	d9f4      	bls.n	80039da <_printf_i+0x116>
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d10b      	bne.n	8003a0c <_printf_i+0x148>
 80039f4:	6823      	ldr	r3, [r4, #0]
 80039f6:	07de      	lsls	r6, r3, #31
 80039f8:	d508      	bpl.n	8003a0c <_printf_i+0x148>
 80039fa:	6923      	ldr	r3, [r4, #16]
 80039fc:	6861      	ldr	r1, [r4, #4]
 80039fe:	4299      	cmp	r1, r3
 8003a00:	bfde      	ittt	le
 8003a02:	2330      	movle	r3, #48	; 0x30
 8003a04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a0c:	1b52      	subs	r2, r2, r5
 8003a0e:	6122      	str	r2, [r4, #16]
 8003a10:	f8cd a000 	str.w	sl, [sp]
 8003a14:	464b      	mov	r3, r9
 8003a16:	aa03      	add	r2, sp, #12
 8003a18:	4621      	mov	r1, r4
 8003a1a:	4640      	mov	r0, r8
 8003a1c:	f7ff fee4 	bl	80037e8 <_printf_common>
 8003a20:	3001      	adds	r0, #1
 8003a22:	d14a      	bne.n	8003aba <_printf_i+0x1f6>
 8003a24:	f04f 30ff 	mov.w	r0, #4294967295
 8003a28:	b004      	add	sp, #16
 8003a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a2e:	6823      	ldr	r3, [r4, #0]
 8003a30:	f043 0320 	orr.w	r3, r3, #32
 8003a34:	6023      	str	r3, [r4, #0]
 8003a36:	4833      	ldr	r0, [pc, #204]	; (8003b04 <_printf_i+0x240>)
 8003a38:	2778      	movs	r7, #120	; 0x78
 8003a3a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	6829      	ldr	r1, [r5, #0]
 8003a42:	061f      	lsls	r7, r3, #24
 8003a44:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a48:	d402      	bmi.n	8003a50 <_printf_i+0x18c>
 8003a4a:	065f      	lsls	r7, r3, #25
 8003a4c:	bf48      	it	mi
 8003a4e:	b2b6      	uxthmi	r6, r6
 8003a50:	07df      	lsls	r7, r3, #31
 8003a52:	bf48      	it	mi
 8003a54:	f043 0320 	orrmi.w	r3, r3, #32
 8003a58:	6029      	str	r1, [r5, #0]
 8003a5a:	bf48      	it	mi
 8003a5c:	6023      	strmi	r3, [r4, #0]
 8003a5e:	b91e      	cbnz	r6, 8003a68 <_printf_i+0x1a4>
 8003a60:	6823      	ldr	r3, [r4, #0]
 8003a62:	f023 0320 	bic.w	r3, r3, #32
 8003a66:	6023      	str	r3, [r4, #0]
 8003a68:	2310      	movs	r3, #16
 8003a6a:	e7a7      	b.n	80039bc <_printf_i+0xf8>
 8003a6c:	4824      	ldr	r0, [pc, #144]	; (8003b00 <_printf_i+0x23c>)
 8003a6e:	e7e4      	b.n	8003a3a <_printf_i+0x176>
 8003a70:	4615      	mov	r5, r2
 8003a72:	e7bd      	b.n	80039f0 <_printf_i+0x12c>
 8003a74:	682b      	ldr	r3, [r5, #0]
 8003a76:	6826      	ldr	r6, [r4, #0]
 8003a78:	6961      	ldr	r1, [r4, #20]
 8003a7a:	1d18      	adds	r0, r3, #4
 8003a7c:	6028      	str	r0, [r5, #0]
 8003a7e:	0635      	lsls	r5, r6, #24
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	d501      	bpl.n	8003a88 <_printf_i+0x1c4>
 8003a84:	6019      	str	r1, [r3, #0]
 8003a86:	e002      	b.n	8003a8e <_printf_i+0x1ca>
 8003a88:	0670      	lsls	r0, r6, #25
 8003a8a:	d5fb      	bpl.n	8003a84 <_printf_i+0x1c0>
 8003a8c:	8019      	strh	r1, [r3, #0]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	6123      	str	r3, [r4, #16]
 8003a92:	4615      	mov	r5, r2
 8003a94:	e7bc      	b.n	8003a10 <_printf_i+0x14c>
 8003a96:	682b      	ldr	r3, [r5, #0]
 8003a98:	1d1a      	adds	r2, r3, #4
 8003a9a:	602a      	str	r2, [r5, #0]
 8003a9c:	681d      	ldr	r5, [r3, #0]
 8003a9e:	6862      	ldr	r2, [r4, #4]
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	4628      	mov	r0, r5
 8003aa4:	f7fc fb9c 	bl	80001e0 <memchr>
 8003aa8:	b108      	cbz	r0, 8003aae <_printf_i+0x1ea>
 8003aaa:	1b40      	subs	r0, r0, r5
 8003aac:	6060      	str	r0, [r4, #4]
 8003aae:	6863      	ldr	r3, [r4, #4]
 8003ab0:	6123      	str	r3, [r4, #16]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ab8:	e7aa      	b.n	8003a10 <_printf_i+0x14c>
 8003aba:	6923      	ldr	r3, [r4, #16]
 8003abc:	462a      	mov	r2, r5
 8003abe:	4649      	mov	r1, r9
 8003ac0:	4640      	mov	r0, r8
 8003ac2:	47d0      	blx	sl
 8003ac4:	3001      	adds	r0, #1
 8003ac6:	d0ad      	beq.n	8003a24 <_printf_i+0x160>
 8003ac8:	6823      	ldr	r3, [r4, #0]
 8003aca:	079b      	lsls	r3, r3, #30
 8003acc:	d413      	bmi.n	8003af6 <_printf_i+0x232>
 8003ace:	68e0      	ldr	r0, [r4, #12]
 8003ad0:	9b03      	ldr	r3, [sp, #12]
 8003ad2:	4298      	cmp	r0, r3
 8003ad4:	bfb8      	it	lt
 8003ad6:	4618      	movlt	r0, r3
 8003ad8:	e7a6      	b.n	8003a28 <_printf_i+0x164>
 8003ada:	2301      	movs	r3, #1
 8003adc:	4632      	mov	r2, r6
 8003ade:	4649      	mov	r1, r9
 8003ae0:	4640      	mov	r0, r8
 8003ae2:	47d0      	blx	sl
 8003ae4:	3001      	adds	r0, #1
 8003ae6:	d09d      	beq.n	8003a24 <_printf_i+0x160>
 8003ae8:	3501      	adds	r5, #1
 8003aea:	68e3      	ldr	r3, [r4, #12]
 8003aec:	9903      	ldr	r1, [sp, #12]
 8003aee:	1a5b      	subs	r3, r3, r1
 8003af0:	42ab      	cmp	r3, r5
 8003af2:	dcf2      	bgt.n	8003ada <_printf_i+0x216>
 8003af4:	e7eb      	b.n	8003ace <_printf_i+0x20a>
 8003af6:	2500      	movs	r5, #0
 8003af8:	f104 0619 	add.w	r6, r4, #25
 8003afc:	e7f5      	b.n	8003aea <_printf_i+0x226>
 8003afe:	bf00      	nop
 8003b00:	08003f35 	.word	0x08003f35
 8003b04:	08003f46 	.word	0x08003f46

08003b08 <__sflush_r>:
 8003b08:	898a      	ldrh	r2, [r1, #12]
 8003b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b0e:	4605      	mov	r5, r0
 8003b10:	0710      	lsls	r0, r2, #28
 8003b12:	460c      	mov	r4, r1
 8003b14:	d458      	bmi.n	8003bc8 <__sflush_r+0xc0>
 8003b16:	684b      	ldr	r3, [r1, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	dc05      	bgt.n	8003b28 <__sflush_r+0x20>
 8003b1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	dc02      	bgt.n	8003b28 <__sflush_r+0x20>
 8003b22:	2000      	movs	r0, #0
 8003b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b2a:	2e00      	cmp	r6, #0
 8003b2c:	d0f9      	beq.n	8003b22 <__sflush_r+0x1a>
 8003b2e:	2300      	movs	r3, #0
 8003b30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003b34:	682f      	ldr	r7, [r5, #0]
 8003b36:	6a21      	ldr	r1, [r4, #32]
 8003b38:	602b      	str	r3, [r5, #0]
 8003b3a:	d032      	beq.n	8003ba2 <__sflush_r+0x9a>
 8003b3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b3e:	89a3      	ldrh	r3, [r4, #12]
 8003b40:	075a      	lsls	r2, r3, #29
 8003b42:	d505      	bpl.n	8003b50 <__sflush_r+0x48>
 8003b44:	6863      	ldr	r3, [r4, #4]
 8003b46:	1ac0      	subs	r0, r0, r3
 8003b48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b4a:	b10b      	cbz	r3, 8003b50 <__sflush_r+0x48>
 8003b4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b4e:	1ac0      	subs	r0, r0, r3
 8003b50:	2300      	movs	r3, #0
 8003b52:	4602      	mov	r2, r0
 8003b54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b56:	6a21      	ldr	r1, [r4, #32]
 8003b58:	4628      	mov	r0, r5
 8003b5a:	47b0      	blx	r6
 8003b5c:	1c43      	adds	r3, r0, #1
 8003b5e:	89a3      	ldrh	r3, [r4, #12]
 8003b60:	d106      	bne.n	8003b70 <__sflush_r+0x68>
 8003b62:	6829      	ldr	r1, [r5, #0]
 8003b64:	291d      	cmp	r1, #29
 8003b66:	d82b      	bhi.n	8003bc0 <__sflush_r+0xb8>
 8003b68:	4a29      	ldr	r2, [pc, #164]	; (8003c10 <__sflush_r+0x108>)
 8003b6a:	410a      	asrs	r2, r1
 8003b6c:	07d6      	lsls	r6, r2, #31
 8003b6e:	d427      	bmi.n	8003bc0 <__sflush_r+0xb8>
 8003b70:	2200      	movs	r2, #0
 8003b72:	6062      	str	r2, [r4, #4]
 8003b74:	04d9      	lsls	r1, r3, #19
 8003b76:	6922      	ldr	r2, [r4, #16]
 8003b78:	6022      	str	r2, [r4, #0]
 8003b7a:	d504      	bpl.n	8003b86 <__sflush_r+0x7e>
 8003b7c:	1c42      	adds	r2, r0, #1
 8003b7e:	d101      	bne.n	8003b84 <__sflush_r+0x7c>
 8003b80:	682b      	ldr	r3, [r5, #0]
 8003b82:	b903      	cbnz	r3, 8003b86 <__sflush_r+0x7e>
 8003b84:	6560      	str	r0, [r4, #84]	; 0x54
 8003b86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b88:	602f      	str	r7, [r5, #0]
 8003b8a:	2900      	cmp	r1, #0
 8003b8c:	d0c9      	beq.n	8003b22 <__sflush_r+0x1a>
 8003b8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b92:	4299      	cmp	r1, r3
 8003b94:	d002      	beq.n	8003b9c <__sflush_r+0x94>
 8003b96:	4628      	mov	r0, r5
 8003b98:	f7ff fbea 	bl	8003370 <_free_r>
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	6360      	str	r0, [r4, #52]	; 0x34
 8003ba0:	e7c0      	b.n	8003b24 <__sflush_r+0x1c>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	4628      	mov	r0, r5
 8003ba6:	47b0      	blx	r6
 8003ba8:	1c41      	adds	r1, r0, #1
 8003baa:	d1c8      	bne.n	8003b3e <__sflush_r+0x36>
 8003bac:	682b      	ldr	r3, [r5, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0c5      	beq.n	8003b3e <__sflush_r+0x36>
 8003bb2:	2b1d      	cmp	r3, #29
 8003bb4:	d001      	beq.n	8003bba <__sflush_r+0xb2>
 8003bb6:	2b16      	cmp	r3, #22
 8003bb8:	d101      	bne.n	8003bbe <__sflush_r+0xb6>
 8003bba:	602f      	str	r7, [r5, #0]
 8003bbc:	e7b1      	b.n	8003b22 <__sflush_r+0x1a>
 8003bbe:	89a3      	ldrh	r3, [r4, #12]
 8003bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bc4:	81a3      	strh	r3, [r4, #12]
 8003bc6:	e7ad      	b.n	8003b24 <__sflush_r+0x1c>
 8003bc8:	690f      	ldr	r7, [r1, #16]
 8003bca:	2f00      	cmp	r7, #0
 8003bcc:	d0a9      	beq.n	8003b22 <__sflush_r+0x1a>
 8003bce:	0793      	lsls	r3, r2, #30
 8003bd0:	680e      	ldr	r6, [r1, #0]
 8003bd2:	bf08      	it	eq
 8003bd4:	694b      	ldreq	r3, [r1, #20]
 8003bd6:	600f      	str	r7, [r1, #0]
 8003bd8:	bf18      	it	ne
 8003bda:	2300      	movne	r3, #0
 8003bdc:	eba6 0807 	sub.w	r8, r6, r7
 8003be0:	608b      	str	r3, [r1, #8]
 8003be2:	f1b8 0f00 	cmp.w	r8, #0
 8003be6:	dd9c      	ble.n	8003b22 <__sflush_r+0x1a>
 8003be8:	6a21      	ldr	r1, [r4, #32]
 8003bea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003bec:	4643      	mov	r3, r8
 8003bee:	463a      	mov	r2, r7
 8003bf0:	4628      	mov	r0, r5
 8003bf2:	47b0      	blx	r6
 8003bf4:	2800      	cmp	r0, #0
 8003bf6:	dc06      	bgt.n	8003c06 <__sflush_r+0xfe>
 8003bf8:	89a3      	ldrh	r3, [r4, #12]
 8003bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bfe:	81a3      	strh	r3, [r4, #12]
 8003c00:	f04f 30ff 	mov.w	r0, #4294967295
 8003c04:	e78e      	b.n	8003b24 <__sflush_r+0x1c>
 8003c06:	4407      	add	r7, r0
 8003c08:	eba8 0800 	sub.w	r8, r8, r0
 8003c0c:	e7e9      	b.n	8003be2 <__sflush_r+0xda>
 8003c0e:	bf00      	nop
 8003c10:	dfbffffe 	.word	0xdfbffffe

08003c14 <_fflush_r>:
 8003c14:	b538      	push	{r3, r4, r5, lr}
 8003c16:	690b      	ldr	r3, [r1, #16]
 8003c18:	4605      	mov	r5, r0
 8003c1a:	460c      	mov	r4, r1
 8003c1c:	b913      	cbnz	r3, 8003c24 <_fflush_r+0x10>
 8003c1e:	2500      	movs	r5, #0
 8003c20:	4628      	mov	r0, r5
 8003c22:	bd38      	pop	{r3, r4, r5, pc}
 8003c24:	b118      	cbz	r0, 8003c2e <_fflush_r+0x1a>
 8003c26:	6a03      	ldr	r3, [r0, #32]
 8003c28:	b90b      	cbnz	r3, 8003c2e <_fflush_r+0x1a>
 8003c2a:	f7ff fa9b 	bl	8003164 <__sinit>
 8003c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f3      	beq.n	8003c1e <_fflush_r+0xa>
 8003c36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c38:	07d0      	lsls	r0, r2, #31
 8003c3a:	d404      	bmi.n	8003c46 <_fflush_r+0x32>
 8003c3c:	0599      	lsls	r1, r3, #22
 8003c3e:	d402      	bmi.n	8003c46 <_fflush_r+0x32>
 8003c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c42:	f7ff fb93 	bl	800336c <__retarget_lock_acquire_recursive>
 8003c46:	4628      	mov	r0, r5
 8003c48:	4621      	mov	r1, r4
 8003c4a:	f7ff ff5d 	bl	8003b08 <__sflush_r>
 8003c4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c50:	07da      	lsls	r2, r3, #31
 8003c52:	4605      	mov	r5, r0
 8003c54:	d4e4      	bmi.n	8003c20 <_fflush_r+0xc>
 8003c56:	89a3      	ldrh	r3, [r4, #12]
 8003c58:	059b      	lsls	r3, r3, #22
 8003c5a:	d4e1      	bmi.n	8003c20 <_fflush_r+0xc>
 8003c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c5e:	f7ff fb86 	bl	800336e <__retarget_lock_release_recursive>
 8003c62:	e7dd      	b.n	8003c20 <_fflush_r+0xc>

08003c64 <__swbuf_r>:
 8003c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c66:	460e      	mov	r6, r1
 8003c68:	4614      	mov	r4, r2
 8003c6a:	4605      	mov	r5, r0
 8003c6c:	b118      	cbz	r0, 8003c76 <__swbuf_r+0x12>
 8003c6e:	6a03      	ldr	r3, [r0, #32]
 8003c70:	b90b      	cbnz	r3, 8003c76 <__swbuf_r+0x12>
 8003c72:	f7ff fa77 	bl	8003164 <__sinit>
 8003c76:	69a3      	ldr	r3, [r4, #24]
 8003c78:	60a3      	str	r3, [r4, #8]
 8003c7a:	89a3      	ldrh	r3, [r4, #12]
 8003c7c:	071a      	lsls	r2, r3, #28
 8003c7e:	d525      	bpl.n	8003ccc <__swbuf_r+0x68>
 8003c80:	6923      	ldr	r3, [r4, #16]
 8003c82:	b31b      	cbz	r3, 8003ccc <__swbuf_r+0x68>
 8003c84:	6823      	ldr	r3, [r4, #0]
 8003c86:	6922      	ldr	r2, [r4, #16]
 8003c88:	1a98      	subs	r0, r3, r2
 8003c8a:	6963      	ldr	r3, [r4, #20]
 8003c8c:	b2f6      	uxtb	r6, r6
 8003c8e:	4283      	cmp	r3, r0
 8003c90:	4637      	mov	r7, r6
 8003c92:	dc04      	bgt.n	8003c9e <__swbuf_r+0x3a>
 8003c94:	4621      	mov	r1, r4
 8003c96:	4628      	mov	r0, r5
 8003c98:	f7ff ffbc 	bl	8003c14 <_fflush_r>
 8003c9c:	b9e0      	cbnz	r0, 8003cd8 <__swbuf_r+0x74>
 8003c9e:	68a3      	ldr	r3, [r4, #8]
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	60a3      	str	r3, [r4, #8]
 8003ca4:	6823      	ldr	r3, [r4, #0]
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	6022      	str	r2, [r4, #0]
 8003caa:	701e      	strb	r6, [r3, #0]
 8003cac:	6962      	ldr	r2, [r4, #20]
 8003cae:	1c43      	adds	r3, r0, #1
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d004      	beq.n	8003cbe <__swbuf_r+0x5a>
 8003cb4:	89a3      	ldrh	r3, [r4, #12]
 8003cb6:	07db      	lsls	r3, r3, #31
 8003cb8:	d506      	bpl.n	8003cc8 <__swbuf_r+0x64>
 8003cba:	2e0a      	cmp	r6, #10
 8003cbc:	d104      	bne.n	8003cc8 <__swbuf_r+0x64>
 8003cbe:	4621      	mov	r1, r4
 8003cc0:	4628      	mov	r0, r5
 8003cc2:	f7ff ffa7 	bl	8003c14 <_fflush_r>
 8003cc6:	b938      	cbnz	r0, 8003cd8 <__swbuf_r+0x74>
 8003cc8:	4638      	mov	r0, r7
 8003cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ccc:	4621      	mov	r1, r4
 8003cce:	4628      	mov	r0, r5
 8003cd0:	f000 f806 	bl	8003ce0 <__swsetup_r>
 8003cd4:	2800      	cmp	r0, #0
 8003cd6:	d0d5      	beq.n	8003c84 <__swbuf_r+0x20>
 8003cd8:	f04f 37ff 	mov.w	r7, #4294967295
 8003cdc:	e7f4      	b.n	8003cc8 <__swbuf_r+0x64>
	...

08003ce0 <__swsetup_r>:
 8003ce0:	b538      	push	{r3, r4, r5, lr}
 8003ce2:	4b2a      	ldr	r3, [pc, #168]	; (8003d8c <__swsetup_r+0xac>)
 8003ce4:	4605      	mov	r5, r0
 8003ce6:	6818      	ldr	r0, [r3, #0]
 8003ce8:	460c      	mov	r4, r1
 8003cea:	b118      	cbz	r0, 8003cf4 <__swsetup_r+0x14>
 8003cec:	6a03      	ldr	r3, [r0, #32]
 8003cee:	b90b      	cbnz	r3, 8003cf4 <__swsetup_r+0x14>
 8003cf0:	f7ff fa38 	bl	8003164 <__sinit>
 8003cf4:	89a3      	ldrh	r3, [r4, #12]
 8003cf6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003cfa:	0718      	lsls	r0, r3, #28
 8003cfc:	d422      	bmi.n	8003d44 <__swsetup_r+0x64>
 8003cfe:	06d9      	lsls	r1, r3, #27
 8003d00:	d407      	bmi.n	8003d12 <__swsetup_r+0x32>
 8003d02:	2309      	movs	r3, #9
 8003d04:	602b      	str	r3, [r5, #0]
 8003d06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003d0a:	81a3      	strh	r3, [r4, #12]
 8003d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d10:	e034      	b.n	8003d7c <__swsetup_r+0x9c>
 8003d12:	0758      	lsls	r0, r3, #29
 8003d14:	d512      	bpl.n	8003d3c <__swsetup_r+0x5c>
 8003d16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d18:	b141      	cbz	r1, 8003d2c <__swsetup_r+0x4c>
 8003d1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d1e:	4299      	cmp	r1, r3
 8003d20:	d002      	beq.n	8003d28 <__swsetup_r+0x48>
 8003d22:	4628      	mov	r0, r5
 8003d24:	f7ff fb24 	bl	8003370 <_free_r>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	6363      	str	r3, [r4, #52]	; 0x34
 8003d2c:	89a3      	ldrh	r3, [r4, #12]
 8003d2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003d32:	81a3      	strh	r3, [r4, #12]
 8003d34:	2300      	movs	r3, #0
 8003d36:	6063      	str	r3, [r4, #4]
 8003d38:	6923      	ldr	r3, [r4, #16]
 8003d3a:	6023      	str	r3, [r4, #0]
 8003d3c:	89a3      	ldrh	r3, [r4, #12]
 8003d3e:	f043 0308 	orr.w	r3, r3, #8
 8003d42:	81a3      	strh	r3, [r4, #12]
 8003d44:	6923      	ldr	r3, [r4, #16]
 8003d46:	b94b      	cbnz	r3, 8003d5c <__swsetup_r+0x7c>
 8003d48:	89a3      	ldrh	r3, [r4, #12]
 8003d4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d52:	d003      	beq.n	8003d5c <__swsetup_r+0x7c>
 8003d54:	4621      	mov	r1, r4
 8003d56:	4628      	mov	r0, r5
 8003d58:	f000 f850 	bl	8003dfc <__smakebuf_r>
 8003d5c:	89a0      	ldrh	r0, [r4, #12]
 8003d5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d62:	f010 0301 	ands.w	r3, r0, #1
 8003d66:	d00a      	beq.n	8003d7e <__swsetup_r+0x9e>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60a3      	str	r3, [r4, #8]
 8003d6c:	6963      	ldr	r3, [r4, #20]
 8003d6e:	425b      	negs	r3, r3
 8003d70:	61a3      	str	r3, [r4, #24]
 8003d72:	6923      	ldr	r3, [r4, #16]
 8003d74:	b943      	cbnz	r3, 8003d88 <__swsetup_r+0xa8>
 8003d76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003d7a:	d1c4      	bne.n	8003d06 <__swsetup_r+0x26>
 8003d7c:	bd38      	pop	{r3, r4, r5, pc}
 8003d7e:	0781      	lsls	r1, r0, #30
 8003d80:	bf58      	it	pl
 8003d82:	6963      	ldrpl	r3, [r4, #20]
 8003d84:	60a3      	str	r3, [r4, #8]
 8003d86:	e7f4      	b.n	8003d72 <__swsetup_r+0x92>
 8003d88:	2000      	movs	r0, #0
 8003d8a:	e7f7      	b.n	8003d7c <__swsetup_r+0x9c>
 8003d8c:	20000064 	.word	0x20000064

08003d90 <_sbrk_r>:
 8003d90:	b538      	push	{r3, r4, r5, lr}
 8003d92:	4d06      	ldr	r5, [pc, #24]	; (8003dac <_sbrk_r+0x1c>)
 8003d94:	2300      	movs	r3, #0
 8003d96:	4604      	mov	r4, r0
 8003d98:	4608      	mov	r0, r1
 8003d9a:	602b      	str	r3, [r5, #0]
 8003d9c:	f7fc fc86 	bl	80006ac <_sbrk>
 8003da0:	1c43      	adds	r3, r0, #1
 8003da2:	d102      	bne.n	8003daa <_sbrk_r+0x1a>
 8003da4:	682b      	ldr	r3, [r5, #0]
 8003da6:	b103      	cbz	r3, 8003daa <_sbrk_r+0x1a>
 8003da8:	6023      	str	r3, [r4, #0]
 8003daa:	bd38      	pop	{r3, r4, r5, pc}
 8003dac:	20000250 	.word	0x20000250

08003db0 <__swhatbuf_r>:
 8003db0:	b570      	push	{r4, r5, r6, lr}
 8003db2:	460c      	mov	r4, r1
 8003db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003db8:	2900      	cmp	r1, #0
 8003dba:	b096      	sub	sp, #88	; 0x58
 8003dbc:	4615      	mov	r5, r2
 8003dbe:	461e      	mov	r6, r3
 8003dc0:	da0d      	bge.n	8003dde <__swhatbuf_r+0x2e>
 8003dc2:	89a3      	ldrh	r3, [r4, #12]
 8003dc4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003dc8:	f04f 0100 	mov.w	r1, #0
 8003dcc:	bf0c      	ite	eq
 8003dce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003dd2:	2340      	movne	r3, #64	; 0x40
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	6031      	str	r1, [r6, #0]
 8003dd8:	602b      	str	r3, [r5, #0]
 8003dda:	b016      	add	sp, #88	; 0x58
 8003ddc:	bd70      	pop	{r4, r5, r6, pc}
 8003dde:	466a      	mov	r2, sp
 8003de0:	f000 f848 	bl	8003e74 <_fstat_r>
 8003de4:	2800      	cmp	r0, #0
 8003de6:	dbec      	blt.n	8003dc2 <__swhatbuf_r+0x12>
 8003de8:	9901      	ldr	r1, [sp, #4]
 8003dea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003dee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003df2:	4259      	negs	r1, r3
 8003df4:	4159      	adcs	r1, r3
 8003df6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dfa:	e7eb      	b.n	8003dd4 <__swhatbuf_r+0x24>

08003dfc <__smakebuf_r>:
 8003dfc:	898b      	ldrh	r3, [r1, #12]
 8003dfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e00:	079d      	lsls	r5, r3, #30
 8003e02:	4606      	mov	r6, r0
 8003e04:	460c      	mov	r4, r1
 8003e06:	d507      	bpl.n	8003e18 <__smakebuf_r+0x1c>
 8003e08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003e0c:	6023      	str	r3, [r4, #0]
 8003e0e:	6123      	str	r3, [r4, #16]
 8003e10:	2301      	movs	r3, #1
 8003e12:	6163      	str	r3, [r4, #20]
 8003e14:	b002      	add	sp, #8
 8003e16:	bd70      	pop	{r4, r5, r6, pc}
 8003e18:	ab01      	add	r3, sp, #4
 8003e1a:	466a      	mov	r2, sp
 8003e1c:	f7ff ffc8 	bl	8003db0 <__swhatbuf_r>
 8003e20:	9900      	ldr	r1, [sp, #0]
 8003e22:	4605      	mov	r5, r0
 8003e24:	4630      	mov	r0, r6
 8003e26:	f7ff fb0f 	bl	8003448 <_malloc_r>
 8003e2a:	b948      	cbnz	r0, 8003e40 <__smakebuf_r+0x44>
 8003e2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e30:	059a      	lsls	r2, r3, #22
 8003e32:	d4ef      	bmi.n	8003e14 <__smakebuf_r+0x18>
 8003e34:	f023 0303 	bic.w	r3, r3, #3
 8003e38:	f043 0302 	orr.w	r3, r3, #2
 8003e3c:	81a3      	strh	r3, [r4, #12]
 8003e3e:	e7e3      	b.n	8003e08 <__smakebuf_r+0xc>
 8003e40:	89a3      	ldrh	r3, [r4, #12]
 8003e42:	6020      	str	r0, [r4, #0]
 8003e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e48:	81a3      	strh	r3, [r4, #12]
 8003e4a:	9b00      	ldr	r3, [sp, #0]
 8003e4c:	6163      	str	r3, [r4, #20]
 8003e4e:	9b01      	ldr	r3, [sp, #4]
 8003e50:	6120      	str	r0, [r4, #16]
 8003e52:	b15b      	cbz	r3, 8003e6c <__smakebuf_r+0x70>
 8003e54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e58:	4630      	mov	r0, r6
 8003e5a:	f000 f81d 	bl	8003e98 <_isatty_r>
 8003e5e:	b128      	cbz	r0, 8003e6c <__smakebuf_r+0x70>
 8003e60:	89a3      	ldrh	r3, [r4, #12]
 8003e62:	f023 0303 	bic.w	r3, r3, #3
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	81a3      	strh	r3, [r4, #12]
 8003e6c:	89a3      	ldrh	r3, [r4, #12]
 8003e6e:	431d      	orrs	r5, r3
 8003e70:	81a5      	strh	r5, [r4, #12]
 8003e72:	e7cf      	b.n	8003e14 <__smakebuf_r+0x18>

08003e74 <_fstat_r>:
 8003e74:	b538      	push	{r3, r4, r5, lr}
 8003e76:	4d07      	ldr	r5, [pc, #28]	; (8003e94 <_fstat_r+0x20>)
 8003e78:	2300      	movs	r3, #0
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	4608      	mov	r0, r1
 8003e7e:	4611      	mov	r1, r2
 8003e80:	602b      	str	r3, [r5, #0]
 8003e82:	f7fc fbea 	bl	800065a <_fstat>
 8003e86:	1c43      	adds	r3, r0, #1
 8003e88:	d102      	bne.n	8003e90 <_fstat_r+0x1c>
 8003e8a:	682b      	ldr	r3, [r5, #0]
 8003e8c:	b103      	cbz	r3, 8003e90 <_fstat_r+0x1c>
 8003e8e:	6023      	str	r3, [r4, #0]
 8003e90:	bd38      	pop	{r3, r4, r5, pc}
 8003e92:	bf00      	nop
 8003e94:	20000250 	.word	0x20000250

08003e98 <_isatty_r>:
 8003e98:	b538      	push	{r3, r4, r5, lr}
 8003e9a:	4d06      	ldr	r5, [pc, #24]	; (8003eb4 <_isatty_r+0x1c>)
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	4604      	mov	r4, r0
 8003ea0:	4608      	mov	r0, r1
 8003ea2:	602b      	str	r3, [r5, #0]
 8003ea4:	f7fc fbe9 	bl	800067a <_isatty>
 8003ea8:	1c43      	adds	r3, r0, #1
 8003eaa:	d102      	bne.n	8003eb2 <_isatty_r+0x1a>
 8003eac:	682b      	ldr	r3, [r5, #0]
 8003eae:	b103      	cbz	r3, 8003eb2 <_isatty_r+0x1a>
 8003eb0:	6023      	str	r3, [r4, #0]
 8003eb2:	bd38      	pop	{r3, r4, r5, pc}
 8003eb4:	20000250 	.word	0x20000250

08003eb8 <_init>:
 8003eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eba:	bf00      	nop
 8003ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ebe:	bc08      	pop	{r3}
 8003ec0:	469e      	mov	lr, r3
 8003ec2:	4770      	bx	lr

08003ec4 <_fini>:
 8003ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec6:	bf00      	nop
 8003ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eca:	bc08      	pop	{r3}
 8003ecc:	469e      	mov	lr, r3
 8003ece:	4770      	bx	lr
